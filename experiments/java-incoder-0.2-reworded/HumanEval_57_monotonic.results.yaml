language: java
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long mid2 = l.get(l.size() / 2);\n     \
    \   Long mid3 = l.get(l.size() / 2);\n        Long mid4 = l.get(l.size() / 2);\n\
    \        Long mid5 = l.get(l.size() / 2);\n        Long mid6 = l.get(l.size()\
    \ / 2);\n        Long mid7 = l.get(l.size() / 2);\n        Long mid8 = l.get(l.size()\
    \ / 2);\n        Long mid9 = l.get(l.size() / 2);\n        Long mid10 = l.get(l.size()\
    \ / 2);\n        Long mid11 = l.get(l.size() / 2);\n        Long mid12 = l.get(l.size()\
    \ / 2);\n        Long mid13 = l.get(l.size() / 2);\n        Long mid14 = l.get(l.size()\
    \ / 2);\n        Long mid15 = l.get(l.size() / 2);\n        Long mid16 = l.get(l.size()\
    \ / 2);\n        Long mid17 = l.get(l.size() / 2);\n        Long mid18 = l.get(l.size()\
    \ / 2);\n        Long mid19 = l.get(l.size() / 2);\n        Long mid20 = l.get(l.size()\
    \ / 2);\n        Long mid21 = l.get(l.size() / 2);\n        Long mid22 = l.get(l.size()\
    \ / 2);\n        Long mid23 = l.get(l.size() / 2);\n        Long mid24 = l.get(l.size()\
    \ / 2);\n        Long mid25 = l.get(l.size() / 2);\n        Long mid26 = l.get(l.size()\
    \ / 2);\n        Long mid27 = l.get(l.size() / 2);\n        Long mid28 = l.get(l.size()\
    \ / 2);\n        Long mid29 = l.get(l.size() / 2);\n        Long mid30 = l.get(l.size()\
    \ / 2);\n        Long mid31 = l.get(l.size() / 2);\n        Long mid32 = l.get(l.size()\
    \ / 2);\n        Long mid33 = l.get(l.size() / 2);\n        Long mid34 = l.get(l.size()\
    \ / 2);\n        Long mid35 = l.get(l.size() / 2);\n        Long mid36 = l.get(l.size()\
    \ / 2);\n        Long mid37 = l.get(l.size() / 2);\n        Long mid38 = l.get(l.size()\
    \ / 2);\n        Long \n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrijvm4i.java:58: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmpwrijvm4i.java:58: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        isMonotonic = false;\n                break;\n            }\n       \
    \     prev = current;\n        }\n        return isMonotonic;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzlbqhwha.java:33)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                isMonotonic = false;\n                break;\n  \
    \          }\n            prev = current;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp367597lh.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = l.get(0);\n        long current\
    \ = l.get(1);\n        for(int i = 2; i < l.size(); i++) {\n            long next\
    \ = l.get(i);\n            if(current < next) {\n                decreasing =\
    \ false;\n            }\n            else if(current > next) {\n             \
    \   increasing = false;\n            }\n            else {\n                current\
    \ = next;\n            }\n            if(current < prev) {\n                decreasing\
    \ = false;\n            }\n            else if(current > prev) {\n           \
    \     increasing = false;\n            }\n            else {\n               \
    \ current = prev;\n            }\n            prev = current;\n        }\n   \
    \     return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrr7up_7.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long midVal = l.get(l.size() / 2);\n   \
    \     Long midVal2 = l.get(l.size() / 2);\n        Long midVal3 = l.get(l.size()\
    \ / 2);\n        Long midVal4 = l.get(l.size() / 2);\n        Long midVal5 = l.get(l.size()\
    \ / 2);\n        Long midVal6 = l.get(l.size() / 2);\n        Long midVal7 = l.get(l.size()\
    \ / 2);\n        Long midVal8 = l.get(l.size() / 2);\n        Long midVal9 = l.get(l.size()\
    \ / 2);\n        Long midVal10 = l.get(l.size() / 2);\n        Long midVal11 =\
    \ l.get(l.size() / 2);\n        Long midVal12 = l.get(l.size() / 2);\n       \
    \ Long midVal13 = l.get(l.size() / 2);\n        Long midVal14 = l.get(l.size()\
    \ / 2);\n        Long midVal15 = l.get(l.size() / 2);\n        Long midVal16 =\
    \ l.get(l.size() / 2);\n        Long midVal17 = l.get(l.size() / 2);\n       \
    \ Long midVal18 = l.get(l.size() / 2);\n        Long midVal19 = l.get(l.size()\
    \ / 2);\n        Long midVal20 = l.get(l.size() / 2);\n        Long midVal21 =\
    \ l.get(l.size() / 2);\n        Long midVal22 = l.get(l.size() / 2);\n       \
    \ Long midVal23 = l.get(l.size() / 2);\n        Long midVal24 = l.get(l.size()\
    \ / 2);\n        Long midVal25 = l.get(l.size() / 2);\n        Long midVal26 =\
    \ l.get(l.size() / 2);\n        Long midVal27 = l.get(l.size() / 2);\n       \
    \ Long midVal28 = l.get(l.size() / 2);\n        Long midVal29 = l.get(l.size()\
    \ / 2);\n        Long midVal30 = l.get(l.size() / 2);\n        Long midVal31 =\
    \ l.get(l.size() / 2);\n        Long midVal32 = l.get(l.size() / 2);\n       \
    \ Long midVal33 = l.get(l.size() / 2);\n        Long midVal34 = l.get(l.size()\
    \ / 2);\n        Long midVal35 = l.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i8kprq7.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp3i8kprq7.java:56: error: ';' expected\n    }\n     ^\n/tmp/tmp3i8kprq7.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp3i8kprq7.java:57: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp3i8kprq7.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        boolean isIncreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                isIncreasing = false;\n    \
    \        }\n            if (current > last) {\n                isIncreasing =\
    \ true;\n            }\n        }\n        return isIncreasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu0hn7vtn.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        if (first > last)\n            return true;\n\
    \        if (first < last)\n            return false;\n        long mid = first\
    \ + (last - first) / 2;\n        if (mid > last)\n            return true;\n \
    \       if (mid < first)\n            return false;\n        long mid2 = first\
    \ + (last - first) / 2;\n        if (mid2 > last)\n            return true;\n\
    \        if (mid2 < first)\n            return false;\n        return monotonic(l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0nuf40st.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long first = l.get(0);\n        long last = l.get(l.size() - 1);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                isMonotonic = false;\n     \
    \           break;\n            }\n            if (current > last) {\n       \
    \         isMonotonic = false;\n                break;\n            }\n      \
    \  }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf43m3dcb.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long current = l.get(i);\n            if (current < prev) {\n        \
    \        isMonotonic = false;\n                break;\n            }\n       \
    \     prev = current;\n        }\n        return isMonotonic;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppay6qnkx.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  long curr = Long.MIN_VALUE;\n        for (Long e : l) {\n            if (e\
    \ < prev) {\n                return false;\n            }\n            if (e >\
    \ curr) {\n                return true;\n            }\n            prev = e;\n\
    \            curr = e;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmoszf92.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 -\
    \ first) / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5\
    \ = mid4 + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n\
    \        long mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7\
    \ - first) / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n        long\
    \ mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        long mid12 = mid11 + (mid11 - first) / 2;\n        long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 - first)\
    \ / 2;\n        long mid15 = mid14 + (mid14 - first) / 2;\n        long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 - first)\
    \ / 2;\n        long mid18 = mid17 + (mid17 - first) / 2;\n        long mid19\
    \ = mid18 + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 - first)\
    \ / 2;\n        long mid21 = mid20 + (mid20 - first) / 2;\n        long mid22\
    \ = mid21 + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 - first)\
    \ / 2;\n        long mid24 = mid23 + (mid23 - first) / 2;\n        long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 - first)\
    \ / 2;\n        long mid27 = mid26 + (mid26 - first) / 2;\n        long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 - first)\
    \ / 2;\n        long mid30 = mid29 + (mid29 - first) / 2;\n        long mid31\
    \ = mid30 + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 - first)\
    \ / 2;\n        long mid33 = mid32 + (mid32 - first) / 2;\n        long mid34\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpir0qu8ym.java:54: error: ';' expected\n        long mid34\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long lastValue = Long.MIN_VALUE;\n     \
    \   for (long value : l) {\n            if (value < lastValue) {\n           \
    \     decreasing = false;\n            } else if (value > lastValue) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            lastValue = value;\n      \
    \  }\n        return increasing || decreasing;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9f6mbus.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        if\
    \ (first < last) {\n            for (int i = 1; i < l.size(); i++) {\n       \
    \         Long current = l.get(i);\n                if (current < last) {\n  \
    \                  isMonotonic = false;\n                    break;\n        \
    \        }\n                last = current;\n            }\n        }\n      \
    \  return isMonotonic;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h6l4z2c.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long current = first;\n        long nextCurrent\
    \ = first;\n        long nextLast = last;\n        for(int i = 1; i < l.size();\
    \ i++) {\n            current = l.get(i);\n            nextCurrent = l.get(i +\
    \ 1);\n            nextLast = l.get(i - 1);\n            if(current < nextCurrent)\
    \ {\n                decreasing = false;\n            } else if(current > nextCurrent)\
    \ {\n                increasing = false;\n            } else if(current == nextCurrent)\
    \ {\n                if(current < nextLast) {\n                    decreasing\
    \ = false;\n                } else if(current > nextLast) {\n                \
    \    increasing = false;\n                }\n            }\n        }\n      \
    \  return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 4\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.monotonic(tmptsb000j5.java:26)\n\tat Problem.main(tmptsb000j5.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long lastValue = l.get(l.size() - 1);\n\
    \        long currentValue = l.get(0);\n        for(int i = 1; i < l.size(); i++)\
    \ {\n            long value = l.get(i);\n            if (value > currentValue)\
    \ {\n                isIncreasing = false;\n            } else if (value < currentValue)\
    \ {\n                isDecreasing = false;\n            }\n            if (isIncreasing\
    \ && isDecreasing) {\n                return true;\n            }\n          \
    \  if (isIncreasing && !isDecreasing) {\n                return true;\n      \
    \      }\n            if (isDecreasing && !isIncreasing) {\n                return\
    \ true;\n            }\n            currentValue = value;\n        }\n       \
    \ return isIncreasing || isDecreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp94czr8aq.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long lastVal = Long.MIN_VALUE;\n       \
    \ for (long val : l) {\n            if (val < lastVal) {\n                increasing\
    \ = false;\n            }\n            if (val > lastVal) {\n                decreasing\
    \ = false;\n            }\n            lastVal = val;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1zsihi9.java:35)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long prev = l.get(0);\n        Long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    Long next = l.get(i);\n            if (next.compareTo(prev) > 0) {\n    \
    \            isIncreasing = false;\n            }\n            if (next.compareTo(current)\
    \ < 0) {\n                isDecreasing = false;\n            }\n            prev\
    \ = current;\n            current = next;\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        long mid2 = mid;\n        long mid3 = mid;\n        long mid4 = mid;\n\
    \        long mid5 = mid;\n        long mid6 = mid;\n        long mid7 = mid;\n\
    \        long mid8 = mid;\n        long mid9 = mid;\n        long mid10 = mid;\n\
    \        long mid11 = mid;\n        long mid12 = mid;\n        long mid13 = mid;\n\
    \        long mid14 = mid;\n        long mid15 = mid;\n        long mid16 = mid;\n\
    \        long mid17 = mid;\n        long mid18 = mid;\n        long mid19 = mid;\n\
    \        long mid20 = mid;\n        long mid21 = mid;\n        long mid22 = mid;\n\
    \        long mid23 = mid;\n        long mid24 = mid;\n        long mid25 = mid;\n\
    \        long mid26 = mid;\n        long mid27 = mid;\n        long mid28 = mid;\n\
    \        long mid29 = mid;\n        long mid30 = mid;\n        long mid31 = mid;\n\
    \        long mid32 = mid;\n        long mid33 = mid;\n        long mid34 = mid;\n\
    \        long mid35 = mid;\n        long mid36 = mid;\n        long mid37 = mid;\n\
    \        long mid38 = mid;\n        long mid39 = mid;\n        long mid40 = mid;\n\
    \        long mid41 = mid;\n        long mid42 = mid;\n        long mid43 = mid;\n\
    \        long mid44 = mid;\n        long mid45 = mid;\n        long mid46 = mid;\n\
    \        long mid47 = mid;\n        long mid48 = mid;\n        long mid49 = mid;\n\
    \        long mid50 = mid;\n        long mid51 = mid;\n        long mid52 = mid;\n\
    \        long mid53 = mid;\n        long mid54 = mid;\n        long mid55 = mid;\n\
    \        long mid56 = mid;\n        long mid57 = mid;\n        long mid58 = mid;\n\
    \        long mid59 = mid;\n        long mid60 = mid;\n        long mid61 = \n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o_bgilc.java:82: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4o_bgilc.java:83: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp4o_bgilc.java:83: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp4o_bgilc.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp4o_bgilc.java:83: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp4o_bgilc.java:83:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4o_bgilc.java:94: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    long next = l.get(i);\n            if (current > next) {\n              \
    \  isIncreasing = false;\n            } else if (current < next) {\n         \
    \       isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isIncreasing && (current > prev);\n                isDecreasing = isDecreasing\
    \ && (current < prev);\n            }\n            prev = current;\n         \
    \   current = next;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6b60urd1.java:44)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                isIncreasing\
    \ = false;\n            } else if (current > prev) {\n                isDecreasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        Long mid = l.get(l.size() / 2);\n        Long\
    \ mid2 = l.get(l.size() / 2);\n        Long mid3 = l.get(l.size() / 2);\n    \
    \    Long mid4 = l.get(l.size() / 2);\n        Long mid5 = l.get(l.size() / 2);\n\
    \        Long mid6 = l.get(l.size() / 2);\n        Long mid7 = l.get(l.size()\
    \ / 2);\n        Long mid8 = l.get(l.size() / 2);\n        Long mid9 = l.get(l.size()\
    \ / 2);\n        Long mid10 = l.get(l.size() / 2);\n        Long mid11 = l.get(l.size()\
    \ / 2);\n        Long mid12 = l.get(l.size() / 2);\n        Long mid13 = l.get(l.size()\
    \ / 2);\n        Long mid14 = l.get(l.size() / 2);\n        Long mid15 = l.get(l.size()\
    \ / 2);\n        Long mid16 = l.get(l.size() / 2);\n        Long mid17 = l.get(l.size()\
    \ / 2);\n        Long mid18 = l.get(l.size() / 2);\n        Long mid19 = l.get(l.size()\
    \ / 2);\n        Long mid20 = l.get(l.size() / 2);\n        Long mid21 = l.get(l.size()\
    \ / 2);\n        Long mid22 = l.get(l.size() / 2);\n        Long mid23 = l.get(l.size()\
    \ / 2);\n        Long mid24 = l.get(l.size() / 2);\n        Long mid25 = l.get(l.size()\
    \ / 2);\n        Long mid26 = l.get(l.size() / 2);\n        Long mid27 = l.get(l.size()\
    \ / 2);\n        Long mid28 = l.get(l.size() / 2);\n        Long mid29 = l.get(l.size()\
    \ / 2);\n        Long mid30 = l.get(l.size() / 2);\n        Long mid31 = l.get(l.size()\
    \ / 2);\n        Long mid32 = l.get(l.size() / 2);\n        Long mid33 = l.get(l.size()\
    \ / 2);\n        Long mid34 = l.get(l.size() / 2);\n        Long mid35 = l.get(l.size()\
    \ / 2);\n        Long mid36 = l.get(l.size() / 2);\n        Long mid37 = l.get(l.size()\
    \ / 2);\n        Long mid38 = l.get(l.size\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpac_5czl7.java:58: error: ')' expected\n        Long mid38 = l.get(l.size\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long midVal = l.get(l.size() / 2);\n   \
    \     Long midVal2 = l.get(l.size() / 2);\n        Long midVal3 = l.get(l.size()\
    \ / 2);\n        Long midVal4 = l.get(l.size() / 2);\n        Long midVal5 = l.get(l.size()\
    \ / 2);\n        Long midVal6 = l.get(l.size() / 2);\n        Long midVal7 = l.get(l.size()\
    \ / 2);\n        Long midVal8 = l.get(l.size() / 2);\n        Long midVal9 = l.get(l.size()\
    \ / 2);\n        Long midVal10 = l.get(l.size() / 2);\n        Long midVal11 =\
    \ l.get(l.size() / 2);\n        Long midVal12 = l.get(l.size() / 2);\n       \
    \ Long midVal13 = l.get(l.size() / 2);\n        Long midVal14 = l.get(l.size()\
    \ / 2);\n        Long midVal15 = l.get(l.size() / 2);\n        Long midVal16 =\
    \ l.get(l.size() / 2);\n        Long midVal17 = l.get(l.size() / 2);\n       \
    \ Long midVal18 = l.get(l.size() / 2);\n        Long midVal19 = l.get(l.size()\
    \ / 2);\n        Long midVal20 = l.get(l.size() / 2);\n        Long midVal21 =\
    \ l.get(l.size() / 2);\n        Long midVal22 = l.get(l.size() / 2);\n       \
    \ Long midVal23 = l.get(l.size() / 2);\n        Long midVal24 = l.get(l.size()\
    \ / 2);\n        Long midVal25 = l.get(l.size() / 2);\n        Long midVal26 =\
    \ l.get(l.size() / 2);\n        Long midVal27 = l.get(l.size() / 2);\n       \
    \ Long midVal28 = l.get(l.size() / 2);\n        Long midVal29 = l.get(l.size()\
    \ / 2);\n        Long midVal30 = l.get(l.size() / 2);\n        Long midVal31 =\
    \ l.get(l.size() / 2);\n        Long midVal32 = l.get(l.size() / 2);\n       \
    \ Long midVal33 = l.get(l.size() / 2);\n        Long midVal34 = l.get(l.size()\
    \ / 2);\n        Long midVal35 = l.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i8kprq7.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp3i8kprq7.java:56: error: ';' expected\n    }\n     ^\n/tmp/tmp3i8kprq7.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp3i8kprq7.java:57: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp3i8kprq7.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long lastVal = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          Long curVal = l.get(i);\n            if (curVal.compareTo(lastVal)\
    \ > 0) {\n                isMonotonic = false;\n                break;\n     \
    \       }\n            lastVal = curVal;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgl0hye5l.java:30)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ current = first;\n        Long nextVal = first;\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            nextVal = l.get(i);\n            if (nextVal <\
    \ current) {\n                isMonotonic = false;\n                break;\n \
    \           }\n            current = nextVal;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfm7ysg5i.java:36)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long current = null;\n        for (Long\
    \ e : l) {\n            if (current == null) {\n                current = e;\n\
    \                increasing = false;\n                decreasing = false;\n  \
    \          } else if (current > e) {\n                current = e;\n         \
    \       increasing = false;\n                decreasing = true;\n            }\
    \ else if (current < e) {\n                current = e;\n                increasing\
    \ = true;\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpraeo30bj.java:40)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        if (first\
    \ > last) {\n            result = false;\n        }\n        Long current = first;\n\
    \        Long next = first;\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          next = l.get(i);\n            if (current > next) {\n             \
    \   result = false;\n            }\n            current = next;\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxoj3wod.java:38)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n      \
    \  if (first == last) return true;\n        if (first > last) return false;\n\
    \        Long mid = first + (last - first) / 2;\n        Long mid2 = l.get(l.size()\
    \ - 2);\n        if (mid == mid2) return true;\n        if (mid > mid2) return\
    \ false;\n        return monotonic(l, mid, mid2);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6m8kl4b.java:26: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, mid, mid2);\n      \
    \         ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,Long,Long\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        if (first > last)\n            return false;\n\
    \        long mid = first + (last - first) / 2;\n        long mid2 = l.get(l.size()\
    \ - 2);\n        if (mid > mid2)\n            return false;\n        long mid3\
    \ = l.get(l.size() - 3);\n        if (mid > mid3)\n            return false;\n\
    \        long mid4 = l.get(l.size() - 4);\n        if (mid > mid4)\n         \
    \   return false;\n        long mid5 = l.get(l.size() - 5);\n        if (mid >\
    \ mid5)\n            return false;\n        long mid6 = l.get(l.size() - 6);\n\
    \        if (mid > mid6)\n            return false;\n        long mid7 = l.get(l.size()\
    \ - 7);\n        if (mid > mid7)\n            return false;\n        long mid8\
    \ = l.get(l.size() - 8);\n        if (mid > mid8)\n            return false;\n\
    \        long mid9 = l.get(l.size() - 9);\n        if (mid > mid9)\n         \
    \   return false;\n        long mid10 = l.get(l.size() - 10);\n        if (mid\
    \ > mid10)\n            return false;\n        long mid11 = l.get(l.size() - 11);\n\
    \        if (mid > mid11)\n            return false;\n        long mid12 = l.get(l.size()\
    \ - 12);\n        if (mid > mid12)\n            return false;\n        long mid13\
    \ = l.get(l.size() - 13);\n        if (mid > mid13)\n            return false;\n\
    \        long mid14 = l.get(l.size() - 14);\n        if (mid > mid14)\n      \
    \      return false;\n        long mid15 = l.get(l.size() - 15);\n        if (mid\
    \ > mid15)\n            return false;\n        long mid16 = l.get(l.size() - 16);\n\
    \        if (mid > mid16)\n            return false;\n        long mid17 = l.get(l.size()\
    \ - 17);\n        if (mid > mid17)\n            return false;\n        long mid18\
    \ = l.get(l.size() - 18);\n        if (mid > mid18)\n            return false;\n\
    \        long mid19 = l.get(l.size() - 19);\n        if (mid > mid19)\n      \
    \      return false;\n        long mid20 = l.get(l.size() - 20);\n        if (mid\
    \ > mid20)\n            return false;\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6t34je2.java:82)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for\
    \ (long current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            }\n            if (current > prev) {\n               \
    \ increasing = false;\n            }\n            prev = current;\n        }\n\
    \        if (increasing && decreasing) {\n            return true;\n        }\n\
    \        if (increasing && !decreasing) {\n            return true;\n        }\n\
    \        if (decreasing && !increasing) {\n            return true;\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzml9pvci.java:44)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        for (Long value : l) {\n            if (lastValue < value) {\n      \
    \          isIncreasing = false;\n            }\n            if (lastValue > value)\
    \ {\n                isDecreasing = false;\n            }\n            lastValue\
    \ = value;\n        }\n        return isIncreasing || isDecreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgudigcii.java:32)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = Long.MIN_VALUE;\n        for (long current : l) {\n           \
    \ if (current < prev) {\n                isMonotonic = false;\n              \
    \  break;\n            }\n            prev = current;\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi81tflnv.java:32)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ current = first;\n        Long previous = first;\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            current = l.get(i);\n            if (current\
    \ < previous) {\n                isMonotonic = false;\n                break;\n\
    \            }\n            previous = current;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdgt9kcnj.java:36)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp492ulvvc.java:30)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        boolean\
    \ isIncreasing = true;\n        for(long cur : l) {\n            if(prev > cur)\
    \ {\n                isIncreasing = false;\n                break;\n         \
    \   }\n            prev = cur;\n        }\n        return isIncreasing;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73fl7m1z.java:32)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long lastVal = Long.MIN_VALUE;\n       \
    \ for (long val : l) {\n            if (val > lastVal) {\n                increasing\
    \ = false;\n            }\n            if (val < lastVal) {\n                decreasing\
    \ = false;\n            }\n            lastVal = val;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd7eu8qst.java:35)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for(int i=2; i<l.size(); i++) {\n            long\
    \ next = l.get(i);\n            if(current < next) {\n                isIncreasing\
    \ = false;\n            }\n            if(current > next) {\n                isDecreasing\
    \ = false;\n            }\n            prev = current;\n            current =\
    \ next;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for\
    \ (long current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5r3g_mck.java:34)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = first + (last - first) / 2;\n        long mid3 = first + (last\
    \ - first) / 2;\n        long mid4 = first + (last - first) / 2;\n        long\
    \ mid5 = first + (last - first) / 2;\n        long mid6 = first + (last - first)\
    \ / 2;\n        long mid7 = first + (last - first) / 2;\n        long mid8 = first\
    \ + (last - first) / 2;\n        long mid9 = first + (last - first) / 2;\n   \
    \     long mid10 = first + (last - first) / 2;\n        long mid11 = first + (last\
    \ - first) / 2;\n        long mid12 = first + (last - first) / 2;\n        long\
    \ mid13 = first + (last - first) / 2;\n        long mid14 = first + (last - first)\
    \ / 2;\n        long mid15 = first + (last - first) / 2;\n        long mid16 =\
    \ first + (last - first) / 2;\n        long mid17 = first + (last - first) / 2;\n\
    \        long mid18 = first + (last - first) / 2;\n        long mid19 = first\
    \ + (last - first) / 2;\n        long mid20 = first + (last - first) / 2;\n  \
    \      long mid21 = first + (last - first) / 2;\n        long mid22 = first +\
    \ (last - first) / 2;\n        long mid23 = first + (last - first) / 2;\n    \
    \    long mid24 = first + (last - first) / 2;\n        long mid25 = first + (last\
    \ - first) / 2;\n        long mid26 = first + (last - first) / 2;\n        long\
    \ mid27 = first + (last - first) / 2;\n        long mid28 = first + (last - first)\
    \ / 2;\n        long mid29 = first + (last - first) / 2;\n        long mid30 =\
    \ first + (last - first) / 2;\n        long mid31 = first + (last - first) / 2;\n\
    \        long mid32 = first + (last - first) / 2;\n        long mid33 = first\
    \ + (last - first) / 2;\n        long mid34 = first + (last - first) / 2;\n  \
    \      long mid35 = first + (last - first) / 2;\n        long mid36 = first +\
    \ (last - first) / 2;\n        long mid37 = first + (last - first) / 2;\n    \
    \    long mid38 = first + (last - first) / 2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpceenkk1_.java:59: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    long first = l.get(0);\n        long last = l.get(l.size() - 1);\n      \
    \  if (first > last) return true;\n        if (first == last) return true;\n \
    \       long mid = first + (last - first) / 2;\n        if (mid > last) return\
    \ true;\n        if (mid < first) return true;\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long current = l.get(i);\n            if (current < mid) {\n\
    \                decreasing = false;\n            } else if (current > mid) {\n\
    \                increasing = false;\n            } else {\n                increasing\
    \ = increasing && increasing;\n                decreasing = decreasing && decreasing;\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtwpb5pc.java:41)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < first) {\n    \
    \            isMonotonic = false;\n                break;\n            }\n   \
    \         if (l.get(i) > last) {\n                isMonotonic = false;\n     \
    \           break;\n            }\n        }\n        return isMonotonic;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_g5k_wgj.java:36)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long min = l.get(0);\n       \
    \ final long max = l.get(l.size() - 1);\n        final long mid = min + (max -\
    \ min) / 2;\n        final long mid2 = mid + (max - mid) / 2;\n        final long\
    \ mid3 = mid2 + (max - mid2) / 2;\n        final long mid4 = mid3 + (max - mid3)\
    \ / 2;\n        final long mid5 = mid4 + (max - mid4) / 2;\n        final long\
    \ mid6 = mid5 + (max - mid5) / 2;\n        final long mid7 = mid6 + (max - mid6)\
    \ / 2;\n        final long mid8 = mid7 + (max - mid7) / 2;\n        final long\
    \ mid9 = mid8 + (max - mid8) / 2;\n        final long mid10 = mid9 + (max - mid9)\
    \ / 2;\n        final long mid11 = mid10 + (max - mid10) / 2;\n        final long\
    \ mid12 = mid11 + (max - mid11) / 2;\n        final long mid13 = mid12 + (max\
    \ - mid12) / 2;\n        final long mid14 = mid13 + (max - mid13) / 2;\n     \
    \   final long mid15 = mid14 + (max - mid14) / 2;\n        final long mid16 =\
    \ mid15 + (max - mid15) / 2;\n        final long mid17 = mid16 + (max - mid16)\
    \ / 2;\n        final long mid18 = mid17 + (max - mid17) / 2;\n        final long\
    \ mid19 = mid18 + (max - mid18) / 2;\n        final long mid20 = mid19 + (max\
    \ - mid19) / 2;\n        final long mid21 = mid20 + (max - mid20) / 2;\n     \
    \   final long mid22 = mid21 + (max - mid21) / 2;\n        final long mid23 =\
    \ mid22 + (max - mid22) / 2;\n        final long mid24 = mid23 + (max - mid23)\
    \ / 2;\n        final long mid25 = mid24 + (max - mid24) / 2;\n        final long\
    \ mid26 = mid25 + (max - mid25) / 2;\n        final long mid27 = mid26 + (max\
    \ - mid26) / 2;\n        final long mid28 = mid27 + (max - mid27) / 2;\n     \
    \   final long mid29 = mid28 + (max - mid28) / 2;\n        final long mid30 =\
    \ mid29 + (max - mid29) / 2;\n        final long mid31 = mid30 + (max - mid30)\
    \ / 2;\n        final long mid32 = mid31 + (max - mid31) / 2;\n        final long\
    \ mid33 = mid32 + (max - mid32) / 2;\n        final long mid34 = mid33 + (max\
    \ - mid33) / 2;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcou8wdzz.java:54: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\
    \        boolean isMonotonic = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < mid) {\n                isIncreasing = false;\n\
    \            } else if (l.get(i) > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isMonotonic = false;\n            }\n \
    \       }\n        if (isIncreasing && isDecreasing && isMonotonic) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpka9c6j9c.java:38)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        for (Long value : l) {\n            if (isIncreasing && value > lastValue)\
    \ {\n                isIncreasing = false;\n            }\n            if (isDecreasing\
    \ && value < lastValue) {\n                isDecreasing = false;\n           \
    \ }\n            lastValue = value;\n        }\n        return isIncreasing ||\
    \ isDecreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdus4lb3n.java:32)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp492ulvvc.java:30)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long first = l.get(0);\n     \
    \   final long last = l.get(l.size() - 1);\n        final long mid = first + (last\
    \ - first) / 2;\n        final long mid2 = mid + (mid - first) / 2;\n        final\
    \ long mid3 = mid2 + (mid2 - first) / 2;\n        final long mid4 = mid3 + (mid3\
    \ - first) / 2;\n        final long mid5 = mid4 + (mid4 - first) / 2;\n      \
    \  final long mid6 = mid5 + (mid5 - first) / 2;\n        final long mid7 = mid6\
    \ + (mid6 - first) / 2;\n        final long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        final long mid9 = mid8 + (mid8 - first) / 2;\n        final long mid10\
    \ = mid9 + (mid9 - first) / 2;\n        final long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        final long mid12 = mid11 + (mid11 - first) / 2;\n        final\
    \ long mid13 = mid12 + (mid12 - first) / 2;\n        final long mid14 = mid13\
    \ + (mid13 - first) / 2;\n        final long mid15 = mid14 + (mid14 - first) /\
    \ 2;\n        final long mid16 = mid15 + (mid15 - first) / 2;\n        final long\
    \ mid17 = mid16 + (mid16 - first) / 2;\n        final long mid18 = mid17 + (mid17\
    \ - first) / 2;\n        final long mid19 = mid18 + (mid18 - first) / 2;\n   \
    \     final long mid20 = mid19 + (mid19 - first) / 2;\n        final long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        final long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        final long mid23 = mid22 + (mid22 - first) / 2;\n     \
    \   final long mid24 = mid23 + (mid23 - first) / 2;\n        final long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        final long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        final long mid27 = mid26 + (mid26 - first) / 2;\n     \
    \   final long mid28 = mid27 + (mid27 - first) / 2;\n        final long mid29\
    \ = mid28 + (mid28 - first) / 2;\n        final long mid30 = mid29 + (mid29 -\
    \ first) / 2;\n        final long mid31 = mid30 + (mid30 - first) / 2;\n     \
    \   final long mid32 = mid31 + (mid31 - first) / 2;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptfctkaiw.java:51: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = Long.MAX_VALUE;\n       \
    \ long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e <\
    \ min) {\n                min = e;\n            }\n            if (e > max) {\n\
    \                max = e;\n            }\n        }\n        return min <= max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4m9g3f7.java:32)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        Long mid = l.get(l.size() / 2);\n        Long\
    \ mid2 = l.get(l.size() / 2);\n        Long mid3 = l.get(l.size() / 2);\n    \
    \    Long mid4 = l.get(l.size() / 2);\n        Long mid5 = l.get(l.size() / 2);\n\
    \        Long mid6 = l.get(l.size() / 2);\n        Long mid7 = l.get(l.size()\
    \ / 2);\n        Long mid8 = l.get(l.size() / 2);\n        Long mid9 = l.get(l.size()\
    \ / 2);\n        Long mid10 = l.get(l.size() / 2);\n        Long mid11 = l.get(l.size()\
    \ / 2);\n        Long mid12 = l.get(l.size() / 2);\n        Long mid13 = l.get(l.size()\
    \ / 2);\n        Long mid14 = l.get(l.size() / 2);\n        Long mid15 = l.get(l.size()\
    \ / 2);\n        Long mid16 = l.get(l.size() / 2);\n        Long mid17 = l.get(l.size()\
    \ / 2);\n        Long mid18 = l.get(l.size() / 2);\n        Long mid19 = l.get(l.size()\
    \ / 2);\n        Long mid20 = l.get(l.size() / 2);\n        Long mid21 = l.get(l.size()\
    \ / 2);\n        Long mid22 = l.get(l.size() / 2);\n        Long mid23 = l.get(l.size()\
    \ / 2);\n        Long mid24 = l.get(l.size() / 2);\n        Long mid25 = l.get(l.size()\
    \ / 2);\n        Long mid26 = l.get(l.size() / 2);\n        Long mid27 = l.get(l.size()\
    \ / 2);\n        Long mid28 = l.get(l.size() / 2);\n        Long mid29 = l.get(l.size()\
    \ / 2);\n        Long mid30 = l.get(l.size() / 2);\n        Long mid31 = l.get(l.size()\
    \ / 2);\n        Long mid32 = l.get(l.size() / 2);\n        Long mid33 = l.get(l.size()\
    \ / 2);\n        Long mid34 = l.get(l.size() / 2);\n        Long mid35 = l.get(l.size()\
    \ / 2);\n        Long mid36 = l.get(l.size() / 2);\n        Long mid37 = l.get(l.size()\
    \ / 2);\n        Long mid38 = l.get(l.size\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpac_5czl7.java:58: error: ')' expected\n        Long mid38 = l.get(l.size\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  long curr = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ e;\n            curr = e;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82_atl67.java:32)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long last = null;\n        for (Long current\
    \ : l) {\n            if (current == last) {\n                increasing = false;\n\
    \                decreasing = true;\n            } else if (current > last) {\n\
    \                increasing = false;\n                decreasing = false;\n  \
    \          } else if (current < last) {\n                increasing = true;\n\
    \                decreasing = false;\n            } else {\n                increasing\
    \ = true;\n                decreasing = true;\n            }\n            last\
    \ = current;\n        }\n        return increasing || decreasing;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because \"<local3>\" is null\n\tat Problem.monotonic(tmppeqdcrbu.java:24)\n\
    \tat Problem.main(tmppeqdcrbu.java:39)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        boolean isIncreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                isIncreasing = false;\n    \
    \            break;\n            }\n            if (current > last) {\n      \
    \          isIncreasing = true;\n                break;\n            }\n     \
    \   }\n        return isIncreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmc28wu8o.java:36)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        for (long cur : l) {\n            if (prev > cur)\
    \ {\n                increasing = false;\n            }\n            prev = cur;\n\
    \        }\n        return increasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnq4p3p5r.java:31)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        long next\
    \ = l.get(2);\n        long diff = next - current;\n        for (int i = 3; i\
    \ < l.size(); i++) {\n            prev = current;\n            current = next;\n\
    \            next = l.get(i);\n            diff = next - current;\n          \
    \  if (diff > 0) {\n                isMonotonic = false;\n                break;\n\
    \            }\n        }\n        return isMonotonic;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhwk23ce.java:35)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long previous = null;\n        for (Long\
    \ current : l) {\n            if (current == null) {\n                isDecreasing\
    \ = false;\n            } else if (previous != null) {\n                if (previous.compareTo(current)\
    \ < 0) {\n                    isDecreasing = false;\n                }\n     \
    \       }\n            previous = current;\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6_lcwtb.java:35)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        Long mid = l.get(l.size() / 2);\n        Long\
    \ mid2 = l.get(l.size() / 2);\n        Long mid3 = l.get(l.size() / 2);\n    \
    \    Long mid4 = l.get(l.size() / 2);\n        Long mid5 = l.get(l.size() / 2);\n\
    \        Long mid6 = l.get(l.size() / 2);\n        Long mid7 = l.get(l.size()\
    \ / 2);\n        Long mid8 = l.get(l.size() / 2);\n        Long mid9 = l.get(l.size()\
    \ / 2);\n        Long mid10 = l.get(l.size() / 2);\n        Long mid11 = l.get(l.size()\
    \ / 2);\n        Long mid12 = l.get(l.size() / 2);\n        Long mid13 = l.get(l.size()\
    \ / 2);\n        Long mid14 = l.get(l.size() / 2);\n        Long mid15 = l.get(l.size()\
    \ / 2);\n        Long mid16 = l.get(l.size() / 2);\n        Long mid17 = l.get(l.size()\
    \ / 2);\n        Long mid18 = l.get(l.size() / 2);\n        Long mid19 = l.get(l.size()\
    \ / 2);\n        Long mid20 = l.get(l.size() / 2);\n        Long mid21 = l.get(l.size()\
    \ / 2);\n        Long mid22 = l.get(l.size() / 2);\n        Long mid23 = l.get(l.size()\
    \ / 2);\n        Long mid24 = l.get(l.size() / 2);\n        Long mid25 = l.get(l.size()\
    \ / 2);\n        Long mid26 = l.get(l.size() / 2);\n        Long mid27 = l.get(l.size()\
    \ / 2);\n        Long mid28 = l.get(l.size() / 2);\n        Long mid29 = l.get(l.size()\
    \ / 2);\n        Long mid30 = l.get(l.size() / 2);\n        Long mid31 = l.get(l.size()\
    \ / 2);\n        Long mid32 = l.get(l.size() / 2);\n        Long mid33 = l.get(l.size()\
    \ / 2);\n        Long mid34 = l.get(l.size() / 2);\n        Long mid35 = l.get(l.size()\
    \ / 2);\n        Long mid36 = l.get(l.size() / 2);\n        Long mid37 = l.get(l.size()\
    \ / 2);\n        Long mid38 = l.get(l.size\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpac_5czl7.java:58: error: ')' expected\n        Long mid38 = l.get(l.size\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        for (Long value : l) {\n            if (value > lastValue) {\n      \
    \          isIncreasing = false;\n            }\n            if (value < lastValue)\
    \ {\n                isDecreasing = false;\n            }\n            lastValue\
    \ = value;\n        }\n        return isIncreasing || isDecreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqwbt8qc.java:32)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long last = null;\n        for (Long current\
    \ : l) {\n            if (current > last) {\n                increasing = false;\n\
    \            }\n            if (current < last) {\n                decreasing\
    \ = false;\n            }\n            last = current;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because \"<local3>\" is null\n\tat Problem.monotonic(tmp53zxkf98.java:21)\n\
    \tat Problem.main(tmp53zxkf98.java:32)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                isIncreasing\
    \ = false;\n            }\n            if (current > prev) {\n               \
    \ isDecreasing = false;\n            }\n            prev = current;\n        }\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        for (int i\
    \ = 2; i < l.size(); i++) {\n            long next = l.get(i);\n            if\
    \ (current < next) {\n                isMonotonic = false;\n                break;\n\
    \            }\n            if (current > next) {\n                isMonotonic\
    \ = true;\n                break;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return isMonotonic;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5w0jy3t.java:36)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for(int i = 2; i < l.size(); i++) {\n         \
    \   long next = l.get(i);\n            if (current > next) {\n               \
    \ isIncreasing = false;\n            } else if (current < next) {\n          \
    \      isDecreasing = false;\n            }\n            if (isIncreasing && isDecreasing)\
    \ {\n                return true;\n            }\n            if (isIncreasing\
    \ && !isDecreasing) {\n                return true;\n            }\n         \
    \   if (!isIncreasing && isDecreasing) {\n                return true;\n     \
    \       }\n            prev = current;\n            current = next;\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrbt9ntn.java:45)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = mid - 1;\n        long mid3 = mid + 1;\n        long mid4 =\
    \ mid + 2;\n        long mid5 = mid + 3;\n        long mid6 = mid + 4;\n     \
    \   long mid7 = mid + 5;\n        long mid8 = mid + 6;\n        long mid9 = mid\
    \ + 7;\n        long mid10 = mid + 8;\n        long mid11 = mid + 9;\n       \
    \ long mid12 = mid + 10;\n        long mid13 = mid + 11;\n        long mid14 =\
    \ mid + 12;\n        long mid15 = mid + 13;\n        long mid16 = mid + 14;\n\
    \        long mid17 = mid + 15;\n        long mid18 = mid + 16;\n        long\
    \ mid19 = mid + 17;\n        long mid20 = mid + 18;\n        long mid21 = mid\
    \ + 19;\n        long mid22 = mid + 20;\n        long mid23 = mid + 21;\n    \
    \    long mid24 = mid + 22;\n        long mid25 = mid + 23;\n        long mid26\
    \ = mid + 24;\n        long mid27 = mid + 25;\n        long mid28 = mid + 26;\n\
    \        long mid29 = mid + 27;\n        long mid30 = mid + 28;\n        long\
    \ mid31 = mid + 29;\n        long mid32 = mid + 30;\n        long mid33 = mid\
    \ + 31;\n        long mid34 = mid + 32;\n        long mid35 = mid + 33;\n    \
    \    long mid36 = mid + 34;\n        long mid37 = mid + 35;\n        long mid38\
    \ = mid + 36;\n        long mid39 = mid + 37;\n        long mid40 = mid + 38;\n\
    \        long mid41 = mid + 39;\n        long mid42 = mid + 40;\n        long\
    \ mid43 = mid + 41;\n        long mid44 = mid + 42;\n        long mid45 = mid\
    \ + 43;\n        long mid46 = mid + 44;\n        long mid47 = mid + 45;\n    \
    \    long mid48 = mid + 46;\n        long mid49 = mid + 47;\n        long mid50\
    \ = mid + 48;\n        long mid51 = mid + 49;\n        long mid52 = mid + 50;\n\
    \        long mid53 = mid + 51;\n        long mid54 = mid + 52;\n        long\
    \ \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkhzki07.java:75: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpjkhzki07.java:75: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        if (first < mid) {\n            if (last\
    \ < mid) {\n                isMonotonic = false;\n            }\n        }\n \
    \       else if (first > mid) {\n            if (last > mid) {\n             \
    \   isMonotonic = false;\n            }\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqv7286g.java:36)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long current = l.get(i);\n            if (current < mid) {\n\
    \                isIncreasing = false;\n                break;\n            }\n\
    \            if (current > mid) {\n                isIncreasing = true;\n    \
    \            break;\n            }\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjkeo_iwx.java:35)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long mid2 = l.get(l.size() / 2 - 1);\n \
    \       Long mid3 = l.get(l.size() / 2 - 2);\n        Long mid4 = l.get(l.size()\
    \ / 2 - 3);\n        Long mid5 = l.get(l.size() / 2 - 4);\n        Long mid6 =\
    \ l.get(l.size() / 2 - 5);\n        Long mid7 = l.get(l.size() / 2 - 6);\n   \
    \     Long mid8 = l.get(l.size() / 2 - 7);\n        Long mid9 = l.get(l.size()\
    \ / 2 - 8);\n        Long mid10 = l.get(l.size() / 2 - 9);\n        Long mid11\
    \ = l.get(l.size() / 2 - 10);\n        Long mid12 = l.get(l.size() / 2 - 11);\n\
    \        Long mid13 = l.get(l.size() / 2 - 12);\n        Long mid14 = l.get(l.size()\
    \ / 2 - 13);\n        Long mid15 = l.get(l.size() / 2 - 14);\n        Long mid16\
    \ = l.get(l.size() / 2 - 15);\n        Long mid17 = l.get(l.size() / 2 - 16);\n\
    \        Long mid18 = l.get(l.size() / 2 - 17);\n        Long mid19 = l.get(l.size()\
    \ / 2 - 18);\n        Long mid20 = l.get(l.size() / 2 - 19);\n        Long mid21\
    \ = l.get(l.size() / 2 - 20);\n        Long mid22 = l.get(l.size() / 2 - 21);\n\
    \        Long mid23 = l.get(l.size() / 2 - 22);\n        Long mid24 = l.get(l.size()\
    \ / 2 - 23);\n        Long mid25 = l.get(l.size() / 2 - 24);\n        Long mid26\
    \ = l.get(l.size() / 2 - 25);\n        Long mid27 = l.get(l.size() / 2 - 26);\n\
    \        Long mid28 = l.get(l.size() / 2 - 27);\n        Long mid29 = l.get(l.size()\
    \ / 2 - 28);\n        Long mid30 = l.get(l.size() / 2 - 29);\n        Long mid31\
    \ = l.get(l.size() / 2 - 30);\n        Long mid32 = l.get(l.size() / 2 - 31);\n\
    \        Long mid33 = l.get(l.size() / 2 - 32);\n        Long mid34 = l.get(l.size()\
    \ / 2 - 33);\n        Long mid35 = l.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfyshig4.java:55: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prevVal = Long.MIN_VALUE;\n        long curVal = Long.MIN_VALUE;\n   \
    \     for (long val : l) {\n            if (prevVal < curVal) {\n            \
    \    isMonotonic = false;\n                break;\n            }\n           \
    \ prevVal = curVal;\n            curVal = val;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f0_0k6u.java:31)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long first = l.get(0);\n     \
    \   final long last = l.get(l.size() - 1);\n        final long mid = first + ((last\
    \ - first) / 2);\n        final long mid2 = mid + ((last - mid) / 2);\n      \
    \  final long mid3 = mid2 + ((last - mid2) / 2);\n        final long mid4 = mid3\
    \ + ((last - mid3) / 2);\n        final long mid5 = mid4 + ((last - mid4) / 2);\n\
    \        final long mid6 = mid5 + ((last - mid5) / 2);\n        final long mid7\
    \ = mid6 + ((last - mid6) / 2);\n        final long mid8 = mid7 + ((last - mid7)\
    \ / 2);\n        final long mid9 = mid8 + ((last - mid8) / 2);\n        final\
    \ long mid10 = mid9 + ((last - mid9) / 2);\n        final long mid11 = mid10 +\
    \ ((last - mid10) / 2);\n        final long mid12 = mid11 + ((last - mid11) /\
    \ 2);\n        final long mid13 = mid12 + ((last - mid12) / 2);\n        final\
    \ long mid14 = mid13 + ((last - mid13) / 2);\n        final long mid15 = mid14\
    \ + ((last - mid14) / 2);\n        final long mid16 = mid15 + ((last - mid15)\
    \ / 2);\n        final long mid17 = mid16 + ((last - mid16) / 2);\n        final\
    \ long mid18 = mid17 + ((last - mid17) / 2);\n        final long mid19 = mid18\
    \ + ((last - mid18) / 2);\n        final long mid20 = mid19 + ((last - mid19)\
    \ / 2);\n        final long mid21 = mid20 + ((last - mid20) / 2);\n        final\
    \ long mid22 = mid21 + ((last - mid21) / 2);\n        final long mid23 = mid22\
    \ + ((last - mid22) / 2);\n        final long mid24 = mid23 + ((last - mid23)\
    \ / 2);\n        final long mid25 = mid24 + ((last - mid24) / 2);\n        final\
    \ long mid26 = mid25 + ((last - mid25) / 2);\n        final long mid27 = mid26\
    \ + ((last - mid26) / 2);\n        final long mid28 = mid27 + ((last - mid27)\
    \ / 2);\n        final long mid29 = mid28 + ((last - mid28) / 2);\n        final\
    \ long mid30 = mid29 + ((last - mid29) / 2);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphys1ophr.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = Long.MIN_VALUE;\n       \
    \ long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e >\
    \ max) {\n                max = e;\n            }\n            if (e < min) {\n\
    \                min = e;\n            }\n        }\n        return min <= max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx91b7llo.java:32)\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        Long current = first;\n        Long next\
    \ = first;\n        Long nextNext = first;\n        Long nextNextNext = first;\n\
    \        Long nextNextNextNext = first;\n        Long nextNextNextNextNext = first;\n\
    \        Long nextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNext = first;\n        Long\
    \ nextNextNextNextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNext = first;\n \
    \       Long nextNextNextNextNextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNext = first;\n \
    \       Long nextNextNextNextNextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNext = first;\n\
    \        Long nextNextNextNextNextNextNextNextNextNextNext = first;\n        Long\
    \ nextNextNextNextNextNextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNext = first;\n\
    \        Long nextNextNextNextNextNextNextNextNextNextNextNext = first;\n    \
    \    Long nextNextNextNextNextNextNextNextNextNextNextNext = first;\n        Long\
    \ nextNextNextNextNextNextNextNextNextNextNextNext = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = first;\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8qnct8q.java:50: error: ';' expected\n        Long nextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \                                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        long curr = l.get(1);\n        for (int i =\
    \ 2; i < l.size(); i++) {\n            long next = l.get(i);\n            if (next\
    \ < prev) {\n                isMonotonic = false;\n                break;\n  \
    \          }\n            prev = curr;\n            curr = next;\n        }\n\
    \        return isMonotonic;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy39ylw5.java:35)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = 0;\n        long current = l.get(0);\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            long next = l.get(i);\n            if (current\
    \ < next) {\n                isMonotonic = false;\n                break;\n  \
    \          }\n            prev = current;\n            current = next;\n     \
    \   }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6p4r2p_.java:32)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    long next = l.get(i);\n            if (current > next) {\n              \
    \  isDecreasing = false;\n            } else if (current < next) {\n         \
    \       isIncreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n            if (isIncreasing && isDecreasing)\
    \ {\n                return true;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for\
    \ (long x : l) {\n            if (prev < x) {\n                decreasing = false;\n\
    \            }\n            if (prev > x) {\n                increasing = false;\n\
    \            }\n            prev = x;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing) {\n        \
    \    return false;\n        }\n        if (decreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcr2hut_.java:41)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = false;\n        long\
    \ prev = l.get(0);\n        long current = l.get(1);\n        long next = l.get(2);\n\
    \        long diff = current - prev;\n        if (diff > 0) {\n            while\
    \ (next < current) {\n                prev = current;\n                current\
    \ = next;\n                next = l.get(3);\n                diff = current -\
    \ prev;\n                if (diff > 0) {\n                    result = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     else {\n            while (next > current) {\n                prev = current;\n\
    \                current = next;\n                next = l.get(3);\n         \
    \       diff = current - prev;\n                if (diff > 0) {\n            \
    \        result = true;\n                    break;\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphskc3orw.java:49)\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        long next\
    \ = l.get(2);\n        long diff = next - current;\n        for(int i = 3; i <\
    \ l.size(); i++) {\n            prev = current;\n            current = next;\n\
    \            next = l.get(i);\n            diff = next - current;\n          \
    \  if(diff < 0) {\n                isMonotonic = false;\n                break;\n\
    \            }\n        }\n        return isMonotonic;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt01dee_w.java:37)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long first = l.get(0);\n        long last = l.get(l.size() - 1);\n        long\
    \ mid = first + ((last - first) / 2);\n        boolean isIncreasing = true;\n\
    \        boolean isDecreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long current = l.get(i);\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isMonotonic = true;\n            }\n        }\n        return isMonotonic\
    \ && isIncreasing && isDecreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7t05x79.java:36)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long lastValue = l.get(l.size()-1);\n        Long firstValue = l.get(0);\n\
    \        for(int i = 1; i < l.size(); i++) {\n            Long value = l.get(i);\n\
    \            if (lastValue < value) {\n                isMonotonic = false;\n\
    \                break;\n            }\n            lastValue = value;\n     \
    \   }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5krper7.java:31)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   long max = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i\
    \ < max) {\n                isIncreasing = false;\n            }\n           \
    \ max = i;\n        }\n        return isIncreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7mrzd79m.java:31)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        if (first\
    \ > last) {\n            result = false;\n        } else {\n            for (int\
    \ i = 1; i < l.size(); i++) {\n                if (l.get(i) > last) {\n      \
    \              result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3eytu7ts.java:36)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  for (long current : l) {\n            if (current < prev) {\n             \
    \   return false;\n            }\n            prev = current;\n        }\n   \
    \     return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqmbyb61.java:30)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                isIncreasing = false;\n                break;\n \
    \           }\n            prev = current;\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_q0r5t3.java:32)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long lastValue = l.get(l.size() - 1);\n\
    \        for (long value : l) {\n            if (value > lastValue) {\n      \
    \          increasing = false;\n            } else if (value < lastValue) {\n\
    \                decreasing = false;\n            }\n            lastValue = value;\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_yu0r_r4.java:31)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpevq4h5vu.java:33)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < mid) {\n                isIncreasing = false;\n   \
    \         } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_jgk77w.java:35)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n        \
    \    if (current < prev) {\n                decreasing = false;\n            }\
    \ else if (current > prev) {\n                increasing = false;\n          \
    \  } else {\n                increasing = increasing && increasing;\n        \
    \        decreasing = decreasing && decreasing;\n            }\n            prev\
    \ = current;\n        }\n        return increasing || decreasing;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long current = l.get(i);\n            if (current < first) {\n           \
    \     increasing = false;\n            } else if (current > last) {\n        \
    \        decreasing = false;\n            } else {\n                increasing\
    \ = increasing && current < last;\n                decreasing = decreasing &&\
    \ current > first;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphr9z1iev.java:40)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastElement = l.get(l.size() -\
    \ 1);\n        Long firstElement = l.get(0);\n        Long currentElement = firstElement;\n\
    \        for(Long element : l) {\n            if(element < firstElement) {\n \
    \               isDecreasing = false;\n            }\n            if(element >\
    \ lastElement) {\n                isIncreasing = false;\n            }\n     \
    \       if(element == currentElement) {\n                isDecreasing = isDecreasing\
    \ && isIncreasing;\n            }\n            currentElement = element;\n   \
    \     }\n        return isDecreasing || isIncreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qdd6osu.java:39)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long current = l.get(0);\n        long\
    \ previous = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     long next = l.get(i);\n            if (current > next) {\n             \
    \   isIncreasing = false;\n            } else if (current < next) {\n        \
    \        isDecreasing = false;\n            }\n            current = next;\n \
    \       }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        } else if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        } else if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long first = l.get(0);\n        long last = l.get(l.size() - 1);\n        long\
    \ mid = first + (last - first) / 2;\n        long mid2 = first + (last - first)\
    \ / 2;\n        long mid3 = first + (last - first) / 2;\n        long mid4 = first\
    \ + (last - first) / 2;\n        long mid5 = first + (last - first) / 2;\n   \
    \     long mid6 = first + (last - first) / 2;\n        long mid7 = first + (last\
    \ - first) / 2;\n        long mid8 = first + (last - first) / 2;\n        long\
    \ mid9 = first + (last - first) / 2;\n        long mid10 = first + (last - first)\
    \ / 2;\n        long mid11 = first + (last - first) / 2;\n        long mid12 =\
    \ first + (last - first) / 2;\n        long mid13 = first + (last - first) / 2;\n\
    \        long mid14 = first + (last - first) / 2;\n        long mid15 = first\
    \ + (last - first) / 2;\n        long mid16 = first + (last - first) / 2;\n  \
    \      long mid17 = first + (last - first) / 2;\n        long mid18 = first +\
    \ (last - first) / 2;\n        long mid19 = first + (last - first) / 2;\n    \
    \    long mid20 = first + (last - first) / 2;\n        long mid21 = first + (last\
    \ - first) / 2;\n        long mid22 = first + (last - first) / 2;\n        long\
    \ mid23 = first + (last - first) / 2;\n        long mid24 = first + (last - first)\
    \ / 2;\n        long mid25 = first + (last - first) / 2;\n        long mid26 =\
    \ first + (last - first) / 2;\n        long mid27 = first + (last - first) / 2;\n\
    \        long mid28 = first + (last - first) / 2;\n        long mid29 = first\
    \ + (last - first) / 2;\n        long mid30 = first + (last - first) / 2;\n  \
    \      long mid31 = first + (last - first) / 2;\n        long mid32 = first +\
    \ (last - first) / 2;\n        long mid33 = first + (last - first) / 2;\n    \
    \    long mid34 = first + (last - first) / 2;\n        long mid35 = first + (last\
    \ - first) / 2;\n        long mid36 = first + (last - first) / 2;\n        long\
    \ mid37 = first + (last - first) / 2;\n        long mid38 = first + (last - first)\
    \ / 2;\n        long mid39 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9i2m9fa.java:59: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        for (Long value : l) {\n            if (isDecreasing && value > lastValue)\
    \ {\n                isDecreasing = false;\n            } else if (isIncreasing\
    \ && value < lastValue) {\n                isIncreasing = false;\n           \
    \ } else if (isDecreasing && value == lastValue) {\n                isDecreasing\
    \ = false;\n            } else if (isIncreasing && value == lastValue) {\n   \
    \             isIncreasing = false;\n            }\n            lastValue = value;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_evb1d3.java:35)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 -\
    \ first) / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5\
    \ = mid4 + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n\
    \        long mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7\
    \ - first) / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n        long\
    \ mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        long mid12 = mid11 + (mid11 - first) / 2;\n        long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 - first)\
    \ / 2;\n        long mid15 = mid14 + (mid14 - first) / 2;\n        long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 - first)\
    \ / 2;\n        long mid18 = mid17 + (mid17 - first) / 2;\n        long mid19\
    \ = mid18 + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 - first)\
    \ / 2;\n        long mid21 = mid20 + (mid20 - first) / 2;\n        long mid22\
    \ = mid21 + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 - first)\
    \ / 2;\n        long mid24 = mid23 + (mid23 - first) / 2;\n        long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 - first)\
    \ / 2;\n        long mid27 = mid26 + (mid26 - first) / 2;\n        long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 - first)\
    \ / 2;\n        long mid30 = mid29 + (mid29 - first) / 2;\n        long mid31\
    \ = mid30 + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 - first)\
    \ / 2;\n        long mid33 = mid32 + (mid32 - first) / 2;\n        long mid34\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpir0qu8ym.java:54: error: ';' expected\n        long mid34\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        Long current = first;\n        Long next\
    \ = last;\n        Long nextNext = last;\n        Long nextNextNext = last;\n\
    \        Long nextNextNextNext = last;\n        Long nextNextNextNextNext = last;\n\
    \        Long nextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNext = last;\n        Long\
    \ nextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNext = last;\n   \
    \     Long nextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNext = last;\n   \
    \     Long nextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNext = last;\n   \
    \     Long nextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNext = last;\n   \
    \     Long nextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNext = last;\n   \
    \     Long nextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNextNext = last;\n\
    \        Long nextNextNextNextNextNextNextNextNextNextNext = last;\n        Long\
    \ nextNextNextNextNextNextNextNextNextNextNext = last;\n        Long nextNextNextNextNextNextNextNextNextNextNext\
    \ = last;\n        Long nextNextNextNextNextNextNextNextNextNextNext = last;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgzjpe84.java:31: error: variable nextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:33: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:34: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:35: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:36: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:37: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:38: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:39: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:40: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method monotonic(ArrayList<Long>)\n        Long nextNextNextNextNextNextNextNextNextNext\
    \ = last;\n             ^\n/tmp/tmpwgzjpe84.java:41: error: variable nextNextNextNextNextNextNextNextNextNext\
    \ is already defined in method "
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        long next = l.get(2);\n        long diff = next\
    \ - current;\n        long diff2 = diff / 2;\n        long diff3 = diff / 3;\n\
    \        long diff4 = diff / 4;\n        long diff5 = diff / 5;\n        long\
    \ diff6 = diff / 6;\n        long diff7 = diff / 7;\n        long diff8 = diff\
    \ / 8;\n        long diff9 = diff / 9;\n        long diff10 = diff / 10;\n   \
    \     long diff11 = diff / 11;\n        long diff12 = diff / 12;\n        long\
    \ diff13 = diff / 13;\n        long diff14 = diff / 14;\n        long diff15 =\
    \ diff / 15;\n        long diff16 = diff / 16;\n        long diff17 = diff / 17;\n\
    \        long diff18 = diff / 18;\n        long diff19 = diff / 19;\n        long\
    \ diff20 = diff / 20;\n        long diff21 = diff / 21;\n        long diff22 =\
    \ diff / 22;\n        long diff23 = diff / 23;\n        long diff24 = diff / 24;\n\
    \        long diff25 = diff / 25;\n        long diff26 = diff / 26;\n        long\
    \ diff27 = diff / 27;\n        long diff28 = diff / 28;\n        long diff29 =\
    \ diff / 29;\n        long diff30 = diff / 30;\n        long diff31 = diff / 31;\n\
    \        long diff32 = diff / 32;\n        long diff33 = diff / 33;\n        long\
    \ diff34 = diff / 34;\n        long diff35 = diff / 35;\n        long diff36 =\
    \ diff / 36;\n        long diff37 = diff / 37;\n        long diff38 = diff / 38;\n\
    \        long diff39 = diff / 39;\n        long diff40 = diff / 40;\n        long\
    \ diff41 = diff / 41;\n        long diff42 = diff / 42;\n        long diff43 =\
    \ diff / 43;\n        long diff44 = diff / 44;\n        long diff45 = diff / 45;\n\
    \        long diff46 = diff / 46;\n        long diff47 = diff / 47;\n        long\
    \ diff48 = diff / 48;\n        long diff49 = diff / 49;\n        long diff50 =\
    \ diff / 50;\n        long diff51 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph9dbdg64.java:73: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        for\
    \ (Long i : l) {\n            if (i < first || i > last) {\n                isMonotonic\
    \ = false;\n                break;\n            }\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpukgd870k.java:32)\n"
  stdout: ''
  timestamp: 1659799627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long max = l.stream().mapToLong(Long::longValue).max().orElse(Long.MIN_VALUE);\n\
    \        final long min = l.stream().mapToLong(Long::longValue).min().orElse(Long.MAX_VALUE);\n\
    \        return l.stream().allMatch(x -> x >= min && x <= max);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7k0h4zne.java:24)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     boolean isIncreasing = true;\n        boolean isDecreasing = true;\n   \
    \     for (long i = 1, j = l.size() - 1; i < j; i++, j--) {\n            if (l.get(i)\
    \ > mid) {\n                isIncreasing = false;\n            }\n           \
    \ if (l.get(j) < mid) {\n                isDecreasing = false;\n            }\n\
    \            if (l.get(i) > l.get(j)) {\n                if (isIncreasing) {\n\
    \                    increasing = false;\n                }\n                if\
    \ (isDecreasing) {\n                    decreasing = false;\n                }\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpda6wb425.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) > mid) {\n                      ^\n\
    /tmp/tmpda6wb425.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(j) < mid) {\n                      ^\n\
    /tmp/tmpda6wb425.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) > l.get(j)) {\n                 \
    \     ^\n/tmp/tmpda6wb425.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) > l.get(j)) {\n                 \
    \                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long midVal = l.get(l.size() / 2);\n   \
    \     Long midVal2 = l.get(l.size() / 2);\n        Long midVal3 = l.get(l.size()\
    \ / 2);\n        Long midVal4 = l.get(l.size() / 2);\n        Long midVal5 = l.get(l.size()\
    \ / 2);\n        Long midVal6 = l.get(l.size() / 2);\n        Long midVal7 = l.get(l.size()\
    \ / 2);\n        Long midVal8 = l.get(l.size() / 2);\n        Long midVal9 = l.get(l.size()\
    \ / 2);\n        Long midVal10 = l.get(l.size() / 2);\n        Long midVal11 =\
    \ l.get(l.size() / 2);\n        Long midVal12 = l.get(l.size() / 2);\n       \
    \ Long midVal13 = l.get(l.size() / 2);\n        Long midVal14 = l.get(l.size()\
    \ / 2);\n        Long midVal15 = l.get(l.size() / 2);\n        Long midVal16 =\
    \ l.get(l.size() / 2);\n        Long midVal17 = l.get(l.size() / 2);\n       \
    \ Long midVal18 = l.get(l.size() / 2);\n        Long midVal19 = l.get(l.size()\
    \ / 2);\n        Long midVal20 = l.get(l.size() / 2);\n        Long midVal21 =\
    \ l.get(l.size() / 2);\n        Long midVal22 = l.get(l.size() / 2);\n       \
    \ Long midVal23 = l.get(l.size() / 2);\n        Long midVal24 = l.get(l.size()\
    \ / 2);\n        Long midVal25 = l.get(l.size() / 2);\n        Long midVal26 =\
    \ l.get(l.size() / 2);\n        Long midVal27 = l.get(l.size() / 2);\n       \
    \ Long midVal28 = l.get(l.size() / 2);\n        Long midVal29 = l.get(l.size()\
    \ / 2);\n        Long midVal30 = l.get(l.size() / 2);\n        Long midVal31 =\
    \ l.get(l.size() / 2);\n        Long midVal32 = l.get(l.size() / 2);\n       \
    \ Long midVal33 = l.get(l.size() / 2);\n        Long midVal34 = l.get(l.size()\
    \ / 2);\n        Long midVal35 = l.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i8kprq7.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp3i8kprq7.java:56: error: ';' expected\n    }\n     ^\n/tmp/tmp3i8kprq7.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp3i8kprq7.java:57: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp3i8kprq7.java:57: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp3i8kprq7.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ current = first;\n        Long nextVal = last;\n        Long nextVal2 = last;\n\
    \        Long nextVal3 = last;\n        Long nextVal4 = last;\n        Long nextVal5\
    \ = last;\n        Long nextVal6 = last;\n        Long nextVal7 = last;\n    \
    \    Long nextVal8 = last;\n        Long nextVal9 = last;\n        Long nextVal10\
    \ = last;\n        Long nextVal11 = last;\n        Long nextVal12 = last;\n  \
    \      Long nextVal13 = last;\n        Long nextVal14 = last;\n        Long nextVal15\
    \ = last;\n        Long nextVal16 = last;\n        Long nextVal17 = last;\n  \
    \      Long nextVal18 = last;\n        Long nextVal19 = last;\n        Long nextVal20\
    \ = last;\n        Long nextVal21 = last;\n        Long nextVal22 = last;\n  \
    \      Long nextVal23 = last;\n        Long nextVal24 = last;\n        Long nextVal25\
    \ = last;\n        Long nextVal26 = last;\n        Long nextVal27 = last;\n  \
    \      Long nextVal28 = last;\n        Long nextVal29 = last;\n        Long nextVal30\
    \ = last;\n        Long nextVal31 = last;\n        Long nextVal32 = last;\n  \
    \      Long nextVal33 = last;\n        Long nextVal34 = last;\n        Long nextVal35\
    \ = last;\n        Long nextVal36 = last;\n        Long nextVal37 = last;\n  \
    \      Long nextVal38 = last;\n        Long nextVal39 = last;\n        Long nextVal40\
    \ = last;\n        Long nextVal41 = last;\n        Long nextVal42 = last;\n  \
    \      Long nextVal43 = last;\n        Long nextVal44 = last;\n        Long nextVal45\
    \ = last;\n        Long nextVal46 = last;\n        Long nextVal47 = last;\n  \
    \      Long nextVal48 = last;\n        Long nextVal49 = last;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1bitvwfw.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = Long.MIN_VALUE;\n      \
    \  for (long current : l) {\n            if (current < prev) {\n             \
    \   isDecreasing = false;\n            } else if (current > prev) {\n        \
    \        isIncreasing = false;\n            }\n            prev = current;\n \
    \       }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing) {\n            return false;\n        }\n\
    \        if (isDecreasing) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyhw70_of.java:43)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     long first = l.get(0);\n        long last = l.get(l.size() - 1);\n     \
    \   boolean isIncreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n\
    \            long current = l.get(i);\n            if (current < first) {\n  \
    \              isIncreasing = false;\n                break;\n            }\n\
    \            if (current > last) {\n                isIncreasing = true;\n   \
    \             break;\n            }\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdreqs754.java:37)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long last = 0;\n        for(long x : l)\
    \ {\n            if(last < x) {\n                increasing = false;\n       \
    \     }\n            if(last > x) {\n                decreasing = false;\n   \
    \         }\n            last = x;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxbgrhgk.java:35)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        for (long i = 1, j = l.size() - 1; i <= j; i++,\
    \ j--) {\n            long current = l.get(i);\n            if (current < first)\
    \ {\n                increasing = false;\n            } else if (current > last)\
    \ {\n                decreasing = false;\n            } else {\n             \
    \   if (current < last) {\n                    increasing = false;\n         \
    \       } else {\n                    decreasing = false;\n                }\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphviktgxo.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long current = l.get(i);\n                   \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = Long.MIN_VALUE;\n        for (long current : l) {\n           \
    \ if (current < prev) {\n                isMonotonic = false;\n              \
    \  break;\n            }\n            prev = current;\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi81tflnv.java:32)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + ((last - first) / 2);\n \
    \       long mid2 = first + ((last - first) / 2);\n        long mid3 = first +\
    \ ((last - first) / 2);\n        long mid4 = first + ((last - first) / 2);\n \
    \       long mid5 = first + ((last - first) / 2);\n        long mid6 = first +\
    \ ((last - first) / 2);\n        long mid7 = first + ((last - first) / 2);\n \
    \       long mid8 = first + ((last - first) / 2);\n        long mid9 = first +\
    \ ((last - first) / 2);\n        long mid10 = first + ((last - first) / 2);\n\
    \        long mid11 = first + ((last - first) / 2);\n        long mid12 = first\
    \ + ((last - first) / 2);\n        long mid13 = first + ((last - first) / 2);\n\
    \        long mid14 = first + ((last - first) / 2);\n        long mid15 = first\
    \ + ((last - first) / 2);\n        long mid16 = first + ((last - first) / 2);\n\
    \        long mid17 = first + ((last - first) / 2);\n        long mid18 = first\
    \ + ((last - first) / 2);\n        long mid19 = first + ((last - first) / 2);\n\
    \        long mid20 = first + ((last - first) / 2);\n        long mid21 = first\
    \ + ((last - first) / 2);\n        long mid22 = first + ((last - first) / 2);\n\
    \        long mid23 = first + ((last - first) / 2);\n        long mid24 = first\
    \ + ((last - first) / 2);\n        long mid25 = first + ((last - first) / 2);\n\
    \        long mid26 = first + ((last - first) / 2);\n        long mid27 = first\
    \ + ((last - first) / 2);\n        long mid28 = first + ((last - first) / 2);\n\
    \        long mid29 = first + ((last - first) / 2);\n        long mid30 = first\
    \ + ((last - first) / 2);\n        long mid31 = first + ((last - first) / 2);\n\
    \        long mid32 = first + ((last - first) / 2);\n        long mid33 = first\
    \ + ((last - first) / 2);\n        long mid34 = first + ((last - first) / 2);\n\
    \        long mid35 = first + ((last - first) / 2);\n        long mid\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5awdvk6.java:56: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = first + (last - first) / 2;\n        long mid3 = first + (last\
    \ - first) / 2;\n        long mid4 = first + (last - first) / 2;\n        long\
    \ mid5 = first + (last - first) / 2;\n        long mid6 = first + (last - first)\
    \ / 2;\n        long mid7 = first + (last - first) / 2;\n        long mid8 = first\
    \ + (last - first) / 2;\n        long mid9 = first + (last - first) / 2;\n   \
    \     long mid10 = first + (last - first) / 2;\n        long mid11 = first + (last\
    \ - first) / 2;\n        long mid12 = first + (last - first) / 2;\n        long\
    \ mid13 = first + (last - first) / 2;\n        long mid14 = first + (last - first)\
    \ / 2;\n        long mid15 = first + (last - first) / 2;\n        long mid16 =\
    \ first + (last - first) / 2;\n        long mid17 = first + (last - first) / 2;\n\
    \        long mid18 = first + (last - first) / 2;\n        long mid19 = first\
    \ + (last - first) / 2;\n        long mid20 = first + (last - first) / 2;\n  \
    \      long mid21 = first + (last - first) / 2;\n        long mid22 = first +\
    \ (last - first) / 2;\n        long mid23 = first + (last - first) / 2;\n    \
    \    long mid24 = first + (last - first) / 2;\n        long mid25 = first + (last\
    \ - first) / 2;\n        long mid26 = first + (last - first) / 2;\n        long\
    \ mid27 = first + (last - first) / 2;\n        long mid28 = first + (last - first)\
    \ / 2;\n        long mid29 = first + (last - first) / 2;\n        long mid30 =\
    \ first + (last - first) / 2;\n        long mid31 = first + (last - first) / 2;\n\
    \        long mid32 = first + (last - first) / 2;\n        long mid33 = first\
    \ + (last - first) / 2;\n        long mid34 = first + (last - first) / 2;\n  \
    \      long mid35 = first + (last - first) / 2;\n        long mid36 = first +\
    \ (last - first) / 2;\n        long mid37 = first + (last - first) / 2;\n    \
    \    long mid38 = first + (last - first) / 2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpceenkk1_.java:59: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n     \
    \   if (first > last) return true;\n        if (first < last) return false;\n\
    \        Long mid = first + (last - first) / 2;\n        Long mid2 = l.get(l.size()\
    \ - 2);\n        if (mid > mid2) return true;\n        if (mid < mid2) return\
    \ false;\n        return monotonic(l.subList(1, l.size() - 1));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyutrw85w.java:26: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return monotonic(l.subList(1, l.size()\
    \ - 1));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < first) {\n       \
    \         decreasing = false;\n            } else if (current > last) {\n    \
    \            increasing = false;\n            } else {\n                if (current\
    \ < first && current > last) {\n                    decreasing = false;\n    \
    \            } else if (current > first && current < last) {\n               \
    \     increasing = false;\n                }\n            }\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplb9f1pti.java:40)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long lastValue = l.get(l.size() - 1);\n\
    \        long currentValue = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > currentValue) {\n                isIncreasing\
    \ = false;\n            }\n            if (l.get(i) < currentValue) {\n      \
    \          isDecreasing = false;\n            }\n            if (l.get(i) == currentValue)\
    \ {\n                isIncreasing &= l.get(i) > lastValue;\n                isDecreasing\
    \ &= l.get(i) < lastValue;\n            }\n            lastValue = currentValue;\n\
    \            currentValue = l.get(i);\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpualk1hf2.java:42)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = Long.MAX_VALUE;\n       \
    \ long max = Long.MIN_VALUE;\n        for (Long e : l) {\n            if (e <\
    \ min) {\n                min = e;\n            }\n            if (e > max) {\n\
    \                max = e;\n            }\n        }\n        return min <= max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6h99k6w.java:32)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     long first = l.get(0);\n        long last = l.get(l.size() - 1);\n     \
    \   if (first > last) return true;\n        if (first == last) return true;\n\
    \        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = monotonic(l);\n        if (isIncreasing && mid < first || !isIncreasing &&\
    \ mid > last) return true;\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:265)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpecgabibz.java:18)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecgabibz.java:23)\n\
    \tat Problem.monotonic(tmpecgabibz.java:23)\n\tat Problem.monotonic(tmpecga"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long last = null;\n        for (Long current\
    \ : l) {\n            if (current == last) {\n                continue;\n    \
    \        }\n            if (current > last) {\n                increasing = false;\n\
    \            }\n            if (current < last) {\n                decreasing\
    \ = false;\n            }\n            last = current;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because \"<local3>\" is null\n\tat Problem.monotonic(tmpfbn_mrn0.java:24)\n\
    \tat Problem.main(tmpfbn_mrn0.java:35)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        if (first < last) {\n            increasing\
    \ = false;\n        }\n        if (first > last) {\n            decreasing = false;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (!increasing && decreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfix6k5co.java:41)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long current = l.get(i);\n            if (current < prev) {\n        \
    \        isMonotonic = false;\n                break;\n            }\n       \
    \     prev = current;\n        }\n        return isMonotonic;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppay6qnkx.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n      \
    \  if (first > last) return true;\n        Long mid = first + ((last - first)\
    \ / 2);\n        Long mid2 = l.get(l.size() - 2);\n        if (mid > mid2) return\
    \ true;\n        Long mid3 = l.get(l.size() - 3);\n        if (mid > mid3) return\
    \ true;\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55fn7uwp.java:31)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = 0;\n        long current = l.get(0);\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            long next = l.get(i);\n            if (current\
    \ > next) {\n                isMonotonic = false;\n                break;\n  \
    \          }\n            if (current == prev) {\n                isMonotonic\
    \ = false;\n                break;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return isMonotonic;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3oryolul.java:39)\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for(int i = 2; i < l.size(); i++) {\n         \
    \   long next = l.get(i);\n            if(current < next) {\n                isDecreasing\
    \ = false;\n            }\n            else if(current > next) {\n           \
    \     isIncreasing = false;\n            }\n            else if(current == next)\
    \ {\n                isIncreasing &= prev < next;\n                isDecreasing\
    \ &= prev > next;\n            }\n            prev = current;\n            current\
    \ = next;\n        }\n        return isIncreasing || isDecreasing;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk12s5vih.java:46)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = Long.MAX_VALUE;\n       \
    \ long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e <\
    \ min)\n                min = e;\n            if (e > max)\n                max\
    \ = e;\n        }\n        return min <= max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6r2tvws3.java:30)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        for (long\
    \ el : l) {\n            if (el < prev) {\n                return false;\n   \
    \         }\n            prev = el;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4mmefm_.java:30)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        for (long\
    \ x : l)\n            if (prev < x)\n                return false;\n         \
    \   else\n                prev = x;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexd5uzkf.java:26)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = false;\n        if\
    \ (l.size() > 0) {\n            Long first = l.get(0);\n            Long last\
    \ = l.get(l.size() - 1);\n            if (first < last) {\n                for\
    \ (int i = 1; i < l.size(); i++) {\n                    Long current = l.get(i);\n\
    \                    if (current < last) {\n                        result = true;\n\
    \                        break;\n                    }\n                    last\
    \ = current;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxztcj4a.java:37)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long max = Long.MIN_VALUE;\n \
    \       final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih3fc0tk.java:69: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long prev = l.get(0);\n        for (Long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        if (first > last) {\n            return\
    \ false;\n        }\n        long mid = first + (last - first) / 2;\n        long\
    \ mid2 = l.get(l.size() - 2);\n        if (mid > mid2) {\n            return false;\n\
    \        }\n        long mid3 = l.get(l.size() - 3);\n        if (mid > mid3)\
    \ {\n            return false;\n        }\n        long mid4 = l.get(l.size()\
    \ - 4);\n        if (mid > mid4) {\n            return false;\n        }\n   \
    \     long mid5 = l.get(l.size() - 5);\n        if (mid > mid5) {\n          \
    \  return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmoebqxsa.java:42)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        Long current = first;\n        Long next\
    \ = null;\n        for (int i = 1; i < l.size(); i++) {\n            next = l.get(i);\n\
    \            if (current > next) {\n                isIncreasing = false;\n  \
    \          } else if (current < next) {\n                isDecreasing = false;\n\
    \            }\n            current = next;\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        } else if (isIncreasing\
    \ && !isDecreasing) {\n            return true;\n        } else if (!isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = Long.MIN_VALUE;\n       \
    \ long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e <\
    \ min) {\n                min = e;\n            }\n            if (e > max) {\n\
    \                max = e;\n            }\n        }\n        return min <= max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnizxhawp.java:32)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long prev = l.get(0);\n        for (Long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        if (first < last) {\n            increasing\
    \ = false;\n        }\n        if (last < first) {\n            decreasing = false;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (decreasing && !increasing) {\n            return false;\n\
    \        }\n        Long mid = first + ((last - first) / 2);\n        if (mid\
    \ < last) {\n            increasing = false;\n        }\n        if (mid > first)\
    \ {\n            decreasing = false;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing && !decreasing)\
    \ {\n            return false;\n        }\n        if (decreasing && !increasing)\
    \ {\n            return false;\n        }\n        Long mid2 = mid + ((last -\
    \ mid) / 2);\n        if (mid2 < last) {\n            increasing = false;\n  \
    \      }\n        if (mid2 > first) {\n            decreasing = false;\n     \
    \   }\n        if (increasing && decreasing) {\n            return true;\n   \
    \     }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (decreasing && !increasing) {\n            return false;\n\
    \        }\n        Long mid3 = mid + ((last - mid) / 2);\n        if (mid3 <\
    \ last) {\n            increasing = false;\n        }\n        if (mid3 > first)\
    \ {\n            decreasing = false;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing && !decreasing)\
    \ {\n            return false;\n        }\n        if (decreasing && !increasing)\
    \ {\n            return false;\n        }\n        Long mid4 = mid + ((last -\
    \ mid) / 2);\n        if (mid4 < last) {\n            increasing = false;\n  \
    \      }\n        if (mid4 > first) {\n            decreasing = false;\n     \
    \   }\n        if (increasing && decreasing) {\n            return true;\n   \
    \     }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (decreasing && !increasing) {\n            return false;\n\
    \        }\n        Long mid5 = mid + ((last - mid) / 2);\n        if (mid5 <\
    \ last) {\n            increasing = false;\n        }\n        if (mid5 > first)\
    \ {\n            decreasing = false;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing && !decreasing)\
    \ {\n            return false;\n        }\n        if (decreasing && !increasing)\
    \ {\n            return false;\n        }\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0o_eitxw.java:117: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        long next = l.get(2);\n        long diff = next\
    \ - current;\n        boolean isIncreasing = true;\n        if (diff > 0) {\n\
    \            for (int i = 3; i < l.size(); i++) {\n                prev = current;\n\
    \                current = next;\n                next = l.get(i);\n         \
    \       diff = next - current;\n                if (diff > 0) {\n            \
    \        isIncreasing = false;\n                    break;\n                }\n\
    \            }\n        }\n        return isIncreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20f3tag8.java:37)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastElement = l.get(l.size() -\
    \ 1);\n        Long firstElement = l.get(0);\n        Long currentElement = firstElement;\n\
    \        Long nextElement = null;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            nextElement = l.get(i);\n            if (currentElement.compareTo(nextElement)\
    \ > 0) {\n                isIncreasing = false;\n            }\n            if\
    \ (currentElement.compareTo(nextElement) < 0) {\n                isDecreasing\
    \ = false;\n            }\n            currentElement = nextElement;\n       \
    \ }\n        if (isIncreasing && isDecreasing) {\n            return true;\n \
    \       }\n        if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long max = Long.MIN_VALUE;\n        for\
    \ (long e : l) {\n            if (e > max) {\n                increasing = false;\n\
    \                max = e;\n            } else if (e < max) {\n               \
    \ decreasing = false;\n                max = e;\n            }\n        }\n  \
    \      return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2tfmy6a.java:35)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        long next = l.get(2);\n        long diff = next\
    \ - current;\n        boolean isIncreasing = true;\n        if (diff < 0) {\n\
    \            isIncreasing = false;\n            diff = -l;\n        }\n      \
    \  for (int i = 3; i < l.size(); i++) {\n            prev = current;\n       \
    \     current = next;\n            next = l.get(i);\n            diff = next -\
    \ current;\n            if (diff < 0) {\n                isIncreasing = false;\n\
    \                diff = -l;\n            }\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_u1mg51.java:24: error: bad operand type ArrayList<Long> for unary\
    \ operator '-'\n            diff = -l;\n                   ^\n/tmp/tmp4_u1mg51.java:33:\
    \ error: bad operand type ArrayList<Long> for unary operator '-'\n           \
    \     diff = -l;\n                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long curr = l.get(i);\n            if (curr.compareTo(prev) > 0) {\n \
    \               isMonotonic = false;\n                break;\n            }\n\
    \            prev = curr;\n        }\n        return isMonotonic;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesu18hrf.java:30)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        if (first < last) {\n            increasing\
    \ = false;\n        }\n        if (first > last) {\n            decreasing = false;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (!increasing && decreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfix6k5co.java:41)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long lastValue = l.get(0);\n       \
    \ long currentValue = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n\
    \            currentValue = l.get(i);\n            if(currentValue < lastValue)\
    \ {\n                isIncreasing = false;\n            }\n            if(currentValue\
    \ > lastValue) {\n                isDecreasing = false;\n            }\n     \
    \       lastValue = currentValue;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long prev = l.get(0);\n        Long\
    \ current = l.get(1);\n        Long next = l.get(2);\n        Long lastElement\
    \ = l.get(l.size() - 1);\n        Long firstElement = l.get(0);\n        Long\
    \ lastElementPrev = l.get(l.size() - 2);\n        Long firstElementPrev = l.get(0);\n\
    \        Long lastElementNext = l.get(l.size() - 1);\n        Long firstElementNext\
    \ = l.get(0);\n        Long lastElementLast = l.get(l.size() - 1);\n        Long\
    \ firstElementLast = l.get(0);\n        Long lastElementFirst = l.get(0);\n  \
    \      Long lastElementFirstPrev = l.get(0);\n        Long firstElementFirstPrev\
    \ = l.get(0);\n        Long lastElementFirstNext = l.get(0);\n        Long firstElementFirstNext\
    \ = l.get(0);\n        Long lastElementFirstLast = l.get(0);\n        Long firstElementFirstLast\
    \ = l.get(0);\n        Long lastElementFirstFirst = l.get(0);\n        Long lastElementFirstFirstPrev\
    \ = l.get(0);\n        Long firstElementFirstFirstPrev = l.get(0);\n        Long\
    \ lastElementFirstFirstNext = l.get(0);\n        Long firstElementFirstFirstNext\
    \ = l.get(0);\n        Long lastElementFirstFirstLast = l.get(0);\n        Long\
    \ firstElementFirstFirstLast = l.get(0);\n        Long lastElementFirstFirstFirst\
    \ = l.get(0);\n        Long lastElementFirstFirstFirstPrev = l.get(0);\n     \
    \   Long firstElementFirstFirstPrev = l.get(0);\n        Long lastElementFirstFirstNext\
    \ = l.get(0);\n        Long firstElementFirstFirstNext = l.get(0);\n        Long\
    \ lastElementFirstFirstLast = l.get(0);\n        Long firstElementFirstFirstLast\
    \ = l.get(0);\n        Long lastElementFirstFirstFirst = l.get(0);\n        Long\
    \ lastElementFirstFirstFirstPrev = l.get(0);\n        Long firstElementFirstFirstPrev\
    \ = l.get(0);\n        Long lastElementFirstFirstNext = l.get(0);\n        Long\
    \ firstElementFirstFirstNext = l.get(0);\n        Long lastElementFirstFirstLast\
    \ = l.get(0);\n        Long firstElementFirstFirstLast = l.get(0);\n        Long\
    \ lastElementFirstFirstFirst = l.get(0);\n        Long \n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps69qucvn.java:59: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmps69qucvn.java:59: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        Long currentValue = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            Long value = l.get(i);\n            if (value < currentValue)\
    \ {\n                isDecreasing = false;\n            } else if (value > currentValue)\
    \ {\n                isIncreasing = false;\n            } else if (value == currentValue)\
    \ {\n                isIncreasing &= (lastValue < value);\n                isDecreasing\
    \ &= (lastValue > value);\n            }\n            lastValue = currentValue;\n\
    \            currentValue = value;\n        }\n        return isIncreasing ||\
    \ isDecreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99bfbzzd.java:41)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ current = first;\n        Long previous = first;\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            current = l.get(i);\n            if (current\
    \ < previous) {\n                isMonotonic = false;\n                break;\n\
    \            }\n            previous = current;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdgt9kcnj.java:36)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long last = null;\n        Long current\
    \ = null;\n        for (Long e : l) {\n            if (last != null) {\n     \
    \           if (current == null) {\n                    current = e;\n       \
    \             increasing = false;\n                }\n                else if\
    \ (current > e) {\n                    increasing = false;\n                }\n\
    \                else if (current < e) {\n                    decreasing = false;\n\
    \                }\n            }\n            last = e;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnd8c3aj6.java:39)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        Long mid = first + ((last - first) / 2);\n \
    \       Long mid2 = mid + ((last - mid) / 2);\n        Long mid3 = mid + ((last\
    \ - mid2) / 2);\n        Long mid4 = mid + ((last - mid3) / 2);\n        Long\
    \ mid5 = mid + ((last - mid4) / 2);\n        Long mid6 = mid + ((last - mid5)\
    \ / 2);\n        Long mid7 = mid + ((last - mid6) / 2);\n        Long mid8 = mid\
    \ + ((last - mid7) / 2);\n        Long mid9 = mid + ((last - mid8) / 2);\n   \
    \     Long mid10 = mid + ((last - mid9) / 2);\n        Long mid11 = mid + ((last\
    \ - mid10) / 2);\n        Long mid12 = mid + ((last - mid11) / 2);\n        Long\
    \ mid13 = mid + ((last - mid12) / 2);\n        Long mid14 = mid + ((last - mid13)\
    \ / 2);\n        Long mid15 = mid + ((last - mid14) / 2);\n        Long mid16\
    \ = mid + ((last - mid15) / 2);\n        Long mid17 = mid + ((last - mid16) /\
    \ 2);\n        Long mid18 = mid + ((last - mid17) / 2);\n        Long mid19 =\
    \ mid + ((last - mid18) / 2);\n        Long mid20 = mid + ((last - mid19) / 2);\n\
    \        Long mid21 = mid + ((last - mid20) / 2);\n        Long mid22 = mid +\
    \ ((last - mid21) / 2);\n        Long mid23 = mid + ((last - mid22) / 2);\n  \
    \      Long mid24 = mid + ((last - mid23) / 2);\n        Long mid25 = mid + ((last\
    \ - mid24) / 2);\n        Long mid26 = mid + ((last - mid25) / 2);\n        Long\
    \ mid27 = mid + ((last - mid26) / 2);\n        Long mid28 = mid + ((last - mid27)\
    \ / 2);\n        Long mid29 = mid + ((last - mid28) / 2);\n        Long mid30\
    \ = mid + ((last - mid29) / 2);\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wam6cbx.java:51: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmp7wam6cbx.java:51: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        long\
    \ current = Long.MIN_VALUE;\n        for (long e : l) {\n            prev = current;\n\
    \            current = e;\n            if (current < prev) {\n               \
    \ increasing = false;\n            } else if (current > prev) {\n            \
    \    decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4fox4k5.java:36)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long current = l.get(0);\n        long\
    \ previous = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < previous) {\n                isDecreasing = false;\n            } else if\
    \ (current > previous) {\n                isIncreasing = false;\n            }\
    \ else {\n                isIncreasing = isDecreasing = true;\n            }\n\
    \            previous = current;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkxxdzxm.java:21: error: variable current is already defined in\
    \ method monotonic(ArrayList<Long>)\n        for (long current : l) {\n      \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        long\
    \ prev = Long.MIN_VALUE;\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                result = false;\n                break;\n       \
    \     }\n            prev = current;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpia6spnub.java:32)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = Long.MIN_VALUE;\n       \
    \ long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e <\
    \ min) min = e;\n            if (e > max) max = e;\n        }\n        return\
    \ max >= min;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1k6so8xj.java:28)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastElement = l.get(l.size() -\
    \ 1);\n        Long firstElement = l.get(0);\n        Long currentElement = l.get(1);\n\
    \        if (lastElement < firstElement) {\n            isIncreasing = false;\n\
    \        }\n        if (firstElement > currentElement) {\n            isDecreasing\
    \ = false;\n        }\n        if (isIncreasing && isDecreasing) {\n         \
    \   return true;\n        }\n        if (isIncreasing && !isDecreasing) {\n  \
    \          return true;\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqn9ymwdc.java:42)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        boolean isIncreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                isIncreasing = false;\n    \
    \        }\n            if (current > last) {\n                isIncreasing =\
    \ true;\n            }\n        }\n        return isIncreasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu0hn7vtn.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        for (long i = 1, j = 1; i < l.size(); i++, j++)\
    \ {\n            if (l.get(i) < first) {\n                increasing = false;\n\
    \            }\n            if (l.get(j) > last) {\n                decreasing\
    \ = false;\n            }\n        }\n        if (increasing && decreasing) {\n\
    \            return true;\n        }\n        if (increasing && !decreasing) {\n\
    \            return false;\n        }\n        if (!increasing && decreasing)\
    \ {\n            return false;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8v2poo0.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) < first) {\n                    \
    \  ^\n/tmp/tmpu8v2poo0.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(j) > last) {\n                     \
    \ ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        Long curr = l.get(1);\n        Long next = l.get(2);\n\
    \        for (int i = 3; i < l.size(); i++) {\n            if (l.get(i) < prev)\
    \ {\n                isMonotonic = false;\n                break;\n          \
    \  }\n            if (l.get(i) > next) {\n                isMonotonic = false;\n\
    \                break;\n            }\n            prev = curr;\n           \
    \ curr = next;\n            next = l.get(i);\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0b639ba.java:37)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        long\
    \ prev = Long.MIN_VALUE;\n        long current = Long.MIN_VALUE;\n        for\
    \ (long i : l) {\n            if (i == prev) {\n                current = Long.MIN_VALUE;\n\
    \            } else {\n                if (current > prev) {\n               \
    \     result = false;\n                    break;\n                }\n       \
    \         current = i;\n            }\n            prev = i;\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1i5e0ik.java:37)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    long next = l.get(i);\n            if (current < next) {\n              \
    \  isDecreasing = false;\n            } else if (current > next) {\n         \
    \       isIncreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n            if (isIncreasing && isDecreasing)\
    \ {\n                return true;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpep2nw7tl.java:39)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                isMonotonic = false;\n                break;\n  \
    \          }\n            prev = current;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp367597lh.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long first = l.get(0);\n        Long last\
    \ = l.get(l.size() - 1);\n        if (first > last) {\n            increasing\
    \ = false;\n        }\n        if (first < last) {\n            decreasing = false;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing && !decreasing) {\n            return false;\n\
    \        }\n        if (!increasing && decreasing) {\n            return false;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1a5y1xkr.java:39)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        long next = l.get(2);\n        long diff = next\
    \ - current;\n        if (diff > 0) {\n            isIncreasing = false;\n   \
    \     }\n        if (diff < 0) {\n            isDecreasing = false;\n        }\n\
    \        if (isIncreasing && isDecreasing) {\n            return true;\n     \
    \   }\n        if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6hfprxn.java:43)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  long curr = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n            curr = e;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp039ktmiq.java:32)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastValue = l.get(l.size() - 1);\n\
    \        Long currentValue = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            Long nextValue = l.get(i);\n            if (nextValue <\
    \ currentValue) {\n                isDecreasing = false;\n            } else if\
    \ (nextValue > currentValue) {\n                isIncreasing = false;\n      \
    \      } else {\n                isIncreasing = isIncreasing && nextValue > lastValue;\n\
    \                isDecreasing = isDecreasing && nextValue < lastValue;\n     \
    \       }\n            lastValue = nextValue;\n            currentValue = nextValue;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ww87ec2.java:41)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long lastValue = l.get(l.size() - 1);\n\
    \        long currentValue = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > currentValue) {\n                isIncreasing\
    \ = false;\n            }\n            if (l.get(i) < currentValue) {\n      \
    \          isDecreasing = false;\n            }\n            if (l.get(i) == currentValue)\
    \ {\n                isIncreasing &= (l.get(i) > lastValue);\n               \
    \ isDecreasing &= (l.get(i) < lastValue);\n            }\n            lastValue\
    \ = currentValue;\n            currentValue = l.get(i);\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad3ghfrb.java:42)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long current = null;\n        Long previous\
    \ = null;\n        for (Long current : l) {\n            if (current == null)\
    \ {\n                throw new IllegalArgumentException(\"Null element not allowed\"\
    );\n            }\n            if (current > previous) {\n                decreasing\
    \ = false;\n            } else if (current < previous) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            previous = current;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17o2bahy.java:21: error: variable current is already defined in\
    \ method monotonic(ArrayList<Long>)\n        for (Long current : l) {\n      \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long lastValue = Long.MIN_VALUE;\n     \
    \   long currentValue = Long.MIN_VALUE;\n        for (long value : l) {\n    \
    \        if (value < currentValue) {\n                decreasing = false;\n  \
    \          }\n            if (value > currentValue) {\n                increasing\
    \ = false;\n            }\n            if (value == currentValue) {\n        \
    \        lastValue = value;\n            }\n            currentValue = value;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing && !decreasing) {\n            return true;\n\
    \        }\n        if (decreasing && !increasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnejz520v.java:48)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastElement = l.get(l.size() -\
    \ 1);\n        for (Long element : l) {\n            if (element > lastElement)\
    \ {\n                isIncreasing = false;\n            }\n            if (element\
    \ < lastElement) {\n                isDecreasing = false;\n            }\n   \
    \         lastElement = element;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ofqgg94.java:32)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        long\
    \ curr = l.get(1);\n        boolean isIncreasing = true;\n        for (int i =\
    \ 2; i < l.size(); i++) {\n            long next = l.get(i);\n            if (next\
    \ < prev) {\n                isIncreasing = false;\n            }\n          \
    \  prev = curr;\n            curr = next;\n        }\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2cajb6x.java:34)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        Long mid = first + (last - first) / 2;\n\
    \        Long mid2 = mid + (last - mid) / 2;\n        Long mid3 = mid2 + (last\
    \ - mid2) / 2;\n        Long mid4 = mid3 + (last - mid3) / 2;\n        Long mid5\
    \ = mid4 + (last - mid4) / 2;\n        Long mid6 = mid5 + (last - mid5) / 2;\n\
    \        Long mid7 = mid6 + (last - mid6) / 2;\n        Long mid8 = mid7 + (last\
    \ - mid7) / 2;\n        Long mid9 = mid8 + (last - mid8) / 2;\n        Long mid10\
    \ = mid9 + (last - mid9) / 2;\n        Long mid11 = mid10 + (last - mid10) / 2;\n\
    \        Long mid12 = mid11 + (last - mid11) / 2;\n        Long mid13 = mid12\
    \ + (last - mid12) / 2;\n        Long mid14 = mid13 + (last - mid13) / 2;\n  \
    \      Long mid15 = mid14 + (last - mid14) / 2;\n        Long mid16 = mid15 +\
    \ (last - mid15) / 2;\n        Long mid17 = mid16 + (last - mid16) / 2;\n    \
    \    Long mid18 = mid17 + (last - mid17) / 2;\n        Long mid19 = mid18 + (last\
    \ - mid18) / 2;\n        Long mid20 = mid19 + (last - mid19) / 2;\n        Long\
    \ mid21 = mid20 + (last - mid20) / 2;\n        Long mid22 = mid21 + (last - mid21)\
    \ / 2;\n        Long mid23 = mid22 + (last - mid22) / 2;\n        Long mid24 =\
    \ mid23 + (last - mid23) / 2;\n        Long mid25 = mid24 + (last - mid24) / 2;\n\
    \        Long mid26 = mid25 + (last - mid25) / 2;\n        Long mid27 = mid26\
    \ + (last - mid26) / 2;\n        Long mid28 = mid27 + (last - mid27) / 2;\n  \
    \      Long mid29 = mid28 + (last - mid28) / 2;\n        Long mid30 = mid29 +\
    \ (last - mid29) / 2;\n        Long mid31 = mid30 + (last - mid30\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3_klrpi.java:51: error: ')' expected\n        Long mid31 = mid30\
    \ + (last - mid30\n                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long first = l.get(0);\n        long last = l.get(l.size() - 1);\n        long\
    \ mid = first + (last - first) / 2;\n        boolean isIncreasing = true;\n  \
    \      boolean isDecreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long current = l.get(i);\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isMonotonic = isMonotonic && isIncreasing && isDecreasing;\n           \
    \ }\n        }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaass505u.java:38)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        Long current = l.get(1);\n        Long next\
    \ = l.get(2);\n        for (int i = 3; i < l.size(); i++) {\n            Long\
    \ curr = l.get(i);\n            if (curr.compareTo(prev) > 0) {\n            \
    \    isMonotonic = false;\n                break;\n            }\n           \
    \ if (curr.compareTo(next) < 0) {\n                isMonotonic = false;\n    \
    \            break;\n            }\n            prev = current;\n            current\
    \ = next;\n            next = curr;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkv3ngbq2.java:38)\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n   \
    \     long mid2 = first + (last - first) / 2;\n        long mid3 = first + (last\
    \ - first) / 2;\n        long mid4 = first + (last - first) / 2;\n        long\
    \ mid5 = first + (last - first) / 2;\n        long mid6 = first + (last - first)\
    \ / 2;\n        long mid7 = first + (last - first) / 2;\n        long mid8 = first\
    \ + (last - first) / 2;\n        long mid9 = first + (last - first) / 2;\n   \
    \     long mid10 = first + (last - first) / 2;\n        long mid11 = first + (last\
    \ - first) / 2;\n        long mid12 = first + (last - first) / 2;\n        long\
    \ mid13 = first + (last - first) / 2;\n        long mid14 = first + (last - first)\
    \ / 2;\n        long mid15 = first + (last - first) / 2;\n        long mid16 =\
    \ first + (last - first) / 2;\n        long mid17 = first + (last - first) / 2;\n\
    \        long mid18 = first + (last - first) / 2;\n        long mid19 = first\
    \ + (last - first) / 2;\n        long mid20 = first + (last - first) / 2;\n  \
    \      long mid21 = first + (last - first) / 2;\n        long mid22 = first +\
    \ (last - first) / 2;\n        long mid23 = first + (last - first) / 2;\n    \
    \    long mid24 = first + (last - first) / 2;\n        long mid25 = first + (last\
    \ - first) / 2;\n        long mid26 = first + (last - first) / 2;\n        long\
    \ mid27 = first + (last - first) / 2;\n        long mid28 = first + (last - first)\
    \ / 2;\n        long mid29 = first + (last - first) / 2;\n        long mid30 =\
    \ first + (last - first) / 2;\n        long mid31 = first + (last - first) / 2;\n\
    \        long mid32 = first + (last - first) / 2;\n        long mid33 = first\
    \ + (last - first) / 2;\n        long mid34 = first + (last - first) / 2;\n  \
    \      long mid35 = first + (last - first) / 2;\n        long mid36 = first +\
    \ (last - first) / 2;\n        long mid37 = first + (last - first) / 2;\n    \
    \    long mid38 = first + (last - first) / 2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpceenkk1_.java:59: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        long next\
    \ = l.get(2);\n        long prevNext = l.get(3);\n        long prevNextNext =\
    \ l.get(4);\n        long prevNextNextNext = l.get(5);\n        long prevNextNextNextNext\
    \ = l.get(6);\n        long prevNextNextNextNextNext = l.get(7);\n        long\
    \ prevNextNextNextNextNextNext = l.get(8);\n        long prevNextNextNextNextNextNextNext\
    \ = l.get(9);\n        long prevNextNextNextNextNextNextNextNext = l.get(10);\n\
    \        long prevNextNextNextNextNextNextNextNextNext = l.get(11);\n        long\
    \ prevNextNextNextNextNextNextNextNextNextNext = l.get(12);\n        long prevNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(13);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(14);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(15);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(16);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(17);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(18);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(19);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(20);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(21);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(22);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(23);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(24);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(25);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(26);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(27);\n        long prevNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = l.get(28);\n        long prevNext\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6257wx7b.java:47: error: ';' expected\n        long prevNext\n\
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long lastElement = l.get(l.size() -\
    \ 1);\n        Long firstElement = l.get(0);\n        Long currentElement = firstElement;\n\
    \        Long nextElement = firstElement;\n        Long previousElement = firstElement;\n\
    \        for (int i = 0; i < l.size(); i++) {\n            currentElement = l.get(i);\n\
    \            nextElement = l.get(i + 1);\n            previousElement = l.get(i\
    \ - 1);\n            if (currentElement.compareTo(nextElement) > 0) {\n      \
    \          isIncreasing = false;\n            }\n            if (currentElement.compareTo(previousElement)\
    \ < 0) {\n                isDecreasing = false;\n            }\n        }\n  \
    \      if (isIncreasing && isDecreasing) {\n            return true;\n       \
    \ }\n        if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpisbezi4d.java:27)\n\tat Problem.main(tmpisbezi4d.java:47)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long curr = l.get(i);\n            if (curr.compareTo(prev) > 0) {\n       \
    \         result = false;\n                break;\n            }\n           \
    \ prev = curr;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppuachz6z.java:30)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long max = Long.MIN_VALUE;\n \
    \       final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih3fc0tk.java:69: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        long\
    \ curr = l.get(1);\n        long next = l.get(2);\n        long diff = curr -\
    \ prev;\n        if (diff > 0) {\n            while (curr < next) {\n        \
    \        prev = curr;\n                curr += diff;\n                next = l.get(3);\n\
    \                diff = curr - prev;\n            }\n            return true;\n\
    \        } else {\n            while (curr > next) {\n                prev = curr;\n\
    \                curr -= diff;\n                next = l.get(3);\n           \
    \     diff = curr - prev;\n            }\n            return true;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4w9xbz09.java:42)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        Long\
    \ mid = l.get(l.size() / 2);\n        Long mid2 = l.get(l.size() / 2);\n     \
    \   Long mid3 = l.get(l.size() / 2);\n        Long mid4 = l.get(l.size() / 2);\n\
    \        Long mid5 = l.get(l.size() / 2);\n        Long mid6 = l.get(l.size()\
    \ / 2);\n        Long mid7 = l.get(l.size() / 2);\n        Long mid8 = l.get(l.size()\
    \ / 2);\n        Long mid9 = l.get(l.size() / 2);\n        Long mid10 = l.get(l.size()\
    \ / 2);\n        Long mid11 = l.get(l.size() / 2);\n        Long mid12 = l.get(l.size()\
    \ / 2);\n        Long mid13 = l.get(l.size() / 2);\n        Long mid14 = l.get(l.size()\
    \ / 2);\n        Long mid15 = l.get(l.size() / 2);\n        Long mid16 = l.get(l.size()\
    \ / 2);\n        Long mid17 = l.get(l.size() / 2);\n        Long mid18 = l.get(l.size()\
    \ / 2);\n        Long mid19 = l.get(l.size() / 2);\n        Long mid20 = l.get(l.size()\
    \ / 2);\n        Long mid21 = l.get(l.size() / 2);\n        Long mid22 = l.get(l.size()\
    \ / 2);\n        Long mid23 = l.get(l.size() / 2);\n        Long mid24 = l.get(l.size()\
    \ / 2);\n        Long mid25 = l.get(l.size() / 2);\n        Long mid26 = l.get(l.size()\
    \ / 2);\n        Long mid27 = l.get(l.size() / 2);\n        Long mid28 = l.get(l.size()\
    \ / 2);\n        Long mid29 = l.get(l.size() / 2);\n        Long mid30 = l.get(l.size()\
    \ / 2);\n        Long mid31 = l.get(l.size() / 2);\n        Long mid32 = l.get(l.size()\
    \ / 2);\n        Long mid33 = l.get(l.size() / 2);\n        Long mid34 = l.get(l.size()\
    \ / 2);\n        Long mid35 = l.get(l.size() / 2);\n        Long mid36 = l.get(l.size()\
    \ / 2);\n        Long mid37 = l.get(l.size() / 2);\n        Long mid38 = l.get(l.size()\
    \ / 2);\n        Long \n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrijvm4i.java:58: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmpwrijvm4i.java:58: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        long\
    \ max = Long.MIN_VALUE;\n        for (Long i : l) {\n            if (i < max)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            max = i;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1wvm9z2.java:32)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = null;\n        for (long current\
    \ : l) {\n            if (prev == null) {\n                increasing = false;\n\
    \                decreasing = true;\n            } else if (current < prev) {\n\
    \                increasing = false;\n                decreasing = false;\n  \
    \          } else if (current > prev) {\n                increasing = true;\n\
    \                decreasing = false;\n            } else {\n                increasing\
    \ = true;\n                decreasing = true;\n            }\n            prev\
    \ = current;\n        }\n        return increasing || decreasing;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19eoqrnb.java:19: error: incompatible types: <null> cannot be converted\
    \ to long\n        long prev = null;\n                    ^\n/tmp/tmp19eoqrnb.java:21:\
    \ error: bad operand types for binary operator '=='\n            if (prev == null)\
    \ {\n                     ^\n  first type:  long\n  second type: <null>\n2 errors\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long curr = l.get(i);\n            if (curr.compareTo(prev) > 0) {\n \
    \               isMonotonic = false;\n                break;\n            }\n\
    \            prev = curr;\n        }\n        return isMonotonic;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesu18hrf.java:30)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        Long current = first;\n        Long nextCurrent\
    \ = first;\n        Long nextLast = last;\n        Long nextNextCurrent = first;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            current = l.get(i);\n\
    \            nextCurrent = l.get(i + 1);\n            nextLast = l.get(i - 1);\n\
    \            nextNextCurrent = l.get(i + 2);\n            if (current > nextCurrent)\
    \ {\n                isIncreasing = false;\n            }\n            if (current\
    \ < nextCurrent) {\n                isDecreasing = false;\n            }\n   \
    \         if (current < nextLast) {\n                isIncreasing = false;\n \
    \           }\n            if (current > nextLast) {\n                isDecreasing\
    \ = false;\n            }\n            if (current < nextNextCurrent) {\n    \
    \            isIncreasing = false;\n            }\n            if (current > nextNextCurrent)\
    \ {\n                isDecreasing = false;\n            }\n        }\n       \
    \ return isIncreasing || isDecreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmp6_vi3l2j.java:29)\n\tat Problem.main(tmp6_vi3l2j.java:52)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long lastVal = l.get(0);\n        Long lastValPrev = null;\n        Long currentVal\
    \ = l.get(0);\n        Long currentValPrev = null;\n        Long nextVal = l.get(0);\n\
    \        Long nextValPrev = null;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            currentVal = l.get(i);\n            currentValPrev = lastValPrev;\n\
    \            lastValPrev = lastVal;\n            lastVal = currentVal;\n     \
    \       if (currentVal.compareTo(lastVal) > 0) {\n                isMonotonic\
    \ = false;\n            }\n            if (currentVal.compareTo(nextVal) < 0)\
    \ {\n                isMonotonic = false;\n            }\n            nextVal\
    \ = l.get(i);\n            nextValPrev = lastValPrev;\n            lastValPrev\
    \ = lastVal;\n            lastVal = nextVal;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0nfa8alc.java:46)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long first = l.get(0);\n     \
    \   final long last = l.get(l.size() - 1);\n        final long mid = first + (last\
    \ - first) / 2;\n        final long mid2 = mid + (mid - first) / 2;\n        final\
    \ long mid3 = mid2 + (mid2 - first) / 2;\n        final long mid4 = mid3 + (mid3\
    \ - first) / 2;\n        final long mid5 = mid4 + (mid4 - first) / 2;\n      \
    \  final long mid6 = mid5 + (mid5 - first) / 2;\n        final long mid7 = mid6\
    \ + (mid6 - first) / 2;\n        final long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        final long mid9 = mid8 + (mid8 - first) / 2;\n        final long mid10\
    \ = mid9 + (mid9 - first) / 2;\n        final long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        final long mid12 = mid11 + (mid11 - first) / 2;\n        final\
    \ long mid13 = mid12 + (mid12 - first) / 2;\n        final long mid14 = mid13\
    \ + (mid13 - first) / 2;\n        final long mid15 = mid14 + (mid14 - first) /\
    \ 2;\n        final long mid16 = mid15 + (mid15 - first) / 2;\n        final long\
    \ mid17 = mid16 + (mid16 - first) / 2;\n        final long mid18 = mid17 + (mid17\
    \ - first) / 2;\n        final long mid19 = mid18 + (mid18 - first) / 2;\n   \
    \     final long mid20 = mid19 + (mid19 - first) / 2;\n        final long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        final long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        final long mid23 = mid22 + (mid22 - first) / 2;\n     \
    \   final long mid24 = mid23 + (mid23 - first) / 2;\n        final long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        final long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        final long mid27 = mid26 + (mid26 - first) / 2;\n     \
    \   final long mid28 = mid27 + (mid27 - first) / 2;\n        final long mid29\
    \ = mid28 + (mid28 - first) / 2;\n        final long mid30 = mid29 + (mid29 -\
    \ first) / 2;\n        final long mid31 = mid30 + (mid30 - first) / 2;\n     \
    \   final long mid32 = mid31 + (mid31 - first) / 2;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptfctkaiw.java:51: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    long first = l.get(0);\n        long last = l.get(l.size() - 1);\n      \
    \  if (first > last) return true;\n        if (first < last) return false;\n \
    \       long mid = first + (last - first) / 2;\n        boolean isIncreasing =\
    \ monotonic(l);\n        if (isIncreasing && mid < first && mid > last) return\
    \ true;\n        if (!isIncreasing && mid > first && mid < last) return true;\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxkxshgx3.java:29)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final int size = l.size();\n       \
    \ if (size == 0) return true;\n        final long first = l.get(0);\n        final\
    \ long last = l.get(size - 1);\n        final long mid = first + (last - first)\
    \ / 2;\n        final long mid2 = mid + (mid - first) / 2;\n        final long\
    \ mid3 = mid2 + (mid2 - first) / 2;\n        final long mid4 = mid3 + (mid3 -\
    \ first) / 2;\n        final long mid5 = mid4 + (mid4 - first) / 2;\n        final\
    \ long mid6 = mid5 + (mid5 - first) / 2;\n        final long mid7 = mid6 + (mid6\
    \ - first) / 2;\n        final long mid8 = mid7 + (mid7 - first) / 2;\n      \
    \  final long mid9 = mid8 + (mid8 - first) / 2;\n        final long mid10 = mid9\
    \ + (mid9 - first) / 2;\n        final long mid11 = mid10 + (mid10 - first) /\
    \ 2;\n        final long mid12 = mid11 + (mid11 - first) / 2;\n        final long\
    \ mid13 = mid12 + (mid12 - first) / 2;\n        final long mid14 = mid13 + (mid13\
    \ - first) / 2;\n        final long mid15 = mid14 + (mid14 - first) / 2;\n   \
    \     final long mid16 = mid15 + (mid15 - first) / 2;\n        final long mid17\
    \ = mid16 + (mid16 - first) / 2;\n        final long mid18 = mid17 + (mid17 -\
    \ first) / 2;\n        final long mid19 = mid18 + (mid18 - first) / 2;\n     \
    \   final long mid20 = mid19 + (mid19 - first) / 2;\n        final long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        final long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        final long mid23 = mid22 + (mid22 - first) / 2;\n     \
    \   final long mid24 = mid23 + (mid23 - first) / 2;\n        final long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        final long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        final long mid27 = mid26 + (mid26 - first) / 2;\n     \
    \   final long mid28 = mid27 + (mid27 - first) / 2;\n        final long mid29\
    \ = mid28 + (mid28 - first) / 2;\n        final long mid30 = mid29 + (mid29 -\
    \ first) / 2;\n        final long mid31 = mid30 + (mid30 - first) / 2;\n     \
    \   final long \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8cuzgnn.java:52: error: <identifier> expected\n        final long\
    \ \n                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659799631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long last = null;\n        Long current = null;\n        for (Long l : l) {\n\
    \            if (current == null) {\n                current = l;\n          \
    \      last = l;\n            } else if (current > l) {\n                isMonotonic\
    \ = false;\n                break;\n            } else if (current < l) {\n  \
    \              last = current;\n                current = l;\n            }\n\
    \        }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp18sj8dt2.java:20: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        for (Long l : l) {\n                  ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = Long.MIN_VALUE;\n        for (long current : l) {\n           \
    \ if (current < prev) {\n                isMonotonic = false;\n              \
    \  break;\n            }\n            prev = current;\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi81tflnv.java:32)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return false;\n  \
    \      Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n    \
    \    if (first > last) return true;\n        if (first == last) return true;\n\
    \        Long mid = first + (last - first) / 2;\n        if (mid > last) return\
    \ true;\n        if (mid < first) return true;\n        return monotonic(l.subList(1,\
    \ l.size() - 1));\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimsowq06.java:25: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return monotonic(l.subList(1, l.size()\
    \ - 1));\n                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long previous = null;\n        for (Long\
    \ current : l) {\n            if (current == null) {\n                isDecreasing\
    \ = false;\n            } else if (current == previous) {\n                isIncreasing\
    \ = false;\n            } else {\n                isIncreasing = true;\n     \
    \           isDecreasing = true;\n            }\n            previous = current;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42kwv29x.java:36)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        if (first\
    \ < last) {\n            Long mid = first + (last - first) / 2;\n            for\
    \ (int i = 1; i < l.size(); i++) {\n                if (l.get(i) < mid) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8bie0rdq.java:32)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long curr = l.get(i);\n            if (curr.compareTo(prev) > 0) {\n \
    \               isMonotonic = false;\n            }\n            prev = curr;\n\
    \        }\n        return isMonotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccc2diep.java:29)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = Long.MIN_VALUE;\n       \
    \ long min = Long.MAX_VALUE;\n        for (long e : l) {\n            max = Math.max(max,\
    \ e);\n            min = Math.min(min, e);\n        }\n        return max >= min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbkp4vvb.java:28)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        boolean increasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                increasing = false;\n      \
    \      } else if (current > last) {\n                increasing = true;\n    \
    \        } else {\n                increasing = increasing && current > last;\n\
    \            }\n            last = current;\n        }\n        return increasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl1m5z4x9.java:36)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    long first = l.get(0);\n        long last = l.get(l.size() - 1);\n      \
    \  if (first > last) return true;\n        if (first == last) return true;\n \
    \       long mid = first + (last - first) / 2;\n        if (mid > last) return\
    \ true;\n        if (mid < first) return true;\n        if (mid == first) return\
    \ true;\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > mid)\
    \ {\n                decreasing = false;\n                break;\n           \
    \ }\n            if (l.get(i) < mid) {\n                increasing = false;\n\
    \                break;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdo8dqtyc.java:43)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long current = first;\n        long nextCurrent\
    \ = first;\n        long nextLast = last;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            current = l.get(i);\n            nextCurrent = l.get(i +\
    \ 1);\n            nextLast = l.get(i - 1);\n            if (current < nextCurrent)\
    \ {\n                isIncreasing = false;\n            }\n            if (current\
    \ > nextCurrent) {\n                isDecreasing = false;\n            }\n   \
    \     }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if (isDecreasing && !isIncreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpgws7ds9e.java:26)\n\tat Problem.main(tmpgws7ds9e.java:47)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long first = l.get(0);\n     \
    \   final long last = l.get(l.size() - 1);\n        final long mid = first + (last\
    \ - first) / 2;\n        final long mid2 = mid - 1;\n        final long mid3 =\
    \ mid + 1;\n        final long mid4 = mid + 2;\n        final long mid5 = mid\
    \ + 3;\n        final long mid6 = mid + 4;\n        final long mid7 = mid + 5;\n\
    \        final long mid8 = mid + 6;\n        final long mid9 = mid + 7;\n    \
    \    final long mid10 = mid + 8;\n        final long mid11 = mid + 9;\n      \
    \  final long mid12 = mid + 10;\n        final long mid13 = mid + 11;\n      \
    \  final long mid14 = mid + 12;\n        final long mid15 = mid + 13;\n      \
    \  final long mid16 = mid + 14;\n        final long mid17 = mid + 15;\n      \
    \  final long mid18 = mid + 16;\n        final long mid19 = mid + 17;\n      \
    \  final long mid20 = mid + 18;\n        final long mid21 = mid + 19;\n      \
    \  final long mid22 = mid + 20;\n        final long mid23 = mid + 21;\n      \
    \  final long mid24 = mid + 22;\n        final long mid25 = mid + 23;\n      \
    \  final long mid26 = mid + 24;\n        final long mid27 = mid + 25;\n      \
    \  final long mid28 = mid + 26;\n        final long mid29 = mid + 27;\n      \
    \  final long mid30 = mid + 28;\n        final long mid31 = mid + 29;\n      \
    \  final long mid32 = mid + 30;\n        final long mid33 = mid + 31;\n      \
    \  final long mid34 = mid + 32;\n        final long mid35 = mid + 33;\n      \
    \  final long mid36 = mid + 34;\n        final long mid37 = mid + 35;\n      \
    \  final long mid38 = mid + 36;\n        final long mid39 = mid + 37;\n      \
    \  final long mid40 = mid + 38;\n        final long mid41 = mid + 39;\n      \
    \  final long mid42 = mid + 40;\n        final long mid43 = mid + 41;\n      \
    \  final long mid44 = mid + 42;\n        final long mid45 = mid + 43;\n      \
    \  final long mid46 = mid + 44;\n        final long mid47 = mid + 45;\n      \
    \  final long mid48 = mid + 46;\n        final long mid49 = mid + 47;\n      \
    \  final long mid50 = mid + 48;\n        final long \n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplukrdh32.java:69: error: <identifier> expected\n        final long\
    \ \n                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        if (first < last) {\n            boolean\
    \ increasing = true;\n            for (int i = 1; i < l.size(); i++) {\n     \
    \           if (l.get(i) > l.get(i-1)) {\n                    increasing = false;\n\
    \                    break;\n                }\n            }\n            return\
    \ increasing;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqw_7vsju.java:32)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Long previous = null;\n        for (Long\
    \ current : l) {\n            if (current < previous) {\n                isIncreasing\
    \ = false;\n            }\n            if (current > previous) {\n           \
    \     isDecreasing = false;\n            }\n            previous = current;\n\
    \        }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because \"<local3>\" is null\n\tat Problem.monotonic(tmp8dl9owux.java:21)\n\
    \tat Problem.main(tmp8dl9owux.java:41)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ Long current = l.get(i);\n            if (current < prev) {\n              \
    \  result = false;\n                break;\n            }\n            prev =\
    \ current;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqb277wbb.java:33)\n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        long next = l.get(2);\n        long diff = next\
    \ - current;\n        if (diff > 0) {\n            isIncreasing = false;\n   \
    \     } else if (diff < 0) {\n            isDecreasing = false;\n        }\n \
    \       if (prev < current) {\n            isIncreasing = false;\n        } else\
    \ if (prev > current) {\n            isDecreasing = false;\n        }\n      \
    \  return isIncreasing || isDecreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbiucnupl.java:41)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        Long\
    \ first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        if (first\
    \ > last) {\n            l.add(0, first);\n            l.add(l.size(), last);\n\
    \            result = true;\n        } else {\n            l.add(l.size(), first);\n\
    \            result = false;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nylbqb8.java:31)\n"
  stdout: ''
  timestamp: 1659799632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long first = l.get(0);\n     \
    \   final long last = l.get(l.size() - 1);\n        final long mid = first + (last\
    \ - first) / 2;\n        final long middle = l.get(mid);\n        final long middle2\
    \ = l.get(mid + 1);\n        final long middle3 = l.get(mid + 2);\n        final\
    \ long middle4 = l.get(mid + 3);\n        final long middle5 = l.get(mid + 4);\n\
    \        final long middle6 = l.get(mid + 5);\n        final long middle7 = l.get(mid\
    \ + 6);\n        final long middle8 = l.get(mid + 7);\n        final long middle9\
    \ = l.get(mid + 8);\n        final long middle10 = l.get(mid + 9);\n        final\
    \ long middle11 = l.get(mid + 10);\n        final long middle12 = l.get(mid +\
    \ 11);\n        final long middle13 = l.get(mid + 12);\n        final long middle14\
    \ = l.get(mid + 13);\n        final long middle15 = l.get(mid + 14);\n       \
    \ final long middle16 = l.get(mid + 15);\n        final long middle17 = l.get(mid\
    \ + 16);\n        final long middle18 = l.get(mid + 17);\n        final long middle19\
    \ = l.get(mid + 18);\n        final long middle20 = l.get(mid + 19);\n       \
    \ final long middle21 = l.get(mid + 20);\n        final long middle22 = l.get(mid\
    \ + 21);\n        final long middle23 = l.get(mid + 22);\n        final long middle24\
    \ = l.get(mid + 23);\n        final long middle25 = l.get(mid + 24);\n       \
    \ final long middle26 = l.get(mid + 25);\n        final long middle27 = l.get(mid\
    \ + 26);\n        final long middle28 = l.get(mid + 27);\n        final long middle29\
    \ = l.get(mid + 28);\n        final long middle30 = l.get(mid + 29);\n       \
    \ final long middle31 = l.get(mid + 30);\n        final long middle32 = l.get(mid\
    \ + 31);\n        final long middle33 = l.get(mid + 32);\n        final long middle34\
    \ = l.get(mid + 33);\n        final long middle35 = l.get(mid + 34);\n       \
    \ final long middle36 = l.get(mid + 35);\n        final long middle37 = l.get(mid\
    \ + 36);\n        final long middle38 = l.get(mid + 37);\n        final long middle39\
    \ = l.get(mid + 38);\n        final long middle40 = \n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26ge7mef.java:60: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659799632
