language: java
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n\
    \        long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long one\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wvau8iz.java:108: error: ';' expected\n        long one\n    \
    \            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb24dmbza.java:90: error: ';' expected\n        long onethth\n \
    \                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundredThousands = 0;\n\
    \        long oneThousandThousands = 0;\n        long oneHundredThousandThousands\
    \ = 0;\n        long oneThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousands = 0;\n     \
    \   long oneHundredThousandThousandThousandThousandThousands = 0;\n        long\
    \ oneThousandThousandThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneTh\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxij6cnqj.java:47: error: ';' expected\n        long oneTh\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \      }\n        if (ones < zeros) {\n            Collections.sort(arr);\n  \
    \          for (Long l : arr) {\n                if (l == 1l) ones++;\n      \
    \          else if (l == 0l) zeros++;\n            }\n        }\n        if (ones\
    \ == zeros) {\n            Collections.sort(arr);\n            for (Long l : arr)\
    \ {\n                if (l == 1l) ones++;\n                else if (l == 0l) zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            else if (l == 0l) zeros--;\n            }\n        }\n        if\
    \ (ones == zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                else if (l\
    \ == 0l) zeros--;\n            }\n        }\n        if (ones < zeros) {\n   \
    \         Collections.sort(arr);\n            for (Long l : arr) {\n         \
    \       if (l == 1l) ones--;\n                else if (l == 0l) zeros--;\n   \
    \         }\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            else if (l == 0l) zeros--;\n            }\n        }\n        if\
    \ (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones++;\n                else if (l\
    \ == 0l) zeros++;\n            }\n        }\n        if (ones == zeros) {\n  \
    \          Collections.sort(arr);\n            for (Long l : arr) {\n        \
    \        if (l == 1l) ones++;\n                else if (l == 0l) zeros++;\n  \
    \          }\n        }\n        if (ones < zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        if\
    \ (ones == zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones++;\n                else if (l\
    \ == 0l) zeros++;\n            }\n        }\n        if (ones > zeros) {\n   \
    \         Collections.sort(arr);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtbuvhkx.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpbtbuvhkx.java:101: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpbtbuvhkx.java:101: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpbtbuvhkx.java:101: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpbtbuvhkx.java:101: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpbtbuvhkx.java:112: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            total += l;\n            if (l == 1l)\n                ones++;\n\
    \            else if (l == 10l)\n                tens++;\n            else if\
    \ (l == 100l)\n                hundreds++;\n            else if (l == 1000l)\n\
    \                thousands++;\n        }\n        long onesTotal = ones * total;\n\
    \        long tensTotal = tens * total;\n        long hundredsTotal = hundreds\
    \ * total;\n        long thousandsTotal = thousands * total;\n        long totalTotal\
    \ = onesTotal + tensTotal + hundredsTotal + thousandsTotal;\n        long onesTotal2\
    \ = onesTotal * onesTotal;\n        long tensTotal2 = tensTotal * tensTotal;\n\
    \        long hundredsTotal2 = hundredsTotal * hundredsTotal;\n        long thousandsTotal2\
    \ = thousandsTotal * thousandsTotal;\n        long totalTotal2 = onesTotal2 +\
    \ tensTotal2 + hundredsTotal2 + thousandsTotal2;\n        long onesTotal3 = onesTotal2\
    \ * onesTotal;\n        long tensTotal3 = tensTotal2 * tensTotal;\n        long\
    \ hundredsTotal3 = hundredsTotal2 * hundredsTotal;\n        long thousandsTotal3\
    \ = thousandsTotal2 * thousandsTotal;\n        long totalTotal3 = onesTotal3 +\
    \ tensTotal3 + hundredsTotal3 + thousandsTotal3;\n        long onesTotal4 = onesTotal3\
    \ * onesTotal;\n        long tensTotal4 = tensTotal3 * tensTotal;\n        long\
    \ hundredsTotal4 = hundredsTotal3 * hundredsTotal;\n        long thousandsTotal4\
    \ = thousandsTotal3 * thousandsTotal;\n        long totalTotal4 = onesTotal4 +\
    \ tensTotal4 + hundredsTotal4 + thousandsTotal4;\n        long onesTotal5 = onesTotal4\
    \ * onesTotal;\n        long tensTotal5 = tensTotal4 * tensTotal;\n        long\
    \ hundredsTotal5 = hundredsTotal4 * hundredsTotal;\n        long thousandsTotal5\
    \ = thousandsTotal4 * thousandsTotal;\n        long total\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ba7ltmj.java:61: error: ';' expected\n        long total\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                result.add(num);\n            }\n        }\n \
    \       long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long num : arr) {\n   \
    \         if (num == 1) {\n                onesCount++;\n            } else if\
    \ (num == 10) {\n                tensCount++;\n            } else if (num == 100)\
    \ {\n                hundredsCount++;\n            } else if (num == 1000) {\n\
    \                thousandsCount++;\n            } else {\n                result.add(num);\n\
    \            }\n        }\n        long onesCount2 = onesCount * ones;\n     \
    \   long tensCount2 = tensCount * tens;\n        long hundredsCount2 = hundredsCount\
    \ * hundreds;\n        long thousandsCount2 = thousandsCount * thousands;\n  \
    \      long onesCount3 = onesCount2 * ones;\n        long tensCount3 = tensCount2\
    \ * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n        long\
    \ thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3\
    \ * ones;\n        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4\
    \ = hundredsCount3 * hundreds;\n        long thousandsCount4 = thousandsCount3\
    \ * thousands;\n        long onesCount5 = onesCount4 * ones;\n        long tensCount5\
    \ = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n\
    \        long thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6\
    \ = onesCount5 * ones;\n        long tensCount6 = tensCount5 * tens;\n       \
    \ long hundredsCount6 = hundredsCount5 * hundreds;\n        long thousandsCount6\
    \ = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6 * ones;\n\
    \        long tensCount7 = tensCount6 * tens;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0y6i2b4q.java:77: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp0y6i2b4q.java:77: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousand = 0;\n       \
    \ long oneTenThousand = 0;\n        long oneOneThousand = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneThousands = 0;\n        long oneOneHundred = 0;\n \
    \       long oneOneThousand = 0;\n        long oneTenThousands = 0;\n        long\
    \ oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long oneTenThousand\
    \ = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneTenThousands = 0;\n        long oneOneHundreds = 0;\n        long\
    \ oneOneHundred = 0;\n        long oneTenThousand = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneHundred = 0;\n        long oneTenThousands = 0;\n \
    \       long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneTenThousand = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneTenThousands = 0;\n        long oneOneHundreds = 0;\n\
    \        long oneOneHundred = 0;\n        long oneTenThousand = 0;\n        long\
    \ oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long oneTenThousands\
    \ = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneTenThousand = 0;\n        long oneOneHundreds = 0;\n        long\
    \ oneOneHundred = 0;\n        long oneTenThousands = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneHundred = 0;\n        long oneTenThousand = 0;\n  \
    \      long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneTenThousands = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneTenThousand = 0;\n        long oneOneHundreds = 0;\n \
    \       long oneOneHundred = 0;\n        long oneTenThousands = 0;\n        long\
    \ oneOneHundred\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23hpr8vp.java:78: error: ';' expected\n        long oneOneHundred\n\
    \                          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tg3omre.java:57: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal\n                                       \
    \                                                       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n            else\
    \ if (l == 10000l) tenths++;\n            else if (l == 100000l) hundredths++;\n\
    \            else if (l == 1000000l) thousandths++;\n        }\n        long onesSum\
    \ = ones * 1l;\n        long tensSum = tens * 10l;\n        long hundredsSum =\
    \ hundreds * 100l;\n        long thousandsSum = thousands * 1000l;\n        long\
    \ tenthsSum = tenths * 10000l;\n        long hundredthsSum = hundredths * 100000l;\n\
    \        long thousandthsSum = thousandths * 1000000l;\n        long onesDiff\
    \ = onesSum - ones;\n        long tensDiff = tensSum - tens;\n        long hundredsDiff\
    \ = hundredsSum - hundreds;\n        long thousandsDiff = thousandsSum - thousands;\n\
    \        long tenthsDiff = tenthsSum - tenths;\n        long hundredthsDiff =\
    \ hundredthsSum - hundredths;\n        long thousandthsDiff = thousandthsSum -\
    \ thousandths;\n        if (onesDiff > 0) result.add(onesDiff);\n        if (tensDiff\
    \ > 0) result.add(tensDiff);\n        if (hundredsDiff > 0) result.add(hundredsDiff);\n\
    \        if (thousandsDiff > 0) result.add(thousandsDiff);\n        if (tenthsDiff\
    \ > 0) result.add(tenthsDiff);\n        if (hundredthsDiff > 0) result.add(hundredthsDiff);\n\
    \        if (thousandthsDiff > 0) result.add(thousandthsDiff);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39du3a39.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long totalCount = onesCount + tensCount + hundredsCount\
    \ + thousandsCount;\n        long onesCount2 = onesCount * onesCount;\n      \
    \  long tensCount2 = tensCount * tensCount;\n        long hundredsCount2 = hundredsCount\
    \ * hundredsCount;\n        long thousandsCount2 = thousandsCount * thousandsCount;\n\
    \        long totalCount2 = onesCount2 + tensCount2 + hundredsCount2 + thousandsCount2;\n\
    \        long onesCount3 = onesCount * tensCount;\n        long tensCount3 = tensCount\
    \ * hundredsCount;\n        long hundredsCount3 = hundredsCount * thousandsCount;\n\
    \        long thousandsCount3 = thousandsCount * onesCount;\n        long totalCount3\
    \ = onesCount3 + tensCount3 + hundredsCount3 + thousandsCount3;\n        long\
    \ onesCount4 = onesCount * hundredsCount;\n        long tensCount4 = tensCount\
    \ * thousandsCount;\n        long hundredsCount4 = hundredsCount * onesCount;\n\
    \        long thousandsCount4 = thousandsCount * tensCount;\n        long totalCount4\
    \ = onesCount4 + tensCount4 + hundredsCount4 + thousandsCount4;\n        long\
    \ onesCount5 = onesCount * thousandsCount;\n        long tensCount5 = tensCount\
    \ * hundredsCount;\n        long hundredsCount5 = hundredsCount * onesCount;\n\
    \        long thousandsCount5 = thousandsCount * tensCount;\n        long totalCount5\
    \ = onesCount5 + tensCount5 + hundredsCount5 + thousandsCount5;\n        long\
    \ onesCount6 = one\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpth4ak_mh.java:61: error: ';' expected\n        long onesCount6\
    \ = one\n                             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones > 0) {\n            Collections.sort(arr);\n       \
    \     for (Long l : arr) {\n                if (l == 1l) result.add(l);\n    \
    \            else if (l == 10l) result.add(l);\n                else if (l ==\
    \ 100l) result.add(l);\n                else if (l == 1000l) result.add(l);\n\
    \            }\n        } else if (tens > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 10l) result.add(l);\n\
    \                else if (l == 100l) result.add(l);\n                else if (l\
    \ == 1000l) result.add(l);\n            }\n        } else if (hundreds > 0) {\n\
    \            Collections.sort(arr);\n            for (Long l : arr) {\n      \
    \          if (l == 100l) result.add(l);\n                else if (l == 1000l)\
    \ result.add(l);\n            }\n        } else if (thousands > 0) {\n       \
    \     Collections.sort(arr);\n            for (Long l : arr) {\n             \
    \   if (l == 1000l) result.add(l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2s_8wcks.java:61)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (long l : arr) {\n     \
    \       if (l == 1l)\n                onesCount++;\n            else if (l ==\
    \ 10l)\n                tensCount++;\n            else if (l == 100l)\n      \
    \          hundredsCount++;\n            else if (l == 1000l)\n              \
    \  thousandsCount++;\n        }\n        long onesCount2 = onesCount * ones;\n\
    \        long tensCount2 = tensCount * tens;\n        long hundredsCount2 = hundredsCount\
    \ * hundreds;\n        long thousandsCount2 = thousandsCount * thousands;\n  \
    \      long onesCount3 = onesCount2 * ones;\n        long tensCount3 = tensCount2\
    \ * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n        long\
    \ thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3\
    \ * ones;\n        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4\
    \ = hundredsCount3 * hundreds;\n        long thousandsCount4 = thousandsCount3\
    \ * thousands;\n        long onesCount5 = onesCount4 * ones;\n        long tensCount5\
    \ = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n\
    \        long thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6\
    \ = onesCount5 * ones;\n        long tensCount6 = tensCount5 * tens;\n       \
    \ long hundredsCount6 = hundredsCount5 * hundreds;\n        long thousandsCount6\
    \ = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6 * ones;\n\
    \        long tensCount7 = tensCount6 * tens;\n        long hundredsCount7 = hundredsCount6\
    \ * hundred\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7helmdkm.java:71: error: ';' expected\n        long hundredsCount7\
    \ = hundredsCount6 * hundred\n                                               \
    \       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1) {\n                ones++;\n            } else if (l == 10) {\n      \
    \          tens++;\n            } else if (l == 100) {\n                hundreds++;\n\
    \            } else if (l == 1000) {\n                thousands++;\n         \
    \   } else {\n                result.add(l);\n            }\n        }\n     \
    \   if (ones > 0) {\n            result.add(ones);\n        }\n        if (tens\
    \ > 0) {\n            result.add(tens);\n        }\n        if (hundreds > 0)\
    \ {\n            result.add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            result.add(thousands);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40ufz9fy.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0, hundredThousands = 0, thousandThousands = 0;\n        for (Long i : arr)\
    \ {\n            if (i%1000 == 0)\n                thousands++;\n            else\
    \ if (i%100 == 0)\n                hundreds++;\n            else if (i%10 == 0)\n\
    \                tens++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdq03u49_.java:81: error: ')' expected\n            else if (i\n\
    \                      ^\n/tmp/tmpdq03u49_.java:82: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpdq03u49_.java:83: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdq03u49_.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpdq03u49_.java:83: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpdq03u49_.java:83: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpdq03u49_.java:83: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpdq03u49_.java:94: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        if (ones == 0)\
    \ {\n            result.add(0);\n        } else if (ones == 1) {\n           \
    \ result.add(1);\n        } else if (ones == 2) {\n            result.add(2);\n\
    \        } else if (ones == 3) {\n            result.add(3);\n        } else if\
    \ (ones == 4) {\n            result.add(4);\n        } else if (ones == 5) {\n\
    \            result.add(5);\n        } else if (ones == 6) {\n            result.add(6);\n\
    \        } else if (ones == 7) {\n            result.add(7);\n        } else if\
    \ (ones == 8) {\n            result.add(8);\n        } else if (ones == 9) {\n\
    \            result.add(9);\n        } else if (ones == 10) {\n            result.add(10);\n\
    \        } else if (ones == 11) {\n            result.add(11);\n        } else\
    \ if (ones == 12) {\n            result.add(12);\n        } else if (ones == 13)\
    \ {\n            result.add(13);\n        } else if (ones == 14) {\n         \
    \   result.add(14);\n        } else if (ones == 15) {\n            result.add(15);\n\
    \        } else if (ones == 16) {\n            result.add(16);\n        } else\
    \ if (ones == 17) {\n            result.add(17);\n        } else if (ones == 18)\
    \ {\n            result.add(18);\n        } else if (ones == 19) {\n         \
    \   result.add(19);\n        } else if (ones == 20) {\n            result.add(20);\n\
    \        } else if (ones == 21) {\n            result.add(21);\n        } else\
    \ if (ones == 22) {\n            result.add(22);\n        } else if (ones == 23)\
    \ {\n            result.add(23);\n        } else if (ones == 24) {\n         \
    \   result.add(24);\n        } else if (ones == 25) {\n            result.add(25);\n\
    \        } else if (ones == 26) {\n            result.add(26);\n        } else\
    \ if (ones == 27) {\n            result.add(27);\n        } else if (ones == 28)\
    \ {\n            result.add(28);\n        } else if (ones == 29) {\n         \
    \   result.add(29);\n        } else if (ones == 30) {\n            result.add(30);\n\
    \        } else if (ones == 31) {\n            result.add(31);\n        } else\
    \ if (ones == 32) {\n            result.add(32);\n        } else if (ones == 33)\
    \ {\n            result.add(33);\n        } else if (ones == 34) {\n         \
    \   result.add(34);\n        } else if (ones == 35) {\n            result.add(35);\n\
    \        } else if (ones == 36) {\n            result.add(36);\n        } else\
    \ if (ones == 37) {\n            result.add(37);\n        } else if (ones == 38)\
    \ {\n            result.add(38);\n        } else if (ones == 39) {\n         \
    \   result.add(39);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedzs1d0k.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpedzs1d0k.java:118: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpedzs1d0k.java:118: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpedzs1d0k.java:118: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpedzs1d0k.java:118: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpedzs1d0k.java:129: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    ArrayList<Long> temp = sortArray(new ArrayList<Long>(arr));\n           \
    \ for (long i : temp) res.add(i);\n        } else if (zeros > ones) {\n      \
    \      ArrayList<Long> temp = sortArray(new ArrayList<Long>(arr));\n         \
    \   for (long i : temp) res.add(i);\n        } else {\n            ArrayList<Long>\
    \ temp = sortArray(new ArrayList<Long>(arr));\n            for (long i : temp)\
    \ res.add(i);\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.util.ArrayList.<init>(ArrayList.java:178)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Pr"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (long i : arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else if (i == 0) {\n                zeros++;\n            } else\
    \ {\n                if (ones > zeros) {\n                    result.add(max);\n\
    \                    max = 0;\n                    ones = 0;\n               \
    \     zeros++;\n                } else {\n                    max = Math.max(max,\
    \ i);\n                }\n            }\n        }\n        if (ones > zeros)\
    \ {\n            result.add(max);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuoz8iih.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long one\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3d6_2z77.java:92: error: ';' expected\n        long one\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n        long\
    \ zerosDecimal = zeros / Math.pow(10, arr.size());\n        long onesDecimalDecimal\
    \ = onesDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimal\
    \ = zerosDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n    \
    \    long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ju1i1lz.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \                                ^\n/tmp/tmp4ju1i1lz.java:28: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long zerosDecimal\
    \ = zeros / Math.pow(10, arr.size());\n                                  ^\n/tmp/tmp4ju1i1lz.java:29:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long onesDecimalDecimal = onesDecimal / Math.pow(10, arr.size());\n  \
    \                                            ^\n/tmp/tmp4ju1i1lz.java:30: error:\
    \ incompatible types: possible lossy conversion from double to long\n        long\
    \ zerosDecimalDecimal = zerosDecimal / Math.pow(10, arr.size());\n           \
    \                                     ^\n/tmp/tmp4ju1i1lz.java:31: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n                         \
    \                                   ^\n/tmp/tmp4ju1i1lz.java:32: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n                        \
    \                                      ^\n/tmp/tmp4ju1i1lz.java:33: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n                  \
    \                                                        ^\n/tmp/tmp4ju1i1lz.java:34:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ Math.pow(10, arr.size());\n                                                \
    \                            ^\n/tmp/tmp4ju1i1lz.java:35: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimalDecimalDecimal "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (Long val : arr) {\n            if (val == 1) {\n                ones++;\n\
    \            } else if (val == 0) {\n                zeros++;\n            } else\
    \ {\n                if (ones > zeros) {\n                    max = ones;\n  \
    \              } else {\n                    max = zeros;\n                }\n\
    \            }\n            result.add(val);\n        }\n        if (ones > zeros)\
    \ {\n            max = ones;\n        } else {\n            max = zeros;\n   \
    \     }\n        Collections.sort(result, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                long diff = o1.longValue()\
    \ - o2.longValue();\n                if (diff == 0) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return diff;\n\
    \                }\n            }\n        });\n        ArrayList<Long> sortedArr\
    \ = new ArrayList<Long>();\n        for (Long val : result) {\n            if\
    \ (val == max) {\n                sortedArr.add(val);\n            }\n       \
    \ }\n        return sortedArr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp726k2bkl.java:49: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    return diff;\n                       \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        for (Long i : arr) {\n        \
    \    if (i.intValue() == 1) {\n                ones++;\n            } else if\
    \ (i.intValue() == 0) {\n                tens++;\n            } else if (i.intValue()\
    \ == 2) {\n                hundreds++;\n            } else if (i.intValue() ==\
    \ 3) {\n                thousands++;\n            } else if (i.intValue() == 4)\
    \ {\n                tenths++;\n            } else if (i.intValue() == 5) {\n\
    \                hundredths++;\n            } else if (i.intValue() == 6) {\n\
    \                thousandths++;\n            }\n        }\n        if (ones >\
    \ 0) {\n            result.add(ones);\n        }\n        if (tens > 0) {\n  \
    \          result.add(tens);\n        }\n        if (hundreds > 0) {\n       \
    \     result.add(hundreds);\n        }\n        if (thousands > 0) {\n       \
    \     result.add(thousands);\n        }\n        if (tenths > 0) {\n         \
    \   result.add(tenths);\n        }\n        if (hundredths > 0) {\n          \
    \  result.add(hundredths);\n        }\n        if (thousandths > 0) {\n      \
    \      result.add(thousandths);\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppblmy9iw.java:69)\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        if (ones > zeros) {\n            Collections.sort(arr);\n       \
    \     for (long i : arr) {\n                if (i == 1l) ones--;\n           \
    \     if (i == 0l) zeros--;\n            }\n        }\n        long maxOnes =\
    \ ones;\n        long maxZeros = zeros;\n        for (long i : arr) {\n      \
    \      if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n        }\n  \
    \      if (ones > zeros) {\n            Collections.sort(arr);\n            for\
    \ (long i : arr) {\n                if (i == 1l) ones--;\n                if (i\
    \ == 0l) zeros--;\n            }\n        }\n        long maxOnesDec = ones;\n\
    \        long maxZerosDec = zeros;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n        }\n       \
    \ if (ones > zeros) {\n            Collections.sort(arr);\n            for (long\
    \ i : arr) {\n                if (i == 1l) ones--;\n                if (i == 0l)\
    \ zeros--;\n            }\n        }\n        long maxOnesDec2 = ones;\n     \
    \   long maxZerosDec2 = zeros;\n        for (long i : arr) {\n            if (i\
    \ == 1l) ones++;\n            if (i == 0l) zeros++;\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(arr);\n            for (long i : arr)\
    \ {\n                if (i == 1l) ones--;\n                if (i == 0l) zeros--;\n\
    \            }\n        }\n        long maxOnesDec3 = (ones * 1000) + (ones /\
    \ 2);\n        long maxZerosDec3 = (zeros * 1000) + (zeros / 2);\n        for\
    \ (long i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l)\
    \ zeros++;\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        long maxOnesDec4\
    \ = (ones * 1000) + (ones / 2);\n        long maxZerosDec4 = (zeros * 1000) +\
    \ (zeros / 2);\n        for (long i : arr) {\n            if (i == 1l) ones++;\n\
    \            if (i == 0l) zeros++;\n        }\n        if (ones > zero\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwclv3nyb.java:92: error: ')' expected\n        if (ones > zero\n\
    \                       ^\n/tmp/tmpwclv3nyb.java:93: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousands = 0;\n        long oneTenThousands = 0;\n  \
    \      long oneHundredThousands = 0;\n        long oneHundredThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousands = 0;\n\
    \        long oneHundredThousandThousandThousandThousandThousandThousands = 0;\n\
    \        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousand\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7b5icug.java:43: error: ';' expected\n        long oneHundredThousandThousandThousandThousandThousand\n\
    \                                                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        if (ones > 0) {\n            result.add(ones);\n \
    \       }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6o4nbmq.java:51)\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesNum = ones;\n        long tensNum\
    \ = tens;\n        long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n\
    \        if (onesNum > tensNum) {\n            onesNum = tensNum;\n        }\n\
    \        if (onesNum > hundredsNum) {\n            onesNum = hundredsNum;\n  \
    \      }\n        if (onesNum > thousandsNum) {\n            onesNum = thousandsNum;\n\
    \        }\n        if (tensNum > hundredsNum) {\n            tensNum = hundredsNum;\n\
    \        }\n        if (tensNum > thousandsNum) {\n            tensNum = thousandsNum;\n\
    \        }\n        if (hundredsNum > thousandsNum) {\n            hundredsNum\
    \ = thousandsNum;\n        }\n        if (onesNum > 0) {\n            result.add(onesNum);\n\
    \        }\n        if (tensNum > 0) {\n            result.add(tensNum);\n   \
    \     }\n        if (hundredsNum > 0) {\n            result.add(hundredsNum);\n\
    \        }\n        if (thousandsNum > 0) {\n            result.add(thousandsNum);\n\
    \        }\n        if (onesNum > 0) {\n            result.add(onesNum);\n   \
    \     }\n        if (tensNum > 0) {\n            result.add(tensNum);\n      \
    \  }\n        if (hundredsNum > 0) {\n            result.add(hundredsNum);\n \
    \       }\n        if (thousandsNum > 0) {\n            result.add(thousandsNum);\n\
    \        }\n        if (onesNum > 0) {\n            result.add(onesNum);\n   \
    \     }\n        if (tensNum > 0) {\n            result.add(tensNum);\n      \
    \  }\n        if (hundredsNum > 0) {\n            result.add(hundredsNum);\n \
    \       }\n        if (thousandsNum > 0) {\n            result.add(thousandsNum);\n\
    \        }\n        if (onesNum > 0) {\n            result.add(onesNum);\n   \
    \     }\n        if (tensNum > 0) {\n            result.add(tensNum);\n      \
    \  }\n        if (hund\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstzct878.java:100: error: ')' expected\n        if (hund\n    \
    \            ^\n/tmp/tmpstzct878.java:101: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \         else res.add(l);\n        }\n        long onesSorted = ones;\n     \
    \   long tensSorted = tens;\n        long hundredsSorted = hundreds;\n       \
    \ long thousandsSorted = thousands;\n        if (onesSorted > tensSorted) {\n\
    \            if (onesSorted > hundredsSorted) {\n                if (onesSorted\
    \ > thousandsSorted) {\n                    res.add(onesSorted);\n           \
    \         onesSorted = 0;\n                }\n                res.add(tensSorted);\n\
    \                tensSorted = 0;\n            }\n            res.add(hundredsSorted);\n\
    \            hundredsSorted = 0;\n        }\n        if (onesSorted > hundredsSorted)\
    \ {\n            res.add(onesSorted);\n            onesSorted = 0;\n        }\n\
    \        if (onesSorted > thousandsSorted) {\n            res.add(onesSorted);\n\
    \            onesSorted = 0;\n        }\n        if (tensSorted > hundredsSorted)\
    \ {\n            res.add(tensSorted);\n            tensSorted = 0;\n        }\n\
    \        if (tensSorted > thousandsSorted) {\n            res.add(tensSorted);\n\
    \            tensSorted = 0;\n        }\n        if (hundredsSorted > thousandsSorted)\
    \ {\n            res.add(hundredsSorted);\n            hundredsSorted = 0;\n \
    \       }\n        if (hundredsSorted > thousandsSorted) {\n            res.add(hundredsSorted);\n\
    \            hundredsSorted = 0;\n        }\n        if (thousandsSorted > hundredsSorted)\
    \ {\n            res.add(thousandsSorted);\n            thousandsSorted = 0;\n\
    \        }\n        if (thousandsSorted > hundredsSorted) {\n            res.add(thousandsSorted);\n\
    \            thousandsSorted = 0;\n        }\n        if (thousandsSorted > onesSorted)\
    \ {\n            res.add(thousandsSorted);\n            thousandsSorted = 0;\n\
    \        }\n        if (onesSorted > thousandsSorted) {\n            res.add(onesSorted);\n\
    \            onesSorted = 0;\n        }\n        if (onesSorted > hundredsSorted)\
    \ {\n            re\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl5vnhh0p.java:89: error: not a statement\n            re\n    \
    \        ^\n/tmp/tmpl5vnhh0p.java:89: error: ';' expected\n            re\n  \
    \            ^\n/tmp/tmpl5vnhh0p.java:91: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesDecimal = ones / arr.size();\n\
    \        long zerosDecimal = zeros / arr.size();\n        long onesDecimalDecimal\
    \ = onesDecimal / arr.size();\n        long zerosDecimalDecimal = zerosDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ arr.size();\n        long zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ arr.size();\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / arr.size();\n        long zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / arr.size();\n        long zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / arr.size();\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size();\n    \
    \    long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size();\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size();\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cdjtft5.java:47: error: ';' expected\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n\
    \                                                                            \
    \                                                                            \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100) {\n                thousands++;\n         \
    \   }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n \
    \       long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100) {\n                thousandsCount++;\n            }\n  \
    \      }\n        long onesCountReverse = 0;\n        long tensCountReverse =\
    \ 0;\n        long hundredsCountReverse = 0;\n        long thousandsCountReverse\
    \ = 0;\n        for (long num : arr) {\n            if (num == 1) {\n        \
    \        onesCountReverse++;\n            } else if (num == 10) {\n          \
    \      tensCountReverse++;\n            } else if (num == 100) {\n           \
    \     hundredsCountReverse++;\n            } else if (num > 100) {\n         \
    \       thousandsCountReverse++;\n            }\n        }\n        long onesCountReverseReverse\
    \ = 0;\n        long tensCountReverseReverse = 0;\n        long hundredsCountReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverse = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                onesCountReverseReverse++;\n\
    \            } else if (num == 10) {\n                tensCountReverseReverse++;\n\
    \            } else if (num == 100) {\n                hundredsCountReverseReverse++;\n\
    \            } else if (num > 100) {\n                thousandsCountReverseReverse++;\n\
    \            }\n        }\n        long onesCountReverseReverseReverse = 0;\n\
    \        long tensCountReverseReverseReverse = 0;\n        long hundredsCountReverseReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverseReverse = 0;\n        for (long\
    \ num : arr) {\n            if (num == 1) {\n                onesCountReverseReverseReverse++;\n\
    \            } else if (num == 10) {\n                tensCountReverseReverseReverse++;\n\
    \            } else if (num == 100) {\n                hundredsCountReverseReverseReverse++;\n\
    \            } else if (num > 100) {\n                thousandsCountReverseReverseReverse++;\n\
    \            }\n        }\n        long onesCountReverseReverseReverseReverse\
    \ = 0;\n        long tensCountReverseReverseReverseReverse = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpheknlxsq.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = ones;\n    \
    \    long zerosMax = zeros;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long onesMaxMin = ones;\n        long zerosMaxMin = zeros;\n\
    \        long onesMaxMinMax = ones;\n        long zerosMaxMinMax = zeros;\n  \
    \      long onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin = zeros;\n\
    \        long onesMaxMinMaxMinMax = ones;\n        long zerosMaxMinMaxMinMax =\
    \ zeros;\n        long onesMaxMinMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMax = ones;\n        long zerosMaxMinMaxMinMaxMinMax\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMinMaxMinMax\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMax = ones;\n        long\
    \ zerosMaxMinMaxMinMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMin = zeros;\n       \
    \ long onesMaxMinMaxMinMaxMinMaxMinMaxMinMax = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = ones;\n  \
    \      long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = zeros;\n \
    \       long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = ones;\n        long\
    \ zerosMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdr1cl9q.java:59: error: ';' expected\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\n\
    \                                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100) {\n                thousands++;\n         \
    \   }\n        }\n        long onesNum = ones;\n        long tensNum = tens;\n\
    \        long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n\
    \        long onesNum2 = onesNum * onesNum;\n        long tensNum2 = tensNum *\
    \ tensNum;\n        long hundredsNum2 = hundredsNum * hundredsNum;\n        long\
    \ thousandsNum2 = thousandsNum * thousandsNum;\n        long onesNum3 = onesNum2\
    \ * onesNum;\n        long tensNum3 = tensNum2 * tensNum;\n        long hundredsNum3\
    \ = hundredsNum2 * hundredsNum;\n        long thousandsNum3 = thousandsNum2 *\
    \ thousandsNum;\n        long onesNum4 = onesNum3 * onesNum;\n        long tensNum4\
    \ = tensNum3 * tensNum;\n        long hundredsNum4 = hundredsNum3 * hundredsNum;\n\
    \        long thousandsNum4 = thousandsNum3 * thousandsNum;\n        long onesNum5\
    \ = onesNum4 * onesNum;\n        long tensNum5 = tensNum4 * tensNum;\n       \
    \ long hundredsNum5 = hundredsNum4 * hundredsNum;\n        long thousandsNum5\
    \ = thousandsNum4 * thousandsNum;\n        long onesNum6 = onesNum5 * onesNum;\n\
    \        long tensNum6 = tensNum5 * tensNum;\n        long hundredsNum6 = hundredsNum5\
    \ * hundredsNum;\n        long thousandsNum6 = thousandsNum5 * thousandsNum;\n\
    \        long onesNum7 = onesNum6 * onesNum;\n        long tensNum7 = tensNum6\
    \ * tensNum;\n        long hundredsNum7 = hundredsNum6 * hundredsNum;\n      \
    \  long thousandsNum7 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8ozx5h1.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == \n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvoq897tp.java:144: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpvoq897tp.java:145: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       long onesDecimal = ones * 1000;\n        long tensDecimal = tens * 100;\n\
    \        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        long minDecimal\
    \ = decimal;\n        long maxDecimalIndex = 0;\n        long minDecimalIndex\
    \ = 0;\n        for (Long l : arr) {\n            if (l == 1l)\n             \
    \   ones++;\n            else if (l == 10l)\n                tens++;\n       \
    \     else if (l == 100l)\n                hundreds++;\n            else if (l\
    \ == 1000l)\n                thousands++;\n            else if (l > maxDecimal)\
    \ {\n                maxDecimal = l;\n                maxDecimalIndex = arr.indexOf(l);\n\
    \            }\n            else if (l < minDecimal) {\n                minDecimal\
    \ = l;\n                minDecimalIndex = arr.indexOf(l);\n            }\n   \
    \     }\n        long maxDecimalDecimal = maxDecimal * 1000;\n        long minDecimalDecimal\
    \ = minDecimal * 1000;\n        long maxDecimalDecimalIndex = maxDecimalIndex\
    \ * 1000;\n        long minDecimalDecimalIndex = minDecimalIndex * 1000;\n   \
    \     long maxDecimalDecimalDecimal = maxDecimalDecimal * 100;\n        long minDecimalDecimalDecimal\
    \ = minDecimalDecimal * 100;\n        long maxDecimalDecimalDecimalIndex = maxDecimalDecimalIndex\
    \ * 100;\n        long minDecimalDecimalDecimalIndex = minDecimalDecimalIndex\
    \ * 100;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimal = minDecimalDecimalDecimal * 10;\n\
    \        long maxDecimalDecimalDecimalIndex = maxDecimalDecimalDecimalIndex *\
    \ 10;\n        long minDecimalDecimalDecimalIndex = minDecimalDecimalDecimalIndex\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ * 1;\n        long minDecimalDecimalDecimal = minDecimalDecimalDecimal * 1;\n\
    \        long maxDecimalDecimalDecimalIndex = maxDecimalDecimalDecimalIndex *\
    \ \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8q3d5u3z.java:77: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n\
    \        long thousandsCount = 0;\n        for (Long l : arr) {\n            if\
    \ (l == 1l) onesCount++;\n            if (l == 10l) tensCount++;\n           \
    \ if (l == 100l) hundredsCount++;\n            if (l == 1000l) thousandsCount++;\n\
    \        }\n        long onesCountSorted = onesCount - ones;\n        long tensCountSorted\
    \ = tensCount - tens;\n        long hundredsCountSorted = hundredsCount - hundreds;\n\
    \        long thousandsCountSorted = thousandsCount - thousands;\n        if (onesCountSorted\
    \ == 0) {\n            if (tensCountSorted == 0) {\n                if (hundredsCountSorted\
    \ == 0) {\n                    if (thousandsCountSorted == 0) {\n            \
    \            result.addAll(arr);\n                    }\n                    else\
    \ {\n                        result.addAll(Arrays.asList(thousandsCountSorted,\
    \ hundredsCountSorted, tensCountSorted, onesCountSorted));\n                 \
    \   }\n                }\n                else {\n                    result.addAll(Arrays.asList(thousandsCountSorted,\
    \ hundredsCountSorted, onesCountSorted));\n                }\n            }\n\
    \            else {\n                result.addAll(Arrays.asList(thousandsCountSorted,\
    \ onesCountSorted));\n            }\n        }\n        else if (onesCountSorted\
    \ > 0) {\n            if (tensCountSorted == 0) {\n                if (hundredsCountSorted\
    \ == 0) {\n                    if (thousandsCountSorted == 0) {\n            \
    \            result.addAll(Arrays.asList(onesCountSorted, thousandsCountSorted,\
    \ hundredsCountSorted, tensCountSorted));\n                    }\n           \
    \         else {\n                        result.addAll(Arrays.asList(onesCountSorted,\
    \ thousandsCountSorted, hundredsCountSorted, tensCountSorted, onesCountSorted));\n\
    \                    }\n                }\n                else {\n          \
    \          result.addAll(Arrays.asList(onesCountSorted, thousandsCountSorted,\
    \ hund\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzdjk8d_.java:74: error: ')' expected\n                    result.addAll(Arrays.asList(onesCountSorted,\
    \ thousandsCountSorted, hund\n                                               \
    \                                            ^\n/tmp/tmpbzdjk8d_.java:76: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesDecimal = ones / 10;\n        long tensDecimal = tens / 10;\n        long\
    \ hundredsDecimal = hundreds / 10;\n        long thousandsDecimal = thousands\
    \ / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal\
    \ = tensDecimal / 10;\n        long hundredsDecimalDecimal = hundredsDecimal /\
    \ 10;\n        long thousandsDecimalDecimal = thousandsDecimal / 10;\n       \
    \ long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal\
    \ = tensDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundreds\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1eoe7y3i.java:53: error: ';' expected\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundreds\n                                                               \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesRes = ones;\n        long tensRes = tens;\n        long hundredsRes = hundreds;\n\
    \        long thousandsRes = thousands;\n        if (onesRes > tensRes) {\n  \
    \          onesRes = tensRes;\n            hundredsRes = onesRes;\n          \
    \  thousandsRes = onesRes;\n        }\n        if (onesRes > hundredsRes) {\n\
    \            onesRes = hundredsRes;\n            tensRes = onesRes;\n        \
    \    hundredsRes = onesRes;\n            thousandsRes = onesRes;\n        }\n\
    \        if (onesRes > thousandsRes) {\n            onesRes = thousandsRes;\n\
    \            tensRes = onesRes;\n            hundredsRes = onesRes;\n        \
    \    thousandsRes = onesRes;\n        }\n        if (tensRes > hundredsRes) {\n\
    \            tensRes = hundredsRes;\n            hundredsRes = tensRes;\n    \
    \        thousandsRes = tensRes;\n        }\n        if (tensRes > thousandsRes)\
    \ {\n            tensRes = thousandsRes;\n            hundredsRes = tensRes;\n\
    \            thousandsRes = tensRes;\n        }\n        if (hundredsRes > thousandsRes)\
    \ {\n            hundredsRes = thousandsRes;\n            thousandsRes = hundredsRes;\n\
    \        }\n        if (onesRes == tensRes && onesRes == hundredsRes && onesRes\
    \ == thousandsRes) {\n            onesRes = onesRes * 10;\n            tensRes\
    \ = tensRes * 10;\n            hundredsRes = hundredsRes * 10;\n            thousandsRes\
    \ = thousandsRes * 10;\n        }\n        if (onesRes == tensRes && onesRes ==\
    \ hundredsRes && onesRes == thousands\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgdp503q.java:72: error: ')' expected\n        if (onesRes == tensRes\
    \ && onesRes == hundredsRes && onesRes == thousands\n                        \
    \                                                        ^\n/tmp/tmptgdp503q.java:73:\
    \ error: illegal start of statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n        }\n  \
    \      long onesMinusOnes = ones - 1l;\n        long zerosMinusOnes = zeros -\
    \ 1l;\n        long onesMinusOnesMinusOnes = onesMinusOnes - 1l;\n        long\
    \ zerosMinusOnesMinusOnes = zerosMinusOnes - 1l;\n        long onesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnes - 1l;\n        long zerosMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnes - 1l;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnes - 1l;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnesMinusOnes - 1l;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnes - 1l;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnesMinusOnes - 1l;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnes - 1l;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnesMinusOnes - 1l;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnes - 1l;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnesMinusOnes - 1l;\n        long onesMinusOnesMinusOne\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrpt3o7y.java:40: error: ';' expected\n        long onesMinusOnesMinusOne\n\
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n        }\n        for (Long l : arr) {\n            tens += l;\n      \
    \  }\n        for (Long l : arr) {\n            hundreds += l;\n        }\n  \
    \      for (Long l : arr) {\n            thousands += l;\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > tensCount) {\n            onesCount = tensCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n        }\n    \
    \    if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n        }\n        if (tensCount > thousandsCount) {\n     \
    \       tensCount = thousandsCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount2 > tensCount2) {\n            onesCount2 = tensCount2;\n        }\n\
    \        if (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n        }\n        if (tensCount2 > hundredsCount2) {\n\
    \            tensCount2 = hundredsCount2;\n        }\n        if (tensCount2 >\
    \ thousandsCount2) {\n            tensCount2 = thousandsCount2;\n        }\n \
    \       if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2 =\
    \ thousandsCount2;\n        }\n        long onesCount3 = onesCount2;\n       \
    \ long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzl2527x2.java:84: error: ';' expected\n        long thousandsCount3\
    \ = thousandsCount\n                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ == 1l) {\n                ones++;\n            } else if (i == 10l) {\n    \
    \            tens++;\n            } else if (i == 100l) {\n                hundreds++;\n\
    \            } else if (i == 1000l) {\n                thousands++;\n        \
    \    } else {\n                result.add(i);\n            }\n        }\n    \
    \    long onesDecimal = ones * 100l;\n        long tensDecimal = tens * 10l;\n\
    \        long hundredsDecimal = hundreds * 100l;\n        long thousandsDecimal\
    \ = thousands * 1000l;\n        long onesDecimalDecimal = onesDecimal * onesDecimal;\n\
    \        long tensDecimalDecimal = tensDecimal * tensDecimal;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal * hundredsDecimal;\n        long thousandsDecimalDecimal =\
    \ thousandsDecimal * thousandsDecimal;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * onesDecimalDecimal;\n        long tensDecimalDecimalDecimal\
    \ = tensDecimalDecimal * tensDecimalDecimal;\n        long hundredsDecimalDecimalDecimal\
    \ = hundredsDecimalDecimal * hundredsDecimalDecimal;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal * thousandsDecimalDecimal;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal * onesDecimalDecimalDecimal;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal * tensDecimalDecimalDecimal;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal * hundredsDecimalDecimalDecimal;\n        long\
    \ thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal * thousandsDecimalDecimalDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * onesDecimalDecimalDecimalDecimalDecimal;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal * tensDecimalDecimalDecimalDecimalDecimal;\n\
    \        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ * hundredsDecimalDecimalDecimalDecimalDecimalDecimal;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal * thousandsDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimalDecimalDecimalDecimal = one\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xx54y65.java:58: error: ';' expected\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = one\n                                                                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0, hundredThousands = 0, thousandThousands = 0;\n        long maxOnes = 0, maxTens\
    \ = 0, maxHundreds = 0, maxThousands = 0, maxTenThousands = 0, maxHundredThousands\
    \ = 0, maxThousandThousands = 0;\n        for (long i : arr) {\n            if\
    \ (i < 0) {\n                res.add(-i);\n            } else {\n            \
    \    long bin = Long.parseLong(Long.toBinaryString(i), 2);\n                ones\
    \ += bin == 1 ? 1 : 0;\n                tens += bin == 10 ? 1 : 0;\n         \
    \       hundreds += bin == 100 ? 1 : 0;\n                thousands += bin == 1000\
    \ ? 1 : 0;\n                tenThousands += bin == 10000 ? 1 : 0;\n          \
    \      hundredThousands += bin == 100000 ? 1 : 0;\n                thousandThousands\
    \ += bin == 1000000 ? 1 : 0;\n                maxOnes = Math.max(ones, maxOnes);\n\
    \                maxTens = Math.max(tens, maxTens);\n                maxHundreds\
    \ = Math.max(hundreds, maxHundreds);\n                maxThousands = Math.max(thousands,\
    \ maxThousands);\n                maxTenThousands = Math.max(tenThousands, maxTenThousands);\n\
    \                maxHundredThousands = Math.max(hundredThousands, maxHundredThousands);\n\
    \                maxThousandThousands = Math.max(thousandThousands, maxThousandThousands);\n\
    \            }\n        }\n        long maxOnesBin = Long.parseLong(Long.toBinaryString(maxOnes),\
    \ 2);\n        long maxTensBin = Long.parseLong(Long.toBinaryString(maxTens),\
    \ 2);\n        long maxHundredsBin = Long.parseLong(Long.toBinaryString(maxHundreds),\
    \ 2);\n        long maxThousandsBin = Long.parseLong(Long.toBinaryString(maxThousands),\
    \ 2);\n        long maxTenThousandsBin = Long.parseLong(Long.toBinaryString(maxTenThousands),\
    \ 2);\n        long maxHundredThousandsBin = Long.parseLong(Long.toBinaryString(maxHundredThousands),\
    \ 2);\n        long maxThousandThousandsBin = Long.parseLong(Long.toBinaryString(maxTh\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1mws7cb.java:50: error: ')' expected\n        long maxThousandThousandsBin\
    \ = Long.parseLong(Long.toBinaryString(maxTh\n                               \
    \                                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        for (long num : arr) {\n            if (num == 1) {\n          \
    \      ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num == 1000) {\n                thousands++;\n            } else\
    \ if (num % 10 == 0) {\n                tenths++;\n            } else if (num\
    \ % 100 == 0) {\n                oneths++;\n            } else {\n           \
    \     result.add(num);\n            }\n        }\n        Collections.sort(result);\n\
    \        if (ones > 0) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Integer.compare(Integer.parseInt(Long.toBinaryString(o1)), Integer.parseInt(Long.toBinaryString(o2)));\n\
    \                }\n            });\n        }\n        if (oneths > 0) {\n  \
    \          Collections.sort(result, new Comparator<Long>() {\n               \
    \ public int compare(Long o1, Long o2) {\n                    return Long.compare(Long.parseLong(Long.toBinaryString(o1)),\
    \ Long.parseLong(Long.toBinaryString(o2)));\n                }\n            });\n\
    \        }\n        if (tenths > 0) {\n            Collections.sort(result, new\
    \ Comparator<Long>() {\n                public int compare(Long o1, Long o2) {\n\
    \                    return Long.compare(Long.parseLong(Long.toBinaryString(o1)),\
    \ Long.parseLong(Long.toBinaryString(o2)));\n                }\n            });\n\
    \        }\n        if (thousands > 0) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(Long.parseLong(Long.toBinaryString(o1)),\
    \ Long.parseLong(Long.toBinaryString(o2)));\n                }\n            });\n\
    \        }\n        if (hundreds > 0) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(Long.parseLong(Long.toBinaryString(o1)),\
    \ Long.parseLong(Long.toBinaryString(o2)));\n                }\n            });\n\
    \        }\n        if (tens > 0) {\n            Collections.sort(result, new\
    \ Comparator<Long>() {\n                public int compare(Long o1, Long o2) {\n\
    \                    return Long.compare(Long.parseLong(Long.toBinaryString(o1)),\
    \ Long.parse\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkgczxvd3.java:83: error: ')' expected\n                    return\
    \ Long.compare(Long.parseLong(Long.toBinaryString(o1)), Long.parse\n         \
    \                                                                            \
    \      ^\n/tmp/tmpkgczxvd3.java:96: error: reached end of file while parsing\n\
    }\n ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ % 2 == 0) {\n                ones++;\n            } else if (i % 10 == 0) {\n\
    \                tens++;\n            } else if (i % 100 == 0) {\n           \
    \     hundreds++;\n            } else if (i % 1000 == 0) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n\
    \            } else if (i % 10 == 0) {\n                tensCount++;\n       \
    \     } else if (i % 100 == 0) {\n                hundredsCount++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousandsCount++;\n         \
    \   }\n        }\n        long onesCountSorted = onesCount - ones;\n        long\
    \ tensCountSorted = tensCount - tens;\n        long hundredsCountSorted = hundredsCount\
    \ - hundreds;\n        long thousandsCountSorted = thousandsCount - thousands;\n\
    \        if (onesCountSorted == 0) {\n            onesCountSorted = 1;\n     \
    \   }\n        if (tensCountSorted == 0) {\n            tensCountSorted = 1;\n\
    \        }\n        if (hundredsCountSorted == 0) {\n            hundredsCountSorted\
    \ = 1;\n        }\n        if (thousandsCountSorted == 0) {\n            thousandsCountSorted\
    \ = 1;\n        }\n        long onesCountSorted2 = onesCountSorted / 2;\n    \
    \    long tensCountSorted2 = tensCountSorted / 2;\n        long hundredsCountSorted2\
    \ = hundredsCountSorted / 2;\n        long thousandsCountSorted2 = thousandsCountSorted\
    \ / 2;\n        long onesCountSorted3 = onesCountSorted / 3;\n        long tensCountSorted3\
    \ = tensCountSorted / 3;\n        long hundredsCountSorted3 = hundredsCountSorted\
    \ / 3;\n        long thousandsCountSorted3 = thousandsCountSorted / 3;\n     \
    \   long onesCountSorted4 = onesCountSorted / 4;\n        long tensCountSorted4\
    \ = tensCountSorted / 4;\n        long hundredsCountSorted4 = hundredsCountSorted\
    \ / 4;\n        long thousandsCountSorted4 = thousandsCountSorted / 4;\n     \
    \   long onesCountSorted\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz97og71n.java:79: error: ';' expected\n        long onesCountSorted\n\
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n       \
    \ }\n        if (ones > zeros) {\n            Collections.sort(arr);\n       \
    \     for (long l : arr) {\n                if (l == 1l) ones--;\n           \
    \     if (l == 0l) zeros--;\n            }\n        }\n        for (long l : arr)\
    \ {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n   \
    \     }\n        if (ones > zeros) {\n            Collections.sort(arr);\n   \
    \         for (long l : arr) {\n                if (l == 1l) ones--;\n       \
    \         if (l == 0l) zeros--;\n            }\n        }\n        for (long l\
    \ : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            if (l == 0l) zeros--;\n            }\n        }\n        for (long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            if (l == 0l) zeros--;\n            }\n        }\n        for (long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            if (l == 0l) zeros--;\n            }\n        }\n        for (long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            if (l == 0l) zeros--;\n            }\n        }\n        for (long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            if (l == 0l) zeros--;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1vty7fp.java:100: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        long maxOnes = ones;\n        long maxZeros = zeros;\n        long\
    \ maxOnesDecimal = ones / maxOnes;\n        long maxZerosDecimal = zeros / maxZeros;\n\
    \        long maxOnesDecimalDecimal = maxOnesDecimal / maxOnesDecimal;\n     \
    \   long maxZerosDecimalDecimal = maxZerosDecimal / maxZerosDecimal;\n       \
    \ long maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal / maxOnesDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / maxZerosDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / maxOnesDecimalDecimalDecimal;\n        long maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal / maxZerosDecimalDecimalDecimal;\n        long\
    \ maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal\
    \ / maxOnesDecimalDecimalDecimalDecimal;\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal / maxZerosDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxOnesDecimalDecimalDecimalDecimalDecimalDecimal;\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal / maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \ long maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpma50532e.java:43: error: ';' expected\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesDecimalDecimal\n\
    \                                                                            \
    \                                                                            \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount -= onesCount;\n        } else if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n            tensCount\
    \ -= onesCount;\n        }\n        if (tensCount > hundredsCount) {\n       \
    \     tensCount = hundredsCount;\n            hundredsCount -= tensCount;\n  \
    \      } else if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \            hundredsCount -= tensCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n         \
    \   thousandsCount -= hundredsCount;\n        } else if (hundredsCount > onesCount)\
    \ {\n            hundredsCount = onesCount;\n            thousandsCount -= hundredsCount;\n\
    \        }\n        if (thousandsCount > hundredsCount) {\n            thousandsCount\
    \ = hundredsCount;\n            hundredsCount -= thousandsCount;\n        } else\
    \ if (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n\
    \            hundredsCount -= thousandsCount;\n        }\n        if (hundredsCount\
    \ > tensCount) {\n            hundredsCount = tensCount;\n            tensCount\
    \ -= hundredsCount;\n        } else if (hundredsCount > onesCount) {\n       \
    \     hundredsCount = onesCount;\n            tensCount -= hundredsCount;\n  \
    \      }\n        if (tensCount > onesCount) {\n            tensCount = onesCount;\n\
    \            onesCount -= tensCount;\n        } else if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount -= ten\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv487t4qb.java:80: error: ';' expected\n            hundredsCount\
    \ -= ten\n                                ^\n/tmp/tmpv487t4qb.java:82: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long i :\
    \ arr) {\n            if (i > 0) {\n                ones += i;\n            }\
    \ else if (i < 0) {\n                tens += i;\n            } else if (i < 100)\
    \ {\n                hundreds += i;\n            } else if (i < 1000) {\n    \
    \            thousands += i;\n            } else if (i < 10000) {\n          \
    \      tenths += i;\n            }\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        long tenthsCount = tenths;\n  \
    \      if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \            tensCount = onesCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n            tensCount = onesCount;\n\
    \        }\n        if (onesCount > tenthsCount) {\n            onesCount = tenthsCount;\n\
    \            tensCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (tensCount > onesCount) {\n            tensCount = onesCount;\n        \
    \    onesCount = tensCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n            thousandsCount =\
    \ hundredsCount;\n        }\n        if (hundredsCount > onesCount) {\n      \
    \      hundredsCount = onesCount;\n            onesCount = hundredsCount;\n  \
    \      }\n        if (thousandsCount > onesCount) {\n            thousandsCount\
    \ = onesCount;\n            onesCount = thousandsCount;\n        }\n        if\
    \ (thousandsCount > tensCount) {\n            thousandsCount = tensCount;\n  \
    \          tensCount = thousandsCount;\n        }\n        if (thousandsCount\
    \ > hundredsCount) {\n            thousandsCount = hundredsCount;\n          \
    \  hundredsCount = thousandsCount;\n        }\n        if (thousand\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4sp8yik2.java:88: error: ')' expected\n        if (thousand\n \
    \                   ^\n/tmp/tmp4sp8yik2.java:89: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesDecimal = ones / Math.pow(10, ones.length());\n        long tensDecimal\
    \ = tens / Math.pow(10, tens.length());\n        long hundredsDecimal = (hundreds\
    \ / Math.pow(10, hundreds.length()));\n        long thousandsDecimal = (thousands\
    \ / Math.pow(10, thousands.length()));\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long onesDecimalDecimal = onesDecimal\
    \ / Math.pow(10, ones.length());\n        long tensDecimalDecimal = tensDecimal\
    \ / Math.pow(10, tens.length());\n        long hundredsDecimalDecimal = (hundredsDecimal\
    \ / Math.pow(10, hundreds.length()));\n        long thousandsDecimalDecimal =\
    \ (thousandsDecimal / Math.pow(10, thousands.length()));\n        long decimalDecimal\
    \ = onesDecimalDecimal + tensDecimalDecimal + hundredsDecimalDecimal + thousandsDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimal = onesDecimalDecimal / Math.pow(10, ones.length());\n\
    \        long tensDecimalDecimalDecimal = tensDecimalDecimal / Math.pow(10, tens.length());\n\
    \        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal / Math.pow(10,\
    \ hundreds.length()));\n        long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal\
    \ / Math.pow(10, thousands.length()));\n        long decimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ + tensDecimalDecimalDecimal + hundredsDecimalDecimalDecimal + thousandsDecimalDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / Math.pow(10,\
    \ ones.length());\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / Math.pow(10, tens.length());\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimal\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhjfntjm.java:48: error: ')' expected\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimal\n                                                \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long num : arr) {\n         \
    \   if (num == 1) {\n                ones++;\n            } else {\n         \
    \       zeros++;\n            }\n        }\n        long maxOnes = ones;\n   \
    \     long maxZeros = zeros;\n        long maxValue = ones + zeros;\n        long\
    \ maxOnesValue = ones;\n        long maxZerosValue = zeros;\n        long maxOnesZeros\
    \ = ones - zeros;\n        long maxZerosOnes = zeros - ones;\n        long maxOnesOnes\
    \ = ones - ones;\n        long maxZerosZeros = zeros - zeros;\n        long maxOnesZerosOnes\
    \ = ones - zeros - ones;\n        long maxZerosOnesZeros = zeros - ones - ones;\n\
    \        long maxOnesOnesZeros = ones - ones - ones;\n        long maxZerosOnesOnes\
    \ = zeros - ones - ones - ones;\n        long maxOnesZerosZeros = ones - zeros\
    \ - zeros - ones;\n        long maxOnesOnesOnes = ones - ones - ones - ones;\n\
    \        long maxZerosOnesZerosOnes = zeros - ones - ones - ones - ones;\n   \
    \     long maxOnesZerosOnesZeros = ones - zeros - ones - ones - ones;\n      \
    \  long maxOnesOnesOnesZeros = ones - ones - ones - ones - ones;\n        long\
    \ maxZerosOnesZerosZerosOnes = zeros - ones - ones - ones - ones - ones;\n   \
    \     long maxOnesZerosOnesOnesZeros = ones - zeros - ones - ones - ones - ones;\n\
    \        long maxOnesOnesOnesOnesZeros = ones - ones - ones - ones - ones - ones\
    \ - ones;\n        long maxZerosOnesZerosZerosZerosOnes = zeros - ones - ones\
    \ - ones - ones - ones - ones - ones;\n        long maxOnesZerosOnesOnesOnesZeros\
    \ = ones - zeros - ones - ones - ones - ones - ones - ones - ones;\n        long\
    \ maxOnesOnesOnesOnesOnesZeros = ones - ones - ones - ones - ones - ones - ones\
    \ - ones - ones - ones;\n        long maxZerosOnes\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnn1in2qf.java:53: error: ';' expected\n        long maxZerosOnes\n\
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n            total += l;\n        }\n        long onesTotal = ones\
    \ * 10l;\n        long tensTotal = tens * 10l;\n        long hundredsTotal = hundreds\
    \ * 10l;\n        long thousandsTotal = thousands * 10l;\n        long totalTotal\
    \ = total * 10l;\n        long onesTotal2 = onesTotal * onesTotal;\n        long\
    \ tensTotal2 = tensTotal * tensTotal;\n        long hundredsTotal2 = hundredsTotal\
    \ * hundredsTotal;\n        long thousandsTotal2 = thousandsTotal * thousandsTotal;\n\
    \        long totalTotal2 = totalTotal * totalTotal;\n        long onesTotal3\
    \ = onesTotal2 * onesTotal;\n        long tensTotal3 = tensTotal2 * tensTotal;\n\
    \        long hundredsTotal3 = hundredsTotal2 * hundredsTotal;\n        long thousandsTotal3\
    \ = thousandsTotal2 * thousandsTotal;\n        long totalTotal3 = totalTotal2\
    \ * totalTotal;\n        long onesTotal4 = onesTotal3 * onesTotal;\n        long\
    \ tensTotal4 = tensTotal3 * tensTotal;\n        long hundredsTotal4 = hundredsTotal3\
    \ * hundredsTotal;\n        long thousandsTotal4 = thousandsTotal3 * thousandsTotal;\n\
    \        long totalTotal4 = totalTotal3 * totalTotal;\n        long onesTotal5\
    \ = onesTotal4 * onesTotal;\n        long tensTotal5 = tensTotal4 * tensTotal;\n\
    \        long hundredsTotal5 = hundredsTotal4 * hundredsTotal;\n        long thousandsTotal5\
    \ = thousandsTotal4 * thousandsTotal;\n        long totalTotal5 = totalTotal4\
    \ * totalTotal;\n        long onesTotal6 = onesTotal5 * onesTotal;\n        long\
    \ tensTotal6 = tensTotal5 * tensTotal;\n        long hundredsTotal6 = hundredsTotal5\
    \ * hundreds\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjstys2dd.java:60: error: ';' expected\n        long hundredsTotal6\
    \ = hundredsTotal5 * hundreds\n                                              \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \      }\n        long maxOnes = ones;\n        long maxZeros = zeros;\n     \
    \   for (long l : arr) {\n            if (l == 1l) ones--;\n            else if\
    \ (l == 0l) zeros--;\n        }\n        if (maxOnes > maxZeros) maxOnes = maxZeros;\n\
    \        if (maxZeros > maxOnes) maxZeros = maxOnes;\n        if (maxOnes == maxZeros)\
    \ maxOnes = maxZeros = Long.MAX_VALUE;\n        if (maxZeros == maxOnes) maxZeros\
    \ = maxOnes = Long.MAX_VALUE;\n        long maxOnesDecimal = Long.parseLong(Long.toString(maxOnes));\n\
    \        long maxZerosDecimal = Long.parseLong(Long.toString(maxZeros));\n   \
    \     long maxOnesDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimal));\n\
    \        long maxZerosDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimal));\n\
    \        long maxOnesDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9_d44wn.java:48: error: variable maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = Long.parseLong(Long.toString(maxZerosDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \             ^\n/tmp/tmpw9_d44wn.java:48: error: cannot find symbol\n       \
    \ long maxZerosDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxZerosDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \                                                                            \
    \            ^\n  symbol:   variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpw9_d44wn.java:49: error: variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \             ^\n/tmp/tmpw9_d44wn.java:49: error: cannot find symbol\n       \
    \ long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = Long.parseLong(Long.toString(maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \                                                                            \
    \                  ^\n  symbol:   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            if (l == 1l) tens++;\n            if (l == 10l) hundreds++;\n\
    \            if (l == 100l) thousands++;\n        }\n        long onesCount =\
    \ ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long onesSum = 0;\n       \
    \ long tensSum = 0;\n        long hundredsSum = 0;\n        long thousandsSum\
    \ = 0;\n        for (Long l : arr) {\n            onesSum += l;\n            if\
    \ (l == 1l) tensSum += l;\n            if (l == 10l) hundredsSum += l;\n     \
    \       if (l == 100l) thousandsSum += l;\n        }\n        long onesSumCount\
    \ = onesSum;\n        long tensSumCount = tensSum;\n        long hundredsSumCount\
    \ = hundredsSum;\n        long thousandsSumCount = thousandsSum;\n        long\
    \ onesSumSum = 0;\n        long tensSumSum = 0;\n        long hundredsSumSum =\
    \ 0;\n        long thousandsSumSum = 0;\n        for (Long l : arr) {\n      \
    \      onesSumSum += l;\n            if (l == 1l) tensSumSum += l;\n         \
    \   if (l == 10l) hundredsSumSum += l;\n            if (l == 100l) thousandsSumSum\
    \ += l;\n        }\n        long onesSumSumCount = onesSumSum;\n        long tensSumSumCount\
    \ = tensSumSum;\n        long hundredsSumSumCount = hundredsSumSum;\n        long\
    \ thousandsSumSumCount = thousandsSumSum;\n        long onesSumSumSum = 0;\n \
    \       long tensSumSumSum = 0;\n        long hundredsSumSumSum = 0;\n       \
    \ long thousandsSumSumSum = 0;\n        for (Long l : arr) {\n            onesSumSumSum\
    \ += l;\n            if (l == 1l) tensSumSumSum += l;\n            if (l == 10l)\
    \ hundredsSumSumSum += l;\n            if (l == 100l) thousandsSumSumSum += l;\n\
    \        }\n        long one\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeukpv9_s.java:73: error: ';' expected\n        long one\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (long l : arr) {\n            if (l == 1l) ones++;\n            if (l\
    \ == 0l) zeros++;\n            if (l > max) max = l;\n        }\n        long\
    \ onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax = max;\n\
    \        long onesMin = ones;\n        long zerosMin = zeros;\n        long maxMin\
    \ = max;\n        long onesMaxMin = ones;\n        long zerosMaxMin = zeros;\n\
    \        long maxMaxMin = max;\n        long onesMinMax = ones;\n        long\
    \ zerosMinMax = zeros;\n        long maxMinMax = max;\n        long onesMaxMinMax\
    \ = ones;\n        long zerosMaxMinMax = zeros;\n        long maxMaxMinMax = max;\n\
    \        long onesMinMaxMax = ones;\n        long zerosMinMaxMax = zeros;\n  \
    \      long maxMinMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n     \
    \   long zerosMaxMinMaxMax = zeros;\n        long maxMaxMinMaxMax = max;\n   \
    \     long onesMinMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMinMaxMaxMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMaxMax\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ptxgtzc.java:71: error: ';' expected\n        long onesMaxMinMaxMaxMax\n\
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens\
    \ / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundred\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8cvpy4q.java:53: error: ';' expected\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundred\n                                                                \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (onesCount\
    \ == 0) {\n            onesCount = 1;\n        }\n        if (tensCount == 0)\
    \ {\n            tensCount = 1;\n        }\n        if (hundredsCount == 0) {\n\
    \            hundredsCount = 1;\n        }\n        if (thousandsCount == 0) {\n\
    \            thousandsCount = 1;\n        }\n        long onesCount2 = onesCount;\n\
    \        long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (onesCount2 > tensCount2)\
    \ {\n            onesCount2 = tensCount2;\n        }\n        if (onesCount2 >\
    \ hundredsCount2) {\n            onesCount2 = hundredsCount2;\n        }\n   \
    \     if (onesCount2 > thousandsCount2) {\n            onesCount2 = thousandsCount2;\n\
    \        }\n        if (tensCount2 > hundredsCount2) {\n            tensCount2\
    \ = hundredsCount2;\n        }\n        if (tensCount2 > thousandsCount2) {\n\
    \            tensCount2 = thousandsCount2;\n        }\n        if (hundredsCount2\
    \ > \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfm90sugs.java:90: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 10) {\n                hundreds\
    \ += i;\n            } else if (i < 100) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long i : arr) {\n            if (i > 0) {\n                onesCount\
    \ += i;\n            } else if (i < 0) {\n                tensCount += i;\n  \
    \          } else if (i < 10) {\n                hundredsCount += i;\n       \
    \     } else if (i < 100) {\n                thousandsCount += i;\n          \
    \  }\n        }\n        long onesCountReverse = 0;\n        long tensCountReverse\
    \ = 0;\n        long hundredsCountReverse = 0;\n        long thousandsCountReverse\
    \ = 0;\n        for (long i : arr) {\n            if (i > 0) {\n             \
    \   onesCountReverse += i;\n            } else if (i < 0) {\n                tensCountReverse\
    \ += i;\n            } else if (i < 10) {\n                hundredsCountReverse\
    \ += i;\n            } else if (i < 100) {\n                thousandsCountReverse\
    \ += i;\n            }\n        }\n        long onesCountReverseReverse = 0;\n\
    \        long tensCountReverseReverse = 0;\n        long hundredsCountReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverse = 0;\n        for (long i :\
    \ arr) {\n            if (i > 0) {\n                onesCountReverseReverse +=\
    \ i;\n            } else if (i < 0) {\n                tensCountReverseReverse\
    \ += i;\n            } else if (i < 10) {\n                hundredsCountReverseReverse\
    \ += i;\n            } else if (i < 100) {\n                thousandsCountReverseReverse\
    \ += i;\n            }\n        }\n        long onesCountReverseReverseReverse\
    \ = 0;\n        long tensCountReverseReverseReverse = 0;\n        long hundredsCountReverseReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverseReverse = 0;\n        for (long\
    \ i : arr) {\n            if (i > 0) {\n                onesCountReverseReverseReverse\
    \ += i;\n            } else if (i < 0) {\n                tensCountReverseReverseReverse\
    \ += i;\n            } else if (i < 10) {\n                hundredsCountReverseReverseReverse\
    \ += i;\n            } else if (i < 100) {\n                thousandsCountReverseReverseReverse\
    \ += i;\n            }\n        }\n        long onesCountReverseReverseReverseReverseReverse\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjgadrc6.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        if (ones > 0) {\n            result.add(ones);\n \
    \       }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6o4nbmq.java:51)\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        long onesNum = ones;\n        long tensNum = tens;\n\
    \        long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n\
    \        if (onesNum > 0) {\n            result.add(onesNum);\n        }\n   \
    \     if (tensNum > 0) {\n            result.add(tensNum);\n        }\n      \
    \  if (hundredsNum > 0) {\n            result.add(hundredsNum);\n        }\n \
    \       if (thousandsNum > 0) {\n            result.add(thousandsNum);\n     \
    \   }\n        if (onesNum > 0) {\n            onesNum--;\n        }\n       \
    \ if (tensNum > 0) {\n            tensNum--;\n        }\n        if (hundredsNum\
    \ > 0) {\n            hundredsNum--;\n        }\n        if (thousandsNum > 0)\
    \ {\n            thousandsNum--;\n        }\n        if (onesNum > 0) {\n    \
    \        result.add(onesNum);\n        }\n        if (tensNum > 0) {\n       \
    \     result.add(tensNum);\n        }\n        if (hundredsNum > 0) {\n      \
    \      result.add(hundredsNum);\n        }\n        if (thousandsNum > 0) {\n\
    \            result.add(thousandsNum);\n        }\n        if (onesNum > 0) {\n\
    \            onesNum--;\n        }\n        if (tensNum > 0) {\n            tensNum--;\n\
    \        }\n        if (hundredsNum > 0) {\n            hundredsNum--;\n     \
    \   }\n        if (thousandsNum > 0) {\n            thousandsNum--;\n        }\n\
    \        if (onesNum > 0) {\n            result.add(onesNum);\n        }\n   \
    \     if (tensNum > 0) {\n            result.add(tensNum);\n        }\n      \
    \  if (hundredsNum > 0) {\n            result.add(hundredsNum);\n        }\n \
    \       if (thousandsNum > 0) {\n            result.add(thousandsNum);\n     \
    \   }\n        if (onesNum > 0) {\n            onesNum--;\n        }\n       \
    \ if (tensNum > 0) {\n            tensNum--;\n        }\n        if (hundredsNum\
    \ > 0) {\n            hundredsNum--;\n        }\n        if (thousandsNum > 0)\
    \ {\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxlbc9iz.java:111: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l)\n                ones++;\n            else\n       \
    \         zeros++;\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n\
    \        long maxOnesCount2 = 0;\n        long maxZerosCount2 = 0;\n        long\
    \ maxOnesCount3 = 0;\n        long maxZerosCount3 = 0;\n        long maxOnesCount4\
    \ = 0;\n        long maxZerosCount4 = 0;\n        long maxOnesCount5 = 0;\n  \
    \      long maxZerosCount5 = 0;\n        long maxOnesCount6 = 0;\n        long\
    \ maxZerosCount6 = 0;\n        long maxOnesCount7 = 0;\n        long maxZerosCount7\
    \ = 0;\n        long maxOnesCount8 = 0;\n        long maxZerosCount8 = 0;\n  \
    \      long maxOnesCount9 = 0;\n        long maxZerosCount9 = 0;\n        long\
    \ maxOnesCount10 = 0;\n        long maxZerosCount10 = 0;\n        long maxOnesCount11\
    \ = 0;\n        long maxZerosCount11 = 0;\n        long maxOnesCount12 = 0;\n\
    \        long maxZerosCount12 = 0;\n        long maxOnesCount13 = 0;\n       \
    \ long maxZerosCount13 = 0;\n        long maxOnesCount14 = 0;\n        long maxZerosCount14\
    \ = 0;\n        long maxOnesCount15 = 0;\n        long maxZerosCount15 = 0;\n\
    \        long maxOnesCount16 = 0;\n        long maxZerosCount16 = 0;\n       \
    \ long maxOnesCount17 = 0;\n        long maxZerosCount17 = 0;\n        long maxOnesCount18\
    \ = 0;\n        long maxZerosCount18 = 0;\n        long maxOnesCount19 = 0;\n\
    \        long maxZerosCount19 = 0;\n        long maxOnesCount20 = 0;\n       \
    \ long maxZerosCount20 = 0;\n        long maxOnesCount21 = 0;\n        long maxZerosCount21\
    \ = 0;\n        long maxOnesCount22 = 0;\n        long maxZerosCount22 = 0;\n\
    \        long maxOnesCount23 = 0;\n        long maxZerosCount23 = 0;\n       \
    \ long maxOnesCount24 = 0;\n        long maxZerosCount24 = 0;\n        long \n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x8c_g6y.java:79: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp5x8c_g6y.java:79: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n        }\n        for (Long l : arr) {\n            if (l == 0) {\n   \
    \             tens += l;\n            }\n            if (l == 1) {\n         \
    \       hundreds += l;\n            }\n            if (l == 2) {\n           \
    \     thousands += l;\n            }\n        }\n        long onesDecimal = ones\
    \ / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal =\
    \ (hundreds / 10) * 10;\n        long thousandsDecimal = (thousands / 10) * 10;\n\
    \        long onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal\
    \ = tensDecimal / 10;\n        long hundredsDecimalDecimal = (hundredsDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimal = (thousandsDecimal / 10)\
    \ * 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal / 10) * 10;\n      \
    \  long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal / 10) * 10;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptbidf4og.java:60: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \                                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n            else\
    \ result.add(i);\n        }\n        Arrays.sort(arr);\n        if (ones > zeros)\
    \ {\n            Collections.reverse(arr);\n            Collections.reverse(result.subList(0,\
    \ result.size() - ones));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrm45nz0.java:27: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpgrm45nz0.java:30: error: incompatible types: possible lossy\
    \ conversion from long to int\n            Collections.reverse(result.subList(0,\
    \ result.size() - ones));\n                                                  \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n            else\n\
    \                res.add(l);\n        }\n        long onesRes = ones;\n      \
    \  long tensRes = tens;\n        long hundredsRes = hundreds;\n        long thousandsRes\
    \ = thousands;\n        long totalRes = ones + tens + hundreds + thousands;\n\
    \        long onesSort = ones;\n        long tensSort = tens;\n        long hundredsSort\
    \ = hundreds;\n        long thousandsSort = thousands;\n        long totalSort\
    \ = onesSort + tensSort + hundredsSort + thousandsSort;\n        if (totalRes\
    \ > totalSort) {\n            onesRes = onesSort;\n            tensRes = tensSort;\n\
    \            hundredsRes = hundredsSort;\n            thousandsRes = thousandsSort;\n\
    \            totalRes = totalSort;\n        }\n        long onesSortRes = onesRes;\n\
    \        long tensSortRes = tensRes;\n        long hundredsSortRes = hundredsRes;\n\
    \        long thousandsSortRes = thousandsRes;\n        long totalSortRes = onesSortRes\
    \ + tensSortRes + hundredsSortRes + thousandsSortRes;\n        if (totalRes >\
    \ totalSortRes) {\n            onesSortRes = onesRes;\n            tensSortRes\
    \ = tensRes;\n            hundredsSortRes = hundredsRes;\n            thousandsSortRes\
    \ = thousandsRes;\n            totalSortRes = totalRes;\n        }\n        long\
    \ onesSortResRes = onesSortRes;\n        long tensSortResRes = tensSortRes;\n\
    \        long hundredsSortResRes = hundredsSortRes;\n        long thousandsSortResRes\
    \ = thousandsSortRes;\n        long totalSortResRes = onesSortResRes + tensSortResRes\
    \ + \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxt2rw2y.java:71: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxo0q7vx.java:90: error: ';' expected\n        long oneth\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            if (ones >= 1000000000) {\n                tens += ones / 1000000000;\n\
    \                ones = ones - tens * 1000000000;\n            }\n           \
    \ if (ones >= 1000000) {\n                hundreds += ones / 1000000;\n      \
    \          ones = ones - hundreds * 1000000;\n            }\n            if (ones\
    \ >= 1000) {\n                thousands += ones / 1000;\n                ones\
    \ = ones - thousands * 1000;\n            }\n        }\n        long onesRemaining\
    \ = ones;\n        long tensRemaining = tens;\n        long hundredsRemaining\
    \ = hundreds;\n        long thousandsRemaining = thousands;\n        for (Long\
    \ l : arr) {\n            if (onesRemaining >= 1000000000) {\n               \
    \ result.add(tensRemaining * 1000000000);\n                onesRemaining -= tensRemaining\
    \ * 1000000000;\n            }\n            if (onesRemaining >= 1000000) {\n\
    \                result.add(hundredsRemaining * 1000000);\n                onesRemaining\
    \ -= hundredsRemaining * 1000000;\n            }\n            if (onesRemaining\
    \ >= 1000) {\n                result.add(thousandsRemaining * 1000);\n       \
    \         onesRemaining -= thousandsRemaining * 1000;\n            }\n       \
    \     result.add(onesRemaining);\n            onesRemaining -= onesRemaining;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn_jloq_.java:63)\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n     \
    \   long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n        long\
    \ onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMax2 = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMax));\n        long zerosMax2 = Long.parseLong(Long.toBinaryString(zerosMax\
    \ * zerosMax));\n        long onesMin2 = Long.parseLong(Long.toBinaryString(onesMin\
    \ * onesMin));\n        long zerosMin2 = Long.parseLong(Long.toBinaryString(zerosMin\
    \ * zerosMin));\n        long onesMax3 = Long.parseLong(Long.toBinaryString(onesMax2\
    \ * onesMax));\n        long zerosMax3 = Long.parseLong(Long.toBinaryString(zerosMax2\
    \ * zerosMax));\n        long onesMin3 = Long.parseLong(Long.toBinaryString(onesMin2\
    \ * onesMin));\n        long zerosMin3 = Long.parseLong(Long.toBinaryString(zerosMin2\
    \ * zerosMin));\n        long onesMax4 = Long.parseLong(Long.toBinaryString(onesMax3\
    \ * onesMax));\n        long zerosMax4 = Long.parseLong(Long.toBinaryString(zerosMax3\
    \ * zerosMax));\n        long onesMin4 = Long.parseLong(Long.toBinaryString(onesMin3\
    \ * onesMin));\n        long zerosMin4 = Long.parseLong(Long.toBinaryString(zerosMin3\
    \ * zerosMin));\n        long onesMax5 = Long.parseLong(Long.toBinaryString(onesMax4\
    \ * onesMax));\n        long zerosMax5 = Long.parseLong(Long.toBinaryString(zerosMax4\
    \ * zerosMax));\n        long onesMin5 = Long.parseLong(Long.toBinaryString(onesMin4\
    \ * onesMin));\n        long zerosMin5 = Long.parseLong(Long.toBinaryString(zerosMin4\
    \ * zerosMin));\n        long onesMax6 = Long.parseLong(Long.toBinaryString(onesMax5\
    \ * onesMax));\n        long zerosMax6 = Long.parseLong\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86u16edv.java:48: error: ';' expected\n        long zerosMax6 =\
    \ Long.parseLong\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthss = 0;\n        long onethss = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthss = 0;\n       \
    \ long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzwy8fke.java:33: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:34: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:35: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:36: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:37: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:38: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:39: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:40: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:41: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:42: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:43: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java:44: error: variable thousandthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long thousandthss = 0;\n     \
    \        ^\n/tmp/tmpyzwy8fke.java:45: error: variable hundredthss is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthss = 0;\n      \
    \       ^\n/tmp/tmpyzwy8fke.java"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ result.add(l);\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long onesMin = ones;\n        long zerosMin = zeros;\n   \
    \     long onesMaxMin = ones;\n        long zerosMaxMin = zeros;\n        long\
    \ onesMaxMinMax = ones;\n        long zerosMaxMinMax = zeros;\n        long onesMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMin = zeros;\n        long onesMaxMinMaxMinMax\
    \ = ones;\n        long zerosMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMin = zeros;\n        long onesMaxMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMin = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMax = zeros;\n        long\
    \ onesMaxMinMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMax = ones;\n     \
    \   long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMax = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMax = zeros;\n    \
    \    long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = ones;\n\
    \        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppg6ce_xj.java:59: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += -i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount += onesCount / 10;\n            onesCount\
    \ %= 10;\n        } else if (onesCount > thousandsCount) {\n            onesCount\
    \ = thousandsCount;\n            tensCount += onesCount / 100;\n            onesCount\
    \ %= 100;\n        }\n        if (onesCount > hundredsCount) {\n            hundredsCount\
    \ = onesCount;\n            thousandsCount += hundredsCount / 100;\n         \
    \   hundredsCount %= 100;\n        } else if (onesCount > thousandsCount) {\n\
    \            thousandsCount = onesCount;\n            hundredsCount += thousandsCount\
    \ / 1000;\n            thousandsCount %= 1000;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n         \
    \   thousandsCount += hundredsCount / 1000;\n            hundredsCount %= 1000;\n\
    \        } else if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount += hundredsCount / 1000;\n   \
    \         hundredsCount %= 1000;\n        }\n        if (thousandsCount > hundredsCount)\
    \ {\n            thousandsCount = hundredsCount;\n            hundredsCount +=\
    \ thousandsCount / 1000;\n            thousandsCount %= 1000;\n        } else\
    \ if (thousandsCount > hundredsCount) {\n            thousandsCount = hundredsCount;\n\
    \            hundredsCount += thousandsCount / 1000;\n            thousandsCount\
    \ %= 1000;\n        }\n        if (hundredsCount > thousandsCount) {\n       \
    \     hundredsCount = thousandsCount;\n            thousandsCount += hundredsCount\
    \ / 1000;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuv311fba.java:81: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_vc8ku9.java:31: error: variable tenthths is already defined in\
    \ method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n            \
    \ ^\n/tmp/tmpw_vc8ku9.java:32: error: variable hundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n     \
    \        ^\n/tmp/tmpw_vc8ku9.java:33: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:34: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpw_vc8ku9.java:35: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:36: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:37: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpw_vc8ku9.java:38: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:39: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:40: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpw_vc8ku9.java:41: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:42: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpw_vc8ku9.java:43: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpw_vc8ku9.java:44: error: variab"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens\
    \ / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n        long thousandsDecimal\
    \ = (thousands / 10) * 10;\n        long decimal = onesDecimal + tensDecimal +\
    \ hundredsDecimal + thousandsDecimal;\n        long onesDecimalDecimal = onesDecimal\
    \ / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = (hundredsDecimal / 10) * 10;\n        long thousandsDecimalDecimal = (thousandsDecimal\
    \ / 10) * 10;\n        long decimalDecimal = onesDecimalDecimal + tensDecimalDecimal\
    \ + hundredsDecimalDecimal + thousandsDecimalDecimal;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal\
    \ / 10) * 10;\n        long decimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ + tensDecimalDecimalDecimal + hundredsDecimalDecimalDecimal + thousandsDecimalDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long decimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ + tensDecimalDecimalDecimalDecimal + \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa2rs6g_o.java:51: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long onesSum = 0;\n        long tensSum = 0;\n       \
    \ long hundredsSum = 0;\n        long thousandsSum = 0;\n        for (long i :\
    \ arr) {\n            if (i > 0) {\n                onesSum += i;\n          \
    \  } else if (i < 0) {\n                tensSum += i;\n            } else if (i\
    \ < 100) {\n                hundredsSum += i;\n            } else if (i < 1000)\
    \ {\n                thousandsSum += i;\n            }\n        }\n        long\
    \ onesSumCount = onesSum;\n        long tensSumCount = tensSum;\n        long\
    \ hundredsSumCount = hundredsSum;\n        long thousandsSumCount = thousandsSum;\n\
    \        long onesSumSum = 0;\n        long tensSumSum = 0;\n        long hundredsSumSum\
    \ = 0;\n        long thousandsSumSum = 0;\n        for (long i : arr) {\n    \
    \        if (i > 0) {\n                onesSumSum += i;\n            } else if\
    \ (i < 0) {\n                tensSumSum += i;\n            } else if (i < 100)\
    \ {\n                hundredsSumSum += i;\n            } else if (i < 1000) {\n\
    \                thousandsSumSum += i;\n            }\n        }\n        long\
    \ onesSumSumCount = onesSumSum;\n        long tensSumSumCount = tensSumSum;\n\
    \        long hundredsSumSumCount = hundredsSumSum;\n        long thousandsSumSumCount\
    \ = thousandsSumSum;\n        long onesSumSumSum = 0;\n        long tensSumSumSum\
    \ = 0;\n        long hundredsSumSumSum = 0;\n        long thousandsSumSumSum =\
    \ 0;\n        for (long i : arr) {\n            if (i > 0) {\n               \
    \ onesSumSumSum += i;\n            } else if (i < 0) {\n                tensSumSumSum\
    \ += i;\n            } else if (i < 100) {\n                hundredsSumSumSum\
    \ += i;\n            } else if (i < 1000) {\n                \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_7417kk.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousand = 0;\n       \
    \ long oneTenThousands = 0;\n        long oneOneThousands = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneThousand = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneOneThousand = 0;\n        long oneTenThousand = 0;\n        long\
    \ oneOneThousand = 0;\n        long oneOneHundred = 0;\n        long oneOneThousand\
    \ = 0;\n        long oneTenThousand = 0;\n        long oneOneThousand = 0;\n \
    \       long oneOneHundred = 0;\n        long oneOneThousand = 0;\n        long\
    \ oneTenThousand = 0;\n        long oneOneThousand = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneOneThousand = 0;\n        long oneTenThousand = 0;\n \
    \       long oneOneThousand = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneOneThousand = 0;\n        long oneTenThousand = 0;\n        long oneOneThousand\
    \ = 0;\n        long oneOneHundred = 0;\n        long oneOneThousand = 0;\n  \
    \      long oneTenThousand = 0;\n        long oneOneThousand = 0;\n        long\
    \ oneOneHundred = 0;\n        long oneOneThousand = 0;\n        long oneTenThousand\
    \ = 0;\n        long oneOneThousand = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneOneThousand = 0;\n        long oneTenThousand = 0;\n        long\
    \ oneOneThousand = 0;\n        long oneOneHundred = 0;\n        long oneOneThousand\
    \ = 0;\n        long oneTenThousand = 0;\n        long oneOneThousand = 0;\n \
    \       long oneOneHundred = 0;\n        long oneOneThousand = 0;\n        long\
    \ oneTenThousand = 0;\n        long oneOneThousand = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneOneThousand = 0;\n        long oneTenThousand = 0;\n \
    \       long oneOneThousand = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneOneThousand = 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt7bi7ji8.java:34: error: variable oneOneThousand is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long oneOneThousand = 0;\n   \
    \          ^\n/tmp/tmpt7bi7ji8.java:36: error: variable oneOneThousand is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand =\
    \ 0;\n             ^\n/tmp/tmpt7bi7ji8.java:37: error: variable oneOneHundred\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneHundred\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:38: error: variable oneOneThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:39: error: variable oneTenThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneTenThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:40: error: variable oneOneThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:41: error: variable oneOneHundred\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneHundred\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:42: error: variable oneOneThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:43: error: variable oneTenThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneTenThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:44: error: variable oneOneThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:45: error: variable oneOneHundred\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneHundred\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:46: error: variable oneOneThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long oneOneThousand\
    \ = 0;\n             ^\n/tmp/tmpt7bi7ji8.java:47: error: variable oneTenThousand\
    \ is already defined in method sortArray(ArrayList<Long>)\n        l"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l.longValue() == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(arr);\n            for (Long l : arr)\
    \ {\n                if (l.longValue() == 1) {\n                    res.add(l);\n\
    \                }\n            }\n        } else if (zeros > ones) {\n      \
    \      Collections.sort(arr);\n            for (Long l : arr) {\n            \
    \    if (l.longValue() == 0) {\n                    res.add(l);\n            \
    \    }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l.longValue() == 0) {\n\
    \                    res.add(l);\n                }\n            }\n         \
    \   for (Long l : arr) {\n                if (l.longValue() == 1) {\n        \
    \            res.add(l);\n                }\n            }\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4j232fh.java:60)\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ % 1000 == 0) {\n                thousands++;\n            } else if (i % 100\
    \ == 0) {\n                hundreds++;\n            } else if (i % 10 == 0) {\n\
    \                tens++;\n            } else if (i % 10 == 0) {\n            \
    \    ones++;\n            } else {\n                result.add(i);\n         \
    \   }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n \
    \       long hundredsCount = 0;\n        long thousandsCount = 0;\n        long\
    \ total = 0;\n        for (long i : result) {\n            if (i % 1000 == 0)\
    \ {\n                thousandsCount++;\n                total += i;\n        \
    \    } else if (i % 100 == 0) {\n                hundredsCount++;\n          \
    \      total += i;\n            } else if (i % 10 == 0) {\n                tensCount++;\n\
    \                total += i;\n            } else if (i % 10 == 0) {\n        \
    \        onesCount++;\n                total += i;\n            } else {\n   \
    \             result.add(i);\n            }\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long tensCount2 = tensCount * tens;\n        long\
    \ hundredsCount2 = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount\
    \ * thousands;\n        long total2 = total * total;\n        long onesCount3\
    \ = onesCount2 * ones;\n        long tensCount3 = tensCount2 * tens;\n       \
    \ long hundredsCount3 = hundredsCount2 * hundreds;\n        long thousandsCount3\
    \ = thousandsCount2 * thousands;\n        long total3 = total2 * total;\n    \
    \    long onesCount4 = onesCount3 * ones;\n        long tensCount4 = tensCount3\
    \ * tens;\n        long hundredsCount4 = hundredsCount3 * hundreds;\n        long\
    \ thousandsCount4 = thousandsCount3 * thousands;\n        long total4 = total3\
    \ * total;\n        long onesCount5 = onesCount4 * ones;\n        long tensCount5\
    \ = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n\
    \        long thousandsCount5 = thousandsCount4 * thousands;\n        long total5\
    \ = total4 * total;\n        long onesCount6 = onesCount5 * ones;\n        long\
    \ tensCount6 = tensCount5 * tens;\n        long hundredsCount6 = hund\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu9jaqew.java:82: error: ';' expected\n        long hundredsCount6\
    \ = hund\n                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesDiff = ones - zeros;\n\
    \        if (onesDiff == 0) return arr;\n        long onesDiffAbs = Math.abs(onesDiff);\n\
    \        long onesDiffAbsMul = onesDiffAbs * onesDiffAbs;\n        long onesDiffMul\
    \ = onesDiff * onesDiff;\n        long onesDiffMulAbs = onesDiffMul * onesDiffMul;\n\
    \        long onesDiffMulAbsMul = onesDiffMulAbs * onesDiffMulAbs;\n        long\
    \ onesDiffMulAbsMul2 = onesDiffMulAbsMul * onesDiffMulAbsMul;\n        long onesDiffMulAbsMul3\
    \ = onesDiffMulAbsMul2 * onesDiffMulAbsMul;\n        long onesDiffMulAbsMul4 =\
    \ onesDiffMulAbsMul3 * onesDiffMulAbsMul;\n        long onesDiffMulAbsMul5 = onesDiffMulAbsMul4\
    \ * onesDiffMulAbsMul;\n        long onesDiffMulAbsMul6 = onesDiffMulAbsMul5 *\
    \ onesDiffMulAbsMul;\n        long onesDiffMulAbsMul7 = onesDiffMulAbsMul6 * onesDiffMulAbsMul;\n\
    \        long onesDiffMulAbsMul8 = onesDiffMulAbsMul7 * onesDiffMulAbsMul;\n \
    \       long onesDiffMulAbsMul9 = onesDiffMulAbsMul8 * onesDiffMulAbsMul;\n  \
    \      long onesDiffMulAbsMul10 = onesDiffMulAbsMul9 * onesDiffMulAbsMul;\n  \
    \      long onesDiffMulAbsMul11 = onesDiffMulAbsMul10 * onesDiffMulAbsMul;\n \
    \       long onesDiffMulAbsMul12 = onesDiffMulAbsMul11 * onesDiffMulAbsMul;\n\
    \        long onesDiffMulAbsMul13 = onesDiffMulAbsMul12 * onesDiffMulAbsMul;\n\
    \        long onesDiffMulAbsMul14 = onesDiffMul\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp311lho4g.java:47: error: ';' expected\n        long onesDiffMulAbsMul14\
    \ = onesDiffMul\n                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ > 0) {\n                ones++;\n            } else if (num < 0) {\n       \
    \         tens++;\n            } else if (num >= 100) {\n                hundreds++;\n\
    \            } else if (num >= 1000) {\n                thousands++;\n       \
    \     }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long num : arr) {\n            if (num > 0) {\n                onesCount++;\n\
    \            } else if (num < 0) {\n                tensCount++;\n           \
    \ } else if (num >= 100) {\n                hundredsCount++;\n            } else\
    \ if (num >= 1000) {\n                thousandsCount++;\n            }\n     \
    \   }\n        long onesCount2 = onesCount * ones;\n        long tensCount2 =\
    \ tensCount * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n\
    \        long thousandsCount2 = thousandsCount * thousands;\n        long onesCount3\
    \ = onesCount2 * ones;\n        long tensCount3 = tensCount2 * tens;\n       \
    \ long hundredsCount3 = hundredsCount2 * hundreds;\n        long thousandsCount3\
    \ = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3 * ones;\n\
    \        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3\
    \ * hundreds;\n        long thousandsCount4 = thousandsCount3 * thousands;\n \
    \       long onesCount5 = onesCount4 * ones;\n        long tensCount5 = tensCount4\
    \ * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n        long\
    \ thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5\
    \ * ones;\n        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6\
    \ = hundredsCount5 * hundreds;\n        long thousandsCount6 = thousandsCount5\
    \ * thousands;\n        long onesCount7 = onesCount6 * ones;\n        long tensCount7\
    \ = tensCount6 * tens;\n        long hundredsCount7 = hundredsCount6 * hundreds;\n\
    \        long thousandsCount7 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhc061mj.java:75: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        if\
    \ (ones > 0) {\n            Collections.sort(arr);\n            int index = arr.indexOf(1l);\n\
    \            while (index != -1) {\n                result.add(arr.get(index));\n\
    \                index = arr.indexOf(1l, index + 1);\n            }\n        }\n\
    \        if (tens > 0) {\n            Collections.sort(arr);\n            int\
    \ index = arr.indexOf(10l);\n            while (index != -1) {\n             \
    \   result.add(arr.get(index));\n                index = arr.indexOf(10l, index\
    \ + 1);\n            }\n        }\n        if (hundreds > 0) {\n            Collections.sort(arr);\n\
    \            int index = arr.indexOf(100l);\n            while (index != -1) {\n\
    \                result.add(arr.get(index));\n                index = arr.indexOf(100l,\
    \ index + 1);\n            }\n        }\n        if (thousands > 0) {\n      \
    \      Collections.sort(arr);\n            int index = arr.indexOf(1000l);\n \
    \           while (index != -1) {\n                result.add(arr.get(index));\n\
    \                index = arr.indexOf(1000l, index + 1);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe09pcu7p.java:36: error: method indexOf in class ArrayList<E> cannot\
    \ be applied to given types;\n                index = arr.indexOf(1l, index +\
    \ 1);\n                           ^\n  required: Object\n  found:    long,int\n\
    \  reason: actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n/tmp/tmpe09pcu7p.java:44: error:\
    \ method indexOf in class ArrayList<E> cannot be applied to given types;\n   \
    \             index = arr.indexOf(10l, index + 1);\n                         \
    \  ^\n  required: Object\n  found:    long,int\n  reason: actual and formal argument\
    \ lists differ in length\n  where E is a type-variable:\n    E extends Object\
    \ declared in class ArrayList\n/tmp/tmpe09pcu7p.java:52: error: method indexOf\
    \ in class ArrayList<E> cannot be applied to given types;\n                index\
    \ = arr.indexOf(100l, index + 1);\n                           ^\n  required: Object\n\
    \  found:    long,int\n  reason: actual and formal argument lists differ in length\n\
    \  where E is a type-variable:\n    E extends Object declared in class ArrayList\n\
    /tmp/tmpe09pcu7p.java:60: error: method indexOf in class ArrayList<E> cannot be\
    \ applied to given types;\n                index = arr.indexOf(1000l, index +\
    \ 1);\n                           ^\n  required: Object\n  found:    long,int\n\
    \  reason: actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n4 errors\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i.longValue() == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(arr);\n            for (Long i : arr)\
    \ {\n                if (i.longValue() == 1) {\n                    result.add(i);\n\
    \                }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i.longValue() == 0) {\n\
    \                    result.add(i);\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0vuastmp.java:48)\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    Collections.sort(res);\n        } else {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue));\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpum9lvjn9.java:36)\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            ones += l;\n        }\n        for (Long l : arr) {\n           \
    \ zeros += l;\n        }\n        long onesMinusZeros = ones - zeros;\n      \
    \  long onesMinusOnes = ones - ones;\n        long onesMinusTwos = ones - twos;\n\
    \        long onesMinusThrees = ones - threes;\n        long onesMinusFours =\
    \ ones - fours;\n        long onesMinusFives = ones - fives;\n        long onesMinusSixes\
    \ = ones - sixes;\n        long onesMinusSevens = ones - sevens;\n        long\
    \ onesMinusEights = ones - eights;\n        long onesMinusNines = ones - nines;\n\
    \        long onesMinusTens = ones - tens;\n        long onesMinusElevens = ones\
    \ - elevens;\n        long onesMinusTwelves = ones - twelves;\n        long onesMinusThirteens\
    \ = ones - thirteens;\n        long onesMinusFourteens = ones - fourteens;\n \
    \       long onesMinusFifteens = ones - fifteens;\n        long onesMinusSixteens\
    \ = ones - sixteens;\n        long onesMinusSeventeens = ones - seventeens;\n\
    \        long onesMinusEighteens = ones - eighteens;\n        long onesMinusNineteens\
    \ = ones - nineteens;\n        long onesMinusTwenty = ones - twenty;\n       \
    \ long onesMinusThirty = ones - thirty;\n        long onesMinusForty = ones -\
    \ forty;\n        long onesMinusFifty = ones - fifty;\n        long onesMinusSixty\
    \ = ones - sixty;\n        long onesMinusSeventy = ones - seventy;\n        long\
    \ onesMinusEighty = ones - eighty;\n        long onesMinusNinety = ones - ninety;\n\
    \        long onesMinusOne = ones - one;\n        long onesMinusTwo = ones - two;\n\
    \        long onesMinusThree = ones - three;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_jdn4o3.java:31: error: cannot find symbol\n        long onesMinusTwos\
    \ = ones - twos;\n                                    ^\n  symbol:   variable\
    \ twos\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:32: error: cannot find\
    \ symbol\n        long onesMinusThrees = ones - threes;\n                    \
    \                  ^\n  symbol:   variable threes\n  location: class Problem\n\
    /tmp/tmpo_jdn4o3.java:33: error: cannot find symbol\n        long onesMinusFours\
    \ = ones - fours;\n                                     ^\n  symbol:   variable\
    \ fours\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:34: error: cannot find\
    \ symbol\n        long onesMinusFives = ones - fives;\n                      \
    \               ^\n  symbol:   variable fives\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:35:\
    \ error: cannot find symbol\n        long onesMinusSixes = ones - sixes;\n   \
    \                                  ^\n  symbol:   variable sixes\n  location:\
    \ class Problem\n/tmp/tmpo_jdn4o3.java:36: error: cannot find symbol\n       \
    \ long onesMinusSevens = ones - sevens;\n                                    \
    \  ^\n  symbol:   variable sevens\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:37:\
    \ error: cannot find symbol\n        long onesMinusEights = ones - eights;\n \
    \                                     ^\n  symbol:   variable eights\n  location:\
    \ class Problem\n/tmp/tmpo_jdn4o3.java:38: error: cannot find symbol\n       \
    \ long onesMinusNines = ones - nines;\n                                     ^\n\
    \  symbol:   variable nines\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:39:\
    \ error: cannot find symbol\n        long onesMinusTens = ones - tens;\n     \
    \                               ^\n  symbol:   variable tens\n  location: class\
    \ Problem\n/tmp/tmpo_jdn4o3.java:40: error: cannot find symbol\n        long onesMinusElevens\
    \ = ones - elevens;\n                                       ^\n  symbol:   variable\
    \ elevens\n  location: class Problem\n/tmp/tmpo_jdn4o3.java:41: error: cannot\
    \ find symbol\n        long onesMinusTwelves = ones - twelves;\n             \
    \                          ^\n  symbol:   var"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        if (ones > 0) {\n            res.add(ones);\n    \
    \    }\n        if (tens > 0) {\n            res.add(tens);\n        }\n     \
    \   if (hundreds > 0) {\n            res.add(hundreds);\n        }\n        if\
    \ (thousands > 0) {\n            res.add(thousands);\n        }\n        if (ones\
    \ > 0) {\n            res.add(ones);\n        }\n        if (tens > 0) {\n   \
    \         res.add(tens);\n        }\n        if (hundreds > 0) {\n           \
    \ res.add(hundreds);\n        }\n        if (thousands > 0) {\n            res.add(thousands);\n\
    \        }\n        if (ones > 0) {\n            res.add(ones);\n        }\n \
    \       if (tens > 0) {\n            res.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            res.add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            res.add(thousands);\n        }\n        if (ones > 0) {\n   \
    \         res.add(ones);\n        }\n        if (tens > 0) {\n            res.add(tens);\n\
    \        }\n        if (hundreds > 0) {\n            res.add(hundreds);\n    \
    \    }\n        if (thousands > 0) {\n            res.add(thousands);\n      \
    \  }\n        if (ones > 0) {\n            res.add(ones);\n        }\n       \
    \ if (tens > 0) {\n            res.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            res.add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            res.add(thousands);\n        }\n        if (ones > 0) {\n   \
    \         res.add(ones);\n        }\n        if (tens > 0) {\n            res.add(tens);\n\
    \        }\n        if (hundreds > 0) {\n            res.add(hundreds);\n    \
    \    }\n        if (thousands > 0) {\n            res.add(thousands);\n      \
    \  }\n        if (ones > 0) {\n            res.add(ones);\n        }\n       \
    \ if (tens > 0) {\n            res.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            res.add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            res.add(thousands);\n        }\n        if (ones > 0) {\n   \
    \         res.add(ones);\n        }\n        if (tens > 0) {\n            res.add(tens);\n\
    \        }\n        if (hundreds > 0) {\n            res.add(hundreds);\n    \
    \    }\n        if (thousands > 0) {\n            res.add(thousands);\n      \
    \  }\n        if (ones > 0) {\n            res.add(ones);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6x5il2y7.java:135: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n        }\n  \
    \      if (ones > zeros) {\n            Collections.sort(arr);\n            for\
    \ (long i : arr) {\n                if (i == 1l) result.add(i);\n            \
    \    else if (i == 0l) result.add(0l);\n            }\n        } else if (zeros\
    \ > ones) {\n            Collections.sort(arr);\n            for (long i : arr)\
    \ {\n                if (i == 0l) result.add(i);\n                else if (i ==\
    \ 1l) result.add(1l);\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 0l) result.add(i);\n\
    \                else if (i == 1l) result.add(0l);\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcs05j_c.java:48)\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ % 2 == 1) {\n                ones++;\n            } else if (i % 10 == 1) {\n\
    \                tens++;\n            } else if (i % 100 == 1) {\n           \
    \     hundreds++;\n            } else if (i % 1000 == 1) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        if (hundredsCount > onesCount) {\n   \
    \         hundredsCount = onesCount;\n        }\n        if (thousandsCount >\
    \ onesCount) {\n            thousandsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > tensCount) {\n            thousandsCount = tensCount;\n  \
    \      }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        if (hundredsCount > onesCount) {\n            hundredsCount = onesCount;\n\
    \        }\n        if (thousandsCount > onesCount) {\n            thousandsCount\
    \ = onesCount;\n        }\n        if (thousandsCount > tensCount) {\n       \
    \     thousandsCount = tens\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1wyw0qu.java:89: error: ';' expected\n            thousandsCount\
    \ = tens\n                                 ^\n/tmp/tmpx1wyw0qu.java:91: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        long temp;\n        for (long i : arr) {\n  \
    \          if (i < 0) {\n                result.add(-i);\n            } else {\n\
    \                temp = i;\n                while (temp != 0) {\n            \
    \        int digit = temp % 10;\n                    if (digit == 1) {\n     \
    \                   ones++;\n                    } else if (digit == 0) {\n  \
    \                      tens++;\n                    } else if (digit == 2) {\n\
    \                        hundreds++;\n                    } else if (digit ==\
    \ 3) {\n                        thousands++;\n                    } else if (digit\
    \ == 4) {\n                        tenths++;\n                    } else if (digit\
    \ == 5) {\n                        hundredths++;\n                    } else if\
    \ (digit == 6) {\n                        thousandths++;\n                   \
    \ } else {\n                        throw new RuntimeException(\"Unexpected digit\
    \ \" + digit);\n                    }\n                    temp /= 10;\n     \
    \           }\n            }\n        }\n        Collections.sort(result);\n \
    \       long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long tenthsCount\
    \ = tenths;\n        long hundredthsCount = hundredths;\n        long thousandthsCount\
    \ = thousandths;\n        long tempCount;\n        for (long i : arr) {\n    \
    \        if (i < 0) {\n                result.add(-i);\n            } else {\n\
    \                temp = i;\n                while (temp != 0) {\n            \
    \        int digit = temp % 10;\n                    if (digit == 1) {\n     \
    \                   onesCount--;\n                    } else if (digit == 0) {\n\
    \                        tensCount--;\n                    } else if (digit ==\
    \ 2) {\n                        hundredsCount--;\n                    } else if\
    \ (digit == 3) {\n                        thousandsCount--;\n                \
    \    } else if (digit == 4) {\n                        tenthsCount--;\n      \
    \              } else if (digit == 5) {\n                        hundredthsCount--;\n\
    \                    } else if (digit == 6) {\n                        thousandthsCount--;\n\
    \                    } else {\n                        throw new RuntimeException(\"\
    Unexpected digit \" + digit);\n                    }\n                    temp\
    \ /= 10;\n                }\n            }\n        }\n        if (onesCount >\
    \ 0) {\n            Collections.sort(result);\n        }\n        if (tensCount\
    \ > 0) {\n            Collections.sort(result);\n        }\n        if (hundredsCount\
    \ > 0) {\n            Collections.sort(result);\n        }\n        if (thousandsCount\
    \ > 0) {\n            Collections.sort(result);\n        }\n        if (tenthsCount\
    \ > 0) {\n            Collections.sort(result);\n        }\n        if (hundredthsCount\
    \ > 0) {\n            Collections.sort(result);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3wbipue.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthsOnes = 0;\n        long onethsOnes = 0;\n        long\
    \ tenthsOnesOnes = 0;\n        long onethsOnesOnes = 0;\n        long tenthsOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnes = 0;\n        long tenthsOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnes = 0;\n        long tenthsOnesOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnesOnes = 0;\n        long tenthsOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnesOnesOnes = 0;\n        long tenthsOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnesOnesOnesOnes = 0;\n        long tenthsOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnesOnesOnesOnesOnes = 0;\n        long\
    \ tenthsOnesOnesOnesOnesOnesOnesOnesOnesOnes = 0;\n        long onethsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long tenthsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes =\
    \ 0;\n        long onethsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long tenthsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long onethsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = 0;\n        long tenthsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ar_sdsq.java:49: error: ';' expected\n        long tenthsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne\n\
    \                                                                            \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    Collections.sort(res);\n        } else if (zeros > ones) {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue));\n        } else {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue).reversed());\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8rbgxkt.java:38)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMax2 = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMax));\n        long zerosMax2 = Long.parseLong(Long.toBinaryString(zerosMax\
    \ * zerosMax));\n        long onesMin2 = Long.parseLong(Long.toBinaryString(onesMin\
    \ * onesMin));\n        long zerosMin2 = Long.parseLong(Long.toBinaryString(zerosMin\
    \ * zerosMin));\n        long onesMax3 = Long.parseLong(Long.toBinaryString(onesMax2\
    \ * onesMax));\n        long zerosMax3 = Long.parseLong(Long.toBinaryString(zerosMax2\
    \ * zerosMax));\n        long onesMin3 = Long.parseLong(Long.toBinaryString(onesMin2\
    \ * onesMin));\n        long zerosMin3 = Long.parseLong(Long.toBinaryString(zerosMin2\
    \ * zerosMin));\n        long onesMax4 = Long.parseLong(Long.toBinaryString(onesMax3\
    \ * onesMax));\n        long zerosMax4 = Long.parseLong(Long.toBinaryString(zerosMax3\
    \ * zerosMax));\n        long onesMin4 = Long.parseLong(Long.toBinaryString(onesMin3\
    \ * onesMin));\n        long zerosMin4 = Long.parseLong(Long.toBinaryString(zerosMin3\
    \ * zerosMin));\n        long onesMax5 = Long.parseLong(Long.toBinaryString(onesMax4\
    \ * onesMax));\n        long zerosMax5 = Long.parseLong(Long.toBinaryString(zerosMax4\
    \ * zerosMax));\n        long onesMin5 = Long.parseLong(Long.toBinaryString(onesMin4\
    \ * onesMin));\n        long zerosMin5 = Long.parseLong(Long.toBinaryString(zerosMin4\
    \ * zerosMin));\n        long onesMax6 = Long.parseLong(Long.toBinaryString(onesMax5\
    \ * onesMax));\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9bbsqodw.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long onehundreds\
    \ = 0;\n        long onethousands = 0;\n        long onetenths = 0;\n        long\
    \ onehundredths = 0;\n        long onethousandths = 0;\n        long onetenthhundredths\
    \ = 0;\n        long onehundredththousandths = 0;\n        long onethousandthhundredths\
    \ = 0;\n        long onethousandthtenthhundredths = 0;\n        long onethousandthonehundredths\
    \ = 0;\n        long onethousandthonethousandths = 0;\n        long onethousandthonetenthhundredths\
    \ = 0;\n        long onethousandthonehundredththousandths = 0;\n        long onethousandthonethousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthtenthhundredths = 0;\n        long\
    \ onethousandthonethousandthonehundredththousandths = 0;\n        long onethousandthonethousandthonehundredththousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthtenthhundredthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthtenthhundredthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthonehundredththousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthonehundredththousandthtenthhundredthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthonehundredththousandthonehundredththousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthonehundredththousandthonehundredththousandthonehundredththousandthonehundredththousandthtenthhundredthhundredths\
    \ = 0;\n        long onethousandthonethousand\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp59e_6ik.java:50: error: ';' expected\n        long onethousandthonethousand\n\
    \                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ result.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(o1, o2);\n                }\n   \
    \         });\n        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o2, o1);\n                }\n            });\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dnr0620.java:43)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n\
    \        long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n\
    \        long hundredth = 0;\n        long thousandth = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthth = 0;\n       \
    \ long thousandthth = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthth = 0;\n        long thousandthth = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandthths = 0;\n        long hundredthth = 0;\n        long thousandthth\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthths = 0;\n        long thousandthths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthths = 0;\n        long thousandthths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthths = 0;\n        long thousandthths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthths = 0;\n        long thousandthths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd18uwfcv.java:41: error: variable hundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n     \
    \        ^\n/tmp/tmpd18uwfcv.java:42: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:43: error: variable hundredthth is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthth = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:44: error: variable thousandthth is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthth = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:45: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:46: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:47: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:48: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:49: error: variable hundredthth is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthth = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:50: error: variable thousandthth is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthth = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:51: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:52: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpd18uwfcv.java:53: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tm"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long i : arr)\
    \ {\n            if (i == 1l) ones++;\n            else if (i == 10l) tens++;\n\
    \            else if (i == 100l) hundreds++;\n            else if (i == 1000l)\
    \ thousands++;\n            else total += i;\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long totalCount = total;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \          tensCount = onesCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  if (onesCount > totalCount) {\n            onesCount = totalCount;\n      \
    \      totalCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (tensCount > totalCount) {\n            tensCount = totalCount;\n      \
    \      totalCount = tensCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n            thousandsCount =\
    \ hundredsCount;\n        }\n        if (hundredsCount > totalCount) {\n     \
    \       hundredsCount = totalCount;\n            totalCount = hundredsCount;\n\
    \        }\n        if (thousandsCount > totalCount) {\n            thousandsCount\
    \ = totalCount;\n            totalCount = thousandsCount;\n        }\n       \
    \ long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n       \
    \ long hundredsCount2 = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n\
    \        long totalCount2 = totalCount;\n        if (onesCount2 > tens\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0dz2343d.java:83: error: ')' expected\n        if (onesCount2 >\
    \ tens\n                             ^\n/tmp/tmp0dz2343d.java:84: error: illegal\
    \ start of statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100) {\n                thousands++;\n         \
    \   }\n        }\n        if (ones > 0) {\n            Collections.sort(arr);\n\
    \            int i = 0;\n            while (i < arr.size()) {\n              \
    \  if (arr.get(i) == 1) {\n                    arr.set(i, 0);\n              \
    \      i++;\n                } else if (arr.get(i) == 10) {\n                \
    \    arr.set(i, 0);\n                    i++;\n                } else if (arr.get(i)\
    \ == 100) {\n                    arr.set(i, 0);\n                    i++;\n  \
    \              } else if (arr.get(i) > 100) {\n                    arr.set(i,\
    \ 0);\n                    i++;\n                } else {\n                  \
    \  i++;\n                }\n            }\n        }\n        if (tens > 0) {\n\
    \            Collections.sort(arr);\n            int i = 0;\n            while\
    \ (i < arr.size()) {\n                if (arr.get(i) == 1) {\n               \
    \     arr.set(i, 0);\n                    i++;\n                } else if (arr.get(i)\
    \ == 10) {\n                    arr.set(i, 0);\n                    i++;\n   \
    \             } else if (arr.get(i) == 100) {\n                    arr.set(i,\
    \ 0);\n                    i++;\n                } else if (arr.get(i) > 100)\
    \ {\n                    arr.set(i, 0);\n                    i++;\n          \
    \      } else {\n                    i++;\n                }\n            }\n\
    \        }\n        if (hundreds > 0) {\n            Collections.sort(arr);\n\
    \            int i = 0;\n            while (i < arr.size()) {\n              \
    \  if (arr.get(i) == 1) {\n                    arr.set(i, 0);\n              \
    \      i++;\n                } else if (arr.get(i) == 10) {\n                \
    \    arr.set(i, 0);\n                    i++;\n                } else if (arr.get(i)\
    \ == 100) {\n                    arr.set(i, 0);\n                    i++;\n  \
    \              } else if (arr.get(i) > 100) {\n                    arr.set(i,\
    \ 0);\n                    i++;\n                } else {\n                  \
    \  i++;\n                }\n            }\n        }\n        if (thousands >\
    \ 0) {\n            Collections.sort(arr);\n            int i = 0;\n         \
    \   while (i < arr.size()) {\n                if (arr.get(i) == 1) {\n       \
    \             arr.set(i, 0);\n                    i++;\n                } else\
    \ if (arr.get(i) == 10) {\n                    arr.set(i, 0);\n              \
    \      i++;\n                } else if (arr.get(i) == 100) {\n               \
    \     arr.set(i, 0);\n                    i++;\n                } else if (arr.get(i)\
    \ > 100) {\n                    arr.set(i, 0);\n                    i++;\n   \
    \             } else {\n                    \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2mkwcd.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                onesCount++;\n            } else if (i.longValue()\
    \ == 10) {\n                tensCount++;\n            } else if (i.longValue()\
    \ == 100) {\n                hundredsCount++;\n            } else if (i.longValue()\
    \ == 1000) {\n                thousandsCount++;\n            }\n        }\n  \
    \      long onesCountInt = onesCount;\n        long tensCountInt = tensCount;\n\
    \        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        long onesCountLong = onesCount;\n        long tensCountLong\
    \ = tensCount;\n        long hundredsCountLong = hundredsCount;\n        long\
    \ thousandsCountLong = thousandsCount;\n        long onesCountLongInt = onesCountLong;\n\
    \        long tensCountLongInt = tensCountLong;\n        long hundredsCountLongInt\
    \ = hundredsCountLong;\n        long thousandsCountLongInt = thousandsCountLong;\n\
    \        long onesCountLongLong = onesCountLong;\n        long tensCountLongLong\
    \ = tensCountLong;\n        long hundredsCountLongLong = hundredsCountLong;\n\
    \        long thousandsCountLongLong = thousandsCountLong;\n        long onesCountLongLongInt\
    \ = onesCountLongLong;\n        long tensCountLongLongInt = tensCountLongLong;\n\
    \        long hundredsCountLongLongInt = hundredsCountLongLong;\n        long\
    \ thousandsCountLongLongInt = thousandsCountLongLong;\n        long onesCountLongLongLong\
    \ = onesCountLongLong;\n        long tensCountLongLongLong = \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpthepzvaz.java:73: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        for (Long num : arr) {\n            ones += num;\n            tens\
    \ += num * num;\n            hundreds += num * num * num;\n            thousands\
    \ += num * num * num * num;\n            tenths += num * num * num * num * num;\n\
    \            oneths += num * num * num * num * num * num;\n        }\n       \
    \ long onesSum = ones;\n        long tensSum = tens;\n        long hundredsSum\
    \ = hundreds;\n        long thousandsSum = thousands;\n        long tenthsSum\
    \ = tenths;\n        long onethsSum = oneths;\n        if (onesSum > onethsSum)\
    \ {\n            onesSum -= onethsSum;\n            hundredsSum -= onethsSum;\n\
    \            thousandsSum -= onethsSum;\n            tenthsSum -= onethsSum;\n\
    \        }\n        if (tensSum > onethsSum) {\n            tensSum -= onethsSum;\n\
    \            hundredsSum -= onethsSum;\n            thousandsSum -= onethsSum;\n\
    \            tenthsSum -= onethsSum;\n        }\n        if (hundredsSum > onethsSum)\
    \ {\n            hundredsSum -= onethsSum;\n            thousandsSum -= onethsSum;\n\
    \            tenthsSum -= onethsSum;\n        }\n        if (thousandsSum > onethsSum)\
    \ {\n            thousandsSum -= onethsSum;\n            tenthsSum -= onethsSum;\n\
    \        }\n        if (tenthsSum > onethsSum) {\n            tenthsSum -= onethsSum;\n\
    \        }\n        result.add(onesSum);\n        result.add(tensSum);\n     \
    \   result.add(hundredsSum);\n        result.add(thousandsSum);\n        result.add(tenthsSum);\n\
    \        result.add(onethsSum);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6_viefd.java:74)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long onehundreds\
    \ = 0;\n        long onethousands = 0;\n        long onetenths = 0;\n        long\
    \ onehundredths = 0;\n        long onethousandths = 0;\n        long onetenthths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandthths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandthths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandthths = 0;\n        long onetenththths = 0;\n\
    \        long onehundredthths = 0;\n        long onethousandthths = 0;\n     \
    \   long onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandthths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandthths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandthths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandthths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandths = 0;\n        long onetenththths = 0;\n  \
    \      long onehundredthths = 0;\n        long onethousandths = 0;\n        long\
    \ onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandths = 0;\n        long onetenththths = 0;\n        long onehundred\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph89nib4l.java:80: error: ';' expected\n        long onehundred\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxa2lpqrd.java:31: error: variable tenthths is already defined in\
    \ method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n            \
    \ ^\n/tmp/tmpxa2lpqrd.java:32: error: variable hundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n     \
    \        ^\n/tmp/tmpxa2lpqrd.java:33: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:34: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:35: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:36: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:37: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:38: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:39: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:40: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:41: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:42: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:43: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:44: error: variab"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        if (ones > 0) {\n            result.add(ones);\n \
    \       }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        Collections.sort(result);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdd3su0nj.java:52)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = ones;\n    \
    \    long zerosMax = zeros;\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesMax = onesMax;\n        long maxZerosMax = zerosMax;\n\
    \        long maxOnesMin = onesMax;\n        long maxZerosMin = zerosMax;\n  \
    \      long maxOnesMaxMin = onesMax;\n        long maxZerosMaxMin = zerosMax;\n\
    \        long maxOnesMinMax = onesMax;\n        long maxZerosMinMax = zerosMax;\n\
    \        long maxOnesMaxMinMax = onesMax;\n        long maxZerosMaxMinMax = zerosMax;\n\
    \        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax =\
    \ zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMinMaxMinMax = onesMax;\n        long maxZerosMaxMinMax\
    \ = zerosMax;\n        long maxOnesMin\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvsfkrg9.java:62: error: ';' expected\n        long maxOnesMin\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else res.add(l);\n        }\n        long onesRes = ones;\n       \
    \ long zerosRes = zeros;\n        long maxRes = onesRes > zerosRes ? onesRes :\
    \ zerosRes;\n        long maxOnes = onesRes > zerosRes ? zerosRes : onesRes;\n\
    \        long maxZeros = zerosRes > onesRes ? onesRes : zerosRes;\n        long\
    \ maxOnesRes = onesRes > zerosRes ? onesRes : zerosRes;\n        long maxZerosRes\
    \ = zerosRes > onesRes ? onesRes : zerosRes;\n        long maxOnesResRes = onesRes\
    \ > zerosRes ? zerosRes : onesRes;\n        long maxZerosResRes = zerosRes > onesRes\
    \ ? onesRes : zerosRes;\n        long maxOnesResResRes = onesRes > zerosRes ?\
    \ zerosRes : onesRes;\n        long maxZerosResResRes = zerosRes > onesRes ? onesRes\
    \ : zerosRes;\n        long maxOnesResResResRes = onesRes > zerosRes ? zerosRes\
    \ : onesRes;\n        long maxZerosResResResRes = zerosRes > onesRes ? onesRes\
    \ : zerosRes;\n        long maxOnesResResResResRes = onesRes > zerosRes ? zerosRes\
    \ : onesRes;\n        long maxZerosResResResResRes = zerosRes > onesRes ? onesRes\
    \ : zerosRes;\n        long maxOnesResResResResResRes = onesRes > zerosRes ? zerosRes\
    \ : onesRes;\n        long maxZerosResResResResResRes = zerosRes > onesRes ? onesRes\
    \ : zerosRes;\n        long maxOnesResResResResResResRes = onesRes > zerosRes\
    \ ? zerosRes : onesRes;\n        long maxZerosResResResResResResRes = zerosRes\
    \ > onesRes ? onesRes : zerosRes;\n        long maxOnesResResResResResResResRes\
    \ = onesRes > zerosRes ? zerosRes : one\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9akzmwuv.java:47: error: ';' expected\n        long maxOnesResResResResResResResRes\
    \ = onesRes > zerosRes ? zerosRes : one\n                                    \
    \                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659794918
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones < zeros) {\n        \
    \    Collections.sort(res);\n            return res;\n        }\n        Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue).reversed());\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjs8yc3kh.java:36)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \      }\n        if (ones > zeros) {\n            Collections.sort(arr);\n  \
    \          for (long i : arr) {\n                if (i == 1l) result.add(i);\n\
    \                else if (i == 0l) result.add(0l);\n            }\n        } else\
    \ {\n            Collections.sort(arr);\n            for (long i : arr) {\n  \
    \              if (i == 0l) result.add(i);\n                else if (i == 1l)\
    \ result.add(1l);\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz0pk3l5.java:43)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMinusZeros = ones\
    \ - zeros;\n        long zeroMinusOnes = zeros - ones;\n        long onesMinusOnes\
    \ = ones - ones;\n        long zeroMinusOnesMinusOnes = zeros - ones - ones;\n\
    \        long onesMinusOnesMinusOnes = ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones - ones - ones - ones - ones - ones;\n  \
    \      long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones;\n\
    \        long zeroMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones\
    \ - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones\
    \ - ones - ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnesMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pdewf6x.java:41: error: ';' expected\n        long zeroMinusOnesMinusOnesMinusOnesMin\n\
    \                                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long onesCount2 = onesCount;\n\
    \        long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (onesCount > onesCount2)\
    \ {\n            onesCount2 = onesCount;\n        }\n        if (tensCount > tensCount2)\
    \ {\n            tensCount2 = tensCount;\n        }\n        if (hundredsCount\
    \ > hundredsCount2) {\n            hundredsCount2 = hundredsCount;\n        }\n\
    \        if (thousandsCount > thousandsCount2) {\n            thousandsCount2\
    \ = thousandsCount;\n        }\n        long onesCount3 = onesCount2;\n      \
    \  long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        if (onesCount2 > onesCount3)\
    \ {\n            onesCount3 = onesCount2;\n        }\n        if (tensCount2 >\
    \ tensCount3) {\n            tensCount3 = tensCount2;\n        }\n        if (hundredsCount2\
    \ > hundredsCount3) {\n            hundredsCount3 = hundredsCount2;\n        }\n\
    \        if (thousandsCount2 > thousandsCount3) {\n            thousandsCount3\
    \ = thousandsCount2;\n        }\n        long onesCount4 = onesCount3;\n     \
    \   long tensCount4 = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n\
    \        long thousandsCount4 = thousandsCount3;\n        if (onesCount3 > onesCount4)\
    \ {\n            onesCount4 = onesCount3;\n        }\n        if (tensCount3 >\
    \ tensCount4) {\n            \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6uqkuuz.java:82: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n       \
    \ }\n        if (ones > zeros) {\n            Collections.sort(arr, (o1, o2) ->\
    \ {\n                long ones = 0;\n                long zeros = 0;\n       \
    \         for (Long l : arr) {\n                    if (l == 1l) ones++;\n   \
    \                 if (l == 0l) zeros++;\n                }\n                if\
    \ (ones > zeros) {\n                    return Long.compare(o1, o2);\n       \
    \         } else {\n                    return Long.compare(o2, o1);\n       \
    \         }\n            });\n        }\n        for (Long l : arr) {\n      \
    \      if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n  \
    \      if (ones > zeros) {\n            Collections.sort(arr, (o1, o2) -> {\n\
    \                long ones = 0;\n                long zeros = 0;\n           \
    \     for (Long l : arr) {\n                    if (l == 1l) ones++;\n       \
    \             if (l == 0l) zeros++;\n                }\n                if (ones\
    \ > zeros) {\n                    return Long.compare(o1, o2);\n             \
    \   } else {\n                    return Long.compare(o2, o1);\n             \
    \   }\n            });\n        }\n        for (Long l : arr) {\n            if\
    \ (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n        if\
    \ (ones > zeros) {\n            Collections.sort(arr, (o1, o2) -> {\n        \
    \        long ones = 0;\n                long zeros = 0;\n                for\
    \ (Long l : arr) {\n                    if (l == 1l) ones++;\n               \
    \     if (l == 0l) zeros++;\n                }\n                if (ones > zeros)\
    \ {\n                    return Long.compare(o1, o2);\n                } else\
    \ {\n                    return Long.compare(o2, o1);\n                }\n   \
    \         });\n        }\n        for (Long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            if (l == 0l) zeros++;\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr, (o1, o2) -> {\n                long ones\
    \ = 0;\n                long zeros = 0;\n                for (Long l : arr) {\n\
    \                    if (l == 1l) ones++;\n                    if (l == 0l) zeros++;\n\
    \                }\n                if (ones > zeros) {\n                    return\
    \ Long.compare(o1, o2);\n                } else {\n                    return\
    \ Long.compare(o2, o1);\n                }\n            });\n        }\n     \
    \   for (Long l : arr) {\n            if (l == 1l) ones++;\n            if (l\
    \ == \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24i4mrc4.java:102: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp24i4mrc4.java:103: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxo0q7vx.java:90: error: ';' expected\n        long oneth\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            ones +=\
    \ l;\n            tens += l*10;\n            hundreds += l*100;\n            thousands\
    \ += l*1000;\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long onesCount2 = onesCount;\n        long tensCount2\
    \ = tensCount;\n        long hundredsCount2 = hundredsCount;\n        long thousandsCount2\
    \ = thousandsCount;\n        long onesCount3 = onesCount2;\n        long tensCount3\
    \ = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n        long thousandsCount3\
    \ = thousandsCount2;\n        long onesCount4 = onesCount3;\n        long tensCount4\
    \ = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n        long thousandsCount4\
    \ = thousandsCount3;\n        long onesCount5 = onesCount4;\n        long tensCount5\
    \ = tensCount4;\n        long hundredsCount5 = hundredsCount4;\n        long thousandsCount5\
    \ = thousandsCount4;\n        long onesCount6 = onesCount5;\n        long tensCount6\
    \ = tensCount5;\n        long hundredsCount6 = hundredsCount5;\n        long thousandsCount6\
    \ = thousandsCount5;\n        long onesCount7 = onesCount6;\n        long tensCount7\
    \ = tensCount6;\n        long hundredsCount7 = hundredsCount6;\n        long thousandsCount7\
    \ = thousandsCount6;\n        long onesCount8 = onesCount7;\n        long tensCount8\
    \ = tensCount7;\n        long hundredsCount8 = hundredsCount7;\n        long thousandsCount8\
    \ = thousandsCount7;\n        long onesCount9 = onesCount8;\n        long tensCount9\
    \ = tensCount8;\n        long hundredsCount9 = 1000;\n        long thousandsCount9\
    \ = thousandsCount8;\n        long onesCount10 = onesCount9;\n        long tensCount10\
    \ = tensCount9;\n        long hundred\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbp1dsvo.java:69: error: ';' expected\n        long hundred\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            total += l;\n            if (l == 1l)\n                ones++;\n\
    \            else if (l == 10l)\n                tens++;\n            else if\
    \ (l == 100l)\n                hundreds++;\n            else if (l == 1000l)\n\
    \                thousands++;\n        }\n        long onesTotal = ones * ones;\n\
    \        long tensTotal = tens * tens;\n        long hundredsTotal = hundreds\
    \ * hundreds;\n        long thousandsTotal = thousands * thousands;\n        long\
    \ totalTotal = total * total;\n        if (onesTotal > tensTotal && onesTotal\
    \ > hundredsTotal && onesTotal > thousandsTotal) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                result.add(l);\n          \
    \  }\n        } else if (tensTotal > onesTotal && tensTotal > hundredsTotal &&\
    \ tensTotal > thousandsTotal) {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue).reversed());\n\
    \            for (Long l : arr) {\n                result.add(l);\n          \
    \  }\n        } else if (hundredsTotal > onesTotal && hundredsTotal > tensTotal\
    \ && hundredsTotal > thousandsTotal) {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n\
    \            for (Long l : arr) {\n                result.add(l);\n          \
    \  }\n        } else if (thousandsTotal > onesTotal && thousandsTotal > tensTotal\
    \ && thousandsTotal > hundredsTotal) {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue).reversed());\n\
    \            for (Long l : arr) {\n                result.add(l);\n          \
    \  }\n        } else {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n\
    \            for (Long l : arr) {\n                result.add(l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrxa28nb.java:71)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ result.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(result);\n\
    \        } else if (zeros > ones) {\n            Collections.sort(result, Collections.reverseOrder());\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_y97pu7r.java:35)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (Long i : arr) {\n            long binary\
    \ = Long.parseLong(Long.toBinaryString(i), 2);\n            ones += binary & 1;\n\
    \            tens += binary >> 1 & 1;\n            hundreds += binary >> 2 & 1;\n\
    \            thousands += binary >> 3 & 1;\n            tenths += binary >> 4\
    \ & 1;\n            hundredths += binary >> 5 & 1;\n            thousandths +=\
    \ binary >> 6 & 1;\n        }\n        result.add(ones);\n        result.add(tens);\n\
    \        result.add(hundreds);\n        result.add(thousands);\n        result.add(tenths);\n\
    \        result.add(hundredths);\n        result.add(thousandths);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmr_4uon.java:42)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount2 > tensCount2) {\n            onesCount2 = tensCount2;\n        }\n\
    \        if (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n        }\n        if (tensCount2 > hundredsCount2) {\n\
    \            tensCount2 = hundredsCount2;\n        }\n        if (tensCount2 >\
    \ thousandsCount2) {\n            tensCount2 = thousandsCount2;\n        }\n \
    \       if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2 =\
    \ thousandsCount2;\n        }\n        long onesCount3 = onesCount2;\n       \
    \ long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thous\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsatmwke7.java:83: error: ';' expected\n        long thousandsCount3\
    \ = thous\n                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l.longValue() == 1l) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        long maxOnes = ones;\n\
    \        long maxZeros = zeros;\n        for (Long l : arr) {\n            if\
    \ (l.longValue() == 1l) {\n                ones--;\n            } else {\n   \
    \             zeros--;\n            }\n        }\n        long maxOnesDec = ones;\n\
    \        long maxZerosDec = zeros;\n        for (Long l : arr) {\n           \
    \ if (l.longValue() == 1l) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        long maxOnesDec2\
    \ = ones;\n        long maxZerosDec2 = zeros;\n        for (Long l : arr) {\n\
    \            if (l.longValue() == 1l) {\n                ones--;\n           \
    \ } else {\n                zeros--;\n            }\n        }\n        long maxOnesDec3\
    \ = (ones * 10 + ones);\n        long maxZerosDec3 = (zeros * 10 + zeros);\n \
    \       long maxOnesDec4 = (ones * 100 + ones);\n        long maxZerosDec4 = (zeros\
    \ * 100 + zeros);\n        long maxOnesDec5 = (ones * 1000 + ones);\n        long\
    \ maxZerosDec5 = (zeros * 1000 + zeros);\n        long maxOnesDec6 = (ones * 10000\
    \ + ones);\n        long maxZerosDec6 = (zeros * 10000 + zeros);\n        long\
    \ maxOnesDec7 = (ones * 100000 + ones);\n        long maxZerosDec7 = (zeros *\
    \ 100000 + zeros);\n        long maxOnesDec8 = (ones * 1000000 + ones);\n    \
    \    long maxZerosDec8 = (zeros * 1000000 + zeros);\n        long maxOnesDec9\
    \ = (ones * 10000000 + ones);\n        long maxZerosDec9 = (zeros * 10000000 +\
    \ zeros);\n        long maxOnesDec10 = (ones * 100000000 + ones);\n        long\
    \ maxZerosDec10 = (zeros * 100000000 + zeros);\n        long maxOnesDec11 = (ones\
    \ * 1000000000 + ones);\n        long maxZerosDec11 = (zeros * 1000000000 + zeros);\n\
    \        long maxOnesDec12 = (ones * 10000000000 + ones);\n        long maxZerosDec12\
    \ = (zeros * 100\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxq29lep.java:74: error: integer number too large\n        long\
    \ maxOnesDec12 = (ones * 10000000000 + ones);\n                              \
    \      ^\n/tmp/tmpgxq29lep.java:75: error: ')' expected\n        long maxZerosDec12\
    \ = (zeros * 100\n                                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / Math.pow(10, (ones / 10).intValue());\n\
    \        long tensDecimal = tens / Math.pow(10, (tens / 10).intValue());\n   \
    \     long hundredsDecimal = (hundreds / Math.pow(10, (hundreds / 10).intValue()));\n\
    \        long thousandsDecimal = (thousands / Math.pow(10, (thousands / 10).intValue()));\n\
    \        long onesDecimalDecimal = onesDecimal / Math.pow(10, (onesDecimal / 10).intValue());\n\
    \        long tensDecimalDecimal = tensDecimal / Math.pow(10, (tensDecimal / 10).intValue());\n\
    \        long hundredsDecimalDecimal = (hundredsDecimal / Math.pow(10, (hundredsDecimal\
    \ / 10).intValue()));\n        long thousandsDecimalDecimal = (thousandsDecimal\
    \ / Math.pow(10, (thousandsDecimal / 10).intValue()));\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, (onesDecimalDecimal / 10).intValue());\n\
    \        long tensDecimalDecimalDecimal = tensDecimalDecimal / Math.pow(10, (tensDecimalDecimal\
    \ / 10).intValue());\n        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal\
    \ / Math.pow(10, (hundredsDecimalDecimal / 10).intValue()));\n        long thousandsDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimal / Math.pow(10, (thousandsDecimalDecimal / 10).intValue()));\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / Math.pow(10,\
    \ (onesDecimalDecimalDecimal / 10).intValue());\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / Math.pow(10, (tensDecimalDecimalDecimal \n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0fy5db_z.java:44: error: ')' expected\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / Math.pow(10, (tensDecimalDecimalDecimal \n   \
    \                                                                            \
    \                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else res.add(l);\n        }\n        if (ones < zeros) {\n        \
    \    Collections.sort(res);\n            return res;\n        }\n        Collections.sort(res,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.compare(ones, zeros);\n            }\n        });\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmx2facen.java:34: error: local variables referenced from an inner\
    \ class must be final or effectively final\n                return Long.compare(ones,\
    \ zeros);\n                                    ^\n/tmp/tmpmx2facen.java:34: error:\
    \ local variables referenced from an inner class must be final or effectively\
    \ final\n                return Long.compare(ones, zeros);\n                 \
    \                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long onehundreds\
    \ = 0;\n        long onethousands = 0;\n        long onetenths = 0;\n        long\
    \ onehundredths = 0;\n        long onethousandths = 0;\n        long onetenthhundredths\
    \ = 0;\n        long onehundredththousandths = 0;\n        long onethousandthhundredths\
    \ = 0;\n        long onethousandthtenthhundredths = 0;\n        long onethousandthonehundredths\
    \ = 0;\n        long onethousandthonethousandths = 0;\n        long onethousandthonetenthhundredths\
    \ = 0;\n        long onethousandthonehundredththousandths = 0;\n        long onethousandthonethousandthhundredths\
    \ = 0;\n        long onethousandthonethousandthtenthhundredths = 0;\n        long\
    \ onethousandthonethousandthonehundredths = 0;\n        long onethousandthonethousandthonethousandths\
    \ = 0;\n        long onethousandthonethousandthonetenthhundredths = 0;\n     \
    \   long onethousandthonethousandthonehundredththousandths = 0;\n        long\
    \ onethousandthonethousandthonethousandthhundredths = 0;\n        long onethousandthonethousandthonethousandthtenthhundredths\
    \ = 0;\n        long onethousandthonethousandthonethousandthonehundredths = 0;\n\
    \        long onethousandthonethousandthonethousandthonethousandths = 0;\n   \
    \     long onethousandthonethousandthonethousandthonetenthhundredths = 0;\n  \
    \      long onethousandthonethousandthonethousandthonehundredththousandths = 0;\n\
    \        long onethousandthonethousandthonethousandthonethousandthhundredths =\
    \ 0;\n        long onethousandthonethousandthonethousandthonethousandthtenthhundredths\
    \ = 0;\n        long onethousandthonethousandthonethousandthonethousandthonehundredths\
    \ = 0;\n        long onethousandthonethousandthonethousandthonethousandthonethousandths\
    \ = 0;\n        long onethousandthonethousandthonethousandthonethousandth\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2c_3c_x1.java:55: error: ';' expected\n        long onethousandthonethousandthonethousandthonethousandth\n\
    \                                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    Collections.sort(res);\n        } else {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue).reversed());\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4xq5pyua.java:36)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n        }\n  \
    \      if (ones < zeros) {\n            Collections.sort(arr);\n            for\
    \ (long l : arr) {\n                if (l == 1l) ones++;\n                else\
    \ if (l == 0l) zeros++;\n            }\n        }\n        for (long l : arr)\
    \ {\n            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n\
    \        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        for\
    \ (long l : arr) {\n            if (l == 1l) ones++;\n            else if (l ==\
    \ 0l) zeros++;\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        for\
    \ (long l : arr) {\n            if (l == 1l) ones++;\n            else if (l ==\
    \ 0l) zeros++;\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        for\
    \ (long l : arr) {\n            if (l == 1l) ones++;\n            else if (l ==\
    \ 0l) zeros++;\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        for\
    \ (long l : arr) {\n            if (l == 1l) ones++;\n            else if (l ==\
    \ 0l) zeros++;\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        for\
    \ (long l : arr) {\n            if (l == 1l) ones++;\n            else if (l ==\
    \ 0l) zeros++;\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (long l : arr) {\n                if (l == 1l) one\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5avmjxmz.java:95: error: not a statement\n                if (l\
    \ == 1l) one\n                             ^\n/tmp/tmp5avmjxmz.java:95: error:\
    \ ';' expected\n                if (l == 1l) one\n                           \
    \     ^\n/tmp/tmp5avmjxmz.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        long onesNum = ones;\n        long tensNum = tens;\n\
    \        long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n\
    \        if (onesNum > 0) {\n            onesNum *= -1;\n        }\n        if\
    \ (tensNum > 0) {\n            tensNum *= -1;\n        }\n        if (hundredsNum\
    \ > 0) {\n            hundredsNum *= -1;\n        }\n        if (thousandsNum\
    \ > 0) {\n            thousandsNum *= -1;\n        }\n        long onesNum2 =\
    \ onesNum;\n        long tensNum2 = tensNum;\n        long hundredsNum2 = hundredsNum;\n\
    \        long thousandsNum2 = thousandsNum;\n        if (onesNum2 > 0) {\n   \
    \         onesNum2 *= -1;\n        }\n        if (tensNum2 > 0) {\n          \
    \  tensNum2 *= -1;\n        }\n        if (hundredsNum2 > 0) {\n            hundredsNum2\
    \ *= -1;\n        }\n        if (thousandsNum2 > 0) {\n            thousandsNum2\
    \ *= -1;\n        }\n        long onesNum3 = onesNum2;\n        long tensNum3\
    \ = tensNum2;\n        long hundredsNum3 = hundredsNum2;\n        long thousandsNum3\
    \ = thousandsNum2;\n        if (onesNum3 > 0) {\n            onesNum3 *= -1;\n\
    \        }\n        if (tensNum3 > 0) {\n            tensNum3 *= -1;\n       \
    \ }\n        if (hundredsNum3 > 0) {\n            hundredsNum3 *= -1;\n      \
    \  }\n        if (thousandsNum3 > 0) {\n            thousandsNum3 *= -1;\n   \
    \     }\n        long onesNum4 = onesNum3;\n        long tensNum4 = tensNum3;\n\
    \        long hundredsNum4 = hundredsNum3;\n        long thousandsNum4 = thousandsNum3;\n\
    \        if (onesNum4 > 0) {\n            onesNum4 *= -1;\n        }\n       \
    \ if (tensNum4 > 0) {\n            tensNum4\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33r_6n1_.java:92: error: not a statement\n            tensNum4\n\
    \            ^\n/tmp/tmp33r_6n1_.java:92: error: ';' expected\n            tensNum4\n\
    \                    ^\n/tmp/tmp33r_6n1_.java:94: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else result.add(i);\n        }\n        if (ones > zeros) {\n     \
    \       Collections.sort(result, new Comparator<Long>() {\n                public\
    \ int compare(Long o1, Long o2) {\n                    int res = (int) (o1 - o2);\n\
    \                    if (res == 0) return (int) (o1 - o2);\n                 \
    \   else if (res > 0) return 1;\n                    else return -1;\n       \
    \         }\n            });\n        }\n        else if (zeros > ones) {\n  \
    \          Collections.sort(result, new Comparator<Long>() {\n               \
    \ public int compare(Long o1, Long o2) {\n                    int res = (int)\
    \ (o1 - o2);\n                    if (res == 0) return (int) (o1 - o2);\n    \
    \                else if (res > 0) return -1;\n                    else return\
    \ 1;\n                }\n            });\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7tagi2vz.java:51)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            long n\
    \ = i;\n            ones += (n & 1l);\n            tens += (n >> 1l);\n      \
    \      hundreds += (n >> 2l);\n            thousands += (n >> 3l);\n        }\n\
    \        long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long i : arr) {\n     \
    \       long n = i;\n            onesCount += (n & 1l);\n            tensCount\
    \ += (n >> 1l);\n            hundredsCount += (n >> 2l);\n            thousandsCount\
    \ += (n >> 3l);\n        }\n        long onesCountMax = onesCount;\n        long\
    \ tensCountMax = tensCount;\n        long hundredsCountMax = hundredsCount;\n\
    \        long thousandsCountMax = thousandsCount;\n        if (onesCountMax <\
    \ onesCount) {\n            onesCountMax = onesCount;\n        }\n        if (tensCountMax\
    \ < tensCount) {\n            tensCountMax = tensCount;\n        }\n        if\
    \ (hundredsCountMax < hundredsCount) {\n            hundredsCountMax = hundredsCount;\n\
    \        }\n        if (thousandsCountMax < thousandsCount) {\n            thousandsCountMax\
    \ = thousandsCount;\n        }\n        long onesCountMin = onesCount;\n     \
    \   long tensCountMin = tensCount;\n        long hundredsCountMin = hundredsCount;\n\
    \        long thousandsCountMin = thousandsCount;\n        if (onesCountMin >\
    \ onesCountMax) {\n            onesCountMin = onesCountMax;\n        }\n     \
    \   if (tensCountMin > tensCountMax) {\n            tensCountMin = tensCountMax;\n\
    \        }\n        if (hundredsCountMin > hundredsCountMax) {\n            hundredsCountMin\
    \ = hundredsCountMax;\n        }\n        if (thousandsCountMin > thousandsCountMax)\
    \ {\n            thousandsCountMin = thousandsCountMax;\n        }\n        long\
    \ onesCountMax2 = onesCountMax;\n        long tensCountMax2 = \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9otgmjfn.java:77: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else res.add(l);\n        }\n        long onesMax = ones;\n       \
    \ long zerosMax = zeros;\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesMax = onesMax;\n        long maxZerosMax = zerosMax;\n\
    \        long maxOnesMin = ones;\n        long maxZerosMin = zeros;\n        long\
    \ maxOnesMaxMin = onesMax;\n        long maxZerosMaxMin = zerosMax;\n        long\
    \ maxOnesMinMin = ones;\n        long maxZerosMinMin = zeros;\n        long maxOnesMaxMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOnesMaxMinMinMin\
    \ = onesMax;\n        long maxZerosMaxMinMinMin = zerosMax;\n        long maxOne\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf699ck_r.java:62: error: ';' expected\n        long maxOne\n  \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (Long l : arr) {\n            if (l == 1l) ones++;\n            else\
    \ if (l == 0l) zeros++;\n            max = Math.max(l, max);\n        }\n    \
    \    long onesMax = ones * max;\n        long zerosMax = zeros * max;\n      \
    \  long maxOnesMax = onesMax * max;\n        long maxZerosMax = zerosMax * max;\n\
    \        long maxOnesMaxMinusOnes = onesMax * (max - 1);\n        long maxZerosMaxMinusOnes\
    \ = zerosMax * (max - 1);\n        long maxOnesMaxMinusOnesMinusOnes = onesMax\
    \ * (max - 1) * (max - 1);\n        long maxZerosMaxMinusOnesMinusOnes = zerosMax\
    \ * (max - 1) * (max - 1);\n        long maxOnesMaxMinusOnesMinusOnesMinusOnes\
    \ = onesMax * (max - 1) * (max - 1) * (max - 1);\n        long maxZerosMaxMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * (max - 1) * (max - 1) * (max - 1);\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * (max - 1) * (max - 1) * (max - 1) * (max - 1);\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * (max - 1) * (max - 1) * (max - 1) * (max - 1);\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * (max - 1) * (max - 1) * (max - 1) * (max - 1) * (max - 1);\n   \
    \     long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = zerosMax\
    \ * (max - 1) * (max - 1) * (max - 1) * (max - 1) * (max - 1);\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * (max - 1) * (max - 1) * (max - 1) * (max - 1) * (max - 1) * (max\
    \ - 1) * (max - 1);\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp16ha35w4.java:44: error: ';' expected\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros\n                                                                  \
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = ones;\n    \
    \    long zerosMax = zeros;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long onesMaxMin = ones;\n        long zerosMaxMin = zeros;\n\
    \        long onesMaxMax = ones;\n        long zerosMaxMax = zeros;\n        long\
    \ onesMinMin = ones;\n        long zerosMinMin = zeros;\n        long onesMaxMinMin\
    \ = ones;\n        long zerosMaxMinMin = zeros;\n        long onesMaxMaxMin =\
    \ ones;\n        long zerosMaxMaxMin = zeros;\n        long onesMinMax = ones;\n\
    \        long zerosMinMax = zeros;\n        long onesMaxMinMax = ones;\n     \
    \   long zerosMaxMinMax = zeros;\n        long onesMaxMaxMax = ones;\n       \
    \ long zerosMaxMaxMax = zeros;\n        long onesMinMinMax = ones;\n        long\
    \ zerosMinMinMax = zeros;\n        long onesMaxMinMax = ones;\n        long zerosMaxMinMax\
    \ = zeros;\n        long onesMaxMaxMax = ones;\n        long zerosMaxMaxMax =\
    \ zeros;\n        long onesMinMinMaxMin = ones;\n        long zerosMinMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMaxMaxMin = ones;\n        long zerosMaxMaxMinMax\
    \ = zeros;\n        long onesMinMinMaxMin = ones;\n        long zerosMinMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMaxMaxMin = ones;\n        long zerosMaxMaxMinMax\
    \ = zeros;\n        long onesMinMinMaxMin = ones;\n        long zerosMinMinMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin\
    \ = zeros;\n        long onesMaxMaxMaxMin = ones;\n        long zerosMaxMaxMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmg5emve.java:71: error: ';' expected\n        long zerosMaxMaxMin\n\
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n       \
    \ if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) result.add(1l);\n            if (l == 0l) result.add(0l);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvo4kywee.java:40)\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n\
    \        long maxZeros = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n                if (ones > maxOnes) {\n  \
    \                  maxOnes = ones;\n                }\n            } else if (num\
    \ == 0) {\n                zeros++;\n                if (zeros > maxZeros) {\n\
    \                    maxZeros = zeros;\n                }\n            } else\
    \ {\n                ones++;\n                zeros++;\n                if (ones\
    \ > maxOnes) {\n                    maxOnes = ones;\n                }\n     \
    \           if (zeros > maxZeros) {\n                    maxZeros = zeros;\n \
    \               }\n            }\n        }\n        long maxOnesNum = Long.parseLong(Long.toBinaryString(maxOnes));\n\
    \        long maxZerosNum = Long.parseLong(Long.toBinaryString(maxZeros));\n \
    \       long maxNum = Long.parseLong(Long.toBinaryString(maxOnesNum + maxZerosNum));\n\
    \        long maxNumNum = Long.parseLong(Long.toBinaryString(maxNum));\n     \
    \   long maxNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNum));\n    \
    \    long maxNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNum));\n\
    \        long maxNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(maxNumNumNumNumNumNumNumNumNumNumNum));\n\
    \        long maxNumNumNumNumNumNumNumNumNumNumNum = Long.parseLong(Long.toBinaryString(\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5t1x614j.java:61: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else res.add(l);\n        }\n        if (ones > zeros) {\n        \
    \    Collections.sort(res);\n        }\n        else if (zeros > ones) {\n   \
    \         Collections.sort(res, Comparator.comparingLong(Long::longValue).reversed());\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpke1j1dwo.java:37)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12wy86kt.java:143: error: ')' expected\n            if (num\n \
    \                  ^\n/tmp/tmp12wy86kt.java:144: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp12wy86kt.java:145: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long num : arr) {\n         \
    \   if (num == 1) {\n                ones++;\n            } else {\n         \
    \       zeros++;\n            }\n        }\n        if (ones > zeros) {\n    \
    \        Collections.sort(arr);\n            for (long num : arr) {\n        \
    \        if (num == 1) {\n                    ones--;\n                } else\
    \ {\n                    zeros--;\n                }\n            }\n        }\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ res.add(ones);\n            } else {\n                res.add(zeros);\n    \
    \        }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9a7i_tmo.java:49)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            ones += l;\n        }\n        for (Long l : arr) {\n           \
    \ zeros += l;\n        }\n        long onesMinusOnes = ones - 1;\n        long\
    \ zerosMinusOnes = zeros - 1;\n        long onesMinusOnesMinusOnes = onesMinusOnes\
    \ - 1;\n        long zerosMinusOnesMinusOnes = zerosMinusOnes - 1;\n        long\
    \ onesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnes - 1;\n        long\
    \ zerosMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnes - 1;\n        long\
    \ onesMinusOnesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnesMinusOnes -\
    \ 1;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes - 1;\n        long\
    \ zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes - 1;\n\
    \        long zerosMinusOnesMinusOne\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72xp8vye.java:42: error: ';' expected\n        long zerosMinusOnesMinusOne\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundredThousands = 0;\n\
    \        long oneThousandThousands = 0;\n        long oneHundredThousandThousands\
    \ = 0;\n        long oneThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousands = 0;\n     \
    \   long oneHundredThousandThousandThousandThousandThousands = 0;\n        long\
    \ oneThousandThousandThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneTh\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxij6cnqj.java:47: error: ';' expected\n        long oneTh\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l)\n                ones++;\n            else\
    \ if (l == 10l)\n                tens++;\n            else if (l == 100l)\n  \
    \              hundreds++;\n            else if (l == 1000l)\n               \
    \ thousands++;\n            else if (l == 10000l)\n                tenths++;\n\
    \            else\n                result.add(l);\n        }\n        long onesSorted\
    \ = ones;\n        long tensSorted = tens;\n        long hundredsSorted = hundreds;\n\
    \        long thousandsSorted = thousands;\n        long tenthsSorted = tenths;\n\
    \        if (onesSorted > tensSorted)\n            onesSorted = tensSorted;\n\
    \        if (onesSorted > hundredsSorted)\n            onesSorted = hundredsSorted;\n\
    \        if (onesSorted > thousandsSorted)\n            onesSorted = thousandsSorted;\n\
    \        if (onesSorted > tenthsSorted)\n            onesSorted = tenthsSorted;\n\
    \        long onesSorted2 = onesSorted;\n        long tensSorted2 = tensSorted;\n\
    \        long hundredsSorted2 = hundredsSorted;\n        long thousandsSorted2\
    \ = thousandsSorted;\n        long tenthsSorted2 = tenthsSorted;\n        if (onesSorted2\
    \ > tensSorted2)\n            onesSorted2 = tensSorted2;\n        if (onesSorted2\
    \ > hundredsSorted2)\n            onesSorted2 = hundredsSorted2;\n        if (onesSorted2\
    \ > thousandsSorted2)\n            onesSorted2 = thousandsSorted2;\n        if\
    \ (onesSorted2 > tenthsSorted2)\n            onesSorted2 = tenthsSorted2;\n  \
    \      long onesSorted3 = onesSorted2;\n        long tensSorted3 = tensSorted2;\n\
    \        long hundredsSorted3 = hundredsSorted2;\n        long thousandsSorted3\
    \ = thousandsSorted2;\n        long tenthsSorted3 = tenthsSorted2;\n        if\
    \ (onesSorted3 > tensSorted3)\n            onesSorted3 = tensSorted3;\n      \
    \  if (onesSorted3 > hundredsSorted3)\n            onesSorted3 = hundreds\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mq7ds61.java:74: error: ';' expected\n            onesSorted3\
    \ = hundreds\n                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones > 0) {\n            Collections.sort(arr);\n       \
    \     for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n   \
    \             else if (l == 10l) result.add(10l);\n                else if (l\
    \ == 100l) result.add(100l);\n                else if (l == 1000l) result.add(1000l);\n\
    \            }\n        } else if (tens > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n\
    \                else if (l == 10l) result.add(10l);\n                else if\
    \ (l == 100l) result.add(100l);\n                else if (l == 1000l) result.add(1000l);\n\
    \            }\n        } else if (hundreds > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n\
    \                else if (l == 10l) result.add(10l);\n                else if\
    \ (l == 100l) result.add(100l);\n                else if (l == 1000l) result.add(1000l);\n\
    \            }\n        } else if (thousands > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n\
    \                else if (l == 10l) result.add(10l);\n                else if\
    \ (l == 100l) result.add(100l);\n                else if (l == 1000l) result.add(1000l);\n\
    \            }\n        } else {\n            Collections.sort(arr);\n       \
    \     for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n   \
    \             else if (l == 10l) result.add(10l);\n                else if (l\
    \ == 100l) result.add(100l);\n                else if (l == 1000l) result.add(1000l);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbz3oty4.java:75)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0;\n        for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            } else if (bin == 5) {\n                tenThousands++;\n       \
    \     }\n        }\n        long onesCount = ones, tensCount = tens, hundredsCount\
    \ = hundreds, thousandsCount = thousands, tenThousandsCount = tenThousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \      }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (onesCount > tenThousandsCount) {\n \
    \           onesCount = tenThousandsCount;\n        }\n        if (tensCount >\
    \ hundredsCount) {\n            tensCount = hundredsCount;\n        }\n      \
    \  if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (tensCount > tenThousandsCount) {\n            tensCount\
    \ = tenThousandsCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > tenThousandsCount) {\n            hundredsCount = tenThousandsCount;\n   \
    \     }\n        if (thousandsCount > tenThousandsCount) {\n            thousandsCount\
    \ = tenThousandsCount;\n        }\n        if (onesCount == 0) {\n           \
    \ onesCount = 1;\n        }\n        if (tensCount == 0) {\n            tensCount\
    \ = 1;\n        }\n        if (hundredsCount == 0) {\n            hundredsCount\
    \ = 1;\n        }\n        if (thousandsCount == 0) {\n            thousandsCount\
    \ = 1;\n        }\n        if (tenThousandsCount == 0) {\n            tenThousandsCount\
    \ = 1;\n        }\n        long onesCount2 = onesCount * onesCount, tensCount2\
    \ = tensCount * tensCount, hund\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffdtm02f.java:82: error: ';' expected\n        long onesCount2\
    \ = onesCount * onesCount, tensCount2 = tensCount * tensCount, hund\n        \
    \                                                                            \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else result.add(i);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMaxMin =\
    \ Long.parseLong(Long.toBinaryString(onesMax + onesMin));\n        long zerosMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax + zerosMin));\n        long onesMaxMinMin\
    \ = Long.parseLong(Long.toBinaryString(onesMax + onesMin + onesMin));\n      \
    \  long zerosMaxMinMin = Long.parseLong(Long.toBinaryString(zerosMax + zerosMin\
    \ + zerosMin));\n        long onesMaxMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ + onesMin + onesMin + onesMin));\n        long zerosMaxMinMinMin = Long.parseLong(Long.toBinaryString(zerosMax\
    \ + zerosMin + zerosMin + zerosMin));\n        long onesMaxMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ + onesMin + onesMin + onesMin + onesMin));\n        long zerosMaxMinMinMinMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax + zerosMin + zerosMin + zerosMin\
    \ + zerosMin));\n        long onesMaxMinMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ + onesMin + onesMin + onesMin + onesMin + onesMin));\n        long zerosMaxMinMinMinMinMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax + zerosMin + zerosMin + zerosMin\
    \ + zerosMin + zerosMin));\n        long onesMaxMinMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ + onesMin + onesMin + onesMin + onesMin + onesMin + onesMin));\n        long\
    \ zerosMaxMinMinMinMinMin = Long.parse\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cb0gqz9.java:43: error: ';' expected\n        long zerosMaxMinMinMinMinMin\
    \ = Long.parse\n                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l.longValue() == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(arr);\n            for (Long l : arr)\
    \ {\n                if (l.longValue() == 1) {\n                    result.add(l);\n\
    \                }\n            }\n        } else if (zeros > ones) {\n      \
    \      Collections.sort(arr);\n            for (Long l : arr) {\n            \
    \    if (l.longValue() == 0) {\n                    result.add(l);\n         \
    \       }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l.longValue() == 0) {\n\
    \                    result.add(l);\n                }\n            }\n      \
    \      for (Long l : arr) {\n                if (l.longValue() == 1) {\n     \
    \               result.add(l);\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qopfhd.java:60)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        if (hundredsCount > onesCount) {\n   \
    \         hundredsCount = onesCount;\n        }\n        if (thousandsCount >\
    \ onesCount) {\n            thousandsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > tensCount) {\n            thousandsCount = tensCount;\n  \
    \      }\n        if (thousandsCount > hundredsCount) {\n            thousandsCount\
    \ = hundredsCount;\n        }\n        if (onesCount > hundredsCount) {\n    \
    \        onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > thousandsCount) {\n            tensCount = thousandsCount;\n        }\n  \
    \      if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > onesCount) {\n            hundredsCount\
    \ = onesCount;\n        }\n        if (thousandsCount > onesCount) {\n       \
    \     thousandsCount = onesCount;\n        }\n        if (thousandsCount > tensCount)\
    \ {\n            thous\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpojrbopii.java:89: error: not a statement\n            thous\n \
    \           ^\n/tmp/tmpojrbopii.java:89: error: ';' expected\n            thous\n\
    \                 ^\n/tmp/tmpojrbopii.java:91: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long val : arr)\
    \ {\n            if (val == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        long onesDiff\
    \ = ones - zeros;\n        long zerosDiff =  zeros - ones;\n        long onesDiff2\
    \ = ones - ones;\n        long zerosDiff =  zeros - zeros;\n        long onesDiff3\
    \ = ones - onesDiff;\n        long zerosDiff =  zeros - zeroDiff;\n        long\
    \ onesDiff4 = ones - onesDiff2;\n        long zerosDiff =  zeros - zeroDiff2;\n\
    \        long onesDiff5 = ones - onesDiff3;\n        long zerosDiff =  zeros -\
    \ zeroDiff3;\n        long onesDiff6 = ones - onesDiff4;\n        long zerosDiff\
    \ =  zeros - zeroDiff4;\n        long onesDiff7 = ones - onesDiff5;\n        long\
    \ zerosDiff =  zeros - zeroDiff5;\n        long onesDiff8 = ones - onesDiff6;\n\
    \        long zerosDiff =  zeros - zeroDiff6;\n        long onesDiff9 = ones -\
    \ onesDiff7;\n        long zerosDiff =  zeros - zeroDiff7;\n        long onesDiff10\
    \ = ones - onesDiff8;\n        long zerosDiff =  zeros - zeroDiff8;\n        long\
    \ onesDiff11 = ones - onesDiff9;\n        long zerosDiff =  zeros - zeroDiff9;\n\
    \        long onesDiff12 = ones - onesDiff10;\n        long zerosDiff =  zeros\
    \ - zeroDiff10;\n        long onesDiff13 = ones - onesDiff11;\n        long zerosDiff\
    \ =  zeros - zeroDiff11;\n        long onesDiff14 = ones - onesDiff12;\n     \
    \   long zerosDiff =  zeros - zeroDiff12;\n        long onesDiff15 = ones - onesDiff13;\n\
    \        long zerosDiff =  zeros - zeroDiff13;\n        long onesDiff16 = ones\
    \ - onesDiff14;\n        long zerosDiff =  zeros - zeroDiff14;\n        long onesDiff17\
    \ = ones - onesDiff15;\n        long zerosDiff =  zeros - zeroDiff15;\n      \
    \  long onesDiff18 = ones - onesDiff16;\n        long zerosDiff =  zeros - zeroDiff16;\n\
    \        long onesDiff19 = ones - onesDiff17;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzvxpcyl.java:33: error: variable zerosDiff is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long zerosDiff =  zeros - zeros;\n\
    \             ^\n/tmp/tmpzzvxpcyl.java:35: error: variable zerosDiff is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long zerosDiff =  zeros\
    \ - zeroDiff;\n             ^\n/tmp/tmpzzvxpcyl.java:35: error: cannot find symbol\n\
    \        long zerosDiff =  zeros - zeroDiff;\n                               \
    \   ^\n  symbol:   variable zeroDiff\n  location: class Problem\n/tmp/tmpzzvxpcyl.java:37:\
    \ error: variable zerosDiff is already defined in method sortArray(ArrayList<Long>)\n\
    \        long zerosDiff =  zeros - zeroDiff2;\n             ^\n/tmp/tmpzzvxpcyl.java:37:\
    \ error: cannot find symbol\n        long zerosDiff =  zeros - zeroDiff2;\n  \
    \                                ^\n  symbol:   variable zeroDiff2\n  location:\
    \ class Problem\n/tmp/tmpzzvxpcyl.java:39: error: variable zerosDiff is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long zerosDiff =  zeros\
    \ - zeroDiff3;\n             ^\n/tmp/tmpzzvxpcyl.java:39: error: cannot find symbol\n\
    \        long zerosDiff =  zeros - zeroDiff3;\n                              \
    \    ^\n  symbol:   variable zeroDiff3\n  location: class Problem\n/tmp/tmpzzvxpcyl.java:41:\
    \ error: variable zerosDiff is already defined in method sortArray(ArrayList<Long>)\n\
    \        long zerosDiff =  zeros - zeroDiff4;\n             ^\n/tmp/tmpzzvxpcyl.java:41:\
    \ error: cannot find symbol\n        long zerosDiff =  zeros - zeroDiff4;\n  \
    \                                ^\n  symbol:   variable zeroDiff4\n  location:\
    \ class Problem\n/tmp/tmpzzvxpcyl.java:43: error: variable zerosDiff is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long zerosDiff =  zeros\
    \ - zeroDiff5;\n             ^\n/tmp/tmpzzvxpcyl.java:43: error: cannot find symbol\n\
    \        long zerosDiff =  zeros - zeroDiff5;\n                              \
    \    ^\n  symbol:   variable zeroDiff5\n  location: class Problem\n/tmp/tmpzzvxpcyl.java:45:\
    \ error: variable zerosDiff is already defined in method sortArray(ArrayL"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            if (l == 1l)\n                tens++;\n            else if (l\
    \ == 10l)\n                tens = tens * 10l;\n            else if (l == 100l)\n\
    \                tens = tens * 100l;\n            else if (l == 1000l)\n     \
    \           tens = tens * 1000l;\n            else if (l == 10000l)\n        \
    \        tens = tens * 10000l;\n            else if (l == 100000l)\n         \
    \       tens = tens * 100000l;\n            else if (l == 1000000l)\n        \
    \        tens = tens * 1000000l;\n            else if (l == 10000000l)\n     \
    \           tens = tens * 10000000l;\n            else if (l == 100000000l)\n\
    \                tens = tens * 100000000l;\n            else if (l == 1000000000l)\n\
    \                tens = tens * 1000000000l;\n            else if (l == 10000000000l)\n\
    \                tens = tens * 10000000000l;\n            else if (l == 100000000000l)\n\
    \                tens = tens * 100000000000l;\n            else if (l == 1000000000000l)\n\
    \                tens = tens * 1000000000000l;\n            else if (l == 10000000000000l)\n\
    \                tens = tens * 10000000000000l;\n            else if (l == 100000000000000l)\n\
    \                tens = tens * 100000000000000l;\n            else if (l == 1000000000000000l)\n\
    \                tens = tens * 1000000000000000l;\n            else if (l == 10000000000000000l)\n\
    \                tens = tens * 10000000000000000l;\n            else if (l ==\
    \ 100000000000000000l)\n                tens = tens * 100000000000000000l;\n \
    \           else if (l == 1000000000000000000l)\n                tens = tens *\
    \ 1000000000000000000l;\n            hundreds += l;\n            if (l == 100l)\n\
    \                thousands++;\n            else if (l == 1000l)\n            \
    \    thousands = thousands * 1000l;\n            else if (l == 10000l)\n     \
    \           thousands = thousands * 10000l;\n            else if (l == 100000l)\n\
    \                thousands = thousands * 100000l;\n            else if (l == 1000000l)\n\
    \                thousands = thousands * 1000000l;\n            else if (l ==\
    \ 10000000l)\n                thousands = thousands * 10000000l;\n           \
    \ else if (l == 100000000l)\n                thousands = thousands * 100000000l;\n\
    \            else if (l == 1000000000l)\n                thousands = thousands\
    \ * 1000000000l;\n            else if (l == 10000000000\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dl5bx4c.java:82: error: integer number too large\n           \
    \ else if (l == 10000000000\n                          ^\n/tmp/tmp2dl5bx4c.java:82:\
    \ error: ')' expected\n            else if (l == 10000000000\n               \
    \                      ^\n/tmp/tmp2dl5bx4c.java:83: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp2dl5bx4c.java:84: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n4 errors\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == \n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvoq897tp.java:144: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpvoq897tp.java:145: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l)\n                ones++;\n            else\n       \
    \         zeros++;\n        }\n        long onesRes = ones;\n        long zerosRes\
    \ = zeros;\n        long maxOnes = ones;\n        long maxZeros = zeros;\n   \
    \     long maxOnesRes = onesRes;\n        long maxZerosRes = zerosRes;\n     \
    \   long maxOnesMaxZeros = ones;\n        long maxOnesMaxZerosRes = onesRes;\n\
    \        long maxZerosMaxOnes = zeros;\n        long maxZerosMaxOnesRes = zerosRes;\n\
    \        long maxOnesMaxZerosMaxOnes = ones;\n        long maxOnesMaxZerosMaxOnesRes\
    \ = onesRes;\n        long maxZerosMaxOnesMaxZeros = zeros;\n        long maxZerosMaxOnesMaxZerosRes\
    \ = zerosRes;\n        long maxOnesMaxZerosMaxOnesMaxZeros = ones;\n        long\
    \ maxOnesMaxZerosMaxOnesMaxZerosRes = onesRes;\n        long maxZerosMaxOnesMaxOnesMaxZeros\
    \ = zeros;\n        long maxZerosMaxOnesMaxOnesMaxZerosRes = zerosRes;\n     \
    \   long maxOnesMaxZerosMaxOnesMaxOnesMaxZeros = ones;\n        long maxOnesMaxZerosMaxOnesMaxOnesMaxZerosRes\
    \ = onesRes;\n        long maxZerosMaxOnesMaxOnesMaxOnesMaxOnesMaxZeros = zeros;\n\
    \        long maxZerosMaxOnesMaxOnesMaxOnesMaxOnesMaxZerosRes = zerosRes;\n  \
    \      long maxOnesMaxZerosMaxOnesMaxOnesMaxOnesMaxOnesMaxZeros = ones;\n    \
    \    long maxOnesMaxZerosMaxOnesMaxOnesMaxOnesMaxOnesMaxZerosRes = onesRes;\n\
    \        long maxZerosMaxOnesMaxOnesMaxOnesMaxOnesMaxOnesMaxOnesMaxZeros = zeros;\n\
    \        long maxZerosMaxOnesMaxOnesMaxOnesMax\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89k94jtz.java:54: error: ';' expected\n        long maxZerosMaxOnesMaxOnesMaxOnesMax\n\
    \                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long one\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3d6_2z77.java:92: error: ';' expected\n        long one\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            if (l == 1l)\n                tens++;\n            else if (l\
    \ == 10l)\n                tens += 1;\n            else if (l == 100l)\n     \
    \           tens += 2;\n            else if (l == 1000l)\n                tens\
    \ += 3;\n            else if (l == 10000l)\n                tens += 4;\n     \
    \       else if (l == 100000l)\n                tens += 5;\n            else if\
    \ (l == 1000000l)\n                tens += 6;\n            else if (l == 10000000l)\n\
    \                tens += 7;\n            else if (l == 100000000l)\n         \
    \       tens += 8;\n            else if (l == 1000000000l)\n                tens\
    \ += 9;\n            else if (l == 10000000000l)\n                tens += 10;\n\
    \            else if (l == 100000000000l)\n                tens += 11;\n     \
    \       else if (l == 1000000000000l)\n                tens += 12;\n         \
    \   else if (l == 10000000000000l)\n                tens += 13;\n            else\
    \ if (l == 100000000000000l)\n                tens += 14;\n            else if\
    \ (l == 1000000000000000l)\n                tens += 15;\n            else if (l\
    \ == 10000000000000000l)\n                tens += 16;\n            else if (l\
    \ == 100000000000000000l)\n                tens += 17;\n            else if (l\
    \ == 1000000000000000000l)\n                tens += 18;\n            hundreds\
    \ += l;\n            if (l == 100l)\n                thousands++;\n          \
    \  else if (l == 1000l)\n                thousands += 1;\n            else if\
    \ (l == 10000l)\n                thousands += 2;\n            else if (l == 100000l)\n\
    \                thousands += 3;\n            else if (l == 1000000l)\n      \
    \          thousands += 4;\n            else if (l == 10000000l)\n           \
    \     thousands += 5;\n            else if (l == 100000000l)\n               \
    \ thousands += 6;\n            else if (l == 1000000000l)\n                thousands\
    \ += 7;\n            else if (l == 10000000000l)\n                thousands +=\
    \ 8;\n            else if (l == 100000000000l)\n                thousands += 9;\n\
    \            else if (l == 1000000000000l)\n                thousands += 10;\n\
    \            else if (l == 10000000000000l)\n                thousands += 11;\n\
    \            else if (l == 100000000000000l)\n                thousands += 12;\n\
    \            else if (l == 1000000000000000l)\n                thousands += 13;\n\
    \            else if (l == 10000000000000000l)\n                thousands += 14;\n\
    \            else if (l == \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27takhm5.java:97: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp27takhm5.java:98: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        long onesMaxDiff\
    \ = onesMax - onesMax;\n        long zerosMaxDiff = zerosMax - zerosMax;\n   \
    \     long onesMinDiff = onesMin - onesMin;\n        long zerosMinDiff = zerosMin\
    \ - zerosMin;\n        long onesDiffDiff = onesDiff - onesDiff;\n        long\
    \ zerosDiffDiff = zerosDiff - zerosDiff;\n        long onesMaxDiffDiff = onesMaxDiff\
    \ - onesMaxDiff;\n        long zerosMaxDiffDiff = zerosMaxDiff - zerosMaxDiff;\n\
    \        long onesMinDiffDiff = onesMinDiff - onesMinDiff;\n        long zerosMinDiffDiff\
    \ = zerosMinDiff - zerosMinDiff;\n        long onesDiffDiffDiff = onesDiffDiff\
    \ - onesDiffDiff;\n        long zerosDiffDiffDiff = zerosDiffDiff - zerosDiffDiff;\n\
    \        long onesMaxDiffDiffDiff = onesMaxDiffDiff - onesMaxDiffDiff;\n     \
    \   long zerosMaxDiffDiffDiff = zerosMaxDiffDiff - zerosMaxDiffDiff;\n       \
    \ long onesMinDiffDiffDiff = onesMinDiffDiff - onesMinDiffDiff;\n        long\
    \ zerosMinDiffDiff = zerosMinDiffDiff - zerosMinDiffDiff;\n        long onesDiffDiffDiffDiff\
    \ = onesDiffDiffDiff - onesDiffDiffDiff;\n        long zerosDiffDiffDiffDiff =\
    \ zerosDiffDiffDiff - zerosDiffDiffDiff;\n        long onesMaxDiffDiffDiffDiff\
    \ = onesMaxDiffDiffDiff - onesMaxDiffDiffDiff;\n        long zerosMaxDiff\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfvu0wn4.java:53: error: ';' expected\n        long zerosMaxDiff\n\
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (long l : arr) {\n            long bin =\
    \ Long.parseLong(Long.toBinaryString(l), 2);\n            int binLen = bin.length();\n\
    \            if (binLen > 1) {\n                ones += binLen - 1;\n        \
    \    }\n            if (binLen > 2) {\n                tens += binLen - 2;\n \
    \           }\n            if (binLen > 3) {\n                hundreds += binLen\
    \ - 3;\n            }\n            if (binLen > 4) {\n                thousands\
    \ += binLen - 4;\n            }\n            if (binLen > 5) {\n             \
    \   tenths += binLen - 5;\n            }\n            if (binLen > 6) {\n    \
    \            hundredths += binLen - 6;\n            }\n            if (binLen\
    \ > 7) {\n                thousandths += binLen - 7;\n            }\n        }\n\
    \        long onesSum = ones * ones;\n        long tensSum = tens * tens;\n  \
    \      long hundredsSum = hundreds * hundreds;\n        long thousandsSum = thousands\
    \ * thousands;\n        long tenthsSum = tenths * tenths;\n        long hundredthsSum\
    \ = hundredths * hundredths;\n        long thousandthsSum = thousandths * thousandths;\n\
    \        long sum = (onesSum + tensSum + hundredsSum + thousandsSum + tenthsSum\
    \ + hundredthsSum + thousandthsSum);\n        long onesSum2 = ones * ones * ones;\n\
    \        long tensSum2 = tens * tens * tens;\n        long hundredsSum2 = hundreds\
    \ * hundreds * hundreds;\n        long thousandsSum2 = thousands * thousands *\
    \ thousands;\n        long tenthsSum2 = tenths * tenths * tenths;\n        long\
    \ hundredthsSum2 = hundredths * hundredths * hundredths;\n        long thousandthsSum2\
    \ = thousandths * thousandths * thousandths;\n        long sum2 = (onesSum2 +\
    \ tensSum2 + hundredsSum2 + thousandsSum2 + tenthsSum2 + hundredthsSum2 + thousandthsSum2);\n\
    \        long onesSum3 = ones * ones * ones * ones;\n        long ten\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpag41dw26.java:64: error: ';' expected\n        long ten\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long onehundreds\
    \ = 0;\n        long onethousands = 0;\n        long onetenths = 0;\n        long\
    \ onehundredths = 0;\n        long onethousandths = 0;\n        long onetenthhundredths\
    \ = 0;\n        long onehundredththousandths = 0;\n        long onethousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredths = 0;\n        long onehundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredths = 0;\n       \
    \ long onetenththousandthhundredththousandthhundredths = 0;\n        long onehundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onehundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onehundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandth\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_0v_fhe0.java:45: error: ';' expected\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandth\n\
    \                                                                            \
    \                                                                            \
    \                                                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        if (onesDiff\
    \ > zerosDiff) {\n            Collections.sort(arr, (l, r) -> Long.compare(Long.parseLong(Long.toBinaryString(r)),\
    \ Long.parseLong(Long.toBinaryString(l))));\n        } else {\n            Collections.sort(arr,\
    \ (l, r) -> Long.compare(Long.parseLong(Long.toBinaryString(l)), Long.parseLong(Long.toBinaryString(r))));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnj46_7cm.java:42)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       long onesTens = ones * 10l;\n        long onesHundreds = ones * 100l;\n\
    \        long onesThousands = ones * 1000l;\n        long tensHundreds = tens\
    \ * 100l;\n        long tensThousands = tens * 1000l;\n        long hundredsThousands\
    \ = hundreds * 1000l;\n        long thousandsThousands = thousands * 1000l;\n\
    \        long onesThousandsHundreds = onesThousands * hundreds;\n        long\
    \ onesThousandsThousands = onesThousands * thousands;\n        long onesHundredsThousands\
    \ = onesHundreds * thousands;\n        long tensThousandsHundreds = tensThousands\
    \ * hundreds;\n        long tensThousandsThousands = tensThousands * thousands;\n\
    \        long hundredsThousandsThousands = hundredsThousands * thousands;\n  \
    \      long thousandsThousandsThousands = thousandsThousands * thousands;\n  \
    \      long onesHundredsThousandsThousands = onesHundredsThousands * thousandsThousands;\n\
    \        long onesThousandsHundredsThousands = onesThousandsHundreds * thousandsThousands;\n\
    \        long onesThousandsThousandsThousands = onesThousandsThousands * thousandsThousands;\n\
    \        long onesHundredsThousandsThousandsThousands = onesHundredsThousandsThousands\
    \ * thousandsThousandsThousands;\n        long onesThousandsHundredsThousandsThousands\
    \ = onesTh\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b6ua28v.java:53: error: ';' expected\n        long onesThousandsHundredsThousandsThousands\
    \ = onesTh\n                                                             ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659794920
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n            else\
    \ if (l == 10000l) tenths++;\n            else if (l == 100000l) hundredths++;\n\
    \            else if (l == 1000000l) thousandths++;\n        }\n        long onesDecimal\
    \ = ones * 1000;\n        long tensDecimal = tens * 100;\n        long hundredsDecimal\
    \ = hundreds * 10;\n        long thousandsDecimal = thousands * 1;\n        long\
    \ tenthsDecimal = tenths * 1;\n        long hundredthsDecimal = hundredths * 1;\n\
    \        long thousandthsDecimal = thousandths * 1;\n        long onesDecimalDecimal\
    \ = onesDecimal * 1;\n        long tensDecimalDecimal = tensDecimal * 1;\n   \
    \     long hundredsDecimalDecimal = hundredsDecimal * 1;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal * 1;\n        long tenthsDecimalDecimal = tenthsDecimal *\
    \ 1;\n        long hundredthsDecimalDecimal = hundredthsDecimal * 1;\n       \
    \ long thousandthsDecimalDecimal = thousandthsDecimal * 1;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 1;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ * 1;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal *\
    \ 1;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal *\
    \ 1;\n        long tenthsDecimalDecimalDecimal = tenthsDecimalDecimal * 1;\n \
    \       long hundredthsDecimalDecimalDecimal = hundredthsDecimalDecimal * 1;\n\
    \        long thousandthsDecimalDecimalDecimal = thousandthsDecimalDecimal * 1;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 1;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal * 1;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ * 1;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ * \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve9muwkf.java:56: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num == 1000) {\n                thousandsCount++;\n            }\n\
    \        }\n        long onesCount2 = onesCount * ones;\n        long tensCount2\
    \ = tensCount * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n\
    \        long thousandsCount2 = thousandsCount * thousands;\n        long onesCount3\
    \ = onesCount2 * ones;\n        long tensCount3 = tensCount2 * tens;\n       \
    \ long hundredsCount3 = hundredsCount2 * hundreds;\n        long thousandsCount3\
    \ = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3 * ones;\n\
    \        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3\
    \ * hundreds;\n        long thousandsCount4 = thousandsCount3 * thousands;\n \
    \       long onesCount5 = onesCount4 * ones;\n        long tensCount5 = tensCount4\
    \ * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n        long\
    \ thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5\
    \ * ones;\n        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6\
    \ = hundredsCount5 * hundreds;\n        long thousandsCount6 = thousandsCount5\
    \ * thousands;\n        long onesCount7 = onesCount6 * ones;\n        long tensCount7\
    \ = tensCount6 * tens;\n        long hundredsCount7 = hundredsCount6 * hundreds;\n\
    \        long thousands\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps3abgxbl.java:74: error: ';' expected\n        long thousands\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxa2lpqrd.java:31: error: variable tenthths is already defined in\
    \ method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n            \
    \ ^\n/tmp/tmpxa2lpqrd.java:32: error: variable hundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n     \
    \        ^\n/tmp/tmpxa2lpqrd.java:33: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:34: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:35: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:36: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:37: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:38: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:39: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:40: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:41: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:42: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:43: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:44: error: variab"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones < tens) result.addAll(Arrays.asList(ones, tens, hundreds,\
    \ thousands));\n        else if (ones < hundreds) result.addAll(Arrays.asList(ones,\
    \ hundreds, thousands));\n        else if (ones < thousands) result.addAll(Arrays.asList(ones,\
    \ thousands));\n        else if (tens < hundreds) result.addAll(Arrays.asList(tens,\
    \ hundreds, thousands));\n        else if (tens < thousands) result.addAll(Arrays.asList(tens,\
    \ thousands));\n        else if (hundreds < thousands) result.addAll(Arrays.asList(hundreds,\
    \ thousands));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_lfevtv.java:40)\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            }\n            if (i > 10) {\n\
    \                tens += i;\n            }\n            if (i > 100) {\n     \
    \           hundreds += i;\n            }\n            if (i > 1000) {\n     \
    \           thousands += i;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (long i : arr) {\n            if (i >\
    \ 0) {\n                onesCount += i;\n            }\n            if (i > 10)\
    \ {\n                tensCount += i;\n            }\n            if (i > 100)\
    \ {\n                hundredsCount += i;\n            }\n            if (i > 1000)\
    \ {\n                thousandsCount += i;\n            }\n        }\n        long\
    \ onesCountReverse = 0;\n        long tensCountReverse = 0;\n        long hundredsCountReverse\
    \ = 0;\n        long thousandsCountReverse = 0;\n        for (long i : arr) {\n\
    \            if (i > 0) {\n                onesCountReverse += i;\n          \
    \  }\n            if (i > 10) {\n                tensCountReverse += i;\n    \
    \        }\n            if (i > 100) {\n                hundredsCountReverse +=\
    \ i;\n            }\n            if (i > 1000) {\n                thousandsCountReverse\
    \ += i;\n            }\n        }\n        long onesCountReverseReverse = 0;\n\
    \        long tensCountReverseReverse = 0;\n        long hundredsCountReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverse = 0;\n        for (long i :\
    \ arr) {\n            if (i > 0) {\n                onesCountReverseReverse +=\
    \ i;\n            }\n            if (i > 10) {\n                tensCountReverseReverse\
    \ += i;\n            }\n            if (i > 100) {\n                hundredsCountReverseReverse\
    \ += i;\n            }\n            if (i > 1000) {\n                thousandsCountReverseReverse\
    \ += i;\n            }\n        }\n        long onesCountReverseReverseReverse\
    \ = 0;\n        long tensCountReverseReverseReverse = 0;\n        long hundredsCountReverseReverseReverse\
    \ = 0;\n        long thousandsCountReverseReverseReverse = 0;\n        for (long\
    \ i : arr) {\n            if (i > 0) {\n                onesCountReverseReverseReverse\
    \ += i;\n            }\n            if (i > 10) {\n                tensCountReverseReverseReverse\
    \ += i;\n            }\n            if (i > 100) {\n                hundredsCountReverseReverseReverse\
    \ += i;\n            }\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwv6ij74.java:108: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n        }\n        ones = ones / 2;\n        for (Long l : arr) {\n    \
    \        tens += l;\n        }\n        tens = tens / 10;\n        for (Long l\
    \ : arr) {\n            hundreds += l;\n        }\n        hundreds = hundreds\
    \ / 100;\n        for (Long l : arr) {\n            thousands += l;\n        }\n\
    \        thousands = thousands / 1000;\n        for (Long l : arr) {\n       \
    \     if (l == 0) {\n                result.add(0);\n            } else {\n  \
    \              long temp = 0;\n                if (l > ones) {\n             \
    \       temp = l - ones;\n                    result.add(temp);\n            \
    \    }\n                if (l > tens) {\n                    temp = l - tens;\n\
    \                    result.add(temp);\n                }\n                if\
    \ (l > hundreds) {\n                    temp = l - hundreds;\n               \
    \     result.add(temp);\n                }\n                if (l > thousands)\
    \ {\n                    temp = l - thousands;\n                    result.add(temp);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9bdtrrk.java:43: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(0);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) {\n                ones++;\n            } else {\n \
    \               zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long i : arr) {\n  \
    \              if (i == 1l) {\n                    result.add(i);\n          \
    \      }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 0l) {\n          \
    \          result.add(i);\n                }\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabs7wukk.java:48)\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones * 1000;\n        long tensDecimal = tens\
    \ * 100;\n        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long onesDecimalDecimal = onesDecimal * 1;\n     \
    \   long tensDecimalDecimal = tensDecimal * 1;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal * 1;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ * 1;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal * 1;\n   \
    \     long tensDecimalDecimalDecimal = tensDecimalDecimal * 1;\n        long hundredsDecimalDecimalDecimal\
    \ = hundredsDecimalDecimal * 1;\n        long thousandsDecimalDecimalDecimal =\
    \ thousandsDecimalDecimal * 1;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal * 1;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal * 1;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal * 1;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal * 1;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * 1;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal * 1;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimal * 1;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimalDecimal * 1;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal * 1;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal * 1;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 1;\n  \
    \      long thousandsDecimalDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = \n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqpmzayjq.java:56: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens\
    \ / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n        long thousandsDecimal\
    \ = (thousands / 10) * 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n\
    \        long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = (hundredsDecimal / 10) * 10;\n        long thousandsDecimalDecimal = (thousandsDecimal\
    \ / 10) * 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal / 10) * 10;\n      \
    \  long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal / 10) * 10;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDe\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp752xzxva.java:52: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDe\n                                     \
    \                                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        long maxOnes\
    \ = ones;\n        long maxZeros = zeros;\n        if (ones > zeros) {\n     \
    \       maxOnes = ones;\n            maxZeros = zeros;\n        }\n        long\
    \ maxOnesDecimal = ones / maxOnes;\n        long maxZerosDecimal = zeros / maxZeros;\n\
    \        long maxOnesDecimalDecimal = maxOnesDecimal / maxOnes;\n        long\
    \ maxZerosDecimalDecimal = maxZerosDecimal / maxZeros;\n        long maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal / maxOnes;\n        long maxZerosDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimal / maxZeros;\n        long maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal / maxOnes;\n        long maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal / maxZeros;\n        long maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimal / maxOnes;\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal / maxZeros;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes;\n        long\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal /\
    \ maxZeros;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiebbj2_1.java:48: error: cannot find symbol\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes;\n\
    \                                                                        ^\n \
    \ symbol:   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpiebbj2_1.java:50: error: cannot find symbol\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes;\n\
    \                                                                            \
    \   ^\n  symbol:   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpiebbj2_1.java:51: error: cannot find symbol\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal /\
    \ maxZeros;\n                                                                \
    \                ^\n  symbol:   variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long onehundreds\
    \ = 0;\n        long onethousands = 0;\n        long onetenths = 0;\n        long\
    \ onehundredths = 0;\n        long onethousandths = 0;\n        long onetenthhundredths\
    \ = 0;\n        long onehundredththousandths = 0;\n        long onethousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredths = 0;\n        long onehundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredths = 0;\n       \
    \ long onetenththousandthhundredththousandthhundredths = 0;\n        long onehundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onehundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onetenththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onehundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhund\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu504h2k.java:45: error: ';' expected\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhund\n\
    \                                                                            \
    \                                                                            \
    \                                                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 2) {\n     \
    \           tens++;\n            } else if (num == 3) {\n                hundreds++;\n\
    \            } else if (num == 4) {\n                thousands++;\n          \
    \  } else {\n                throw new RuntimeException(\"Invalid input\");\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            hundredsCount = onesCount;\n        }\n      \
    \  if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \            thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \            thousandsCount = hundredsCount;\n        }\n        if (hundredsCount\
    \ == 0) {\n            hundredsCount = 1;\n        }\n        if (thousandsCount\
    \ == 0) {\n            thousandsCount = 1;\n        }\n        long maxOnes =\
    \ onesCount;\n        long maxTens = tensCount;\n        long maxHundreds = hundredsCount;\n\
    \        long maxThousands = thousandsCount;\n        if (maxOnes > maxHundreds)\
    \ {\n            maxOnes = maxHundreds;\n            maxHundreds = maxOnes;\n\
    \        }\n        if (maxTens > maxHundreds) {\n            maxTens = maxHundreds;\n\
    \            maxHundreds = maxTens;\n        }\n        if (maxHundreds > maxThousands)\
    \ {\n            maxHundreds = maxThousands;\n            maxThousands = maxHundreds;\n\
    \        }\n        if (maxThousands > maxOnes) {\n            maxThousands =\
    \ maxOnes;\n            maxOnes = maxThousands;\n        }\n        long maxOnesCount\
    \ = maxOne\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7sdhow_e.java:88: error: ';' expected\n        long maxOnesCount\
    \ = maxOne\n                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            ones +=\
    \ i;\n            tens += (i / 10);\n            hundreds += (i / 100);\n    \
    \        thousands += (i / 1000);\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        long onesCount2 = ones;\n     \
    \   long tensCount2 = tens;\n        long hundredsCount2 = hundreds;\n       \
    \ long thousandsCount2 = thousands;\n        long onesCount3 = ones;\n       \
    \ long tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n        long\
    \ thousandsCount3 = thousands;\n        long onesCount4 = ones;\n        long\
    \ tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n        long thousandsCount4\
    \ = thousands;\n        long onesCount5 = ones;\n        long tensCount5 = tens;\n\
    \        long hundredsCount5 = hundreds;\n        long thousandsCount5 = thousands;\n\
    \        long onesCount6 = ones;\n        long tensCount6 = tens;\n        long\
    \ hundredsCount6 = hundreds;\n        long thousandsCount6 = thousands;\n    \
    \    long onesCount7 = ones;\n        long tensCount7 = tens;\n        long hundredsCount7\
    \ = hundreds;\n        long thousandsCount7 = thousands;\n        long onesCount8\
    \ = ones;\n        long tensCount8 = tens;\n        long hundredsCount8 = (hundreds);\n\
    \        long thousandsCount8 = (thousands);\n        long onesCount9 = ones;\n\
    \        long tensCount9 = tens;\n        long hundredsCount9 = (hundreds);\n\
    \        long thousandsCount9 = (thousands);\n        long onesCount10 = ones;\n\
    \        long tensCount10 = tens;\n        long hundredsCount10 = (hundreds);\n\
    \        long thousandsCount10 = (thousands);\n        long onesCount11 = ones;\n\
    \        long tensCount11 = tens;\n        long hundredsCount11 = (hundreds);\n\
    \        long thousandsCount11\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngsp8h4y.java:74: error: ';' expected\n        long thousandsCount11\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n        long tenthths = 0;\n        long\
    \ hundredthths = 0;\n        long thousandthths = 0;\n        long tenthths =\
    \ 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n      \
    \  long tenthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long tenthths = 0;\n        long hundredthths = 0;\n        long\
    \ thousandthths = 0;\n        long tenthths = 0;\n        long hundredthths =\
    \ 0;\n        long thousandthths = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxa2lpqrd.java:31: error: variable tenthths is already defined in\
    \ method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n            \
    \ ^\n/tmp/tmpxa2lpqrd.java:32: error: variable hundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n     \
    \        ^\n/tmp/tmpxa2lpqrd.java:33: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:34: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:35: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:36: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:37: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:38: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:39: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:40: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:41: error: variable hundredthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:42: error: variable thousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long thousandthths = 0;\n\
    \             ^\n/tmp/tmpxa2lpqrd.java:43: error: variable tenthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long tenthths = 0;\n \
    \            ^\n/tmp/tmpxa2lpqrd.java:44: error: variab"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else if (i\
    \ == 0) {\n                zeros++;\n            } else {\n                result.add(i);\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(result);\n\
    \        } else {\n            Collections.sort(result, Comparator.comparingLong(Long::parseLong));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnshtqra.java:35: error: incompatible types: cannot infer type-variable(s)\
    \ T\n            Collections.sort(result, Comparator.comparingLong(Long::parseLong));\n\
    \                            ^\n    (argument mismatch; invalid method reference\n\
    \      incompatible types: Long cannot be converted to String)\n  where T is a\
    \ type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n            else\
    \ if (l == 10000l) tenths++;\n            else if (l == 100000l) hundredths++;\n\
    \            else if (l == 1000000l) thousandths++;\n        }\n        long onesSum\
    \ = ones * 10l;\n        long tensSum = tens * 10l;\n        long hundredsSum\
    \ = hundreds * 10l;\n        long thousandsSum = thousands * 10l;\n        long\
    \ tenthsSum = tenths * 10l;\n        long hundredthsSum = hundredths * 10l;\n\
    \        long thousandthsSum = thousandths * 10l;\n        long onesDiff = onesSum\
    \ - ones;\n        long tensDiff = tensSum - tens;\n        long hundredsDiff\
    \ = hundredsSum - hundreds;\n        long thousandsDiff = thousandsSum - thousands;\n\
    \        long tenthsDiff = tenthsSum - tenths;\n        long hundredthsDiff =\
    \ hundredthsSum - hundredths;\n        long thousandthsDiff = thousandthsSum -\
    \ thousandths;\n        long onesDiffSum = onesDiff + onesSum;\n        long tensDiffSum\
    \ = tensDiff + tensSum;\n        long hundredsDiffSum = hundredsDiff + hundredsSum;\n\
    \        long thousandsDiffSum = thousandsDiff + thousandsSum;\n        long tenthsDiffSum\
    \ = tenthsDiff + tenthsSum;\n        long hundredthsDiffSum = hundredthsDiff +\
    \ hundredthsSum;\n        long thousandthsDiffSum = thousandthsDiff + thousandthsSum;\n\
    \        long onesDiffSum = onesDiffSum + onesSum;\n        long tensDiffSum =\
    \ tensDiffSum + tensSum;\n        long hundredsDiffSum = hundreds\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_c4zw1y.java:54: error: ';' expected\n        long hundredsDiffSum\
    \ = hundreds\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) onesCount++;\n            else if (l == 10l)\
    \ tensCount++;\n            else if (l == 100l) hundredsCount++;\n           \
    \ else if (l == 1000l) thousandsCount++;\n        }\n        long onesCountInt\
    \ = onesCount;\n        long tensCountInt = tensCount;\n        long hundredsCountInt\
    \ = hundredsCount;\n        long thousandsCountInt = thousandsCount;\n       \
    \ long onesCountDecimal = onesCount;\n        long tensCountDecimal = tensCount;\n\
    \        long hundredsCountDecimal = hundredsCount;\n        long thousandsCountDecimal\
    \ = thousandsCount;\n        long onesCountDecimalInt = onesCountDecimal;\n  \
    \      long tensCountDecimalInt = tensCountDecimal;\n        long hundredsCountDecimalInt\
    \ = hundredsCountDecimal;\n        long thousandsCountDecimalInt = thousandsCountDecimal;\n\
    \        long onesCountDecimalDecimal = onesCountDecimal;\n        long tensCountDecimalDecimal\
    \ = tensCountDecimal;\n        long hundredsCountDecimalDecimal = hundredsCountDecimal;\n\
    \        long thousandsCountDecimalDecimal = thousandsCountDecimal;\n        long\
    \ onesCountDecimalDecimalInt = onesCountDecimalDecimal;\n        long tensCountDecimalDecimalInt\
    \ = tensCountDecimalDecimal;\n        long hundredsCountDecimalDecimalInt = hundredsCountDecimalDecimal;\n\
    \        long thousandsCountDecimalDecimalInt = thousandsCountDecimalDecimalInt;\n\
    \        long onesCountDecimalDecimalDecimal = onesCountDecimalDecimal;\n    \
    \    long tensCountDecimalDecimalDecimal = tensCountDecimalDecimal;\n        long\
    \ hundredsCountDecimalDecimalDecimal = hundred\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ur9akrz.java:63: error: ';' expected\n        long hundredsCountDecimalDecimalDecimal\
    \ = hundred\n                                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            tens += l / 10;\n            hundreds += l / 100;\n        \
    \    thousands += l / 1000;\n        }\n        long onesCount = ones;\n     \
    \   long tensCount = tens;\n        long hundredsCount = hundreds;\n        long\
    \ thousandsCount = thousands;\n        long onesCount2 = onesCount;\n        long\
    \ tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n    \
    \    long thousandsCount2 = thousandsCount;\n        long onesCount3 = onesCount2;\n\
    \        long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        long onesCount4 = onesCount3;\n\
    \        long tensCount4 = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n\
    \        long thousandsCount4 = thousandsCount3;\n        long onesCount5 = onesCount4;\n\
    \        long tensCount5 = tensCount4;\n        long hundredsCount5 = hundredsCount4;\n\
    \        long thousandsCount5 = thousandsCount4;\n        long onesCount6 = onesCount5;\n\
    \        long tensCount6 = tensCount5;\n        long hundredsCount6 = hundredsCount5;\n\
    \        long thousandsCount6 = thousandsCount5;\n        long onesCount7 = onesCount6;\n\
    \        long tensCount7 = tensCount6;\n        long hundredsCount7 = hundredsCount6;\n\
    \        long thousandsCount7 = thousandsCount6;\n        long onesCount8 = onesCount7;\n\
    \        long tensCount8 = tensCount7;\n        long hundredsCount8 = hundredsCount7;\n\
    \        long thousandsCount8 = thousandsCount7;\n        long onesCount9 = onesCount8;\n\
    \        long tensCount9 = tensCount8;\n        long hundredsCount9 = 10000000000000;\n\
    \        long thousandsCount9 = 1000000000000;\n        long onesCount10 = onesCount9;\n\
    \        long tensCount10 = tensCount9;\n        long hund\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxm9cd769.java:65: error: integer number too large\n        long\
    \ hundredsCount9 = 10000000000000;\n                              ^\n/tmp/tmpxm9cd769.java:66:\
    \ error: integer number too large\n        long thousandsCount9 = 1000000000000;\n\
    \                               ^\n/tmp/tmpxm9cd769.java:69: error: ';' expected\n\
    \        long hund\n                 ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    result.add(num);\n     \
    \           }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 0) {\n       \
    \             result.add(num);\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpppa9ecyw.java:48)\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n            tensCount\
    \ = onesCount / 10l;\n            hundredsCount = onesCount % 10l;\n        }\n\
    \        if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \            tensCount = onesCount / 100l;\n            thousandsCount = onesCount\
    \ % 100l;\n        }\n        if (tensCount > hundredsCount) {\n            tensCount\
    \ = hundredsCount;\n            hundredsCount = tensCount / 10l;\n        }\n\
    \        if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \            thousandsCount = tensCount / 100l;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n         \
    \   thousandsCount = hundredsCount / 100l;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \            tensCount2 = onesCount2 / 10l;\n            hundredsCount2 = onesCount2\
    \ % 10l;\n        }\n        if (onesCount2 > thousandsCount2) {\n           \
    \ onesCount2 = thousandsCount2;\n            tensCount2 = onesCount2 / 100l;\n\
    \            thousandsCount2 = onesCount2 % 100l;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n            hundredsCount2\
    \ = tensCount2 / 10l;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8cjw_t2.java:79: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       if (ones > 0) {\n            long onesCount = ones;\n            long\
    \ tensCount = tens;\n            long hundredsCount = hundreds;\n            long\
    \ thousandsCount = thousands;\n            long onesCount2 = onesCount;\n    \
    \        long tensCount2 = tensCount;\n            long hundredsCount2 = hundredsCount;\n\
    \            long thousandsCount2 = thousandsCount;\n            long onesCount3\
    \ = onesCount2;\n            long tensCount3 = tensCount2;\n            long hundredsCount3\
    \ = hundredsCount2;\n            long thousandsCount3 = thousandsCount2;\n   \
    \         long onesCount4 = onesCount3;\n            long tensCount4 = tensCount3;\n\
    \            long hundredsCount4 = hundredsCount3;\n            long thousandsCount4\
    \ = thousandsCount3;\n            long onesCount5 = onesCount4;\n            long\
    \ tensCount5 = tensCount4;\n            long hundredsCount5 = hundredsCount4;\n\
    \            long thousandsCount5 = thousandsCount4;\n            long onesCount6\
    \ = onesCount5;\n            long tensCount6 = tensCount5;\n            long hundredsCount6\
    \ = hundredsCount5;\n            long thousandsCount6 = thousandsCount5;\n   \
    \         long onesCount7 = onesCount6;\n            long tensCount7 = tensCount6;\n\
    \            long hundredsCount7 = hundredsCount6;\n            long thousandsCount7\
    \ = thousandsCount6;\n            long onesCount8 = onesCount7;\n            long\
    \ tensCount8 = tensCount7;\n            long hundredsCount8 = hundredsCount7;\n\
    \            long thousandsCount8 = thousandsCount7;\n            long onesCount9\
    \ = onesCount8;\n            long tensCount9 = tensCount8;\n            long hundredsCount9\
    \ = 1000000000;\n            long thousandsCount9 = 1000000000;\n            \n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdtp6w0m.java:74: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) onesCount++;\n            else if (l == 10l)\
    \ tensCount++;\n            else if (l == 100l) hundredsCount++;\n           \
    \ else if (l == 1000l) thousandsCount++;\n        }\n        long onesCount2 =\
    \ onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount > onesCount2) {\n            onesCount2 = onesCount;\n        }\n\
    \        if (tensCount > tensCount2) {\n            tensCount2 = tensCount;\n\
    \        }\n        if (hundredsCount > hundredsCount2) {\n            hundredsCount2\
    \ = hundredsCount;\n        }\n        if (thousandsCount > thousandsCount2) {\n\
    \            thousandsCount2 = thousandsCount;\n        }\n        long onesCount3\
    \ = onesCount2;\n        long tensCount3 = tensCount2;\n        long hundredsCount3\
    \ = hundredsCount2;\n        long thousandsCount3 = thousandsCount2;\n       \
    \ if (onesCount < onesCount3) {\n            onesCount3 = onesCount;\n       \
    \ }\n        if (tensCount < tensCount3) {\n            tensCount3 = tensCount;\n\
    \        }\n        if (hundredsCount < hundredsCount3) {\n            hundredsCount3\
    \ = hundredsCount;\n        }\n        if (thousandsCount < thousandsCount3) {\n\
    \            thousandsCount3 = thousandsCount;\n        }\n        long onesCount4\
    \ = onesCount3;\n        long tensCount4 = tensCount3;\n        long hundredsCount4\
    \ = hundredsCount3;\n        long thousandsCount4 = thousand\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1ljgv93.java:76: error: ';' expected\n        long thousandsCount4\
    \ = thousand\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i > 0) {\n      \
    \          tens += i;\n            } else if (i > 0) {\n                hundreds\
    \ += i;\n            } else if (i > 0) {\n                thousands += i;\n  \
    \          }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount = onesCount;\n            hundredsCount\
    \ = onesCount;\n            thousandsCount = onesCount;\n        }\n        if\
    \ (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n  \
    \          tensCount = onesCount;\n            hundredsCount = onesCount;\n  \
    \          thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > onesCount) {\n            hundredsCount\
    \ = onesCount;\n        }\n        if (thousandsCount > onesCount) {\n       \
    \     thousandsCount = onesCount;\n        }\n        if (thousandsCount > tensCount)\
    \ {\n            thousandsCount = tensCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n        }\n    \
    \    if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n        }\n        if (tensCount > thousandsCount) {\n     \
    \       tensCount = thousandsCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundred\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxrl2x5p.java:88: error: not a statement\n            hundred\n\
    \            ^\n/tmp/tmpwxrl2x5p.java:88: error: ';' expected\n            hundred\n\
    \                   ^\n/tmp/tmpwxrl2x5p.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long i :\
    \ arr) {\n            if (i.compareTo(1l) == 0) {\n                ones++;\n \
    \           } else if (i.compareTo(10l) == 0) {\n                tens++;\n   \
    \         } else if (i.compareTo(100l) == 0) {\n                hundreds++;\n\
    \            } else if (i.compareTo(1000l) == 0) {\n                thousands++;\n\
    \            } else if (i.compareTo(10000l) == 0) {\n                tenths++;\n\
    \            }\n        }\n        long onesNum = ones;\n        long tensNum\
    \ = tens;\n        long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n\
    \        long tenthsNum = tenths;\n        if (onesNum > tensNum) {\n        \
    \    onesNum = tensNum;\n        }\n        if (onesNum > hundredsNum) {\n   \
    \         onesNum = hundredsNum;\n        }\n        if (onesNum > thousandsNum)\
    \ {\n            onesNum = thousandsNum;\n        }\n        if (onesNum > tenthsNum)\
    \ {\n            onesNum = tenthsNum;\n        }\n        long onesDecimal = onesNum;\n\
    \        long tensDecimal = tensNum;\n        long hundredsDecimal = hundredsNum;\n\
    \        long thousandsDecimal = thousandsNum;\n        long tenthsDecimal = tenthsNum;\n\
    \        if (onesDecimal > tensDecimal) {\n            onesDecimal = tensDecimal;\n\
    \        }\n        if (onesDecimal > hundredsDecimal) {\n            onesDecimal\
    \ = hundredsDecimal;\n        }\n        if (onesDecimal > thousandsDecimal) {\n\
    \            onesDecimal = thousandsDecimal;\n        }\n        if (onesDecimal\
    \ > tenthsDecimal) {\n            onesDecimal = tenthsDecimal;\n        }\n  \
    \      long onesDecimalNum = onesDecimal;\n        long tensDecimalNum = tensDecimal;\n\
    \        long hundredsDecimalNum = hundredsDecimal;\n        long thousandsDecimalNum\
    \ = thousandsDecimal;\n        long tenthsDecimalNum = tenthsDecimal;\n      \
    \  if (onesDecimalNum > tensDecimalNum) {\n            onesDecimalNum\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dyo8bkd.java:79: error: not a statement\n            onesDecimalNum\n\
    \            ^\n/tmp/tmp3dyo8bkd.java:79: error: ';' expected\n            onesDecimalNum\n\
    \                          ^\n/tmp/tmp3dyo8bkd.java:81: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794921
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else {\n  \
    \              zeros++;\n            }\n        }\n        long maxOnes = ones;\n\
    \        long maxZeros = zeros;\n        long maxOnesCount = 0;\n        long\
    \ maxZerosCount = 0;\n        long maxOnesCount2 = 0;\n        long maxZerosCount2\
    \ = 0;\n        long maxOnesCount3 = 0;\n        long maxZerosCount3 = 0;\n  \
    \      long maxOnesCount4 = 0;\n        long maxZerosCount4 = 0;\n        long\
    \ maxOnesCount5 = 0;\n        long maxZerosCount5 = 0;\n        long maxOnesCount6\
    \ = 0;\n        long maxZerosCount6 = 0;\n        long maxOnesCount7 = 0;\n  \
    \      long maxZerosCount7 = 0;\n        long maxOnesCount8 = 0;\n        long\
    \ maxZerosCount8 = 0;\n        long maxOnesCount9 = 0;\n        long maxZerosCount9\
    \ = 0;\n        long maxOnesCount10 = 0;\n        long maxZerosCount10 = 0;\n\
    \        long maxOnesCount11 = 0;\n        long maxZerosCount11 = 0;\n       \
    \ long maxOnesCount12 = 0;\n        long maxZerosCount12 = 0;\n        long maxOnesCount13\
    \ = 0;\n        long maxZerosCount13 = 0;\n        long maxOnesCount14 = 0;\n\
    \        long maxZerosCount14 = 0;\n        long maxOnesCount15 = 0;\n       \
    \ long maxZerosCount15 = 0;\n        long maxOnesCount16 = 0;\n        long maxZerosCount16\
    \ = 0;\n        long maxOnesCount17 = 0;\n        long maxZerosCount17 = 0;\n\
    \        long maxOnesCount18 = 0;\n        long maxZerosCount18 = 0;\n       \
    \ long maxOnesCount19 = 0;\n        long maxZerosCount19 = 0;\n        long maxOnesCount20\
    \ = 0;\n        long maxZerosCount20 = 0;\n        long maxOnesCount21 = 0;\n\
    \        long maxZerosCount21 = 0;\n        long maxOnesCount22 = 0;\n       \
    \ long maxZerosCount22 = 0;\n        long maxOnesCount23 = 0;\n        long maxZerosCount23\
    \ = 0;\n        long maxOnesCount24 = 0;\n        long maxZerosCount24 = 0;\n\
    \        long maxOne\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptn2a31dy.java:80: error: ';' expected\n        long maxOne\n  \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            ones +=\
    \ l;\n            tens += l * 10;\n            hundreds += l * 100;\n        \
    \    thousands += l * 1000;\n        }\n        long onesCount = ones;\n     \
    \   long tensCount = tens;\n        long hundredsCount = hundreds;\n        long\
    \ thousandsCount = thousands;\n        long onesCount2 = onesCount;\n        long\
    \ tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n    \
    \    long thousandsCount2 = thousandsCount;\n        long onesCount3 = onesCount2;\n\
    \        long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        long onesCount4 = onesCount3;\n\
    \        long tensCount4 = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n\
    \        long thousandsCount4 = thousandsCount3;\n        long onesCount5 = onesCount4;\n\
    \        long tensCount5 = tensCount4;\n        long hundredsCount5 = hundredsCount4;\n\
    \        long thousandsCount5 = thousandsCount4;\n        long onesCount6 = onesCount5;\n\
    \        long tensCount6 = tensCount5;\n        long hundredsCount6 = hundredsCount5;\n\
    \        long thousandsCount6 = thousandsCount5;\n        long onesCount7 = onesCount6;\n\
    \        long tensCount7 = tensCount6;\n        long hundredsCount7 = hundredsCount6;\n\
    \        long thousandsCount7 = thousandsCount6;\n        long onesCount8 = onesCount7;\n\
    \        long tensCount8 = tensCount7;\n        long hundredsCount8 = hundredsCount7;\n\
    \        long thousandsCount8 = thousandsCount7;\n        long onesCount9 = onesCount8;\n\
    \        long tensCount9 = tensCount8;\n        long hundredsCount9 = 10000000000000;\n\
    \        long thousandsCount9 = 1000000000000000;\n        long onesCount10 =\
    \ onesCount9;\n        long tensCount10 = tensCount9;\n        long hund\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kxn87dy.java:65: error: integer number too large\n        long\
    \ hundredsCount9 = 10000000000000;\n                              ^\n/tmp/tmp6kxn87dy.java:66:\
    \ error: integer number too large\n        long thousandsCount9 = 1000000000000000;\n\
    \                               ^\n/tmp/tmp6kxn87dy.java:69: error: ';' expected\n\
    \        long hund\n                 ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            ones +=\
    \ l;\n            tens += (l / 10);\n            hundreds += (l / 100);\n    \
    \        thousands += (l / 1000);\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        long totalCount = onesCount + tensCount\
    \ + hundredsCount + thousandsCount;\n        long onesCountPerc = ones / totalCount;\n\
    \        long tensCountPerc = tens / totalCount;\n        long hundredsCountPerc\
    \ = hundreds / totalCount;\n        long thousandsCountPerc = thousands / totalCount;\n\
    \        long totalCountPerc = onesCountPerc + tensCountPerc + hundredsCountPerc\
    \ + thousandsCountPerc;\n        long onesCountDec = (ones / totalCount) * 100;\n\
    \        long tensCountDec = (tens / totalCount) * 100;\n        long hundredsCountDec\
    \ = (hundreds / totalCount) * 100;\n        long thousandsCountDec = (thousands\
    \ / totalCount) * 100;\n        long totalCountDec = onesCountDec + tensCountDec\
    \ + hundredsCountDec + thousandsCountDec;\n        long onesCountDecPerc = onesCountDec\
    \ / totalCount;\n        long tensCountDecPerc = tensCountDec / totalCount;\n\
    \        long hundredsCountDecPerc = hundredsCountDec / totalCount;\n        long\
    \ thousandsCountDecPerc = thousandsCountDec / totalCount;\n        long totalCountDecPerc\
    \ = onesCountDecPerc + tensCountDecPerc + hundredsCountDecPerc + thousandsCountDecPerc;\n\
    \        long onesCountDecDec = (onesCountDec / totalCount) * 100;\n        long\
    \ tensCountDecDec = (tensCountDec / totalCount) * 100;\n        long hundredsCountDecDec\
    \ = (hundredsCountDec / totalCount) * 100;\n        long thousandsCountDecDec\
    \ = (thousandsCountDec / totalCount) * 100;\n        long totalCountDecDec = onesCountDecDec\
    \ + tensCountDecDec + hundredsCountDecDe\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih_zi81n.java:55: error: ';' expected\n        long totalCountDecDec\
    \ = onesCountDecDec + tensCountDecDec + hundredsCountDecDe\n                 \
    \                                                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long oneth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuo6rs9y4.java:94: error: ';' expected\n        long oneth\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        if (ones > zeros) {\n            Collections.sort(arr);\n       \
    \     for (long i : arr) {\n                if (i == 1l) ones--;\n           \
    \     if (i == 0l) zeros--;\n            }\n        }\n        for (long i : arr)\
    \ {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n   \
    \     }\n        if (ones > zeros) {\n            Collections.sort(arr);\n   \
    \         for (long i : arr) {\n                if (i == 1l) ones--;\n       \
    \         if (i == 0l) zeros--;\n            }\n        }\n        for (long i\
    \ : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pvmhhr_.java:105: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        if (onesDiff\
    \ != zerosDiff) {\n            long onesDiffMax = Long.parseLong(Long.toBinaryString(onesDiff));\n\
    \            long zerosDiffMax = Long.parseLong(Long.toBinaryString(zerosDiff));\n\
    \            long onesDiffMin = Long.parseLong(Long.toBinaryString(onesDiffMax));\n\
    \            long zerosDiffMin = Long.parseLong(Long.toBinaryString(zerosDiffMax));\n\
    \            long onesDiffDiff = onesDiffMax - onesDiffMin;\n            long\
    \ zerosDiffDiff = zerosDiffMax - zerosDiffMin;\n            if (onesDiffDiff !=\
    \ zerosDiffDiff) {\n                long onesDiffDiffMax = Long.parseLong(Long.toBinaryString(onesDiffDiff));\n\
    \                long zerosDiffDiffMax = Long.parseLong(Long.toBinaryString(zerosDiffDiff));\n\
    \                long onesDiffDiffMin = Long.parseLong(Long.toBinaryString(onesDiffDiffMax));\n\
    \                long zerosDiffDiffMin = Long.parseLong(Long.toBinaryString(zerosDiffDiffMax));\n\
    \                long onesDiffDiffDiff = onesDiffDiffMax - onesDiffDiffMin;\n\
    \                long zerosDiffDiffDiff = zerosDiffDiffMax - zerosDiffDiffMin;\n\
    \                if (onesDiffDiffDiff != zerosDiffDiffDiff) {\n              \
    \      long onesDiffDiffDiffMax = Long.parseLong(Long.toBinaryString(onesDiffDiffDiff));\n\
    \                    long zerosDiffDiffDiffMax = Long.parseLong(Long.toBinaryString(zerosDiffDiffDiff));\n\
    \                    long onesDiffDiffDiffMin = Long.parseLong(Long.toBinaryString(onesDiffDiffDiffMax));\n\
    \                    long zerosDiffDiffDiffMin = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8d8ekl2a.java:53: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8d8ekl2a.java:54: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long num : arr) {\n         \
    \   if (num == 1) {\n                ones++;\n            } else {\n         \
    \       zeros++;\n            }\n        }\n        if (ones > zeros) {\n    \
    \        Collections.sort(arr);\n            for (long num : arr) {\n        \
    \        if (num == 1) {\n                    result.add(1l);\n              \
    \  } else {\n                    result.add(0l);\n                }\n        \
    \    }\n        } else {\n            Collections.sort(arr);\n            for\
    \ (long num : arr) {\n                if (num == 0) {\n                    result.add(0l);\n\
    \                } else {\n                    result.add(1l);\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp550f95dh.java:51)\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ res.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(res);\n\
    \        } else {\n            Collections.sort(res, Comparator.comparingLong(Long::intValue));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp57uszgtp.java:35)\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    ones--;\n              \
    \  } else {\n                    zeros--;\n                }\n            }\n\
    \        }\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n            } else {\n                zeros++;\n       \
    \     }\n        }\n        long onesDiff = ones - zeros;\n        long zerosDiff\
    \ = zeros - ones;\n        long onesDiff2 = ones - zeros;\n        long zerosDiff2\
    \ = zeros - ones;\n        long onesDiff3 = ones - zeros;\n        long zerosDiff3\
    \ = zeros - ones;\n        long onesDiff4 = ones - zeros;\n        long zerosDiff4\
    \ = zeros - ones;\n        long onesDiff5 = ones - zeros;\n        long zerosDiff5\
    \ = zeros - ones;\n        long onesDiff6 = ones - zeros;\n        long zerosDiff6\
    \ = zeros - ones;\n        long onesDiff7 = ones - zeros;\n        long zerosDiff7\
    \ = zeros - ones;\n        long onesDiff8 = ones - zeros;\n        long zerosDiff8\
    \ = zeros - ones;\n        long onesDiff9 = ones - zeros;\n        long zerosDiff9\
    \ = zeros - ones;\n        long onesDiff10 = ones - zeros;\n        long zerosDiff10\
    \ = zeros - ones;\n        long onesDiff11 = ones - zeros;\n        long zerosDiff11\
    \ = zeros - ones;\n        long onesDiff12 = ones - zeros;\n        long zerosDiff12\
    \ = zeros - ones;\n        long onesDiff13 = ones - zeros;\n        long zerosDiff13\
    \ = zeros - ones;\n        long onesDiff14 = ones - zeros;\n        long zerosDiff14\
    \ = zeros - ones;\n        long onesDiff15 = ones - zeros;\n        long zerosDiff15\
    \ = zeros - ones;\n        long onesDiff16 = ones - zeros;\n        long zerosDiff16\
    \ = zeros - ones;\n        long onesDiff17 = ones - zeros;\n        long zerosDiff17\
    \ = zeros - ones;\n        long onesDiff18 = ones - zeros;\n        long zerosDiff18\
    \ = zeros - ones;\n        long onesDiff19\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpij7ko4h6.java:83: error: ';' expected\n        long onesDiff19\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n\
    \        long maxZeros = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 0) {\n     \
    \           zeros++;\n            } else {\n                maxOnes = Math.max(ones,\
    \ maxOnes);\n                maxZeros = Math.max(zeros, maxZeros);\n         \
    \       ones = 0;\n                zeros = 0;\n            }\n        }\n    \
    \    maxOnes = Math.max(ones, maxOnes);\n        maxZeros = Math.max(zeros, maxZeros);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 0) {\n                zeros++;\n    \
    \        } else {\n                result.add(num);\n            }\n        }\n\
    \        if (maxOnes > maxZeros) {\n            Collections.sort(result);\n  \
    \      } else if (maxZeros > maxOnes) {\n            Collections.reverse(result);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjsmlthy.java:56)\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    result.add(num);\n     \
    \           }\n            }\n        } else if (zeros > ones) {\n           \
    \ Collections.sort(arr);\n            for (long num : arr) {\n               \
    \ if (num == 0) {\n                    result.add(num);\n                }\n \
    \           }\n        } else {\n            Collections.sort(arr);\n        \
    \    for (long num : arr) {\n                if (num == 1) {\n               \
    \     result.add(num);\n                } else if (num == 0) {\n             \
    \       result.add(num);\n                }\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35dz3ldu.java:57)\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousandsCount++;\n   \
    \         }\n        }\n        long onesCount2 = onesCount;\n        long tensCount2\
    \ = tensCount;\n        long hundredsCount2 = hundredsCount;\n        long thousandsCount2\
    \ = thousandsCount;\n        long onesCount3 = ones;\n        long tensCount3\
    \ = tens;\n        long hundredsCount3 = hundreds;\n        long thousandsCount3\
    \ = thousands;\n        long onesCount4 = ones;\n        long tensCount4 = tens;\n\
    \        long hundredsCount4 = hundreds;\n        long thousandsCount4 = thousands;\n\
    \        long onesCount5 = ones;\n        long tensCount5 = tens;\n        long\
    \ hundredsCount5 = hundreds;\n        long thousandsCount5 = thousands;\n    \
    \    long onesCount6 = ones;\n        long tensCount6 = tens;\n        long hundredsCount6\
    \ = hundreds;\n        long thousandsCount6 = thousands;\n        long onesCount7\
    \ = ones;\n        long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n\
    \        long thousandsCount7 = thousands;\n        long onesCount8 = ones;\n\
    \        long tensCount8 = tens;\n        long hundredsCount8 = hundreds;\n  \
    \      long thousandsCount8 = thousands;\n        long onesCount9 = ones;\n  \
    \      long tensCount9 = tens;\n        long hundredsCount9 = 100;\n        long\
    \ thousandsCount9 = 1000;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp74d4yyom.java:83: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp74d4yyom.java:83: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                result.add(num);\n            }\n        }\n \
    \       long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long onesCountSum\
    \ = onesCount * onesCount;\n        long tensCountSum = tensCount * tensCount;\n\
    \        long hundredsCountSum = hundredsCount * hundredsCount;\n        long\
    \ thousandsCountSum = thousandsCount * thousandsCount;\n        long onesSum =\
    \ onesCountSum + onesSum;\n        long tensSum = tensCountSum + tensSum;\n  \
    \      long hundredsSum = hundredsCountSum + hundredsSum;\n        long thousandsSum\
    \ = thousandsCountSum + thousandsSum;\n        long onesSum2 = onesSum * onesSum;\n\
    \        long tensSum2 = tensSum * tensSum;\n        long hundredsSum2 = hundredsSum\
    \ * hundredsSum;\n        long thousandsSum2 = thousandsSum * thousandsSum;\n\
    \        long onesSum3 = onesSum2 * onesSum;\n        long tensSum3 = tensSum2\
    \ * tensSum;\n        long hundredsSum3 = hundredsSum2 * hundredsSum;\n      \
    \  long thousandsSum3 = thousandsSum2 * thousandsSum;\n        long onesSum4 =\
    \ onesSum3 * onesSum;\n        long tensSum4 = tensSum3 * tensSum;\n        long\
    \ hundredsSum4 = hundredsSum3 * hundredsSum;\n        long thousandsSum4 = thousandsSum3\
    \ * thousandsSum;\n        long onesSum5 = onesSum4 * onesSum;\n        long tensSum5\
    \ = tensSum4 * tensSum;\n        long hundredsSum5 = hundredsSum4 * hund\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59azlxe6.java:64: error: ';' expected\n        long hundredsSum5\
    \ = hundredsSum4 * hund\n                                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMaxMin =\
    \ Long.parseLong(Long.toBinaryString(onesMax * onesMin));\n        long zerosMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax * zerosMin));\n        long onesMinMax\
    \ = Long.parseLong(Long.toBinaryString(onesMin * onesMax));\n        long zerosMinMax\
    \ = Long.parseLong(Long.toBinaryString(zerosMin * zerosMax));\n        long onesMinMaxMin\
    \ = Long.parseLong(Long.toBinaryString(onesMin * onesMax * onesMin));\n      \
    \  long zerosMinMaxMin = Long.parseLong(Long.toBinaryString(zerosMin * zerosMax\
    \ * zerosMin));\n        long onesMinMaxMinMax = Long.parseLong(Long.toBinaryString(onesMin\
    \ * onesMax * onesMin * onesMax));\n        long zerosMinMaxMinMax = Long.parseLong(Long.toBinaryString(zerosMin\
    \ * zerosMax * zerosMin * zerosMax));\n        long onesMinMaxMinMaxMin = Long.parseLong(Long.toBinaryString(onesMin\
    \ * onesMax * onesMin * onesMax * onesMin));\n        long zerosMinMaxMinMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMin * zerosMax * zerosMin * zerosMax\
    \ * zerosMin));\n        long onesMinMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(onesMin\
    \ * onesMax * onesMin * onesMax * onesMin * onesMax));\n        long zerosMinMaxMinMaxMinMax\
    \ = Long.parseLong(Long.toBinaryString(zerosMin * zerosMax * zerosMin * zerosMax\
    \ * zerosMin * zerosMax));\n        long onesMinMaxMinMaxMinMaxMin = Long\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0f007df9.java:44: error: ';' expected\n        long onesMinMaxMinMaxMinMaxMin\
    \ = Long\n                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = ones;\n    \
    \    long zerosMax = zeros;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long onesMaxIndex = 0;\n        long zerosMaxIndex = 0;\n\
    \        long onesMinIndex = 0;\n        long zerosMinIndex = 0;\n        while\
    \ (onesMax - onesMin > 1) {\n            onesMaxIndex++;\n            onesMax\
    \ = onesMaxIndex * 2;\n        }\n        while (zerosMax - zerosMin > 1) {\n\
    \            zerosMaxIndex++;\n            zerosMax = zerosMaxIndex * 2;\n   \
    \     }\n        while (onesMax - onesMin > 1) {\n            onesMinIndex++;\n\
    \            onesMin = onesMinIndex * 2;\n        }\n        while (zerosMax -\
    \ zerosMin > 1) {\n            zerosMinIndex++;\n            zerosMin = zerosMinIndex\
    \ * 2;\n        }\n        long onesMaxShift = onesMaxIndex * 2;\n        long\
    \ zerosMaxShift = zerosMaxIndex * 2;\n        long onesMinShift = onesMinIndex\
    \ * 2;\n        long zerosMinShift = zerosMinIndex * 2;\n        long onesMaxShifted\
    \ = 0;\n        long zerosMaxShifted = 0;\n        long onesMinShifted = 0;\n\
    \        long zerosMinShifted = 0;\n        long onesMaxShiftedIndex = 0;\n  \
    \      long zerosMaxShiftedIndex = 0;\n        long onesMinShiftedIndex = 0;\n\
    \        long zerosMinShiftedIndex = 0;\n        while (onesMax - onesMin > 1)\
    \ {\n            onesMaxShiftedIndex++;\n            onesMaxShifted = onesMaxShiftedIndex\
    \ * 2;\n        }\n        while (zerosMax - zerosMin > 1) {\n            zerosMaxShiftedIndex++;\n\
    \            zerosMaxShifted = zerosMaxShiftedIndex * 2;\n        }\n        while\
    \ (onesMax - onesMin > 1) {\n            onesMinShiftedIndex++;\n            onesMinShifted\
    \ = onesMinShiftedIndex * 2;\n        }\n        while (zerosMax - zerosMin >\
    \ 1) {\n            zerosMinShiftedIndex++;\n            zerosMinShifted = zerosMinShiftedIndex\
    \ * 2;\n        }\n        long onesMaxShiftedShift = onesMaxShifted\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedit3vqh.java:80: error: ';' expected\n        long onesMaxShiftedShift\
    \ = onesMaxShifted\n                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            }\n            if (i > 10) {\n\
    \                tens += i;\n            }\n            if (i > 100) {\n     \
    \           hundreds += i;\n            }\n            if (i > 1000) {\n     \
    \           thousands += i;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thousandsCount\
    \ = tensCount;\n        }\n        if (thousandsCount > hundredsCount) {\n   \
    \         thousandsCount = hundredsCount;\n        }\n        if (onesCount >\
    \ hundredsCount) {\n            onesCount = hundredsCount;\n        }\n      \
    \  if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thousand\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ph0n9ez.java:92: error: not a statement\n            thousand\n\
    \            ^\n/tmp/tmp4ph0n9ez.java:92: error: ';' expected\n            thousand\n\
    \                    ^\n/tmp/tmp4ph0n9ez.java:94: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long oneth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long onethths = 0;\n        long\
    \ onethth = 0;\n        long tenththth = 0;\n        long onethths = 0;\n    \
    \    long onethth = 0;\n        long tenththth = 0;\n        long onethths = 0;\n\
    \        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhgt97n3.java:91: error: ';' expected\n        long onethth\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long maxOnes = ones;\n    \
    \    long maxZeros = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount\
    \ = 0;\n        for (Long l : arr) {\n            if (l == 1l) maxOnesCount++;\n\
    \            else if (l == 0l) maxZerosCount++;\n            else if (maxOnesCount\
    \ > maxOnes) maxOnes = maxOnesCount;\n            else if (maxZerosCount > maxZeros)\
    \ maxZeros = maxZerosCount;\n        }\n        long maxOnesDecimal = maxOnes\
    \ / maxOnesCount;\n        long maxZerosDecimal = maxZeros / maxZerosCount;\n\
    \        long maxOnesDecimalDecimal = maxOnesDecimal / maxOnesCount;\n       \
    \ long maxZerosDecimalDecimal = maxZerosDecimal / maxZerosCount;\n        long\
    \ maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal / maxOnesCount;\n     \
    \   long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / maxZerosCount;\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimal / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n      \
    \  long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp29r42kp4.java:51: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp29r42kp4.java:51: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    Collections.sort(res);\n        } else if (zeros > ones) {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue));\n        } else {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue).reversed());\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8rbgxkt.java:38)\n"
  stdout: ''
  timestamp: 1659794919
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else {\n  \
    \              zeros++;\n            }\n        }\n        long onesDiff = ones\
    \ - zeros;\n        long zerosDiff =  zeros - ones;\n        long onesDiff2 =\
    \ ones - ones;\n        long zerosDiff2 = zeros - zeros;\n        long onesDiff3\
    \ = ones - onesDiff;\n        long zerosDiff3 = zeros - zerosDiff;\n        long\
    \ onesDiff4 = ones - onesDiff2;\n        long zerosDiff4 = zeros - zerosDiff2;\n\
    \        long onesDiff5 = ones - onesDiff3;\n        long zerosDiff5 = zeros -\
    \ zerosDiff3;\n        long onesDiff6 = ones - onesDiff4;\n        long zerosDiff6\
    \ = zeros - zerosDiff4;\n        long onesDiff7 = ones - onesDiff5;\n        long\
    \ zerosDiff7 = zeros - zerosDiff5;\n        long onesDiff8 = ones - onesDiff6;\n\
    \        long zerosDiff8 = zeros - zerosDiff6;\n        long onesDiff9 = ones\
    \ - onesDiff7;\n        long zerosDiff9 = zeros - zerosDiff7;\n        long onesDiff10\
    \ = ones - onesDiff8;\n        long zerosDiff10 = zeros - zerosDiff8;\n      \
    \  long onesDiff11 = ones - onesDiff9;\n        long zerosDiff11 = zeros - zerosDiff9;\n\
    \        long onesDiff12 = ones - onesDiff10;\n        long zerosDiff12 = zeros\
    \ - zerosDiff10;\n        long onesDiff13 = ones - onesDiff11;\n        long zerosDiff13\
    \ = zeros - zerosDiff11;\n        long onesDiff14 = ones - onesDiff12;\n     \
    \   long zerosDiff14 = zeros - zerosDiff12;\n        long onesDiff15 = ones -\
    \ onesDiff13;\n        long zerosDiff15 = zeros - zerosDiff13;\n        long onesDiff16\
    \ = ones - onesDiff14;\n        long zerosDiff16 = zeros - zerosDiff14;\n    \
    \    long onesDiff17 = ones - onesDiff15;\n        long zerosDiff17 = zeros -\
    \ zerosDiff15;\n        long onesDiff18 = ones - onesDiff16;\n        long zerosDiff18\
    \ = zeros - zerosDiff16;\n        long onesDiff19 = ones - onesDiff17;\n     \
    \   long zerosDiff19 = zeros - zerosDiff17;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpee26locs.java:68: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpee26locs.java:68: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        if\
    \ (ones == 0) {\n            Collections.sort(arr);\n            return arr;\n\
    \        }\n        if (ones == 1) {\n            Collections.sort(arr, Comparator.comparingLong(Long::compareTo));\n\
    \            return arr;\n        }\n        if (ones == 2) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed());\n            return arr;\n\
    \        }\n        if (ones == 3) {\n            Collections.sort(arr, Comparator.comparingLong(Long::compareTo).reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 4) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 5) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 6) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 7) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 8) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 9) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n        if (ones == 10) {\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed());\n\
    \            return arr;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmtault7.java:36: error: incompatible types: invalid method reference\n\
    \            Collections.sort(arr, Comparator.comparingLong(Long::compareTo));\n\
    \                                                           ^\n    unexpected\
    \ instance method compareTo(Long) found in unbound lookup\n/tmp/tmpzmtault7.java:40:\
    \ error: incompatible types: invalid method reference\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed());\n                   \
    \                                        ^\n    unexpected instance method compareTo(Long)\
    \ found in unbound lookup\n/tmp/tmpzmtault7.java:44: error: incompatible types:\
    \ invalid method reference\n            Collections.sort(arr, Comparator.comparingLong(Long::compareTo).reversed().reversed());\n\
    \                                                           ^\n    unexpected\
    \ instance method compareTo(Long) found in unbound lookup\n/tmp/tmpzmtault7.java:48:\
    \ error: incompatible types: invalid method reference\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed());\n\
    \                                                           ^\n    unexpected\
    \ instance method compareTo(Long) found in unbound lookup\n/tmp/tmpzmtault7.java:52:\
    \ error: incompatible types: invalid method reference\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed());\n\
    \                                                           ^\n    unexpected\
    \ instance method compareTo(Long) found in unbound lookup\n/tmp/tmpzmtault7.java:56:\
    \ error: incompatible types: invalid method reference\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).reversed().reversed().reversed().reversed().reversed());\n\
    \                                                           ^\n    unexpected\
    \ instance method compareTo(Long) found in unbound lookup\n/tmp/tmpzmtault7.java:60:\
    \ error: incompatible types: invalid method reference\n            Collections.sort(arr,\
    \ Comparator.comparingLong(Long::compareTo).r"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else res.add(l);\n        }\n        if (ones < zeros) {\n        \
    \    Collections.sort(res);\n        } else {\n            Collections.sort(res,\
    \ Comparator.comparingLong(Long::intValue));\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5_9l_3b.java:36)\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ == 1l) ones++;\n            else if (i == 10l) tens++;\n            else if\
    \ (i == 100l) hundreds++;\n            else if (i == 1000l) thousands++;\n   \
    \     }\n        long onesCount = ones;\n        long tensCount = tens;\n    \
    \    long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \          tensCount = onesCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \            hundredsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            thousandsCount = tensCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount;\n        }\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ = tensCount2;\n            tensCount2 = onesCount2;\n        }\n        if (onesCount2\
    \ > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n            hundredsCount2\
    \ = onesCount2;\n        }\n        if (onesCount2 > thousandsCount2) {\n    \
    \        onesCount2 = thousandsCount2;\n            thousandsCount2 = onesCount2;\n\
    \        }\n        if (tensCount2 > hundredsCount2) {\n            tensCount2\
    \ = hundredsCount2;\n            hundredsCount2 = tensCount2;\n        }\n   \
    \     if (tensCount2 > \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3g8mepke.java:80: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long maxOnes = Long.MIN_VALUE;\n\
    \        long maxZeros = Long.MIN_VALUE;\n        for (long l : arr) {\n     \
    \       if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n            if\
    \ (l > maxOnes) maxOnes = l;\n            if (l > maxZeros) maxZeros = l;\n  \
    \      }\n        long onesMax = maxOnes - ones;\n        long zerosMax = maxZeros\
    \ - zeros;\n        long maxOnesMax = Long.MIN_VALUE - maxOnes;\n        long\
    \ maxZerosMax = Long.MIN_VALUE - maxZeros;\n        long maxOnesMin = Long.MAX_VALUE\
    \ - maxOnesMax;\n        long maxZerosMin = Long.MAX_VALUE - maxZerosMax;\n  \
    \      long maxOnesMaxMin = Long.MAX_VALUE - maxOnesMax;\n        long maxZerosMaxMin\
    \ = Long.MAX_VALUE - maxZerosMax;\n        long maxOnesMinMin = Long.MAX_VALUE\
    \ - maxOnesMin;\n        long maxZerosMinMin = Long.MAX_VALUE - maxZerosMin;\n\
    \        long maxOnesMaxMinMin = Long.MAX_VALUE - maxOnesMaxMin;\n        long\
    \ maxZerosMaxMinMin = Long.MAX_VALUE - maxZerosMaxMin;\n        long maxOnesMinMinMin\
    \ = Long.MAX_VALUE - maxOnesMinMin;\n        long maxZerosMinMinMin = Long.MAX_VALUE\
    \ - maxZerosMinMin;\n        long maxOnesMaxMinMin = Long.MAX_VALUE - maxOnesMaxMinMin;\n\
    \        long maxZerosMaxMinMin = Long.MAX_VALUE - maxZerosMaxMinMin;\n      \
    \  long maxOnesMinMinMin = Long.MAX_VALUE - maxOnesMinMinMin;\n        long maxZerosMinMinMin\
    \ = Long.MAX_VALUE - maxZerosMinMinMin;\n        long maxOnesMaxMinMin = Long.MAX_VALUE\
    \ - maxOnesMaxMinMin;\n        long maxZerosMaxMinMin = Long.MAX_VALUE - maxZerosMaxMinMin;\n\
    \        long maxOnesMinMinMin = Long.MAX_VALUE - maxOne\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphak9uymk.java:51: error: ';' expected\n        long maxOnesMinMinMin\
    \ = Long.MAX_VALUE - maxOne\n                                                \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount = onesCount;\n            hundredsCount\
    \ = onesCount;\n            thousandsCount = onesCount;\n        }\n        if\
    \ (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n  \
    \          tensCount = onesCount;\n            hundredsCount = onesCount;\n  \
    \          thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \            thousandsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            hundredsCount = tensCount;\n\
    \            thousandsCount = tensCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n         \
    \   thousandsCount = hundredsCount;\n        }\n        if (hundredsCount == 0)\
    \ {\n            hundredsCount = 1;\n        }\n        if (thousandsCount ==\
    \ 0) {\n            thousandsCount = 1;\n        }\n        if (onesCount == 0)\
    \ {\n            onesCount = 1;\n        }\n        if (tensCount == 0) {\n  \
    \          tensCount = 1;\n        }\n        if (hundredsCount == 0) {\n    \
    \        hundredsCount = 1;\n        }\n        if (thousandsCount == 0) {\n \
    \           thousandsCount = 1;\n        }\n        long onesCount2 = onesCount;\n\
    \        long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (onesCount2 > hundredsCount2)\
    \ {\n            onesCount2 = hundredsCount\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9exgw176.java:89: error: ';' expected\n            onesCount2 =\
    \ hundredsCount\n                                      ^\n/tmp/tmp9exgw176.java:91:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794922
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) onesCount++;\n            else if (l == 10l)\
    \ tensCount++;\n            else if (l == 100l) hundredsCount++;\n           \
    \ else if (l == 1000l) thousandsCount++;\n        }\n        long onesCount2 =\
    \ onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        long\
    \ onesCount3 = onesCount2;\n        long tensCount3 = tensCount2;\n        long\
    \ hundredsCount3 = hundredsCount2;\n        long thousandsCount3 = thousandsCount2;\n\
    \        long onesCount4 = onesCount3;\n        long tensCount4 = tensCount3;\n\
    \        long hundredsCount4 = hundredsCount3;\n        long thousandsCount4 =\
    \ thousandsCount3;\n        long onesCount5 = onesCount4;\n        long tensCount5\
    \ = tensCount4;\n        long hundredsCount5 = hundredsCount4;\n        long thousandsCount5\
    \ = thousandsCount4;\n        long onesCount6 = onesCount5;\n        long tensCount6\
    \ = tensCount5;\n        long hundredsCount6 = hundredsCount5;\n        long thousandsCount6\
    \ = thousandsCount5;\n        long onesCount7 = onesCount6;\n        long tensCount7\
    \ = tensCount6;\n        long hundredsCount7 = hundredsCount6;\n        long thousandsCount7\
    \ = thousandsCount6;\n        long onesCount8 = onesCount7;\n        long tensCount8\
    \ = tensCount7;\n        long hundredsCount8 = hundredsCount7;\n        long thousandsCount8\
    \ = thousandsCount7;\n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9j6s0x1.java:70: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        long onesMax = ones;\n       \
    \ long zerosMax = zeros;\n        long max = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) ones--;\n            else if (i == 0l) zeros--;\n  \
    \          if (ones > zeros) {\n                if (ones > onesMax) onesMax =\
    \ ones;\n                if (zeros > zerosMax) zerosMax = zeros;\n           \
    \     max = i;\n            }\n        }\n        ArrayList<Long> res2 = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == max) res2.add(max);\n    \
    \        else if (i == 1l) res2.add(1l);\n            else if (i == 0l) res2.add(0l);\n\
    \            else res2.add(i);\n        }\n        ArrayList<Long> res3 = new\
    \ ArrayList<Long>();\n        for (Long i : arr) {\n            if (i == 1l) res3.add(1l);\n\
    \            else if (i == 0l) res3.add(0l);\n            else res3.add(i);\n\
    \        }\n        ArrayList<Long> res4 = new ArrayList<Long>();\n        for\
    \ (Long i : arr) {\n            if (i == 1l) res4.add(1l);\n            else if\
    \ (i == 0l) res4.add(0l);\n            else res4.add(i);\n        }\n        ArrayList<Long>\
    \ res5 = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 1l) res5.add(1l);\n            else if (i == 0l) res5.add(0l);\n     \
    \       else res5.add(i);\n        }\n        ArrayList<Long> res6 = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i == 1l) res6.add(1l);\n      \
    \      else if (i == 0l) res6.add(0l);\n            else res6.add(i);\n      \
    \  }\n        ArrayList<Long> res7 = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (i == 1l) res7.add(1l);\n            else if (i ==\
    \ 0l) res7.add(0l);\n            else res7.add(i);\n        }\n        ArrayList<Long>\
    \ res8 = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i == 1l) res8.add(1l);\n            else if (i == 0l) res8.add(0l);\n     \
    \       else res8.add(i);\n        }\n        ArrayList<Long> res9 = new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsgxwa75h.java:84: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num >= 1000 && num <= 1000000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num >= 1000 && num <= 1000000) {\n                thousandsCount++;\n\
    \            }\n        }\n        long onesCountInt = onesCount;\n        long\
    \ tensCountInt = tensCount;\n        long hundredsCountInt = hundredsCount;\n\
    \        long thousandsCountInt = thousandsCount;\n        long onesCountDecimal\
    \ = onesCount;\n        long tensCountDecimal = tensCount;\n        long hundredsCountDecimal\
    \ = hundredsCount;\n        long thousandsCountDecimal = thousandsCount;\n   \
    \     long onesCountDecimalInt = onesCountDecimal;\n        long tensCountDecimalInt\
    \ = tensCountDecimal;\n        long hundredsCountDecimalInt = hundredsCountDecimal;\n\
    \        long thousandsCountDecimalInt = thousandsCountDecimal;\n        long\
    \ onesCountDecimalDecimal = onesCountDecimal;\n        long tensCountDecimalDecimal\
    \ = tensCountDecimal;\n        long hundredsCountDecimalDecimal = hundredsCountDecimal;\n\
    \        long thousandsCountDecimalDecimal = thousandsCountDecimal;\n        long\
    \ onesCountDecimalDecimalInt = onesCountDecimalDecimal;\n        long tensCountDecimalDecimalInt\
    \ = tensCountDecimalDecimal;\n        long hundredsCountDecimalDecimalInt = hundredsCountDecimalDecimal;\n\
    \        long thousandsCountDecimalDecimalInt = thousandsCountDecimalDecimalInt;\n\
    \        long onesCountDecimalDecimalDecimal = onesCountDecimalDecimal;\n    \
    \    long tensCountDecimalDecimalDecimal = tensCountDecimalDecimal;\n        long\
    \ hund\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbrv7xp0.java:73: error: ';' expected\n        long hund\n    \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long num : arr) {\n         \
    \   if (num == 1) {\n                ones++;\n            } else {\n         \
    \       zeros++;\n            }\n        }\n        if (ones > zeros) {\n    \
    \        Collections.sort(arr, (o1, o2) -> {\n                long ones = 0, zeros\
    \ = 0;\n                for (long num : arr) {\n                    if (num ==\
    \ 1) {\n                        ones++;\n                    } else {\n      \
    \                  zeros++;\n                    }\n                }\n      \
    \          return ones - zeros;\n            });\n        }\n        for (long\
    \ num : arr) {\n            if (num == 1) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor6shvs3.java:31: error: variable ones is already defined in method\
    \ sortArray(ArrayList<Long>)\n                long ones = 0, zeros = 0;\n    \
    \                 ^\n/tmp/tmpor6shvs3.java:31: error: variable zeros is already\
    \ defined in method sortArray(ArrayList<Long>)\n                long ones = 0,\
    \ zeros = 0;\n                               ^\n/tmp/tmpor6shvs3.java:30: error:\
    \ incompatible types: cannot infer type-variable(s) T\n            Collections.sort(arr,\
    \ (o1, o2) -> {\n                            ^\n    (argument mismatch; bad return\
    \ type in lambda expression\n      possible lossy conversion from long to int)\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>sort(List<T>,Comparator<?\
    \ super T>)\n3 errors\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesDecimal = ones / arr.size();\n\
    \        long zerosDecimal = zeros / arr.size();\n        Collections.sort(arr);\n\
    \        long onesDecimalSorted = ones / arr.size();\n        long zerosDecimalSorted\
    \ = zeros / arr.size();\n        Collections.sort(arr);\n        long onesSorted\
    \ = 0;\n        long zerosSorted = 0;\n        for (Long l : arr) {\n        \
    \    if (l == 1l) onesSorted++;\n            else if (l == 0l) zerosSorted++;\n\
    \            else result.add(l);\n        }\n        long onesSortedDecimal =\
    \ onesSorted / arr.size();\n        long zerosSortedDecimal = zerosSorted / arr.size();\n\
    \        Collections.sort(arr);\n        long onesSortedDecimalSorted = onesSorted\
    \ / arr.size();\n        long zerosSortedDecimalSorted = zerosSorted / arr.size();\n\
    \        Collections.sort(arr);\n        long onesSortedSorted = 0;\n        long\
    \ zerosSortedSorted = 0;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ onesSortedSorted++;\n            else if (l == 0l) zerosSortedSorted++;\n  \
    \          else result.add(l);\n        }\n        long onesSortedSortedDecimal\
    \ = onesSortedSorted / arr.size();\n        long zerosSortedSortedDecimal = zerosSortedSorted\
    \ / arr.size();\n        Collections.sort(arr);\n        long onesSortedSortedDecimalSorted\
    \ = onesSortedSorted / arr.size();\n        long zerosSortedSortedDecimalSorted\
    \ = zerosSortedSorted / arr.size();\n        Collections.sort(arr);\n        long\
    \ onesSortedSortedSorted = 0;\n        long zerosSortedSortedSorted = 0;\n   \
    \     for (Long l : arr) {\n            if (l == 1l) onesSortedSortedSorted++;\n\
    \            else if (l == 0l) zerosSortedSortedSorted++;\n            else result.add(l);\n\
    \        }\n        long onesSortedSortedSortedDecimal = onesSortedSortedSorted\
    \ / arr.size();\n        long zerosSortedSortedSortedDecimal = zerosSortedSortedSorted\
    \ / arr.size();\n        Collections.sort(arr);\n        long onesSortedSortedSortedDecimalSorted\
    \ = onesSortedSortedSorted / arr.size();\n        long zerosSortedSortedSortedDecimalSorted\
    \ = zerosSortedSortedSorted / \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjay8av6x.java:72: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \      }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        long onesMaxDiff\
    \ = onesMax - onesMax;\n        long zerosMaxDiff = zerosMax - zerosMax;\n   \
    \     long onesMinDiff = onesMin - onesMin;\n        long zerosMinDiff = zerosMin\
    \ - zerosMin;\n        long onesDiffDiff = onesDiff - onesDiff;\n        long\
    \ zerosDiffDiff = zerosDiff - zerosDiff;\n        long onesMaxDiffDiff = onesMaxDiff\
    \ - onesMaxDiff;\n        long zerosMaxDiffDiff = zerosMaxDiff - zerosMaxDiff;\n\
    \        long onesMinDiffDiff = onesMinDiff - onesMinDiff;\n        long zerosMinDiffDiff\
    \ = zerosMinDiff - zerosMinDiff;\n        long onesDiffDiffDiff = onesDiffDiff\
    \ - onesDiffDiff;\n        long zerosDiffDiffDiff = zerosDiffDiff - zerosDiffDiff;\n\
    \        long onesMaxDiffDiffDiff = onesMaxDiffDiff - onesMaxDiffDiff;\n     \
    \   long zerosMaxDiffDiffDiff = zerosMaxDiffDiff - zerosMaxDiffDiff;\n       \
    \ long onesMinDiffDiffDiff = onesMinDiffDiff - onesMinDiffDiff;\n        long\
    \ zerosMinDiffDiff = zerosMinDiffDiff - zerosMinDiffDiff;\n        long onesDiffDiffDiffDiff\
    \ = onesDiffDiffDiff - onesDiffDiffDiff;\n        long zerosDiffDiffDiff = zerosDiffDiffDiff\
    \ - zerosDiffDiffDiff;\n        long onesMaxDiffDiffDiff = onesMaxDiffDiffDiff\
    \ - onesMaxDiffDiffDiff;\n        long zerosMaxDiffDiffDiff = zerosMaxDiffDiffD\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07visxul.java:52: error: ';' expected\n        long zerosMaxDiffDiffDiff\
    \ = zerosMaxDiffDiffD\n                                                     ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794923
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        long tenththths = 0;\n        long oneththths = 0;\n\
    \        long tenththth = 0;\n        long oneththth = 0;\n        long tenththths\
    \ = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n        long\
    \ oneththth = 0;\n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamfvyazh.java:29: error: variable tenths is already defined in\
    \ method sortArray(ArrayList<Long>)\n        long tenths = 0;\n             ^\n\
    /tmp/tmpamfvyazh.java:30: error: variable oneths is already defined in method\
    \ sortArray(ArrayList<Long>)\n        long oneths = 0;\n             ^\n/tmp/tmpamfvyazh.java:36:\
    \ error: variable onethths is already defined in method sortArray(ArrayList<Long>)\n\
    \        long onethths = 0;\n             ^\n/tmp/tmpamfvyazh.java:37: error:\
    \ variable tenththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:41: error:\
    \ variable tenththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:42: error:\
    \ variable oneththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long oneththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:43: error:\
    \ variable tenththths is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththths = 0;\n             ^\n/tmp/tmpamfvyazh.java:44: error:\
    \ variable oneththths is already defined in method sortArray(ArrayList<Long>)\n\
    \        long oneththths = 0;\n             ^\n/tmp/tmpamfvyazh.java:45: error:\
    \ variable tenththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:46: error:\
    \ variable oneththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long oneththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:47: error:\
    \ variable tenththths is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththths = 0;\n             ^\n/tmp/tmpamfvyazh.java:48: error:\
    \ variable oneththths is already defined in method sortArray(ArrayList<Long>)\n\
    \        long oneththths = 0;\n             ^\n/tmp/tmpamfvyazh.java:49: error:\
    \ variable tenththth is already defined in method sortArray(ArrayList<Long>)\n\
    \        long tenththth = 0;\n             ^\n/tmp/tmpamfvyazh.java:50: error:\
    \ variable oneththth is already defined in method sortArray("
  stdout: ''
  timestamp: 1659794923
