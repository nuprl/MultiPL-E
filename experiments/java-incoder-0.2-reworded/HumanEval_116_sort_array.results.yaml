language: java
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n\
    \        long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long one = 0;\n        long ten = 0;\n     \
    \   long hundred = 0;\n        long thousand = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long one = 0;\n        long ten = 0;\n        long hundred = 0;\n   \
    \     long thousand = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long one = 0;\n   \
    \     long ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long one\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wvau8iz.java:108: error: ';' expected\n        long one\n    \
    \            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb24dmbza.java:90: error: ';' expected\n        long onethth\n \
    \                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundredThousands = 0;\n\
    \        long oneThousandThousands = 0;\n        long oneHundredThousandThousands\
    \ = 0;\n        long oneThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousands = 0;\n     \
    \   long oneHundredThousandThousandThousandThousandThousands = 0;\n        long\
    \ oneThousandThousandThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneTh\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxij6cnqj.java:47: error: ';' expected\n        long oneTh\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \      }\n        if (ones < zeros) {\n            Collections.sort(arr);\n  \
    \          for (Long l : arr) {\n                if (l == 1l) ones++;\n      \
    \          else if (l == 0l) zeros++;\n            }\n        }\n        if (ones\
    \ == zeros) {\n            Collections.sort(arr);\n            for (Long l : arr)\
    \ {\n                if (l == 1l) ones++;\n                else if (l == 0l) zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            else if (l == 0l) zeros--;\n            }\n        }\n        if\
    \ (ones == zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                else if (l\
    \ == 0l) zeros--;\n            }\n        }\n        if (ones < zeros) {\n   \
    \         Collections.sort(arr);\n            for (Long l : arr) {\n         \
    \       if (l == 1l) ones--;\n                else if (l == 0l) zeros--;\n   \
    \         }\n        }\n        if (ones == zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones--;\n    \
    \            else if (l == 0l) zeros--;\n            }\n        }\n        if\
    \ (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones++;\n                else if (l\
    \ == 0l) zeros++;\n            }\n        }\n        if (ones == zeros) {\n  \
    \          Collections.sort(arr);\n            for (Long l : arr) {\n        \
    \        if (l == 1l) ones++;\n                else if (l == 0l) zeros++;\n  \
    \          }\n        }\n        if (ones < zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) ones++;\n    \
    \            else if (l == 0l) zeros++;\n            }\n        }\n        if\
    \ (ones == zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones++;\n                else if (l\
    \ == 0l) zeros++;\n            }\n        }\n        if (ones > zeros) {\n   \
    \         Collections.sort(arr);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtbuvhkx.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpbtbuvhkx.java:101: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpbtbuvhkx.java:101: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpbtbuvhkx.java:101: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpbtbuvhkx.java:101: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpbtbuvhkx.java:112: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            total += l;\n            if (l == 1l)\n                ones++;\n\
    \            else if (l == 10l)\n                tens++;\n            else if\
    \ (l == 100l)\n                hundreds++;\n            else if (l == 1000l)\n\
    \                thousands++;\n        }\n        long onesTotal = ones * total;\n\
    \        long tensTotal = tens * total;\n        long hundredsTotal = hundreds\
    \ * total;\n        long thousandsTotal = thousands * total;\n        long totalTotal\
    \ = onesTotal + tensTotal + hundredsTotal + thousandsTotal;\n        long onesTotal2\
    \ = onesTotal * onesTotal;\n        long tensTotal2 = tensTotal * tensTotal;\n\
    \        long hundredsTotal2 = hundredsTotal * hundredsTotal;\n        long thousandsTotal2\
    \ = thousandsTotal * thousandsTotal;\n        long totalTotal2 = onesTotal2 +\
    \ tensTotal2 + hundredsTotal2 + thousandsTotal2;\n        long onesTotal3 = onesTotal2\
    \ * onesTotal;\n        long tensTotal3 = tensTotal2 * tensTotal;\n        long\
    \ hundredsTotal3 = hundredsTotal2 * hundredsTotal;\n        long thousandsTotal3\
    \ = thousandsTotal2 * thousandsTotal;\n        long totalTotal3 = onesTotal3 +\
    \ tensTotal3 + hundredsTotal3 + thousandsTotal3;\n        long onesTotal4 = onesTotal3\
    \ * onesTotal;\n        long tensTotal4 = tensTotal3 * tensTotal;\n        long\
    \ hundredsTotal4 = hundredsTotal3 * hundredsTotal;\n        long thousandsTotal4\
    \ = thousandsTotal3 * thousandsTotal;\n        long totalTotal4 = onesTotal4 +\
    \ tensTotal4 + hundredsTotal4 + thousandsTotal4;\n        long onesTotal5 = onesTotal4\
    \ * onesTotal;\n        long tensTotal5 = tensTotal4 * tensTotal;\n        long\
    \ hundredsTotal5 = hundredsTotal4 * hundredsTotal;\n        long thousandsTotal5\
    \ = thousandsTotal4 * thousandsTotal;\n        long total\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ba7ltmj.java:61: error: ';' expected\n        long total\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                result.add(num);\n            }\n        }\n \
    \       long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long num : arr) {\n   \
    \         if (num == 1) {\n                onesCount++;\n            } else if\
    \ (num == 10) {\n                tensCount++;\n            } else if (num == 100)\
    \ {\n                hundredsCount++;\n            } else if (num == 1000) {\n\
    \                thousandsCount++;\n            } else {\n                result.add(num);\n\
    \            }\n        }\n        long onesCount2 = onesCount * ones;\n     \
    \   long tensCount2 = tensCount * tens;\n        long hundredsCount2 = hundredsCount\
    \ * hundreds;\n        long thousandsCount2 = thousandsCount * thousands;\n  \
    \      long onesCount3 = onesCount2 * ones;\n        long tensCount3 = tensCount2\
    \ * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n        long\
    \ thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3\
    \ * ones;\n        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4\
    \ = hundredsCount3 * hundreds;\n        long thousandsCount4 = thousandsCount3\
    \ * thousands;\n        long onesCount5 = onesCount4 * ones;\n        long tensCount5\
    \ = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n\
    \        long thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6\
    \ = onesCount5 * ones;\n        long tensCount6 = tensCount5 * tens;\n       \
    \ long hundredsCount6 = hundredsCount5 * hundreds;\n        long thousandsCount6\
    \ = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6 * ones;\n\
    \        long tensCount7 = tensCount6 * tens;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0y6i2b4q.java:77: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp0y6i2b4q.java:77: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousand = 0;\n       \
    \ long oneTenThousand = 0;\n        long oneOneThousand = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneThousands = 0;\n        long oneOneHundred = 0;\n \
    \       long oneOneThousand = 0;\n        long oneTenThousands = 0;\n        long\
    \ oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long oneTenThousand\
    \ = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneTenThousands = 0;\n        long oneOneHundreds = 0;\n        long\
    \ oneOneHundred = 0;\n        long oneTenThousand = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneHundred = 0;\n        long oneTenThousands = 0;\n \
    \       long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneTenThousand = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneTenThousands = 0;\n        long oneOneHundreds = 0;\n\
    \        long oneOneHundred = 0;\n        long oneTenThousand = 0;\n        long\
    \ oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long oneTenThousands\
    \ = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n  \
    \      long oneTenThousand = 0;\n        long oneOneHundreds = 0;\n        long\
    \ oneOneHundred = 0;\n        long oneTenThousands = 0;\n        long oneOneHundreds\
    \ = 0;\n        long oneOneHundred = 0;\n        long oneTenThousand = 0;\n  \
    \      long oneOneHundreds = 0;\n        long oneOneHundred = 0;\n        long\
    \ oneTenThousands = 0;\n        long oneOneHundreds = 0;\n        long oneOneHundred\
    \ = 0;\n        long oneTenThousand = 0;\n        long oneOneHundreds = 0;\n \
    \       long oneOneHundred = 0;\n        long oneTenThousands = 0;\n        long\
    \ oneOneHundred\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23hpr8vp.java:78: error: ';' expected\n        long oneOneHundred\n\
    \                          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tg3omre.java:57: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal\n                                       \
    \                                                       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n            else\
    \ if (l == 10000l) tenths++;\n            else if (l == 100000l) hundredths++;\n\
    \            else if (l == 1000000l) thousandths++;\n        }\n        long onesSum\
    \ = ones * 1l;\n        long tensSum = tens * 10l;\n        long hundredsSum =\
    \ hundreds * 100l;\n        long thousandsSum = thousands * 1000l;\n        long\
    \ tenthsSum = tenths * 10000l;\n        long hundredthsSum = hundredths * 100000l;\n\
    \        long thousandthsSum = thousandths * 1000000l;\n        long onesDiff\
    \ = onesSum - ones;\n        long tensDiff = tensSum - tens;\n        long hundredsDiff\
    \ = hundredsSum - hundreds;\n        long thousandsDiff = thousandsSum - thousands;\n\
    \        long tenthsDiff = tenthsSum - tenths;\n        long hundredthsDiff =\
    \ hundredthsSum - hundredths;\n        long thousandthsDiff = thousandthsSum -\
    \ thousandths;\n        if (onesDiff > 0) result.add(onesDiff);\n        if (tensDiff\
    \ > 0) result.add(tensDiff);\n        if (hundredsDiff > 0) result.add(hundredsDiff);\n\
    \        if (thousandsDiff > 0) result.add(thousandsDiff);\n        if (tenthsDiff\
    \ > 0) result.add(tenthsDiff);\n        if (hundredthsDiff > 0) result.add(hundredthsDiff);\n\
    \        if (thousandthsDiff > 0) result.add(thousandthsDiff);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39du3a39.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long totalCount = onesCount + tensCount + hundredsCount\
    \ + thousandsCount;\n        long onesCount2 = onesCount * onesCount;\n      \
    \  long tensCount2 = tensCount * tensCount;\n        long hundredsCount2 = hundredsCount\
    \ * hundredsCount;\n        long thousandsCount2 = thousandsCount * thousandsCount;\n\
    \        long totalCount2 = onesCount2 + tensCount2 + hundredsCount2 + thousandsCount2;\n\
    \        long onesCount3 = onesCount * tensCount;\n        long tensCount3 = tensCount\
    \ * hundredsCount;\n        long hundredsCount3 = hundredsCount * thousandsCount;\n\
    \        long thousandsCount3 = thousandsCount * onesCount;\n        long totalCount3\
    \ = onesCount3 + tensCount3 + hundredsCount3 + thousandsCount3;\n        long\
    \ onesCount4 = onesCount * hundredsCount;\n        long tensCount4 = tensCount\
    \ * thousandsCount;\n        long hundredsCount4 = hundredsCount * onesCount;\n\
    \        long thousandsCount4 = thousandsCount * tensCount;\n        long totalCount4\
    \ = onesCount4 + tensCount4 + hundredsCount4 + thousandsCount4;\n        long\
    \ onesCount5 = onesCount * thousandsCount;\n        long tensCount5 = tensCount\
    \ * hundredsCount;\n        long hundredsCount5 = hundredsCount * onesCount;\n\
    \        long thousandsCount5 = thousandsCount * tensCount;\n        long totalCount5\
    \ = onesCount5 + tensCount5 + hundredsCount5 + thousandsCount5;\n        long\
    \ onesCount6 = one\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpth4ak_mh.java:61: error: ';' expected\n        long onesCount6\
    \ = one\n                             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones > 0) {\n            Collections.sort(arr);\n       \
    \     for (Long l : arr) {\n                if (l == 1l) result.add(l);\n    \
    \            else if (l == 10l) result.add(l);\n                else if (l ==\
    \ 100l) result.add(l);\n                else if (l == 1000l) result.add(l);\n\
    \            }\n        } else if (tens > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 10l) result.add(l);\n\
    \                else if (l == 100l) result.add(l);\n                else if (l\
    \ == 1000l) result.add(l);\n            }\n        } else if (hundreds > 0) {\n\
    \            Collections.sort(arr);\n            for (Long l : arr) {\n      \
    \          if (l == 100l) result.add(l);\n                else if (l == 1000l)\
    \ result.add(l);\n            }\n        } else if (thousands > 0) {\n       \
    \     Collections.sort(arr);\n            for (Long l : arr) {\n             \
    \   if (l == 1000l) result.add(l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2s_8wcks.java:61)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1l)\n                ones++;\n            else if (l == 10l)\n          \
    \      tens++;\n            else if (l == 100l)\n                hundreds++;\n\
    \            else if (l == 1000l)\n                thousands++;\n        }\n \
    \       long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (long l : arr) {\n     \
    \       if (l == 1l)\n                onesCount++;\n            else if (l ==\
    \ 10l)\n                tensCount++;\n            else if (l == 100l)\n      \
    \          hundredsCount++;\n            else if (l == 1000l)\n              \
    \  thousandsCount++;\n        }\n        long onesCount2 = onesCount * ones;\n\
    \        long tensCount2 = tensCount * tens;\n        long hundredsCount2 = hundredsCount\
    \ * hundreds;\n        long thousandsCount2 = thousandsCount * thousands;\n  \
    \      long onesCount3 = onesCount2 * ones;\n        long tensCount3 = tensCount2\
    \ * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n        long\
    \ thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3\
    \ * ones;\n        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4\
    \ = hundredsCount3 * hundreds;\n        long thousandsCount4 = thousandsCount3\
    \ * thousands;\n        long onesCount5 = onesCount4 * ones;\n        long tensCount5\
    \ = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n\
    \        long thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6\
    \ = onesCount5 * ones;\n        long tensCount6 = tensCount5 * tens;\n       \
    \ long hundredsCount6 = hundredsCount5 * hundreds;\n        long thousandsCount6\
    \ = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6 * ones;\n\
    \        long tensCount7 = tensCount6 * tens;\n        long hundredsCount7 = hundredsCount6\
    \ * hundred\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7helmdkm.java:71: error: ';' expected\n        long hundredsCount7\
    \ = hundredsCount6 * hundred\n                                               \
    \       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1) {\n                ones++;\n            } else if (l == 10) {\n      \
    \          tens++;\n            } else if (l == 100) {\n                hundreds++;\n\
    \            } else if (l == 1000) {\n                thousands++;\n         \
    \   } else {\n                result.add(l);\n            }\n        }\n     \
    \   if (ones > 0) {\n            result.add(ones);\n        }\n        if (tens\
    \ > 0) {\n            result.add(tens);\n        }\n        if (hundreds > 0)\
    \ {\n            result.add(hundreds);\n        }\n        if (thousands > 0)\
    \ {\n            result.add(thousands);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40ufz9fy.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0, hundredThousands = 0, thousandThousands = 0;\n        for (Long i : arr)\
    \ {\n            if (i%1000 == 0)\n                thousands++;\n            else\
    \ if (i%100 == 0)\n                hundreds++;\n            else if (i%10 == 0)\n\
    \                tens++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i%10 == 0)\n                tenThousands++;\n            else if (i%10\
    \ == 0)\n                tenThousands++;\n            else if (i%10 == 0)\n  \
    \              tenThousands++;\n            else if (i%10 == 0)\n            \
    \    tenThousands++;\n            else if (i%10 == 0)\n                tenThousands++;\n\
    \            else if (i%10 == 0)\n                tenThousands++;\n          \
    \  else if (i\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdq03u49_.java:81: error: ')' expected\n            else if (i\n\
    \                      ^\n/tmp/tmpdq03u49_.java:82: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpdq03u49_.java:83: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdq03u49_.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpdq03u49_.java:83: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpdq03u49_.java:83: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpdq03u49_.java:83: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpdq03u49_.java:94: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.longValue()\
    \ == 1) {\n                ones++;\n            } else if (i.longValue() == 10)\
    \ {\n                tens++;\n            } else if (i.longValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.longValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        if (ones == 0)\
    \ {\n            result.add(0);\n        } else if (ones == 1) {\n           \
    \ result.add(1);\n        } else if (ones == 2) {\n            result.add(2);\n\
    \        } else if (ones == 3) {\n            result.add(3);\n        } else if\
    \ (ones == 4) {\n            result.add(4);\n        } else if (ones == 5) {\n\
    \            result.add(5);\n        } else if (ones == 6) {\n            result.add(6);\n\
    \        } else if (ones == 7) {\n            result.add(7);\n        } else if\
    \ (ones == 8) {\n            result.add(8);\n        } else if (ones == 9) {\n\
    \            result.add(9);\n        } else if (ones == 10) {\n            result.add(10);\n\
    \        } else if (ones == 11) {\n            result.add(11);\n        } else\
    \ if (ones == 12) {\n            result.add(12);\n        } else if (ones == 13)\
    \ {\n            result.add(13);\n        } else if (ones == 14) {\n         \
    \   result.add(14);\n        } else if (ones == 15) {\n            result.add(15);\n\
    \        } else if (ones == 16) {\n            result.add(16);\n        } else\
    \ if (ones == 17) {\n            result.add(17);\n        } else if (ones == 18)\
    \ {\n            result.add(18);\n        } else if (ones == 19) {\n         \
    \   result.add(19);\n        } else if (ones == 20) {\n            result.add(20);\n\
    \        } else if (ones == 21) {\n            result.add(21);\n        } else\
    \ if (ones == 22) {\n            result.add(22);\n        } else if (ones == 23)\
    \ {\n            result.add(23);\n        } else if (ones == 24) {\n         \
    \   result.add(24);\n        } else if (ones == 25) {\n            result.add(25);\n\
    \        } else if (ones == 26) {\n            result.add(26);\n        } else\
    \ if (ones == 27) {\n            result.add(27);\n        } else if (ones == 28)\
    \ {\n            result.add(28);\n        } else if (ones == 29) {\n         \
    \   result.add(29);\n        } else if (ones == 30) {\n            result.add(30);\n\
    \        } else if (ones == 31) {\n            result.add(31);\n        } else\
    \ if (ones == 32) {\n            result.add(32);\n        } else if (ones == 33)\
    \ {\n            result.add(33);\n        } else if (ones == 34) {\n         \
    \   result.add(34);\n        } else if (ones == 35) {\n            result.add(35);\n\
    \        } else if (ones == 36) {\n            result.add(36);\n        } else\
    \ if (ones == 37) {\n            result.add(37);\n        } else if (ones == 38)\
    \ {\n            result.add(38);\n        } else if (ones == 39) {\n         \
    \   result.add(39);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedzs1d0k.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpedzs1d0k.java:118: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpedzs1d0k.java:118: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpedzs1d0k.java:118: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpedzs1d0k.java:118: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpedzs1d0k.java:129: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else res.add(i);\n        }\n        if (ones > zeros) {\n        \
    \    ArrayList<Long> temp = sortArray(new ArrayList<Long>(arr));\n           \
    \ for (long i : temp) res.add(i);\n        } else if (zeros > ones) {\n      \
    \      ArrayList<Long> temp = sortArray(new ArrayList<Long>(arr));\n         \
    \   for (long i : temp) res.add(i);\n        } else {\n            ArrayList<Long>\
    \ temp = sortArray(new ArrayList<Long>(arr));\n            for (long i : temp)\
    \ res.add(i);\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.util.ArrayList.<init>(ArrayList.java:178)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Problem.sortArray(tmpmwad8u9v.java:29)\n\
    \tat Problem.sortArray(tmpmwad8u9v.java:29)\n\tat Pr"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (long i : arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else if (i == 0) {\n                zeros++;\n            } else\
    \ {\n                if (ones > zeros) {\n                    result.add(max);\n\
    \                    max = 0;\n                    ones = 0;\n               \
    \     zeros++;\n                } else {\n                    max = Math.max(max,\
    \ i);\n                }\n            }\n        }\n        if (ones > zeros)\
    \ {\n            result.add(max);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuoz8iih.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long one\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3d6_2z77.java:92: error: ';' expected\n        long one\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n       \
    \ }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n        long\
    \ zerosDecimal = zeros / Math.pow(10, arr.size());\n        long onesDecimalDecimal\
    \ = onesDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimal\
    \ = zerosDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n    \
    \    long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ju1i1lz.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \                                ^\n/tmp/tmp4ju1i1lz.java:28: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long zerosDecimal\
    \ = zeros / Math.pow(10, arr.size());\n                                  ^\n/tmp/tmp4ju1i1lz.java:29:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long onesDecimalDecimal = onesDecimal / Math.pow(10, arr.size());\n  \
    \                                            ^\n/tmp/tmp4ju1i1lz.java:30: error:\
    \ incompatible types: possible lossy conversion from double to long\n        long\
    \ zerosDecimalDecimal = zerosDecimal / Math.pow(10, arr.size());\n           \
    \                                     ^\n/tmp/tmp4ju1i1lz.java:31: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n                         \
    \                                   ^\n/tmp/tmp4ju1i1lz.java:32: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n                        \
    \                                      ^\n/tmp/tmp4ju1i1lz.java:33: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n                  \
    \                                                        ^\n/tmp/tmp4ju1i1lz.java:34:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ Math.pow(10, arr.size());\n                                                \
    \                            ^\n/tmp/tmp4ju1i1lz.java:35: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long onesDecimalDecimalDecimalDecimalDecimal "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array array list of\
    \ non-negative integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (Long val : arr) {\n            if (val == 1) {\n                ones++;\n\
    \            } else if (val == 0) {\n                zeros++;\n            } else\
    \ {\n                if (ones > zeros) {\n                    max = ones;\n  \
    \              } else {\n                    max = zeros;\n                }\n\
    \            }\n            result.add(val);\n        }\n        if (ones > zeros)\
    \ {\n            max = ones;\n        } else {\n            max = zeros;\n   \
    \     }\n        Collections.sort(result, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                long diff = o1.longValue()\
    \ - o2.longValue();\n                if (diff == 0) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return diff;\n\
    \                }\n            }\n        });\n        ArrayList<Long> sortedArr\
    \ = new ArrayList<Long>();\n        for (Long val : result) {\n            if\
    \ (val == max) {\n                sortedArr.add(val);\n            }\n       \
    \ }\n        return sortedArr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp726k2bkl.java:49: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    return diff;\n                       \
    \    ^\n1 error\n"
  stdout: ''
