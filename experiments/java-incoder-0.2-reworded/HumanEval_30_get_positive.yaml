name: HumanEval_30_get_positive
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return only positive numbers in the array list.\n    //\
  \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
  \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l,\
  \ (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
  \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static\
  \ ArrayList<Long> getPositive(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
  \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
  \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> positive = new ArrayList<>();\n        for\
    \ (Long i : l) {\n            if (i >= 0l) {\n                positive.add(i);\n\
    \            }\n        }\n        return positive;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", '        return l.stream().filter(i -> i >= 0l).collect(Collectors.toList());',
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Long i : l) {\n\
    \            if (i >= 0l)\n                result.add(i);\n        }\n       \
    \ return result;", '        return l.stream().filter(x -> x > 0).collect(Collectors.toList());',
  "        ArrayList<Long> result = new ArrayList<>();\n        l.stream().filter(x\
    \ -> x > 0).forEach(x -> result.add(x));\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i >= 0l)\n                result.add(i);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        l.stream().filter(i\
    \ -> i >= 0l).forEach(i -> result.add(i));\n        return result;", "       \
    \ ArrayList<Long> positive = new ArrayList<>();\n        for (Long i : l) {\n\
    \            if (i >= 0l)\n                positive.add(i);\n        }\n     \
    \   return positive;", '        return l.stream().filter(i -> i >= 0l).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Long i : l) {\n\
    \            if (i >= 0l) result.add(i);\n        }\n        return result;",
  '        return l.stream().filter(n -> n > 0).collect(Collectors.toList());', '        return
    l.stream().filter(l -> l > 0).collect(Collectors.toCollection(ArrayList::new));',
  '        return l.stream().filter(x -> x >= 0l).collect(Collectors.toCollection(ArrayList::new));',
  '        return l.stream().filter(l -> l > 0).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Long i : l) {\n\
    \            if (i >= 0l) result.add(i);\n        }\n        return result;",
  "        ArrayList<Long> positive = new ArrayList<Long>();\n        for (Long i\
    \ : l) {\n            if (i >= 0l) {\n                positive.add(i);\n     \
    \       }\n        }\n        return positive;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Long i : l) {\n            if (i >= 0l) result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Long i : l) {\n            if (i >= 0l)\n                result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Long i : l) {\n            if (i >= 0l) {\n                result.add(i);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
