language: java
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue >= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00ob_f1a.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long currentIndex = -1;\n        for (long index\
    \ = 0; index < arr.size(); index++) {\n            currentValue = arr.get(index);\n\
    \            if (currentValue > maxValue) {\n                maxValue = currentValue;\n\
    \                maxIndex = index;\n            }\n            if (currentValue\
    \ == maxValue) {\n                currentIndex++;\n            }\n        }\n\
    \        return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9p2gq87.java:24: error: no suitable method found for get(long)\n\
    \            currentValue = arr.get(index);\n                              ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n        \
    \        max = arr.get(i);\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3wbpmyw.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(long i = 0; i < arr.size(); i++) {\n       \
    \     currentValue = arr.get(i);\n            if(currentValue >= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdq_a6uuq.java:23: error: no suitable method found for get(long)\n\
    \            currentValue = arr.get(i);\n                              ^\n   \
    \ method List.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n    method AbstractList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = -1;\n     \
    \   long prevIndex = -1;\n        for(long i : arr) {\n            currentIndex\
    \ = i;\n            prevIndex = currentIndex - 1;\n            if(prevIndex >=\
    \ 0) {\n                if(prevIndex > maxIndex) {\n                    maxIndex\
    \ = prevIndex;\n                }\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_odhecw8.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long curr = arr.get(0);\n      \
    \  long prev = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n \
    \           if (arr.get(i) > curr) {\n                largest = i;\n         \
    \       curr = arr.get(i);\n            } else if (arr.get(i) < prev) {\n    \
    \            largest = i;\n                prev = arr.get(i);\n            }\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6pfo_bz.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > currentValue) {\n                currentValue\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdmr9s2s.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long currentVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            currentVal = arr.get(i);\n            if(currentVal > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = currentVal;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib4jqbyi.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue >= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00ob_f1a.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = -1;\n        long\
    \ currentVal = -1;\n        for(long i : arr) {\n            currentVal = i;\n\
    \            for(long j : arr) {\n                if(j > currentVal) {\n     \
    \               currentVal = j;\n                }\n            }\n          \
    \  if(maxVal < currentVal) {\n                maxIndex = currentVal;\n       \
    \         maxVal = currentVal;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnv3nc7mi.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentMax = arr.get(0);\n\
    \        long currentIndex = 0;\n        for (long i : arr) {\n            if\
    \ (i <= currentMax) {\n                currentMax = i;\n                currentIndex\
    \ = i;\n            }\n        }\n        if (currentIndex != maxIndex) {\n  \
    \          maxIndex = currentIndex;\n        }\n        return maxIndex;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30_52qpf.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) <= maxValue) {\n                currentIndex\
    \ = arr.get(i);\n            }\n            if(arr.get(i) > maxValue) {\n    \
    \            maxIndex = currentIndex;\n                maxValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpraj2uheb.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(currentValue < arr.get(i)) {\n                currentValue\
    \ = arr.get(i);\n            }\n            if(currentValue > maxValue) {\n  \
    \              maxIndex = i;\n                maxValue = currentValue;\n     \
    \       }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp243wfrj2.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = -1;\n        long\
    \ previous = -1;\n        for (long i : arr) {\n            if (current == -1)\
    \ {\n                current = i;\n                previous = i;\n           \
    \ } else if (current > i) {\n                current = i;\n                previous\
    \ = current;\n            } else if (current == i) {\n                previous\
    \ = current;\n            }\n        }\n        if (largest == -1) {\n       \
    \     largest = current;\n        } else {\n            if (largest < current)\
    \ {\n                largest = current;\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnn6iuqoi.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >=\
    \ maxValue) {\n                maxIndex = i;\n                maxValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlw36xx8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > currentValue) {\n                currentValue\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxh4vsqee.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  long maxValue = arr.get(0);\n        for (long value : arr) {\n           \
    \ if (value >= maxValue) {\n                currentIndex++;\n                maxValue\
    \ = value;\n            }\n            if (currentIndex == maxIndex) {\n     \
    \           maxIndex = currentIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmt34oai.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            if(currentValue == previousValue)\
    \ {\n                maxIndex = -1;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploq5f5u6.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >=\
    \ maxValue) {\n                maxIndex = i;\n                maxValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlw36xx8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long previous = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) < arr.get(i-1)) {\n\
    \                previous = arr.get(i);\n            }\n            else if(arr.get(i)\
    \ > arr.get(i-1)) {\n                largest = previous;\n            }\n    \
    \    }\n        return largest;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpu6eomtzf.java:22)\n\tat Problem.main(tmpu6eomtzf.java:32)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxVal = arr.get(i);\n                maxIndex = i;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1l1l1p1x.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = arr.get(0);\n   \
    \     long previous = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) >= current) {\n                largest = i;\n\
    \                current = arr.get(i);\n            } else if (arr.get(i) < current)\
    \ {\n                largest = -1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__me4bie.java:33)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > currentValue) {\n                currentValue\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdmr9s2s.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n        \
    \        max = arr.get(i);\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8v2g59w.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(index))\
    \ {\n                index = i;\n            }\n        }\n        if(index !=\
    \ -1) {\n            largest = index;\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0hjgwh2.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(index)) {\n         \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = 0;\n        for (long value : arr) {\n           \
    \ if (value >= maxValue) {\n                maxIndex = currentIndex;\n       \
    \         maxValue = value;\n            }\n            currentIndex++;\n    \
    \    }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f9h9i7y.java:32)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            if(currentValue == previousValue)\
    \ {\n                maxIndex = -1;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploq5f5u6.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long curr = -1;\n        for (long\
    \ i : arr) {\n            if (i > largest) {\n                largest = i;\n \
    \               curr = i;\n            } else if (i == largest) {\n          \
    \      curr = i;\n            }\n        }\n        return largest;\n    }\n \
    \   public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5w8vt1s4.java:32)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = 0;\n        for (long\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if (current > largest) {\n                largest = current;\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5_k66ss.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            current = arr.get(i);\n                      \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = arr.get(0);\n        long maxIndex = -1;\n      \
    \  for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n\
    \                max = arr.get(i);\n                maxIndex = i;\n          \
    \  }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphluvy6_h.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = 0;\n        for(long\
    \ i : arr) {\n            if(i == current) {\n                continue;\n    \
    \        }\n            if(i == current + 1) {\n                largest = i;\n\
    \            } else {\n                current = i;\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphllhmfzj.java:34)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current >= largest) {\n                largest = current;\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpicukg2rb.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = -1;\n        long\
    \ currentVal = -1;\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  currentVal = arr.get(i);\n            if(currentVal <= maxVal) {\n        \
    \        maxIndex = i;\n                maxVal = currentVal;\n            }\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1v7fierf.java:32)\n"
  stdout: ''
  timestamp: 1659792647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        long previous = arr.get(i-1);\n            if(current > previous) {\n\
    \                index = i;\n                largest = current;\n            }\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmprruu5352.java:23)\n\tat Problem.main(tmprruu5352.java:32)\n"
  stdout: ''
  timestamp: 1659792647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            if(currentValue == previousValue)\
    \ {\n                maxIndex = -1;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploq5f5u6.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long currentIndex = -1;\n        for (long index\
    \ = 0; index < arr.size(); index++) {\n            currentValue = arr.get(index);\n\
    \            if (currentValue > maxValue) {\n                maxValue = currentValue;\n\
    \                maxIndex = index;\n            }\n            if (currentValue\
    \ == maxValue) {\n                currentIndex = index;\n            }\n     \
    \   }\n        return maxIndex;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemg8rj0l.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(index);\n             \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if((maxIndex == -1) || (value > maxValue)) {\n                maxIndex\
    \ = i;\n                maxValue = value;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqznx0aw1.java:31)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            previousValue = currentValue;\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zp7rqpu.java:34)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentMax = -1;\n       \
    \ long currentIndex = -1;\n        for(long i = 0; i < arr.size(); i++) {\n  \
    \          currentMax = arr.get(i);\n            currentIndex = i;\n         \
    \   for(int j = i; j < arr.size(); j++) {\n                if(arr.get(j) <= currentMax)\
    \ {\n                    currentMax = arr.get(j);\n                    currentIndex\
    \ = j;\n                }\n            }\n            if(currentIndex != maxIndex)\
    \ {\n                maxIndex = currentIndex;\n            }\n        }\n    \
    \    return maxIndex;\n    }\n    public static void main(String[] args) {\n \
    \   assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqs34wnp.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentMax = arr.get(i);\n                   \
    \              ^\n/tmp/tmpdqs34wnp.java:25: error: incompatible types: possible\
    \ lossy conversion from long to int\n            for(int j = i; j < arr.size();\
    \ j++) {\n                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(i == 0) {\n                maxValue = value;\n                maxIndex\
    \ = i;\n            }\n            else if(value >= maxValue) {\n            \
    \    maxValue = value;\n                maxIndex = i;\n            }\n       \
    \ }\n        return maxIndex;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwc2kwla.java:35)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(i-1)) {\n\
    \                max = Math.max(max, arr.get(i));\n                maxIndex =\
    \ i;\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpljx7axr7.java:22)\n\tat Problem.main(tmpljx7axr7.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue > maxValue) {\n \
    \               maxValue = currentValue;\n                maxIndex = i;\n    \
    \        }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa05zspkg.java:32)\n"
  stdout: ''
  timestamp: 1659792647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = -1;\n     \
    \   long currentValue = -1;\n        for(long i : arr) {\n            currentIndex\
    \ = i;\n            currentValue = i;\n            for(int j = 1; j < arr.size();\
    \ j++) {\n                if(arr.get(j) > currentValue) {\n                  \
    \  currentValue = arr.get(j);\n                    currentIndex = j;\n       \
    \         }\n            }\n            if(currentIndex > maxIndex) {\n      \
    \          maxIndex = currentIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi9ne6s3c.java:38)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >=\
    \ maxValue) {\n                maxIndex = i;\n                maxValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlw36xx8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue <= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4f70jey.java:32)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long currentMax\
    \ = arr.get(0);\n        long currentMaxIndex = -1;\n        for(int i = 1; i\
    \ < arr.size(); i++) {\n            long current = arr.get(i);\n            if(current\
    \ > currentMax) {\n                currentMax = current;\n                currentMaxIndex\
    \ = i;\n            }\n        }\n        if(currentMaxIndex != -1) {\n      \
    \      max = currentMax;\n            maxIndex = currentMaxIndex;\n        }\n\
    \        return max;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvwm0w25g.java:37)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long currentIndex = -1;\n        for(long i : arr)\
    \ {\n            currentValue = i;\n            currentIndex = i;\n          \
    \  for(long j : arr) {\n                if(j > currentValue) {\n             \
    \       currentValue = j;\n                    currentIndex = j;\n           \
    \     }\n            }\n            if(maxIndex == -1 || currentValue > maxValue)\
    \ {\n                maxValue = currentValue;\n                maxIndex = currentIndex;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lmv74ob.java:40)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long i : arr)\
    \ {\n            currentValue = i;\n            previousValue = currentValue;\n\
    \            for(long j : arr) {\n                if(j > currentValue) {\n   \
    \                 if(maxIndex == -1) {\n                        maxIndex = j;\n\
    \                        maxValue = currentValue;\n                    } else\
    \ {\n                        if(maxValue < currentValue) {\n                 \
    \           maxIndex = j;\n                            maxValue = currentValue;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaprag7x.java:43)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long lastIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        if(current > largest) {\n                largest = current;\n       \
    \         lastIndex = i;\n            }\n        }\n        if(lastIndex == -1)\
    \ {\n            return -1;\n        }\n        for(int i = lastIndex + 1; i <\
    \ arr.size(); i++) {\n            long current = arr.get(i);\n            if(current\
    \ > largest) {\n                largest = current;\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1nezzuk4.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = lastIndex + 1; i < arr.size(); i++) {\n\
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(i-1)) {\n\
    \                max = Math.max(max, arr.get(i));\n                maxIndex =\
    \ i;\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpljx7axr7.java:22)\n\tat Problem.main(tmpljx7axr7.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = arr.get(0);\n        int index = 0;\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n  \
    \              max = arr.get(i);\n                index = i;\n            }\n\
    \        }\n        return index;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9z1iyjzz.java:30)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = 0;\n        for(long\
    \ i : arr) {\n            if(i == current) {\n                continue;\n    \
    \        }\n            if(i == current + 1) {\n                largest = i;\n\
    \                continue;\n            }\n            if(i == current - 1) {\n\
    \                largest = i;\n                continue;\n            }\n    \
    \        if(i == current + 2) {\n                largest = i;\n              \
    \  continue;\n            }\n            if(i == current - 2) {\n            \
    \    largest = i;\n                continue;\n            }\n            if(i\
    \ == current + 3) {\n                largest = i;\n                continue;\n\
    \            }\n            if(i == current - 3) {\n                largest =\
    \ i;\n                continue;\n            }\n            if(i == current +\
    \ 4) {\n                largest = i;\n                continue;\n            }\n\
    \            if(i == current - 4) {\n                largest = i;\n          \
    \      continue;\n            }\n            if(i == current + 5) {\n        \
    \        largest = i;\n                continue;\n            }\n            if(i\
    \ == current - 5) {\n                largest = i;\n                continue;\n\
    \            }\n            if(i == current + 6) {\n                largest =\
    \ i;\n                continue;\n            }\n            if(i == current -\
    \ 6) {\n                largest = i;\n                continue;\n            }\n\
    \            if(i == current + 7) {\n                largest = i;\n          \
    \      continue;\n            }\n            if(i == current - 7) {\n        \
    \        largest = i;\n                continue;\n            }\n            if(i\
    \ == current + 8) {\n                largest = i;\n                continue;\n\
    \            }\n            if(i == current - 8) {\n                largest =\
    \ i;\n                continue;\n            }\n            if(i == current +\
    \ 9) {\n                largest = i;\n                continue;\n            }\n\
    \            if(i == current - 9) {\n                largest = i;\n          \
    \      continue;\n            }\n            if(i == current + 10) {\n       \
    \         largest = i;\n                continue;\n            }\n           \
    \ if(i == current - 10) {\n                largest = i;\n                continue;\n\
    \            }\n            if(i == current + 11) {\n                largest =\
    \ i;\n                continue;\n            }\n            if(i == current -\
    \ 11) {\n                largest = i;\n                continue;\n           \
    \ }\n            if(i == current + 12) {\n                largest = i;\n     \
    \           continue;\n            }\n            if(i == current - 12) {\n  \
    \              largest = i;\n                continue;\n            }\n      \
    \      if(i == current + 13) {\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w9ur3x7.java:123: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659792647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        if(current > largest) {\n                largest = current;\n       \
    \         index = i;\n            }\n        }\n        return index;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kfx532v.java:31)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long curr = arr.get(0);\n        long\
    \ prev = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > curr) {\n                prev = curr;\n                curr = arr.get(i);\n\
    \            } else if (arr.get(i) == prev) {\n                prev = curr;\n\
    \                curr = arr.get(i);\n            } else {\n                return\
    \ -1;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zswpe32.java:36)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  long currentValue = arr.get(0);\n        boolean found = false;\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (currentValue > arr.get(i))\
    \ {\n                currentIndex = i;\n                currentValue = arr.get(i);\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            maxIndex = currentIndex;\n        }\n        return maxIndex;\n \
    \   }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7zi1iab.java:36)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = -1;\n     \
    \   long prevIndex = -1;\n        for(long i : arr) {\n            currentIndex\
    \ = i;\n            prevIndex = i;\n            while(currentIndex > prevIndex)\
    \ {\n                prevIndex = currentIndex;\n                currentIndex =\
    \ currentIndex - arr[currentIndex];\n            }\n            if(currentIndex\
    \ > maxIndex) {\n                maxIndex = currentIndex;\n            }\n   \
    \     }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uv2eqvq.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                currentIndex = currentIndex - arr[currentIndex];\n\
    \                                                  ^\n/tmp/tmp5uv2eqvq.java:27:\
    \ error: array required, but ArrayList<Long> found\n                currentIndex\
    \ = currentIndex - arr[currentIndex];\n                                      \
    \           ^\n2 errors\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > maxValue) {\n                maxIndex =\
    \ i;\n                maxValue = arr.get(i);\n            }\n            if (arr.get(i)\
    \ < currentValue) {\n                currentValue = arr.get(i);\n            }\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsh6vd1tg.java:34)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = -1;\n        for(long\
    \ i : arr) {\n            if(i == current) {\n                continue;\n    \
    \        }\n            if(i == largest || current == -1) {\n                largest\
    \ = i;\n                current = i;\n            } else {\n                current\
    \ = i;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdysvn0c6.java:35)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > maxValue) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = currentIndex;\n            }\n     \
    \       currentIndex = arr.get(i);\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31oyesed.java:33)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue <= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4f70jey.java:32)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            currentValue = arr.get(i);\n            if(currentValue\
    \ <= maxValue) {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmt7l54t.java:32)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        if(i == 0) {\n                index = current;\n            }\n     \
    \       else if(current > index) {\n                index = current;\n       \
    \     }\n        }\n        if(index != -1) {\n            largest = index;\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0ex89uk.java:36)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(i-1)) {\n\
    \                index = i;\n                largest = arr.get(i);\n         \
    \   }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpvm7_1yyq.java:22)\n\tat Problem.main(tmpvm7_1yyq.java:30)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ value = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ <= value) {\n                maxIndex = i;\n                maxValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphomdzz0o.java:31)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long currentMax\
    \ = -1;\n        long currentMaxIndex = -1;\n        for(long i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) == max)\
    \ {\n                currentMax = arr.get(i);\n                currentMaxIndex\
    \ = i;\n            }\n        }\n        if(maxIndex != currentMaxIndex) {\n\
    \            return maxIndex;\n        } else {\n            return -1;\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgb5mjufu.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) > max) {\n                     \
    \  ^\n/tmp/tmpgb5mjufu.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                max = arr.get(i);\n                      \
    \        ^\n/tmp/tmpgb5mjufu.java:28: error: incompatible types: possible lossy\
    \ conversion from long to int\n            if(arr.get(i) == max) {\n         \
    \              ^\n/tmp/tmpgb5mjufu.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n                currentMax = arr.get(i);\n\
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long index\
    \ : arr) {\n            currentIndex = index;\n            currentValue = arr.get(index);\n\
    \            while(currentValue > maxValue) {\n                maxIndex = currentIndex;\n\
    \                maxValue = currentValue;\n                currentIndex--;\n \
    \               currentValue = arr.get(currentIndex);\n            }\n       \
    \ }\n        return maxIndex;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8no493z.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(index);\n             \
    \                      ^\n/tmp/tmp_8no493z.java:30: error: incompatible types:\
    \ possible lossy conversion from long to int\n                currentValue = arr.get(currentIndex);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        long previousIndex = i;\n            while(previousIndex >= 0 && arr.get(previousIndex)\
    \ < current) {\n                previousIndex--;\n            }\n            if(previousIndex\
    \ >= 0) {\n                max = Math.max(max, current);\n                maxIndex\
    \ = previousIndex;\n            }\n        }\n        return max;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujy9wja4.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while(previousIndex >= 0 && arr.get(previousIndex)\
    \ < current) {\n                                                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long currentVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            currentVal = arr.get(i);\n            if(currentVal <= maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = currentVal;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjp4k1pnf.java:32)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n         \
    \       long nextValue = arr.get(j);\n                if(nextValue <= currentValue)\
    \ {\n                    currentIndex = j;\n                    currentValue =\
    \ nextValue;\n                }\n            }\n            if(currentIndex >\
    \ maxIndex) {\n                maxIndex = currentIndex;\n                maxValue\
    \ = currentValue;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprr_dnte6.java:41)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = arr.get(0);\n   \
    \     long previous = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            current = arr.get(i);\n            if(current > previous) {\n\
    \                largest = i;\n            }\n            previous = current;\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbj0dpa19.java:32)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            currentValue = arr.get(i);\n            if(currentValue\
    \ > maxValue) {\n                maxValue = currentValue;\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3iz4nnr8.java:32)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = 0;\n        for(long value : arr) {\n            if(value\
    \ >= maxValue) {\n                maxValue = value;\n                maxIndex\
    \ = currentIndex;\n            }\n            currentIndex++;\n        }\n   \
    \     return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfzz7byhe.java:32)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long currentIndex = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ currentIndex = i;\n            for(int j = i; j < arr.size(); j++) {\n     \
    \           long value = arr.get(j);\n                if(value <= currentValue)\
    \ {\n                    currentIndex = j;\n                    break;\n     \
    \           }\n            }\n            if(currentIndex != -1) {\n         \
    \       if(currentValue > maxValue) {\n                    maxValue = currentValue;\n\
    \                    maxIndex = currentIndex;\n                }\n           \
    \ }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf3vktfke.java:43)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > maxValue) {\n   \
    \             maxValue = arr.get(i);\n                maxIndex = i;\n        \
    \    }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkq7esz0u.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long lastIndex = -1;\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) >= arr.get(lastIndex))\
    \ {\n                largest = i;\n                lastIndex = i;\n          \
    \  }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmevdfi70.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) >= arr.get(lastIndex)) {\n     \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long prev = 0;\n        for (long\
    \ i : arr) {\n            if (i > prev) {\n                largest = i;\n    \
    \        }\n            prev = i;\n        }\n        return largest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqqagaw2.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            currentValue = arr.get(i);\n            if(currentValue\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_4vxu21.java:32)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(long i = 0; i < arr.size(); i++) {\n       \
    \     currentValue = arr.get(i);\n            if((currentValue > maxValue) &&\
    \ (currentValue >= maxIndex)) {\n                maxIndex = i;\n             \
    \   maxValue = currentValue;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1pz2ish.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long curr = arr.get(0);\n      \
    \  for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > curr)\
    \ {\n                curr = arr.get(i);\n                largest = i;\n      \
    \      }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22hkzvj7.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if (currentValue >= previousValue) {\n                maxIndex = i;\n      \
    \          maxValue = currentValue;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxl9jht39.java:34)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            if(currentValue == previousValue)\
    \ {\n                maxIndex = -1;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploq5f5u6.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  for(long i = 0; i < arr.size(); i++) {\n            if(arr.get(i) < arr.get(currentIndex))\
    \ {\n                currentIndex = i;\n            }\n            if(arr.get(i)\
    \ > arr.get(currentIndex)) {\n                maxIndex = currentIndex;\n     \
    \       }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8w0ueba.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) < arr.get(currentIndex)) {\n   \
    \                    ^\n/tmp/tmpa8w0ueba.java:22: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if(arr.get(i) < arr.get(currentIndex))\
    \ {\n                                    ^\n/tmp/tmpa8w0ueba.java:25: error: incompatible\
    \ types: possible lossy conversion from long to int\n            if(arr.get(i)\
    \ > arr.get(currentIndex)) {\n                       ^\n/tmp/tmpa8w0ueba.java:25:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if(arr.get(i) > arr.get(currentIndex)) {\n                          \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        long nextIndex = i;\n            while(nextIndex < arr.size() && arr.get(nextIndex)\
    \ < current) {\n                nextIndex++;\n            }\n            if(nextIndex\
    \ == arr.size() || current > arr.get(nextIndex)) {\n                max = Math.max(max,\
    \ current);\n                maxIndex = i;\n            }\n        }\n       \
    \ return max;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkx2wzk3.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while(nextIndex < arr.size() && arr.get(nextIndex)\
    \ < current) {\n                                                    ^\n/tmp/tmpqkx2wzk3.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if(nextIndex == arr.size() || current > arr.get(nextIndex)) {\n     \
    \                                                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long index\
    \ = 0; index < arr.size(); index++) {\n            currentValue = arr.get(index);\n\
    \            if(currentValue > maxValue) {\n                maxValue = currentValue;\n\
    \                maxIndex = index;\n            }\n            if(currentValue\
    \ == previousValue) {\n                maxIndex = -1;\n            }\n       \
    \     previousValue = currentValue;\n        }\n        return maxIndex;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaelyixx5.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(index);\n             \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long curVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n\
    \            if(arr.get(i) > maxVal) {\n                maxVal = arr.get(i);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) < curVal)\
    \ {\n                curVal = arr.get(i);\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp_nq033.java:34)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n        \
    \        max = arr.get(i);\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3wbpmyw.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(long j = i; j < arr.size(); j++) {\n        \
    \        long value = arr.get(j);\n                if(value <= currentValue) {\n\
    \                    break;\n                }\n                currentIndex =\
    \ j;\n                currentValue = value;\n            }\n            if(currentIndex\
    \ > maxIndex) {\n                maxIndex = currentIndex;\n                maxValue\
    \ = currentValue;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1z5vqyb.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmpf1z5vqyb.java:27: error: incompatible types: possible\
    \ lossy conversion from long to int\n                long value = arr.get(j);\n\
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long currentVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            currentVal = arr.get(i);\n            if(currentVal > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = currentVal;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib4jqbyi.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentMax = arr.get(0);\n\
    \        long currentIndex = -1;\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n\
    \                currentIndex = i;\n            }\n        }\n        if(currentIndex\
    \ != -1) {\n            for(int i = currentIndex + 1; i < arr.size(); i++) {\n\
    \                if(arr.get(i) > currentMax) {\n                    currentMax\
    \ = arr.get(i);\n                    currentIndex = i;\n                }\n  \
    \          }\n        }\n        if(currentIndex != -1) {\n            for(int\
    \ i = currentIndex - 1; i >= 0; i--) {\n                if(arr.get(i) > currentMax)\
    \ {\n                    currentMax = arr.get(i);\n                    currentIndex\
    \ = i;\n                }\n            }\n        }\n        if(currentIndex !=\
    \ -1) {\n            for(int i = currentIndex + 1; i < arr.size(); i++) {\n  \
    \              if(arr.get(i) > currentMax) {\n                    currentMax =\
    \ arr.get(i);\n                    currentIndex = i;\n                }\n    \
    \        }\n        }\n        if(currentIndex != -1) {\n            for(int i\
    \ = currentIndex - 1; i >= 0; i--) {\n                if(arr.get(i) > currentMax)\
    \ {\n                    currentMax = arr.get(i);\n                    currentIndex\
    \ = i;\n                }\n            }\n        }\n        return currentMax;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpobra7pr3.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for(int i = currentIndex + 1; i < arr.size();\
    \ i++) {\n                                     ^\n/tmp/tmpobra7pr3.java:37: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ for(int i = currentIndex - 1; i >= 0; i--) {\n                             \
    \        ^\n/tmp/tmpobra7pr3.java:45: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for(int i = currentIndex + 1; i < arr.size();\
    \ i++) {\n                                     ^\n/tmp/tmpobra7pr3.java:53: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ for(int i = currentIndex - 1; i >= 0; i--) {\n                             \
    \        ^\n4 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i : arr)\
    \ {\n            currentIndex = i;\n            currentValue = i;\n          \
    \  for(long j : arr) {\n                if(j > currentIndex) {\n             \
    \       currentIndex = j;\n                    currentValue = j;\n           \
    \     }\n            }\n            if(currentValue > maxValue) {\n          \
    \      maxIndex = currentIndex;\n                maxValue = currentValue;\n  \
    \          }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckmvmitn.java:40)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ if(currentValue > maxValue) {\n                maxValue = currentValue;\n  \
    \              maxIndex = i;\n            }\n            if(currentValue == previousValue)\
    \ {\n                maxIndex = -1;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmploq5f5u6.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            while(currentIndex > 0 && currentValue <= arr.get(currentIndex\
    \ - 1)) {\n                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n            if(currentIndex > maxIndex) {\n                maxIndex\
    \ = currentIndex;\n                maxValue = currentValue;\n            }\n \
    \       }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvud3qnh.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmpuvud3qnh.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n            while(currentIndex > 0 && currentValue\
    \ <= arr.get(currentIndex - 1)) {\n                                          \
    \                                 ^\n/tmp/tmpuvud3qnh.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n                currentValue\
    \ = arr.get(currentIndex);\n                                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > arr.get(i - 1)) {\n\
    \                max = arr.get(i);\n                maxIndex = i;\n          \
    \  }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgf1rli_.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > current)\
    \ {\n                largest = i;\n                current = arr.get(i);\n   \
    \         }\n        }\n        return largest;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5eqzguaz.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long curr = arr.get(0);\n      \
    \  long prev = 0;\n        for (int i = 1; i < arr.size(); i++) {\n          \
    \  if (arr.get(i) > curr) {\n                prev = curr;\n                curr\
    \ = arr.get(i);\n            }\n            if (arr.get(i) == prev && arr.get(i)\
    \ > largest) {\n                largest = arr.get(i);\n            }\n       \
    \ }\n        return largest;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphulxwi1p.java:34)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long prev = 0;\n        for(long\
    \ i : arr) {\n            if(i > prev) {\n                largest = i;\n     \
    \       }\n            prev = i;\n        }\n        return largest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsnbpjhwt.java:30)\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = 0;\n        for(long\
    \ i : arr) {\n            if(i == current) {\n                current++;\n   \
    \             continue;\n            }\n            if(i == current + 1) {\n \
    \               current = i;\n                continue;\n            }\n     \
    \       if(i == current + 2) {\n                current = i;\n               \
    \ continue;\n            }\n            if(i == current + 3) {\n             \
    \   current = i;\n                continue;\n            }\n            if(i ==\
    \ current + 4) {\n                current = i;\n                continue;\n  \
    \          }\n            if(i == current + 5) {\n                current = i;\n\
    \                continue;\n            }\n            if(i == current + 6) {\n\
    \                current = i;\n                continue;\n            }\n    \
    \        if(i == current + 7) {\n                current = i;\n              \
    \  continue;\n            }\n            if(i == current + 8) {\n            \
    \    current = i;\n                continue;\n            }\n            if(i\
    \ == current + 9) {\n                current = i;\n                continue;\n\
    \            }\n            if(i == current + 10) {\n                current =\
    \ i;\n                continue;\n            }\n            if(i == current +\
    \ 11) {\n                current = i;\n                continue;\n           \
    \ }\n            if(i == current + 12) {\n                current = i;\n     \
    \           continue;\n            }\n            if(i == current + 13) {\n  \
    \              current = i;\n                continue;\n            }\n      \
    \      if(i == current + 14) {\n                current = i;\n               \
    \ continue;\n            }\n            if(i == current + 15) {\n            \
    \    current = i;\n                continue;\n            }\n            if(i\
    \ == current + 16) {\n                current = i;\n                continue;\n\
    \            }\n            if(i == current + 17) {\n                current =\
    \ i;\n                continue;\n            }\n            if(i == current +\
    \ 18) {\n                current = i;\n                continue;\n           \
    \ }\n            if(i == current + 19) {\n                current = i;\n     \
    \           continue;\n            }\n            if(i == current + 20) {\n  \
    \              current = i;\n                continue;\n            }\n      \
    \      if(i == current + 21) {\n                current = i;\n               \
    \ continue;\n            }\n            if(i == current + 22) {\n            \
    \    current = i;\n                continue;\n            }\n            if(i\
    \ == current + 23) {\n                current = i;\n                continue;\n\
    \            }\n            if(i == current + 24) {\n                current =\
    \ i;\n                continue;\n            }\n            if(i == current +\
    \ 25) {\n                current = i;\n                continue;\n           \
    \ }\n            if(i == current + 26) {\n                current = i;\n     \
    \           continue;\n            }\n            if(i == current + 27) {\n  \
    \              current = i;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwef6vsiq.java:133: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long currentMax\
    \ = -1;\n        long currentMaxIndex = -1;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            currentMax = arr.get(i);\n            currentMaxIndex =\
    \ i;\n            for(int j = i + 1; j < arr.size(); j++) {\n                if(arr.get(j)\
    \ <= currentMax) {\n                    currentMax = arr.get(j);\n           \
    \         currentMaxIndex = j;\n                }\n            }\n           \
    \ if(currentMaxIndex != maxIndex) {\n                max = currentMax;\n     \
    \           maxIndex = currentMaxIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5grvkyet.java:40)\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = 0;\n        for(long\
    \ i = arr.size(); i > 0; i--) {\n            if(arr.get(index) <= arr.get(i))\
    \ {\n                index++;\n            } else {\n                largest =\
    \ index;\n                index = i;\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzh3k7d91.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(index) <= arr.get(i)) {\n         \
    \              ^\n/tmp/tmpzh3k7d91.java:22: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if(arr.get(index) <= arr.get(i))\
    \ {\n                                         ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = 0;\n        for (long\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(index))\
    \ {\n                index = i;\n            }\n            if (arr.get(i) > arr.get(index))\
    \ {\n                largest = index;\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7f830vf.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (arr.get(i) < arr.get(index)) {\n         \
    \               ^\n/tmp/tmpw7f830vf.java:22: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if (arr.get(i) < arr.get(index))\
    \ {\n                                     ^\n/tmp/tmpw7f830vf.java:25: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ if (arr.get(i) > arr.get(index)) {\n                        ^\n/tmp/tmpw7f830vf.java:25:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if (arr.get(i) > arr.get(index)) {\n                                \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long currentIndex = -1;\n        for(long i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ currentIndex = i;\n            while(currentValue < currentIndex) {\n      \
    \          currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n            if(currentValue > maxValue) {\n                maxValue\
    \ = currentValue;\n                maxIndex = currentIndex;\n            }\n \
    \       }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6zs1uy7.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmpa6zs1uy7.java:28: error: incompatible types: possible\
    \ lossy conversion from long to int\n                currentValue = arr.get(currentIndex);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long curr\
    \ = arr.get(0);\n        long prev = 0;\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(arr.get(i) > curr) {\n                prev = curr;\n\
    \                curr = arr.get(i);\n            }\n            else if(arr.get(i)\
    \ == prev) {\n                prev = curr;\n                curr = arr.get(i);\n\
    \            }\n            else {\n                if(max < prev) {\n       \
    \             max = prev;\n                    maxIndex = i;\n               \
    \ }\n                prev = curr;\n                curr = arr.get(i);\n      \
    \      }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp6n34ew8b.java:21)\n\tat Problem.main(tmp6n34ew8b.java:48)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  for (long i : arr) {\n            if (currentIndex == maxIndex) {\n       \
    \         maxIndex = i;\n            } else if (currentIndex < maxIndex) {\n \
    \               currentIndex = i;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdgwzcq7h.java:31)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(i - 1))\
    \ {\n                max = Math.max(max, arr.get(i));\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long lastIndex = -1;\n        for(long\
    \ i : arr) {\n            if(i == lastIndex) {\n                lastIndex++;\n\
    \                continue;\n            }\n            if(i == largest || i >\
    \ largest) {\n                largest = i;\n                lastIndex = i;\n \
    \           }\n        }\n        return largest;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2w7rn_s.java:34)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = arr.get(i);\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp837x_2ev.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long currentMax\
    \ = -1;\n        long currentIndex = -1;\n        for (long i : arr) {\n     \
    \       if (i == currentMax) {\n                currentIndex++;\n            }\n\
    \            if (i > currentMax) {\n                currentMax = i;\n        \
    \        currentIndex = i;\n            }\n            if (i == max) {\n     \
    \           maxIndex = currentIndex;\n            }\n            if (i > max)\
    \ {\n                max = i;\n                maxIndex = currentIndex;\n    \
    \        }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpf9gju0.java:42)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long i : arr)\
    \ {\n            currentValue = i;\n            previousValue = currentValue;\n\
    \            for(long j : arr) {\n                if(j > currentValue) {\n   \
    \                 if(j > maxValue) {\n                        maxValue = j;\n\
    \                        maxIndex = j;\n                    }\n              \
    \  }\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ikymg3z.java:38)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long previous = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(previous))\
    \ {\n                largest = i;\n            }\n            previous = i;\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wd29oj_.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(previous)) {\n      \
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n         \
    \       long value = arr.get(j);\n                if(value <= currentValue) {\n\
    \                    currentIndex = j;\n                    currentValue = value;\n\
    \                }\n            }\n            if(currentIndex != maxIndex) {\n\
    \                maxIndex = currentIndex;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpligrrf0n.java:41)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxVal)\
    \ {\n                maxVal = arr.get(i);\n                maxIndex = i;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1l1l1p1x.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  for(long i : arr) {\n            currentIndex++;\n            if(currentIndex\
    \ > maxIndex) {\n                maxIndex = currentIndex;\n            }\n   \
    \         if(currentIndex == arr.size()) {\n                return maxIndex;\n\
    \            }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzj87kgh.java:33)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = -1;\n        long\
    \ curVal = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            curVal\
    \ = arr.get(i);\n            if(curVal > maxVal) {\n                maxVal = curVal;\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzemju7k.java:32)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(index))\
    \ {\n                index = i;\n            }\n        }\n        if(index !=\
    \ -1) {\n            largest = index;\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0hjgwh2.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(index)) {\n         \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value > maxValue) {\n                maxIndex = i;\n               \
    \ maxValue = value;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpehtgq39q.java:31)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ previousValue = arr.get(i-1);\n            if(currentValue >= previousValue)\
    \ {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpygg90_dz.java:25)\n\tat Problem.main(tmpygg90_dz.java:34)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(i-1)) {\n\
    \                max = Math.max(max, arr.get(i));\n                maxIndex =\
    \ i;\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpljx7axr7.java:22)\n\tat Problem.main(tmpljx7axr7.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = -1;\n        long\
    \ currentVal = -1;\n        for(int i = 0; i < arr.size(); i++) {\n          \
    \  currentVal = arr.get(i);\n            if(currentVal > maxVal) {\n         \
    \       maxVal = currentVal;\n                maxIndex = i;\n            }\n \
    \       }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueklt4v3.java:32)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxValue = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte8vgwu8.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(index))\
    \ {\n                index = i;\n            }\n        }\n        if(index !=\
    \ -1) {\n            largest = index;\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_ypdxmo.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(index)) {\n         \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (currentValue > maxValue) {\n                maxIndex\
    \ = i;\n                maxValue = currentValue;\n            } else if (currentValue\
    \ == maxValue) {\n                currentValue = arr.get(i);\n            }\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9itbrj8.java:33)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > largest) {\n    \
    \            largest = arr.get(i);\n                index = i;\n            }\n\
    \        }\n        if(index == -1) {\n            return -1;\n        }\n   \
    \     for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == largest)\
    \ {\n                if((i + 1) < arr.size() && arr.get(i + 1) > largest) {\n\
    \                    largest = arr.get(i + 1);\n                    index = i;\n\
    \                }\n            }\n        }\n        return index;\n    }\n \
    \   public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0qa31cf.java:41)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n        \
    \    if(i == 0) {\n                max = val;\n                maxIndex = i;\n\
    \            }\n            else if(val > max) {\n                max = val;\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3sdxetl_.java:35)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  for(long i = arr.size()-1; i >= 0; i--) {\n            if(arr.get(i) <= arr.get(currentIndex))\
    \ {\n                currentIndex = i;\n            } else {\n               \
    \ maxIndex = currentIndex;\n                currentIndex = i;\n            }\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppr1o7sfi.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(currentIndex)) {\n  \
    \                     ^\n/tmp/tmppr1o7sfi.java:22: error: incompatible types:\
    \ possible lossy conversion from long to int\n            if(arr.get(i) <= arr.get(currentIndex))\
    \ {\n                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value >= maxValue) {\n                maxValue = value;\n          \
    \      maxIndex = i;\n            }\n        }\n        return maxIndex;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwb7taan.java:31)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(Long value\
    \ : arr) {\n            currentIndex++;\n            currentValue = value;\n \
    \           if(currentIndex > maxIndex) {\n                maxIndex = currentIndex;\n\
    \                maxValue = currentValue;\n            }\n            if(currentIndex\
    \ == maxIndex) {\n                if(currentValue > maxValue) {\n            \
    \        maxIndex = currentIndex;\n                    maxValue = currentValue;\n\
    \                }\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk75vyb2r.java:40)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(index))\
    \ {\n                index = i;\n            }\n        }\n        if(index !=\
    \ -1) {\n            largest = index;\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo93dqdsc.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(index)) {\n         \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value > maxValue) {\n                maxIndex = i;\n               \
    \ maxValue = value;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpehtgq39q.java:31)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n       \
    \     if((max < curr) && (curr >= arr.get(i-1))) {\n                max = curr;\n\
    \                maxIndex = i;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp98t4byyq.java:23)\n\tat Problem.main(tmp98t4byyq.java:31)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n        \
    \    if(val >= max) {\n                max = val;\n                maxIndex =\
    \ i;\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5fur3b5.java:31)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n         \
    \       long value = arr.get(j);\n                if(value <= currentValue) {\n\
    \                    break;\n                }\n                currentIndex =\
    \ j;\n                currentValue = value;\n            }\n            if(currentIndex\
    \ > maxIndex) {\n                maxIndex = currentIndex;\n                maxValue\
    \ = currentValue;\n            }\n        }\n        return maxIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kipp8qf.java:42)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        long currentMax\
    \ = -1;\n        long currentMaxIndex = -1;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            currentMax = arr.get(i);\n            currentMaxIndex =\
    \ i;\n            for(int j = i + 1; j < arr.size(); j++) {\n                if(arr.get(j)\
    \ <= currentMax) {\n                    currentMax = arr.get(j);\n           \
    \         currentMaxIndex = j;\n                }\n            }\n           \
    \ if(currentMaxIndex != maxIndex) {\n                max = currentMax;\n     \
    \           maxIndex = currentMaxIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5grvkyet.java:40)\n"
  stdout: ''
  timestamp: 1659792650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if(currentValue <= maxValue) {\n\
    \                maxIndex = i;\n                maxValue = currentValue;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4f70jey.java:32)\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > current)\
    \ {\n                largest = i;\n                current = arr.get(i);\n   \
    \         }\n        }\n        return largest;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5eqzguaz.java:30)\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    currentValue = arr.get(i);\n            if((currentValue <= maxValue) &&\
    \ (currentValue >= maxIndex)) {\n                maxIndex = currentValue;\n  \
    \          }\n            if((currentValue > maxValue) && (currentValue < maxIndex))\
    \ {\n                maxValue = currentValue;\n            }\n        }\n    \
    \    return maxIndex;\n    }\n    public static void main(String[] args) {\n \
    \   assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp070fbe9w.java:34)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ value = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            long\
    \ currentValue = arr.get(i);\n            if(currentValue >= maxValue) {\n   \
    \             maxValue = currentValue;\n                maxIndex = i;\n      \
    \      }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_1dtiqg.java:32)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            currentValue = arr.get(i);\n            if(currentValue\
    \ >= maxValue) {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpix2sahue.java:32)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            if(currentValue > maxValue) {\n                maxIndex\
    \ = i;\n                maxValue = currentValue;\n            }\n            currentValue\
    \ = arr.get(i);\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfot4k6vl.java:33)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long index = -1;\n        long temp;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            temp = arr.get(i);\n\
    \            index = i;\n            while(index > 0 && arr.get(index - 1l) >\
    \ temp) {\n                index--;\n            }\n            if(index > 0 &&\
    \ arr.get(index - 1l) == temp) {\n                largest = index;\n         \
    \       break;\n            }\n        }\n        return largest;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxxcypa2.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while(index > 0 && arr.get(index - 1l) > temp)\
    \ {\n                                             ^\n/tmp/tmpvxxcypa2.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if(index > 0 && arr.get(index - 1l) == temp) {\n                    \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            while(currentIndex > 0 && currentValue <= arr.get(currentIndex\
    \ - 1)) {\n                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n            if(currentIndex > maxIndex) {\n                maxIndex\
    \ = currentIndex;\n                maxValue = currentValue;\n            }\n \
    \       }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvud3qnh.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmpuvud3qnh.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n            while(currentIndex > 0 && currentValue\
    \ <= arr.get(currentIndex - 1)) {\n                                          \
    \                                 ^\n/tmp/tmpuvud3qnh.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n                currentValue\
    \ = arr.get(currentIndex);\n                                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659792649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current = arr.get(0);\n   \
    \     long previous = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) > current) {\n                largest = i;\n \
    \               current = arr.get(i);\n            } else if (arr.get(i) == current)\
    \ {\n                current = arr.get(i);\n            } else {\n           \
    \     previous = current;\n                current = arr.get(i);\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip_b3lae.java:36)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = -1;\n     \
    \   long prevIndex = -1;\n        for(long i : arr) {\n            currentIndex\
    \ = i;\n            prevIndex = currentIndex - 1;\n            if(prevIndex >=\
    \ 0) {\n                if(prevIndex > maxIndex) {\n                    maxIndex\
    \ = prevIndex;\n                }\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_odhecw8.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) <= currentValue) {\n                currentValue\
    \ = arr.get(i);\n            } else {\n                maxIndex = i;\n       \
    \         maxValue = currentValue;\n                currentValue = arr.get(i);\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplb4osgkl.java:34)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            currentValue = arr.get(i);\n            if(currentValue\
    \ >= maxValue) {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpix2sahue.java:32)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentValue = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (currentValue > maxValue) {\n                maxIndex\
    \ = i;\n                maxValue = currentValue;\n            }\n            currentValue\
    \ = arr.get(i);\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ms9gspw.java:33)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= max) {\n       \
    \         max = arr.get(i);\n                maxIndex = i;\n            }\n  \
    \      }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqurtndft.java:30)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  for (long i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > arr.get(currentIndex))\
    \ {\n                currentIndex = i;\n            }\n            if (arr.get(i)\
    \ > arr.get(maxIndex)) {\n                maxIndex = i;\n            }\n     \
    \   }\n        return maxIndex;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpod67r951.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (arr.get(i) > arr.get(currentIndex)) {\n  \
    \                      ^\n/tmp/tmpod67r951.java:22: error: incompatible types:\
    \ possible lossy conversion from long to int\n            if (arr.get(i) > arr.get(currentIndex))\
    \ {\n                                     ^\n/tmp/tmpod67r951.java:25: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ if (arr.get(i) > arr.get(maxIndex)) {\n                        ^\n/tmp/tmpod67r951.java:25:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if (arr.get(i) > arr.get(maxIndex)) {\n                             \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = -1;\n        for(long value : arr) {\n           \
    \ if(value >= maxValue) {\n                maxIndex = currentIndex;\n        \
    \        maxValue = value;\n            }\n            currentIndex++;\n     \
    \   }\n        return maxIndex;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdexnkkd8.java:33)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long curVal = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < curVal) {\n                maxIndex = i;\n \
    \               maxVal = arr.get(i);\n            } else if (arr.get(i) == curVal)\
    \ {\n                maxIndex = i;\n            }\n            curVal = arr.get(i);\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp2tc092cg.java:20)\n\tat Problem.main(tmp2tc092cg.java:38)\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = arr.get(0);\n        for(int i = 1; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value > maxValue)\
    \ {\n                maxValue = value;\n                maxIndex = currentIndex;\n\
    \            } else if (value == maxValue) {\n                currentIndex = i;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmput_5u8wj.java:34)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= arr.get(maxIndex))\
    \ {\n                max = arr.get(i);\n                maxIndex = i;\n      \
    \      }\n        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1kehuak.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) <= arr.get(maxIndex)) {\n      \
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentValue = arr.get(i);\n           \
    \ previousValue = arr.get(i-1);\n            if(currentValue >= previousValue)\
    \ {\n                maxIndex = i;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpygg90_dz.java:25)\n\tat Problem.main(tmpygg90_dz.java:34)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        int index = 0;\n        long maxIndex\
    \ = 0;\n        long currentMax = arr.get(0);\n        long currentIndex = arr.get(0);\n\
    \        for(int i = 1; i < arr.size(); i++) {\n            currentMax = arr.get(i);\n\
    \            currentIndex = arr.get(i);\n            while(currentIndex < currentMax)\
    \ {\n                index++;\n                currentMax = arr.get(index);\n\
    \                currentIndex = arr.get(index);\n            }\n            if(currentIndex\
    \ > max) {\n                max = currentIndex;\n                maxIndex = index;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplspu79te.java:40)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long currentVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            currentVal = arr.get(i);\n            if(currentVal > maxVal)\
    \ {\n                maxVal = currentVal;\n                maxIndex = i;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpblqzl4kg.java:32)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n         \
    \       if(arr.get(j) <= currentValue) {\n                    currentIndex = j;\n\
    \                    currentValue = arr.get(j);\n                }\n         \
    \   }\n            if(currentIndex > maxIndex) {\n                maxIndex = currentIndex;\n\
    \                maxValue = currentValue;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7786r8ut.java:40)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = 0;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n        \
    \        max = arr.get(i);\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8v2g59w.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long curr = arr.get(0);\n        for(int\
    \ i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > curr) {\n       \
    \         max = i;\n                curr = arr.get(i);\n            }\n      \
    \  }\n        return max;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx06zkc1a.java:30)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long i : arr)\
    \ {\n            currentValue = i;\n            previousValue = currentValue;\n\
    \            for(long j : arr) {\n                if(j > currentValue) {\n   \
    \                 currentValue = j;\n                    previousValue = currentValue;\n\
    \                }\n            }\n            if(currentValue > maxValue) {\n\
    \                maxIndex = currentValue;\n                maxValue = previousValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxq2vhip.java:40)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = 0;\n        for (long value : arr) {\n           \
    \ if (value >= maxValue) {\n                maxIndex = currentIndex;\n       \
    \         maxValue = value;\n            }\n            currentIndex++;\n    \
    \    }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f9h9i7y.java:32)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long maxIndex = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long current = arr.get(i);\n    \
    \        long previous = arr.get(i-1);\n            if(current > previous) {\n\
    \                max = current;\n                maxIndex = i;\n            }\n\
    \        }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpbkbi0eum.java:23)\n\tat Problem.main(tmpbkbi0eum.java:32)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n        \
    \    if(val > maxVal) {\n                maxVal = val;\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrlb2jam.java:31)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long index\
    \ : arr) {\n            currentValue = index;\n            previousValue = currentValue;\n\
    \            for(long i = index + 1; i < arr.size(); i++) {\n                if(arr.get(i)\
    \ > currentValue) {\n                    currentValue = arr.get(i);\n        \
    \            previousValue = currentValue;\n                }\n            }\n\
    \            if(currentValue > maxValue) {\n                maxIndex = index;\n\
    \                maxValue = currentValue;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpouotqa41.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if(arr.get(i) > currentValue) {\n        \
    \                   ^\n/tmp/tmpouotqa41.java:28: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    currentValue = arr.get(i);\n\
    \                                           ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ value = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > maxValue) {\n                maxValue = arr.get(i);\n                maxIndex\
    \ = i;\n            }\n        }\n        if(maxIndex != -1) {\n            for(int\
    \ i = 0; i < arr.size(); i++) {\n                if(arr.get(i) == maxValue &&\
    \ i != maxIndex) {\n                    value = arr.get(i);\n                }\n\
    \            }\n        }\n        return value;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczya2gfd.java:38)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i : arr)\
    \ {\n            currentIndex = i;\n            currentValue = i;\n          \
    \  for(long j : arr) {\n                if(j > i) {\n                    currentIndex\
    \ = j;\n                    currentValue = j;\n                }\n           \
    \ }\n            if(currentValue > maxValue) {\n                maxValue = currentValue;\n\
    \                maxIndex = currentIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2dws9la.java:40)\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        for(long index = 0; index < arr.size(); index++)\
    \ {\n            currentValue = arr.get(index);\n            if(currentValue >=\
    \ maxValue) {\n                maxIndex = index;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ymtyu4a.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(index);\n             \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for (long i : arr)\
    \ {\n            if (currentIndex == -1) {\n                currentIndex = i;\n\
    \                currentValue = i;\n            } else if (currentValue < i) {\n\
    \                currentIndex = i;\n                currentValue = i;\n      \
    \      } else if (currentValue == i) {\n                currentIndex++;\n    \
    \            currentValue = i;\n            } else {\n                maxIndex\
    \ = currentIndex;\n                maxValue = currentValue;\n                currentIndex\
    \ = i;\n                currentValue = i;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphhyplpis.java:43)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = 0;\n      \
    \  long currentValue = arr.get(0);\n        for(long index = 1; index < arr.size();\
    \ index++) {\n            if(arr.get(index) < currentValue) {\n              \
    \  currentValue = arr.get(index);\n                currentIndex = index;\n   \
    \         }\n            if(currentIndex != index - 1) {\n                maxIndex\
    \ = Math.max(maxIndex, currentIndex);\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33kb1_1i.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(index) < currentValue) {\n        \
    \               ^\n/tmp/tmp33kb1_1i.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n                currentValue = arr.get(index);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long prev = -1l;\n        for(long\
    \ i : arr) {\n            if(i > prev) {\n                largest = i;\n     \
    \       }\n            prev = i;\n        }\n        return largest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2r8n03w3.java:30)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long i : arr)\
    \ {\n            currentValue = i;\n            previousValue = currentValue;\n\
    \            for(long j : arr) {\n                if(j > currentValue) {\n   \
    \                 if(j > maxValue) {\n                        maxValue = j;\n\
    \                        maxIndex = j;\n                    }\n              \
    \  }\n            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ikymg3z.java:38)\n"
  stdout: ''
  timestamp: 1659792651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ value = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            try\
    \ {\n                value = arr.get(i);\n            } catch (IndexOutOfBoundsException\
    \ e) {\n                System.out.println(\"IndexOutOfBoundsException\");\n \
    \           }\n            if (maxIndex == -1 || value > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = value;\n            }\n  \
    \      }\n        return maxIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4nc8ys3.java:36)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentMax = arr.get(0);\n\
    \        long currentIndex = 1;\n        for(int i = 1; i < arr.size(); i++) {\n\
    \            if(arr.get(i) <= currentMax) {\n                currentMax = arr.get(i);\n\
    \                currentIndex = i;\n            }\n        }\n        if(currentIndex\
    \ != maxIndex) {\n            maxIndex = currentIndex;\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparedpeww.java:34)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largest = -1;\n        long current;\n        for(long\
    \ i = 0; i < arr.size(); i++) {\n            current = arr.get(i);\n         \
    \   if(current <= largest) {\n                largest = current;\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpta1zlva0.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            current = arr.get(i);\n                      \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxVal = arr.get(0);\n   \
    \     long currentVal = arr.get(0);\n        for(int i = 1; i < arr.size(); i++)\
    \ {\n            currentVal = arr.get(i);\n            if(currentVal > maxVal)\
    \ {\n                maxIndex = i;\n                maxVal = currentVal;\n   \
    \         }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib4jqbyi.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlspfux.java:30)\n"
  stdout: ''
  timestamp: 1659792646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        for(long i = 0;\
    \ i < arr.size(); i++) {\n            currentIndex = i;\n            currentValue\
    \ = arr.get(i);\n            for(long j = i; j < arr.size(); j++) {\n        \
    \        currentIndex = j;\n                currentValue = arr.get(j);\n     \
    \           if(currentValue >= currentIndex) {\n                    break;\n \
    \               }\n            }\n            if(currentIndex > maxIndex) {\n\
    \                maxIndex = currentIndex;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqn4m4ob.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmppqn4m4ob.java:28: error: incompatible types: possible\
    \ lossy conversion from long to int\n                currentValue = arr.get(j);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentMax = -1;\n       \
    \ long currentIndex = -1;\n        for(long i : arr) {\n            if(currentIndex\
    \ == -1) {\n                currentIndex = i;\n                currentMax = i;\n\
    \            } else if(currentMax < i) {\n                currentMax = i;\n  \
    \              currentIndex = i;\n            }\n        }\n        if(currentIndex\
    \ != -1) {\n            for(long i : arr) {\n                if(i != currentIndex\
    \ && currentMax < i) {\n                    currentMax = i;\n                }\n\
    \            }\n        }\n        return currentMax;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkxbhn_d.java:41)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if(arr.get(i) <= maxValue) {\n  \
    \              continue;\n            }\n            else if(arr.get(i) > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr.get(i);\n \
    \           }\n        }\n        return maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5wpdf0v2.java:33)\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = -1;\n        long\
    \ currentValue = -1;\n        long previousValue = -1;\n        for(long index\
    \ = 0; index < arr.size(); index++) {\n            currentValue = arr.get(index);\n\
    \            if(currentValue <= previousValue) {\n                maxIndex = index;\n\
    \                maxValue = currentValue;\n            }\n            previousValue\
    \ = currentValue;\n        }\n        return maxIndex;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0ou4lx5.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(index);\n             \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long currentIndex = -1;\n     \
    \   long currentValue = -1;\n        long previousValue = -1;\n        for(long\
    \ i : arr) {\n            currentIndex = i;\n            currentValue = arr.get(i);\n\
    \            previousValue = arr.get(i - 1);\n            if(currentValue > previousValue)\
    \ {\n                maxIndex = currentIndex;\n            }\n        }\n    \
    \    return maxIndex;\n    }\n    public static void main(String[] args) {\n \
    \   assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupcqmm5m.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currentValue = arr.get(i);\n                 \
    \                  ^\n/tmp/tmpupcqmm5m.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n            previousValue = arr.get(i - 1);\n\
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxIndex = -1;\n        long maxValue = arr.get(0);\n \
    \       long currentIndex = -1;\n        long currentValue = arr.get(0);\n   \
    \     for (long i : arr) {\n            if (currentValue < i) {\n            \
    \    currentValue = i;\n                currentIndex = i;\n            }\n   \
    \         if (currentValue > maxValue) {\n                maxValue = currentValue;\n\
    \                maxIndex = currentIndex;\n            }\n        }\n        return\
    \ maxIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozgfjf2a.java:36)\n"
  stdout: ''
  timestamp: 1659792654
