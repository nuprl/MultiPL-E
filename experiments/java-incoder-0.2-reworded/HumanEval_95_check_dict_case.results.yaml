language: java
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                try {\n                    Integer.parseInt(value);\n   \
    \             } catch (NumberFormatException e) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput7m033m.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmput7m033m.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmput7m033m.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmput7m033m.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmput7m033m.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmput7m033m.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmput7m033m.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(key) || !key.isEmpty()\
    \ && key.toUpperCase().equals(key)) {\n                result = false;\n     \
    \           break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrea9r3s.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdrea9r3s.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdrea9r3s.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdrea9r3s.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdrea9r3s.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdrea9r3s.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        boolean upperCase = true;\n        boolean lowerCase = true;\n      \
    \  for (String key : keys) {\n            String value = dict.get(key);\n    \
    \        if (value == null) {\n                return false;\n            }\n\
    \            if (value.length() > 1) {\n                upperCase = false;\n \
    \           }\n            if (value.length() < 1) {\n                lowerCase\
    \ = false;\n            }\n        }\n        result = upperCase && lowerCase;\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2h9ih5x.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpf2h9ih5x.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf2h9ih5x.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf2h9ih5x.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf2h9ih5x.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpf2h9ih5x.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            } else\
    \ if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase())) {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5t3ms10.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu5t3ms10.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu5t3ms10.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        for(String key : dict.keySet())\
    \ {\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n            \
    \    isDictCase = false;\n                break;\n            }\n        }\n \
    \       return isDictCase;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe08kenu4.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpe08kenu4.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpe08kenu4.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe08kenu4.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe08kenu4.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe08kenu4.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe08kenu4.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpe08kenu4.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && key.isEmpty() && !value.isEmpty())\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ppukvp0.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1ppukvp0.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1ppukvp0.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1ppukvp0.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1ppukvp0.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1ppukvp0.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.isEmpty()) return true;\n        boolean upperCase = true;\n\
    \        boolean lowerCase = true;\n        for (String key : keys) {\n      \
    \      if (key.isUpperCase()) {\n                upperCase = false;\n        \
    \    } else if (key.isLowerCase()) {\n                lowerCase = false;\n   \
    \         } else {\n                return false;\n            }\n        }\n\
    \        return upperCase && lowerCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpws6xiybo.java:30: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpws6xiybo.java:32: error: cannot find symbol\n  \
    \          } else if (key.isLowerCase()) {\n                          ^\n  symbol:\
    \   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpws6xiybo.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpws6xiybo.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpws6xiybo.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpws6xiybo.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpws6xiybo.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpws6xiybo.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(M"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgiko5dh0.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpgiko5dh0.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgiko5dh0.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgiko5dh0.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgiko5dh0.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpgiko5dh0.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (!(key instanceof String)) {\n                result = false;\n\
    \                break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            char firstChar = value.charAt(0);\n\
    \            char lastChar = value.charAt(value.length() - 1);\n            if\
    \ (firstChar >= 'a' && firstChar <= 'z') {\n                if (lastChar >= 'A'\
    \ && lastChar <= 'Z') {\n                    result = true;\n                \
    \    break;\n                }\n            }\n            else if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                if (lastChar >= 'a' && lastChar\
    \ <= 'z') {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5iffncqn.java:53: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5iffncqn.java:54:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5iffncqn.java:55: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5iffncqn.java:56: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5iffncqn.java:57: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5iffncqn.java:58: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key != null &&\
    \ value != null) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphb9r0i69.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphb9r0i69.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphb9r0i69.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphb9r0i69.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphb9r0i69.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphb9r0i69.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllUpperCase = false;\n\
    \        for (String key : dict) {\n            isAllStrings = isAllStrings ||\
    \ key.isEmpty();\n            isAllUpperCase = isAllUpperCase || key.toUpperCase().equals(key);\n\
    \        }\n        return isAllStrings && isAllUpperCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp122ae4p9.java:26: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp122ae4p9.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp122ae4p9.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp122ae4p9.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp122ae4p9.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp122ae4p9.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp122ae4p9.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty() || key.isEmpty()) {\n                return false;\n\
    \            }\n            if (key.isEmpty()) {\n                key = value.toLowerCase();\n\
    \            } else {\n                key = value.toUpperCase();\n          \
    \  }\n            if (!value.equals(key)) {\n                result = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphhdue5kq.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphhdue5kq.java:47:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphhdue5kq.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphhdue5kq.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphhdue5kq.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphhdue5kq.java:51: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0v_mhfm2.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp0v_mhfm2.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp0v_mhfm2.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0v_mhfm2.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0v_mhfm2.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0v_mhfm2.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0v_mhfm2.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0v_mhfm2.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawvwa57_.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpawvwa57_.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpawvwa57_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isUpperCase =\
    \ Character.isUpperCase(key.charAt(0));\n            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n\
    \            boolean isNumber = Character.isDigit(key.charAt(0));\n          \
    \  boolean isAlpha = Character.isAlphabetic(key.charAt(0));\n            boolean\
    \ isString = !isNumber && !isAlpha && !isUpperCase && !isLowerCase;\n        \
    \    boolean isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = isString || isNumber;\n            boolean\
    \ isStringOrNumber = isString || isNumber;\n            boolean isStringOrNumber\
    \ = isString || isNumber;\n            boolean isStringOrNumber = isString ||\
    \ isNumber;\n            boolean isStringOrNumber = isString || isNumber;\n  \
    \          boolean isStringOrNumber = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ejzccv_.java:67: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp2ejzccv_.java:68: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp2ejzccv_.java:68: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp2ejzccv_.java:68:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp2ejzccv_.java:68: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp2ejzccv_.java:68:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2ejzccv_.java:78: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean allLowercase = true;\n        boolean allUppercase\
    \ = true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                allLowercase = false;\n\
    \            }\n            if (value.length() > 2) {\n                allUppercase\
    \ = false;\n            }\n        }\n        return allLowercase && allUppercase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gayhdec.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5gayhdec.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5gayhdec.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5gayhdec.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5gayhdec.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5gayhdec.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if(!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnm3s585.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppnm3s585.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppnm3s585.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n                if(!key.toUpperCase().equals(value.toUpperCase())) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyc6qfdd.java:41)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(value.toLowerCase().equals(value.toUpperCase())) {\n     \
    \               result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5tzg6_m3.java:38)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isEmpty() && !key.equalsIgnoreCase(key.trim())) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyip_22et.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = false;\n         \
    \       break;\n            }\n            if (key.isEmpty()) {\n            \
    \    result = false;\n                break;\n            }\n            if (key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2zbzcdf.java:48)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphuel4fj7.java:37)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = value.toLowerCase();\n\
    \            if (lowerCase.equals(upperCase)) {\n                continue;\n \
    \           }\n            result = false;\n            break;\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpco8svqwk.java:43)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.size() > 0) {\n            for (String key : keys) {\n     \
    \           String value = dict.get(key);\n                if (value != null &&\
    \ !value.isEmpty()) {\n                    result = checkCase(key);\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1aza3_hb.java:30: error: cannot find symbol\n                 \
    \   result = checkCase(key);\n                             ^\n  symbol:   method\
    \ checkCase(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isLowerCase());\n        boolean allStringsUp = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n        return allStrings && allStringsUp;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_q9vpg_.java:25: error: cannot find symbol\n        boolean allStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                          ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmp8_q9vpg_.java:26:\
    \ error: cannot find symbol\n        boolean allStringsUp = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                               ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (!(key instanceof String)) {\n                result = false;\n\
    \                break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            if (value.length() == 1) {\n \
    \               char c = value.charAt(0);\n                if (c >= 'a' && c <=\
    \ 'z') {\n                    result = true;\n                    break;\n   \
    \             }\n                if (c >= 'A' && c <= 'Z') {\n               \
    \     result = true;\n                    break;\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6m7ahsrh.java:50)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1zywk07.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isUpperCase()) {\n                if(value.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                if(!value.isLowerCase()) {\n                    result\
    \ = false;\n                    break;\n                }\n            } else\
    \ if(!key.isEmpty() && key.isLowerCase()) {\n                if(value.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                if(!value.isUpperCase()) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3r6kb201.java:28: error: cannot find symbol\n            if(!key.isEmpty()\
    \ && key.isUpperCase()) {\n                                    ^\n  symbol:  \
    \ method isUpperCase()\n  location: variable key of type String\n/tmp/tmp3r6kb201.java:33:\
    \ error: cannot find symbol\n                if(!value.isLowerCase()) {\n    \
    \                     ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ value of type String\n/tmp/tmp3r6kb201.java:37: error: cannot find symbol\n\
    \            } else if(!key.isEmpty() && key.isLowerCase()) {\n              \
    \                             ^\n  symbol:   method isLowerCase()\n  location:\
    \ variable key of type String\n/tmp/tmp3r6kb201.java:42: error: cannot find symbol\n\
    \                if(!value.isUpperCase()) {\n                         ^\n  symbol:\
    \   method isUpperCase()\n  location: variable value of type String\n4 errors\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isLowerCase =\
    \ key.toLowerCase().equals(value);\n            boolean isUpperCase = key.toUpperCase().equals(value);\n\
    \            result = result && isLowerCase || isUpperCase;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44ggdzhv.java:34)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (key.isEmpty()) {\n                result = false;\n         \
    \       break;\n            }\n            if (value.isEmpty()) {\n          \
    \      result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || value.isEmpty()) {\n                result = false;\n    \
    \            break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || value.isEmpty()) {\n                result = false;\n    \
    \            break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || value.isEmpty()) {\n                result = false;\n    \
    \            break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || value.isEmpty()) {\n                result = false;\n    \
    \            break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key.isEmpty() || value.isEmpty()) {\n                result = false;\n    \
    \            break;\n            }\n            if (key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.isEmpty() || value.isEmpty()) {\n        \
    \        result = false;\n                break;\n            }\n            if\
    \ (key\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgug_3ik0.java:139: error: ')' expected\n            if (key\n \
    \                  ^\n/tmp/tmpgug_3ik0.java:140: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpgug_3ik0.java:141: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) continue;\n            allLowerCase &= key.isLowerCase();\n\
    \            allUpperCase &= key.isUpperCase();\n        }\n        return allLowerCase\
    \ && allUpperCase;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq58g5sn3.java:31: error: cannot find symbol\n            allLowerCase\
    \ &= key.isLowerCase();\n                               ^\n  symbol:   method\
    \ isLowerCase()\n  location: variable key of type String\n/tmp/tmpq58g5sn3.java:32:\
    \ error: cannot find symbol\n            allUpperCase &= key.isUpperCase();\n\
    \                               ^\n  symbol:   method isUpperCase()\n  location:\
    \ variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = true;\n        for(String key : dict.keySet())\
    \ {\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n            \
    \    isAllStrings = false;\n                break;\n            }\n        }\n\
    \        return isAllStrings;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsjyrytv.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpdsjyrytv.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean allLowerCase = true;\n\
    \        boolean allUpperCase = true;\n        for (String key : keys) {\n   \
    \         String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           allLowerCase = false;\n                allUpperCase = false;\n   \
    \         }\n            else {\n                allLowerCase = true;\n      \
    \          allUpperCase = true;\n            }\n        }\n        return allLowerCase\
    \ && allUpperCase;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04wifrbh.java:46)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.isEmpty()) {\n\
    \            return true;\n        }\n        boolean allLowercase = true;\n \
    \       boolean allUppercase = true;\n        for (String key : keys) {\n    \
    \        String value = dict.get(key);\n            if (value.isEmpty()) {\n \
    \               return false;\n            }\n            char firstChar = value.charAt(0);\n\
    \            if (firstChar >= 'A' && firstChar <= 'Z') {\n                allUppercase\
    \ = false;\n            } else if (firstChar >= 'a' && firstChar <= 'z') {\n \
    \               allLowercase = false;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return allLowercase && allUppercase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1898fei1.java:47)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return result;\n\
    \        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                if (value.toLowerCase().equals(value)) {\n              \
    \      result = true;\n                } else {\n                    result =\
    \ false;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91zmq1pu.java:41)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCase = true;\n        if (dict.size() > 0) {\n        \
    \    Set<String> keys = dict.keySet();\n            isCase = keys.stream().allMatch(key\
    \ -> key.toLowerCase().equals(key));\n        }\n        return isCase;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpegdozruq.java:34)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        if (dict.isEmpty()) {\n     \
    \       return isDictCase;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey)\
    \ && !dict.containsKey(upperCaseKey)) {\n                isDictCase = false;\n\
    \                break;\n            }\n        }\n        return isDictCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjq41y00h.java:41)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp184q6dzg.java:44)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if(dict.containsKey(lowerCase))\
    \ {\n                isDictCase = false;\n                break;\n           \
    \ }\n            if(dict.containsKey(upperCase)) {\n                isDictCase\
    \ = false;\n                break;\n            }\n        }\n        return isDictCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq3rz79jt.java:41)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllUpperCase = false;\n\
    \        for(String key : dict.keySet()) {\n            isAllStrings = isAllStrings\
    \ || key.equalsIgnoreCase(dict.get(key));\n            isAllUpperCase = isAllUpperCase\
    \ || key.equalsIgnoreCase(dict.get(key).toUpperCase());\n        }\n        return\
    \ isAllStrings && isAllUpperCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltluj7zl.java:33)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fwp5wt.java:28: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmps1fwp5wt.java:28: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.toLowerCase().equals(value.toLowerCase())) {\n           \
    \     continue;\n            }\n            if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoc4joww.java:43)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.size() != 0) {\n            for (String key : keys) {\n    \
    \            String value = dict.get(key);\n                if (value.isEmpty())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                try {\n                    value = value.trim().toLowerCase();\n\
    \                } catch (Exception e) {\n                    result = false;\n\
    \                    break;\n                }\n                if (value.equals(key))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                try {\n                    value = value.trim().toUpperCase();\n\
    \                } catch (Exception e) {\n                    result = false;\n\
    \                    break;\n                }\n                if (value.equals(key))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuglvrbc0.java:59)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa25wk26q.java:43)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b7gliw_.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp2b7gliw_.java:26:\
    \ error: cannot find symbol\n            if(!key.isLowerCase() && !key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmp2b7gliw_.java:26: error: cannot find symbol\n  \
    \          if(!key.isLowerCase() && !key.isUpperCase()) {\n                  \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isStringInLowerCase\
    \ = key.toLowerCase().equals(value);\n            boolean isStringInUpperCase\
    \ = key.toUpperCase().equals(value);\n            result = result && (isStringInLowerCase\
    \ || isStringInUpperCase);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoq9246yv.java:34)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllUpperCase = false;\n\
    \        for(String key : dict.keySet()) {\n            isAllStrings = isAllStrings\
    \ || key.isEmpty();\n            isAllUpperCase = isAllUpperCase || key.toUpperCase().equals(key);\n\
    \        }\n        return isAllStrings && isAllUpperCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn9duu2pp.java:33)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.isEmpty()) return false;\n        boolean allLowerCase = true;\n\
    \        boolean allUpperCase = true;\n        for (String key : keys) {\n   \
    \         String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           allLowerCase = false;\n                allUpperCase = false;\n   \
    \             break;\n            }\n        }\n        return allLowerCase &&\
    \ allUpperCase;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9aw8a7hp.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            } else {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr9291y7.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(key) || !key.isEmpty()\
    \ && key.toUpperCase().equals(key)) {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpmwujwd.java:35)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        boolean upperCase = false;\n        boolean lowerCase = false;\n    \
    \    for (String key : keys) {\n            String value = dict.get(key);\n  \
    \          if (value.length() > 0) {\n                upperCase = upperCase ||\
    \ value.toUpperCase().equals(value);\n                lowerCase = lowerCase ||\
    \ value.toLowerCase().equals(value);\n            }\n        }\n        result\
    \ = upperCase && lowerCase;\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42vlquyb.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isAllStrings = keys.stream().allMatch(key -> key.isEmpty() ||\
    \ key.isUpperCase());\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isLowerCase());\n        return isAllStrings || isAllStringsUpper;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6z28o684.java:26: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n/tmp/tmp6z28o684.java:27:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isLowerCase());\n                                  \
    \                                                    ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() != dict.size())\
    \ {\n            return false;\n        }\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key != null && value\
    \ != null && !key.isEmpty() && !value.isEmpty()) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    return true;\n                }\n                if (key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidnm1qx4.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1zywk07.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if(!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnm3s585.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppnm3s585.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppnm3s585.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppnm3s585.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key != null &&\
    \ value != null && !key.isEmpty() && !value.isEmpty()) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp19yqyvbp.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = true;\n\
    \        boolean allStringsUpper = true;\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                allStrings = allStrings && value.toLowerCase().equals(key);\n\
    \                allStringsUpper = allStringsUpper && value.toUpperCase().equals(key);\n\
    \            }\n        }\n        return allStrings && allStringsUpper;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjh07itw9.java:37)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllStringsUpper\
    \ = false;\n        for(String key : dict.keySet()) {\n            isAllStrings\
    \ = isAllStrings || key.isLowerCase();\n            isAllStringsUpper = isAllStringsUpper\
    \ || key.isUpperCase();\n        }\n        return isAllStrings && isAllStringsUpper;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2uddlw9.java:27: error: cannot find symbol\n            isAllStrings\
    \ = isAllStrings || key.isLowerCase();\n                                     \
    \         ^\n  symbol:   method isLowerCase()\n  location: variable key of type\
    \ String\n/tmp/tmpt2uddlw9.java:28: error: cannot find symbol\n            isAllStringsUpper\
    \ = isAllStringsUpper || key.isUpperCase();\n                                \
    \                        ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                char firstChar = value.charAt(0);\n                if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                    result = true;\n        \
    \        } else if (firstChar >= 'a' && firstChar <= 'z') {\n                \
    \    result = true;\n                } else {\n                    result = false;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8ysb5e5.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_5gfruk.java:37)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3pohb5p.java:39)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String lowerCase = key.toLowerCase();\n         \
    \   String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptub8k6md.java:35)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty() || key.isEmpty()) {\n                return false;\n\
    \            }\n            if (key.isEmpty()) {\n                key = value.toLowerCase();\n\
    \            } else {\n                key = value.toUpperCase();\n          \
    \  }\n            if (!key.equals(value)) {\n                result = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qt4i7wc.java:46)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fwp5wt.java:28: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmps1fwp5wt.java:28: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllKeysStringInLowerCase = true;\n        boolean isAllKeysStringInUpperCase\
    \ = true;\n        for(String key : dict) {\n            if(!key.isEmpty()) {\n\
    \                isAllKeysStringInLowerCase = isAllKeysStringInLowerCase && key.toLowerCase().equals(key);\n\
    \                isAllKeysStringInUpperCase = isAllKeysStringInUpperCase && key.toUpperCase().equals(key);\n\
    \            }\n        }\n        return isAllKeysStringInLowerCase && isAllKeysStringInUpperCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnia9p41r.java:26: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        for(String key : dict.keySet())\
    \ {\n            if(key.isEmpty()) {\n                isDictCase = false;\n  \
    \              break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if(lowerCaseKey.equals(upperCaseKey))\
    \ {\n                continue;\n            }\n            isDictCase = false;\n\
    \            break;\n        }\n        return isDictCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyzx2x6f3.java:41)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allLowercase =\
    \ true;\n        boolean allUppercase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                return false;\n            }\n            char firstChar\
    \ = value.charAt(0);\n            char lastChar = value.charAt(value.length()\
    \ - 1);\n            if (firstChar >= 'a' && firstChar <= 'z') {\n           \
    \     allLowercase = false;\n            }\n            if (lastChar >= 'A' &&\
    \ lastChar <= 'Z') {\n                allUppercase = false;\n            }\n \
    \       }\n        return allLowercase && allUppercase;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbs41d92e.java:44)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n                if(!key.toUpperCase().equals(value.toUpperCase())) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyc6qfdd.java:41)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String lowerCaseKey = key.toLowerCase();\n      \
    \      String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey)\
    \ && !dict.containsKey(upperCaseKey)) return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzk7qwx82.java:36)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (key != null && value !=\
    \ null && !key.isEmpty() && !value.isEmpty()) {\n                boolean isLowerCase\
    \ = key.toLowerCase().equals(value);\n                boolean isUpperCase = key.toUpperCase().equals(value);\n\
    \                result = result && (isLowerCase || isUpperCase);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5q65zd5.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            if (key.equalsIgnoreCase(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27x1cwzq.java:35)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            if (dict.get(key).isEmpty()) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        String lowerCase = dict.get(key).toLowerCase();\n            String upperCase\
    \ = dict.get(key).toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ant62p4.java:45)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllUpper = false;\n\
    \        boolean isAllLower = false;\n        for (String key : keys) {\n    \
    \        if (key.isEmpty()) continue;\n            if (key.isUpperCase()) {\n\
    \                isAllUpper = true;\n            } else {\n                isAllLower\
    \ = true;\n            }\n        }\n        return isAllUpper && isAllLower;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq_h7m6_.java:29: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n1 error\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            } else {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr9291y7.java:42)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                allLowerCase = false;\n                allUpperCase = false;\n\
    \                break;\n            }\n        }\n        return allLowerCase\
    \ && allUpperCase;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ut2jz7d.java:41)\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            } else\
    \ if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase())) {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5t3ms10.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu5t3ms10.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu5t3ms10.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawvwa57_.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpawvwa57_.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpawvwa57_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                if (value.toLowerCase().equals(value.toUpperCase())) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49ciumy_.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     boolean isAllStrings = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n\
    \        boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty()\
    \ || key.isUpperCase());\n        result = isAllStrings || isAllStringsUpper;\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz4_mirpi.java:29: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpz4_mirpi.java:30:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                    ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.isUpperCase()) {\n             \
    \       if(!value.isEmpty() && value.isLowerCase()) {\n                      \
    \  result = true;\n                    }\n                    else {\n       \
    \                 result = false;\n                    }\n                }\n\
    \                else {\n                    if(!value.isEmpty() && value.isUpperCase())\
    \ {\n                        result = true;\n                    }\n         \
    \           else {\n                        result = false;\n                \
    \    }\n                }\n            }\n            else {\n               \
    \ result = false;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ol68j9h.java:28: error: cannot find symbol\n                if(!key.isEmpty()\
    \ && key.isUpperCase()) {\n                                        ^\n  symbol:\
    \   method isUpperCase()\n  location: variable key of type String\n/tmp/tmp9ol68j9h.java:29:\
    \ error: cannot find symbol\n                    if(!value.isEmpty() && value.isLowerCase())\
    \ {\n                                                ^\n  symbol:   method isLowerCase()\n\
    \  location: variable value of type String\n/tmp/tmp9ol68j9h.java:37: error: cannot\
    \ find symbol\n                    if(!value.isEmpty() && value.isUpperCase())\
    \ {\n                                                ^\n  symbol:   method isUpperCase()\n\
    \  location: variable value of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            if (key.isUpperCase()) continue;\n            if (key.isLowerCase())\
    \ continue;\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5f47lzq.java:28: error: cannot find symbol\n            if (key.isUpperCase())\
    \ continue;\n                   ^\n  symbol:   method isUpperCase()\n  location:\
    \ variable key of type String\n/tmp/tmpz5f47lzq.java:29: error: cannot find symbol\n\
    \            if (key.isLowerCase()) continue;\n                   ^\n  symbol:\
    \   method isLowerCase()\n  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphuel4fj7.java:37)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3pohb5p.java:39)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b7gliw_.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp2b7gliw_.java:26:\
    \ error: cannot find symbol\n            if(!key.isLowerCase() && !key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmp2b7gliw_.java:26: error: cannot find symbol\n  \
    \          if(!key.isLowerCase() && !key.isUpperCase()) {\n                  \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b7gliw_.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp2b7gliw_.java:26:\
    \ error: cannot find symbol\n            if(!key.isLowerCase() && !key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmp2b7gliw_.java:26: error: cannot find symbol\n  \
    \          if(!key.isLowerCase() && !key.isUpperCase()) {\n                  \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.size() > 0) {\n            for (String key : keys) {\n     \
    \           String lowerCaseKey = key.toLowerCase();\n                String upperCaseKey\
    \ = key.toUpperCase();\n                if (!dict.containsKey(lowerCaseKey)) {\n\
    \                    result = false;\n                    break;\n           \
    \     } else if (!dict.containsKey(upperCaseKey)) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeia_s4qy.java:42)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fwp5wt.java:28: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmps1fwp5wt.java:28: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return false;\n\
    \        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            boolean isUpper = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLower = Character.isLowerCase(key.charAt(0));\n       \
    \     if (isUpper != isLower) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6b3pr8z.java:37)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            } else if(!key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnla2jbti.java:40)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return false;\n\
    \        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            if (!(key instanceof String)) {\n                result = false;\n\
    \                break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperCaseKey)) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3hu7r8h.java:46)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      String value = dict.get(key);\n            if(key.equalsIgnoreCase(value))\
    \ {\n                continue;\n            }\n            if(!key.equalsIgnoreCase(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_o8la8uv.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawvwa57_.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpawvwa57_.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpawvwa57_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fwp5wt.java:28: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmps1fwp5wt.java:28: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean isAllUpper = true;\n        boolean isAllLower\
    \ = true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                isAllUpper\
    \ = isAllUpper && value.isUpperCase();\n                isAllLower = isAllLower\
    \ && value.isLowerCase();\n            }\n        }\n        return isAllUpper\
    \ && isAllLower;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdphlum9s.java:31: error: cannot find symbol\n                isAllUpper\
    \ = isAllUpper && value.isUpperCase();\n                                     \
    \           ^\n  symbol:   method isUpperCase()\n  location: variable value of\
    \ type String\n/tmp/tmpdphlum9s.java:32: error: cannot find symbol\n         \
    \       isAllLower = isAllLower && value.isLowerCase();\n                    \
    \                            ^\n  symbol:   method isLowerCase()\n  location:\
    \ variable value of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllStringsUpper\
    \ = false;\n        for(String key : dict.keySet()) {\n            String value\
    \ = dict.get(key);\n            isAllStrings = isAllStrings || value.isEmpty();\n\
    \            isAllStringsUpper = isAllStringsUpper || value.toUpperCase().isEmpty();\n\
    \        }\n        return isAllStrings && isAllStringsUpper;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkso4u4p.java:34)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawvwa57_.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpawvwa57_.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpawvwa57_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     boolean upperCase = false;\n        boolean lowerCase = false;\n       \
    \ for (String key : keys) {\n            String value = dict.get(key);\n     \
    \       if (value.isEmpty()) {\n                return result;\n            }\n\
    \            if (Character.isUpperCase(value.charAt(0))) {\n                upperCase\
    \ = true;\n            } else {\n                lowerCase = true;\n         \
    \   }\n        }\n        result = upperCase && lowerCase;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5t33iimc.java:46)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return result;\n\
    \        Set<String> keys = dict.keySet();\n        boolean upperCase = true;\n\
    \        boolean lowerCase = true;\n        for (String key : keys) {\n      \
    \      String value = dict.get(key);\n            if (value.isEmpty()) continue;\n\
    \            upperCase = upperCase && value.toUpperCase().equals(value);\n   \
    \         lowerCase = lowerCase && value.toLowerCase().equals(value);\n      \
    \  }\n        result = upperCase && lowerCase;\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelnyy8sj.java:39)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase\
    \ != upperCase) {\n                allLowerCase = false;\n            }\n    \
    \    }\n        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase\
    \ == upperCase) {\n                allUpperCase = false;\n            }\n    \
    \    }\n        return allLowerCase && allUpperCase;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2rjwn9h.java:45)\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5erzko8q.java:40)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8n9hvaj.java:41)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ub6iym5.java:41)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fwp5wt.java:28: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmps1fwp5wt.java:28: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value != null) {\n    \
    \            if (value.length() > 0 && value.charAt(0) == value.charAt(value.length()\
    \ - 1)) {\n                    result = false;\n                }\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsvu74k9_.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (value.toLowerCase().equals(value))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpemk7t4b3.java:40)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8n9hvaj.java:41)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllStringsUpper\
    \ = false;\n        for(String key : dict.keySet()) {\n            String value\
    \ = dict.get(key);\n            isAllStrings = isAllStrings || value.isEmpty();\n\
    \            isAllStringsUpper = isAllStringsUpper || value.toUpperCase().isEmpty();\n\
    \        }\n        return isAllStrings || isAllStringsUpper;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5kaau12.java:34)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllUpperCase = false;\n\
    \        for(String key : dict.keySet()) {\n            if(key.isEmpty()) {\n\
    \                return false;\n            }\n            String value = dict.get(key);\n\
    \            isAllStrings = isAllStrings || value.isEmpty();\n            isAllUpperCase\
    \ = isAllUpperCase || value.toUpperCase().equals(value);\n        }\n        return\
    \ isAllStrings && isAllUpperCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2atz8ws2.java:37)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n            if(!key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3is6_5p.java:42)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!dict.containsKey(lowerCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperCase)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7v92oghd.java:44)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keySet = dict.keySet();\n\
    \        for (String key : keySet) {\n            if (!(key instanceof String))\
    \ {\n                return false;\n            }\n            String lowerCaseKey\
    \ = key.toLowerCase();\n            String upperCaseKey = key.toUpperCase();\n\
    \            if (lowerCaseKey.equals(upperCaseKey)) {\n                continue;\n\
    \            }\n            return false;\n        }\n        return true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73it6jrr.java:40)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            if (key.toLowerCase().equals(key)) return true;\n            if (key.toUpperCase().equals(key))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv78vc2ld.java:35)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n            }\n            if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                result\
    \ = false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8w673a20.java:38)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value == null || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            String lowerCaseValue = value.toLowerCase();\n            String\
    \ upperCaseValue = value.toUpperCase();\n            if (lowerCaseValue.equals(upperCaseValue))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptlk616xt.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = true;\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\")) {\n\
    \                isAllStrings = false;\n            }\n        }\n        return\
    \ isAllStrings;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn0wpc1a.java:33)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllStringsUpper\
    \ = false;\n        for (String key : dict) {\n            if (key.isEmpty())\
    \ {\n                return false;\n            }\n            isAllStrings =\
    \ isAllStrings || key.isLowerCase();\n            isAllStringsUpper = isAllStringsUpper\
    \ || key.isUpperCase();\n        }\n        return isAllStrings || isAllStringsUpper;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fegkzt2.java:26: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp9fegkzt2.java:30:\
    \ error: cannot find symbol\n            isAllStrings = isAllStrings || key.isLowerCase();\n\
    \                                              ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp9fegkzt2.java:31: error: cannot\
    \ find symbol\n            isAllStringsUpper = isAllStringsUpper || key.isUpperCase();\n\
    \                                                        ^\n  symbol:   method\
    \ isUpperCase()\n  location: variable key of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fx63nmi.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        if (dict == null || dict.size()\
    \ == 0) {\n            return isDictCase;\n        }\n        Set<String> keys\
    \ = dict.keySet();\n        for (String key : keys) {\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (!lowerCase.equals(upperCase)) {\n                isDictCase = false;\n\
    \                break;\n            }\n        }\n        return isDictCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlkplopr.java:40)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty())\
    \ continue;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() || value.isEmpty()) return false;\n            if (key.isEmpty()\
    \ || value.isEmpty()) return false;\n            if (key.isEmpty() || value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || value.isEmpty()) return false;\n\
    \            if (key.isEmpty() || value.isEmpty()) return false;\n           \
    \ if (key.isEmpty() \n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ovl9e_n.java:68: error: ')' expected\n            if (key.isEmpty()\
    \ \n                             ^\n/tmp/tmp2ovl9e_n.java:69: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmp2ovl9e_n.java:70: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659799937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isStringInLowerCase\
    \ = key.toLowerCase().equals(value);\n            boolean isStringInUpperCase\
    \ = key.toUpperCase().equals(value);\n            result = result && (isStringInLowerCase\
    \ || isStringInUpperCase);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoq9246yv.java:34)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value == null || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            String lowerCase = value.toLowerCase();\n            String upperCase\
    \ = value.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n   \
    \             continue;\n            }\n            result = false;\n        \
    \    break;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1xk87tx4.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     boolean upperCase = false;\n        boolean lowerCase = false;\n       \
    \ for (String key : keys) {\n            String value = dict.get(key);\n     \
    \       if (value.isEmpty()) {\n                return result;\n            }\n\
    \            upperCase = upperCase || value.toUpperCase().equals(value);\n   \
    \         lowerCase = lowerCase || value.toLowerCase().equals(value);\n      \
    \  }\n        result = upperCase && lowerCase;\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyxc2677d.java:43)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4yonahxf.java:40)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n                if(!key.toUpperCase().equals(value.toUpperCase())) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyc6qfdd.java:41)\n"
  stdout: ''
  timestamp: 1659799934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String lowerCase = key.toLowerCase();\n         \
    \   String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptub8k6md.java:35)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char firstChar =\
    \ key.charAt(0);\n            char lastChar = key.charAt(key.length() - 1);\n\
    \            if (firstChar >= 'A' && firstChar <= 'Z') {\n                if (lastChar\
    \ >= 'A' && lastChar <= 'Z') {\n                    result = true;\n         \
    \           break;\n                }\n            } else if (firstChar >= 'a'\
    \ && firstChar <= 'z') {\n                if (lastChar >= 'a' && lastChar <= 'z')\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbnruds6o.java:50)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.get(key).equals(lowerKey)\
    \ || dict.get(key).equals(upperKey)) {\n                continue;\n          \
    \  }\n            result = false;\n            break;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8wvazwu.java:41)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8fv8qb8.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpq8fv8qb8.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3pohb5p.java:39)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isUpperCase = true;\n        boolean isLowerCase = true;\n  \
    \      for (String key : keys) {\n            isUpperCase = isUpperCase && key.toUpperCase().equals(key);\n\
    \            isLowerCase = isLowerCase && key.toLowerCase().equals(key);\n   \
    \     }\n        return isUpperCase && isLowerCase;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf52rml7d.java:35)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.isEmpty() && !value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(key.isEmpty()\
    \ && value.isEmpty()) {\n                result = true;\n                break;\n\
    \            }\n            if(key.isEmpty() && !value.isEmpty()) {\n        \
    \        result = true;\n                break;\n            }\n            if(key.equalsIgnoreCase(value))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpviaxj9qh.java:52)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n       \
    \ return isAllStrings;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ugrndts.java:25: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = true;\n        for(String key : dict.keySet())\
    \ {\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n            \
    \    isAllStrings = false;\n                break;\n            }\n        }\n\
    \        return isAllStrings;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsjyrytv.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpdsjyrytv.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxeb158ub.java:40)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8n9hvaj.java:41)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(!value.toLowerCase().equals(value.toUpperCase())) {\n    \
    \                result = false;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpviapqebm.java:37)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isAllStrings = keys.stream().allMatch(key -> key.isEmpty() ||\
    \ key.isLowerCase());\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n        return isAllStrings || isAllStringsUpper;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplt5ixno9.java:26: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmplt5ixno9.java:27:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                    ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (!lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb28w9tem.java:40)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n   \
    \         if (isUpperCase) {\n                if (!value.isEmpty() && !value.equals(key.toLowerCase()))\
    \ {\n                    result = false;\n                }\n            } else\
    \ {\n                if (!value.isEmpty() && !value.equals(key.toUpperCase()))\
    \ {\n                    result = false;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvyd7o49.java:49)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if (key.isEmpty()) {\n   \
    \             result = true;\n                break;\n            }\n        \
    \    if (key.isEmpty()) {\n                result = true;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1eptgw5x.java:45)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       boolean isAllUpperCase = true;\n        boolean isAllLowerCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isAllUpperCase = false;\n\
    \                isAllLowerCase = false;\n                break;\n           \
    \ }\n            if (value.length() == 1) {\n                isAllUpperCase =\
    \ true;\n                isAllLowerCase = true;\n                break;\n    \
    \        }\n        }\n        if (isAllUpperCase) {\n            for (String\
    \ key : keys) {\n                String value = dict.get(key);\n             \
    \   if (value.length() > 1) {\n                    result = false;\n         \
    \           break;\n                }\n                if (value.length() == 1)\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        if (isAllLowerCase) {\n        \
    \    for (String key : keys) {\n                String value = dict.get(key);\n\
    \                if (value.length() > 1) {\n                    result = false;\n\
    \                    break;\n                }\n                if (value.length()\
    \ == 1) {\n                    result = true;\n                    break;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3mg4g7as.java:74)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ {\n                return false;\n            }\n            String value =\
    \ dict.get(key);\n            if (value.length() > 1) {\n                return\
    \ false;\n            }\n            char firstChar = value.charAt(0);\n     \
    \       if (firstChar >= 'a' && firstChar <= 'z') {\n                return true;\n\
    \            }\n            if (firstChar >= 'A' && firstChar <= 'Z') {\n    \
    \            return true;\n            }\n        }\n        return false;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ihsz2pn.java:45)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if(dict.containsKey(lowerCase)\
    \ && dict.containsKey(upperCase)) {\n                result = false;\n       \
    \         break;\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jagekz0.java:38)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyo7ofez.java:31: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmppyo7ofez.java:31: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() && !value.isEmpty()) {\n     \
    \           result = false;\n                break;\n            }\n         \
    \   if(!key.isEmpty() && key.isEmpty() && value.isEmpty()) {\n               \
    \ result = true;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.isEmpty() && !value.isEmpty()) {\n                result = true;\n  \
    \              break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph1s_mwm0.java:45)\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperCaseKey)) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphd2deapi.java:44)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3pohb5p.java:39)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isEmpty() && key.toLowerCase().equals(key)) {\n               \
    \ result = false;\n            }\n            if(!key.isEmpty() && key.toUpperCase().equals(key))\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3b7o17ec.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                return false;\n         \
    \   }\n            allStrings = allStrings && value.toLowerCase().equals(value);\n\
    \            allStrings = allStrings && value.toUpperCase().equals(value);\n \
    \       }\n        return allStrings;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprg7m78m_.java:37)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                try {\n                    Integer.parseInt(value);\n   \
    \             } catch (NumberFormatException nfe) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpno0fev63.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.toLowerCase().equals(value.toLowerCase())) {\n           \
    \     continue;\n            }\n            if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoc4joww.java:43)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawvwa57_.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpawvwa57_.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpawvwa57_.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpawvwa57_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllStringsUpper\
    \ = false;\n        for(String key : dict.keySet()) {\n            isAllStrings\
    \ = isAllStrings || key.isEmpty();\n            isAllStringsUpper = isAllStringsUpper\
    \ || key.toUpperCase().equals(key);\n        }\n        return isAllStrings ||\
    \ isAllStringsUpper;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5psfxp57.java:33)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCaseSensitive = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                return false;\n         \
    \   }\n            isCaseSensitive = isCaseSensitive && (value.toLowerCase().equals(value.toUpperCase()));\n\
    \        }\n        return isCaseSensitive;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv830ijvv.java:36)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerKey)) return false;\n\
    \            if (!dict.containsKey(upperKey)) return false;\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fudjjyw.java:36)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n      \
    \  Set<String> lowerCaseKeys = keys.stream().filter(key -> key.isEmpty()).map(key\
    \ -> key.toLowerCase()).collect(Collectors.toSet());\n        Set<String> upperCaseKeys\
    \ = keys.stream().filter(key -> key.isEmpty()).map(key -> key.toUpperCase()).collect(Collectors.toSet());\n\
    \        return lowerCaseKeys.equals(upperCaseKeys);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpev_w9xuw.java:34)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isLowerCase())) return true;\n\
    \        if (keys.stream().allMatch(key -> key.isUpperCase())) return true;\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfrh2oh9y.java:26: error: cannot find symbol\n        if (keys.stream().allMatch(key\
    \ -> key.isLowerCase())) return true;\n                                      \
    \       ^\n  symbol:   method isLowerCase()\n  location: variable key of type\
    \ String\n/tmp/tmpfrh2oh9y.java:27: error: cannot find symbol\n        if (keys.stream().allMatch(key\
    \ -> key.isUpperCase())) return true;\n                                      \
    \       ^\n  symbol:   method isUpperCase()\n  location: variable key of type\
    \ String\n2 errors\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n   \
    \         if (isUpperCase) {\n                if (!isLowerCase) {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                if (!isLowerCase) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkswqhu0x.java:52)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfv64b1e1.java:44)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllString = true;\n        for (String key : dict) {\n\
    \            if (key.isEmpty()) {\n                return false;\n           \
    \ }\n            if (key.toLowerCase().equals(key)) {\n                isAllString\
    \ = false;\n            }\n        }\n        return isAllString;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hfschgb.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            try {\n                String lowerCase\
    \ = key.toLowerCase();\n                String upperCase = key.toUpperCase();\n\
    \                if (lowerCase.equals(upperCase)) {\n                    result\
    \ = true;\n                    break;\n                }\n            } catch\
    \ (Exception e) {\n                result = false;\n                break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmdg3azif.java:51)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            if (key.toLowerCase().equals(key)) return true;\n            if (key.toUpperCase().equals(key))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv78vc2ld.java:35)\n"
  stdout: ''
  timestamp: 1659799938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isEmpty() ? false : key.toLowerCase().equals(key));\n\
    \        return allStrings || keys.stream().allMatch(key -> key.isEmpty() || key.isEmpty()\
    \ ? false : key.toUpperCase().equals(key));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56y05teo.java:31)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = true;\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ {\n                allStrings = false;\n                break;\n           \
    \ }\n        }\n        if (allStrings) {\n            return true;\n        }\n\
    \        allStrings = true;\n        for (String key : keys) {\n            if\
    \ (!(key instanceof String)) {\n                allStrings = false;\n        \
    \        break;\n            }\n        }\n        return allStrings;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7dmb915.java:46)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b7gliw_.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n/tmp/tmp2b7gliw_.java:26:\
    \ error: cannot find symbol\n            if(!key.isLowerCase() && !key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmp2b7gliw_.java:26: error: cannot find symbol\n  \
    \          if(!key.isLowerCase() && !key.isUpperCase()) {\n                  \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n3 errors\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            try {\n                Integer.parseInt(key);\n  \
    \              Integer.parseInt(value);\n            } catch (NumberFormatException\
    \ nfe) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9fteyg8.java:44)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (value.isEmpty()) {\n                result = false;\n        \
    \        break;\n            }\n            try {\n                Integer.parseInt(value);\n\
    \            } catch (NumberFormatException nfe) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppj_9k77q.java:45)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0b5qjii.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpo0b5qjii.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659799933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            if (key.isEmpty()) {\n        \
    \        return result;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey))\
    \ {\n                return result;\n            }\n            if (!dict.containsKey(upperCaseKey))\
    \ {\n                return result;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtdoh721.java:46)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.isEmpty()\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            try {\n                String lowerCase = key.toLowerCase();\n\
    \                String upperCase = value.toLowerCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            } catch (Exception e) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8p9bej7d.java:47)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            try {\n         \
    \       String lowerCase = key.toLowerCase();\n                String upperCase\
    \ = value.toLowerCase();\n                if (lowerCase.equals(upperCase)) {\n\
    \                    continue;\n                }\n                else {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            }\n            catch (NumberFormatException nfe) {\n      \
    \          result = false;\n                break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpytsxq6yo.java:51)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a5_lscf.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmp8a5_lscf.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8a5_lscf.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8a5_lscf.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3pohb5p.java:39)\n"
  stdout: ''
  timestamp: 1659799935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n        return allStrings;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkr4fovw.java:25: error: cannot find symbol\n        boolean allStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n     \
    \                                                                          ^\n\
    \  symbol:   method isUpperCase()\n  location: variable key of type String\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            } else\
    \ if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase())) {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5t3ms10.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpu5t3ms10.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpu5t3ms10.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpu5t3ms10.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_uhfsss.java:38)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a hash map, return true if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return false.\n\
    \    // The function should return false is the given hash map is empty.\n   \
    \ // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && value != null && !value.isEmpty())\
    \ {\n                if (key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    } else {\n                result = false;\n                break;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2vrbv2c2.java:43)\n"
  stdout: ''
  timestamp: 1659799941
