language: java
name: HumanEval_69_search
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq == 0 || freq > i) {\n                freq = i;\n\
    \                max = i;\n            }\n        }\n        return max;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvse29odb.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long maxFreq = -1;\n        for(long\
    \ i : lst) {\n            long freq = Collections.frequency(lst, i);\n       \
    \     if(freq > maxFreq) {\n                max = i;\n                maxFreq\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8cl74z_6.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for(long i :\
    \ lst) {\n            freq++;\n            if(freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        if(max > 0) {\n            for(long\
    \ i : lst) {\n                if(i == max) {\n                    return i;\n\
    \                }\n            }\n        }\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1hf390m.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(e\
    \ -> e == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gg3qrmf.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq >= i) {\n                max = i;\n           \
    \     freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5nda5lt.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (i > 0 && freq >= i) {\n                max = i;\n  \
    \              freq = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpws02kf1p.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for(long\
    \ i : lst) {\n            long freq = Collections.frequency(lst, i);\n       \
    \     if(freq > maxFreq) {\n                max = i;\n                maxFreq\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0krwxpb.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6g1cyls.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpori4iq0q.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6eubnsc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for(long\
    \ i : lst) {\n            long freq = Collections.frequency(lst, i);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxkp97k_f.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq > i) {\n                freq = i;\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b79d25m.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ maxFreq = val;\n                if (maxVal < val) maxVal = val;\n          \
    \  }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqlvdmgbv.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currFreq = -1;\n        for (long val : lst) {\n            currFreq = lst.stream().filter(v\
    \ -> v == val).count();\n            if (currFreq > maxFreq) {\n             \
    \   maxFreq = currFreq;\n                maxVal = val;\n            } else if\
    \ (currFreq == maxFreq && val > maxVal) {\n                maxFreq = currFreq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfcjch3g5.java:37)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                if(val > maxVal) {\n\
    \                    maxVal = val;\n                    maxFreq = lst.get((int)val);\n\
    \                }\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.search(tmppc68z6v4.java:27)\n\tat Problem.main(tmppc68z6v4.java:34)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6eubnsc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1 || freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx28wmw2.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbayjsqty.java:34)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currFreq = -1;\n        for (long val : lst) {\n            currFreq = lst.stream().filter(f\
    \ -> f == val).count();\n            if (currFreq > maxFreq) {\n             \
    \   maxFreq = currFreq;\n                maxVal = val;\n            } else if\
    \ (currFreq == maxFreq) {\n                if (val > maxVal) {\n             \
    \       maxFreq = currFreq;\n                    maxVal = val;\n             \
    \   }\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1itzs53o.java:39)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6g1cyls.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ max;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpukbo38y5.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq >= i) {\n                max = i;\n           \
    \     freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5nda5lt.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vutitl_.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq < i) {\n                freq = i;\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdajfnes.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for (long\
    \ i : lst) {\n            long freq = Collections.frequency(lst, i);\n       \
    \     if (freq > maxFreq) {\n                max = i;\n                maxFreq\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpooo__gsq.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for(long i\
    \ : lst) {\n            freq++;\n            if(freq > max) {\n              \
    \  max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvytbpaex.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ curVal = -1;\n        long curFreq = -1;\n        for (long val : lst) {\n \
    \           if (val > 0) {\n                if (curVal == -1) {\n            \
    \        curVal = val;\n                    curFreq = 1;\n                } else\
    \ {\n                    curFreq++;\n                    if (curFreq >= val) {\n\
    \                        curVal = val;\n                        curFreq = val;\n\
    \                    }\n                }\n            }\n            if (curVal\
    \ > maxVal) {\n                maxVal = curVal;\n                maxFreq = curFreq;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9b2uky5k.java:46)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpori4iq0q.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currFreq = -1;\n        for(long val : lst) {\n            currFreq = lst.stream().filter(i\
    \ -> i == val).count();\n            if(currFreq > maxFreq) {\n              \
    \  maxFreq = currFreq;\n                maxVal = val;\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrl9cp2q.java:34)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq == 0 || freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n            else if (freq == i) {\n\
    \                freq++;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8qi7rn_.java:36)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu1ahzrq.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1 || freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx28wmw2.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73kjmtjv.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long maxFreq = 0;\n        for (long\
    \ i : lst) {\n            if (i > max) {\n                max = i;\n         \
    \       maxFreq = Collections.frequency(lst, i);\n            }\n        }\n \
    \       if (maxFreq > 0) {\n            return max;\n        } else {\n      \
    \      return -1;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2srozq3.java:36)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for(long i\
    \ : lst) {\n            freq++;\n            if(freq > max) {\n              \
    \  max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvytbpaex.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfa3lq4nw.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (val > maxVal)\
    \ {\n                    maxVal = val;\n                    maxFreq = lst.get(lst.indexOf(val));\n\
    \                }\n            }\n        }\n        return maxFreq > maxVal\
    \ ? maxVal : -1;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_4cgcz2.java:34)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z6tyoj6.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ maxCount = 0;\n        for (long val : lst) {\n            long freq = Collections.frequency(lst,\
    \ val);\n            if (freq > maxFreq) {\n                maxFreq = freq;\n\
    \                maxCount = val;\n            }\n        }\n        if (maxFreq\
    \ > 0) {\n            maxVal = maxCount;\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkt89hp0c.java:37)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq += i;\n            if (freq > max) {\n          \
    \      max = freq;\n            }\n        }\n        return max;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4gp_mqgz.java:32)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6eubnsc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73kjmtjv.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq == -1)\
    \ {\n                    maxFreq = val;\n                    maxVal = val;\n \
    \               } else if (val == maxFreq) {\n                    maxFreq++;\n\
    \                    if (maxFreq >= val) {\n                        maxVal = val;\n\
    \                    }\n                } else {\n                    maxFreq\
    \ = -1;\n                    maxVal = -1;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppg2gb0_z.java:42)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1 || freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx28wmw2.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq < i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw170wurw.java:32)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1 || freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx28wmw2.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vutitl_.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (freq > i) {\n                freq = i;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5uygjb4.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currVal = -1;\n        long currFreq = -1;\n        for (long val : lst) {\n\
    \            if (val > 0) {\n                currVal = val;\n                currFreq\
    \ = Collections.frequency(lst, val);\n                if (currFreq > maxFreq)\
    \ {\n                    maxFreq = currFreq;\n                    maxVal = currVal;\n\
    \                }\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvl1bftfb.java:38)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1 || freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx28wmw2.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > max) {\n               \
    \ max = freq;\n            }\n        }\n        if (max > 0) {\n            for\
    \ (long i : lst) {\n                if (freq >= i) {\n                    freq--;\n\
    \                }\n            }\n        }\n        return max;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9o425wwc.java:39)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pnw_9le.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89aqv_kf.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6g1cyls.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwvl3w8a.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcv2o6m5k.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if (freq >= maxFreq) {\n                maxFreq = freq;\n       \
    \         maxVal = val;\n            }\n        }\n        return maxVal;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdvgs1xr2.java:33)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpori4iq0q.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxVal = val;\n            }\n        }\n        return maxVal;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmvsbusb.java:33)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfa3lq4nw.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwvl3w8a.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for(long i\
    \ : lst) {\n            freq++;\n            if(freq > max) {\n              \
    \  max = freq;\n            }\n            if(freq == i) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4i2kq1h.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq += i;\n            if (freq > max) {\n          \
    \      max = freq;\n            }\n        }\n        return max;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4gp_mqgz.java:32)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for(long\
    \ i : lst) {\n            if(i == 0) {\n                continue;\n          \
    \  }\n            long freq = Collections.frequency(lst, i);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                max = i;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp12nqlnw3.java:36)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwvl3w8a.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(x -> x == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpori4iq0q.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if(freq > maxFreq) {\n                maxFreq = freq;\n         \
    \       maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vutitl_.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for(long\
    \ i : lst) {\n            long freq = Collections.frequency(lst, i);\n       \
    \     if(freq >= maxFreq) {\n                max = i;\n                maxFreq\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8dz3b7pv.java:33)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq < i) {\n                freq = i;\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdajfnes.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if(freq > maxFreq) {\n              \
    \      maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ixrmt7s.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for (long\
    \ i : lst) {\n            if (maxFreq < i) {\n                max = i;\n     \
    \           maxFreq = i;\n            } else if (maxFreq == i) {\n           \
    \     maxFreq++;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qih_ezh.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z6tyoj6.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z6tyoj6.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for (long\
    \ i : lst) {\n            if (maxFreq < i) {\n                maxFreq = i;\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rmourf4.java:32)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq > i) {\n                freq = i;\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b79d25m.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwvl3w8a.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbayjsqty.java:34)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                if(val > maxVal) {\n\
    \                    maxVal = val;\n                    maxFreq = val;\n     \
    \           } else if(val == maxFreq) {\n                    maxFreq++;\n    \
    \            }\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu0rl2_o3.java:36)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currVal = -1;\n        long currFreq = -1;\n        for (long val : lst) {\n\
    \            if (val > 0) {\n                if (currFreq == -1) {\n         \
    \           currFreq = val;\n                    currVal = val;\n            \
    \    } else if (currFreq > val) {\n                    currFreq = val;\n     \
    \               currVal = val;\n                }\n            }\n        }\n\
    \        if (currFreq > maxFreq) {\n            maxFreq = currFreq;\n        \
    \    maxVal = currVal;\n        }\n        return maxVal;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppv_h5l1t.java:44)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for (long i\
    \ : lst) {\n            if (freq == -1) {\n                freq = i;\n       \
    \         max = i;\n            } else if (freq > i) {\n                freq =\
    \ i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_phosid.java:36)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ maxFreq = val;\n                if (maxVal < val) maxVal = val;\n          \
    \  }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqlvdmgbv.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long maxFreq = -1;\n        for (long\
    \ i : lst) {\n            if (i > 0 && maxFreq < i) {\n                maxFreq\
    \ = i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2o3155g3.java:32)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq > i) {\n                freq = i;\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b79d25m.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a10fb9l.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for(long i\
    \ : lst) {\n            freq++;\n            if(freq > max) {\n              \
    \  max = freq;\n            }\n            if(freq == i) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4i2kq1h.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for(long i :\
    \ lst) {\n            freq += i;\n            if(freq > max) {\n             \
    \   max = freq;\n            }\n        }\n        if(max > 0) {\n           \
    \ return max;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplym83izt.java:35)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currFreq = -1;\n        for (long val : lst) {\n            currFreq = lst.stream().filter(x\
    \ -> x == val).count();\n            if (currFreq > maxFreq) {\n             \
    \   maxFreq = currFreq;\n                maxVal = val;\n            } else if\
    \ (currFreq == maxFreq) {\n                if (val > maxVal) {\n             \
    \       maxFreq = currFreq;\n                    maxVal = val;\n             \
    \   }\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fxslvqh.java:39)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq++;\n            if (freq > max) {\n             \
    \   max = freq;\n            }\n            if (freq == i) {\n               \
    \ freq--;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd4go2ko3.java:35)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pnw_9le.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for(long i :\
    \ lst) {\n            freq++;\n            if(freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiyzehczl.java:32)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ freq = -1;\n        for(long i : lst) {\n            freq++;\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gsqvsnz.java:36)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currFreq = 0;\n        for (long val : lst) {\n            currFreq++;\n   \
    \         if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n   \
    \             maxVal = val;\n            } else if (currFreq == maxFreq) {\n \
    \               if (val > maxVal) {\n                    maxFreq = currFreq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjk1txlzr.java:41)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq++;\n            if (freq > max) {\n             \
    \   max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh9yyrni.java:32)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq++;\n            if (freq > max) {\n             \
    \   max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh9yyrni.java:32)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = -1;\n        for(long i\
    \ : lst) {\n            freq++;\n            if(freq > max) {\n              \
    \  max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvytbpaex.java:32)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ freq = -1;\n        for (long val : lst) {\n            freq = Collections.frequency(lst,\
    \ val);\n            if (freq > maxFreq) {\n                maxFreq = freq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ss_taa7.java:34)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long\
    \ currVal = -1;\n        long currFreq = -1;\n        for (long val : lst) {\n\
    \            currVal = val;\n            currFreq = lst.stream().filter(x -> x\
    \ == val).count();\n            if (currFreq > maxFreq) {\n                maxFreq\
    \ = currFreq;\n                maxVal = currVal;\n            } else if (currFreq\
    \ == maxFreq) {\n                if (currVal > maxVal) {\n                   \
    \ maxFreq = currFreq;\n                    maxVal = currVal;\n               \
    \ }\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8dvr1eu.java:41)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (i > 0 && freq >= i) {\n                freq--;\n   \
    \             max = i;\n            }\n            freq++;\n        }\n      \
    \  return max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcrns3lca.java:34)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ {\n                    maxFreq = val;\n                    maxVal = val;\n \
    \               }\n            }\n        }\n        return maxVal;\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoj3eta36.java:34)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq > i) {\n                max = i;\n            \
    \    freq = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3rs5e_f.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z6tyoj6.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h1ybhpy.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if(freq >= maxFreq) {\n                maxFreq = freq;\n        \
    \        maxVal = val;\n            }\n        }\n        return maxVal;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0i7_cos.java:33)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for(long i :\
    \ lst) {\n            freq++;\n            if(freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        for(long i : lst) {\n           \
    \ if(i == max) {\n                return i;\n            }\n        }\n      \
    \  return -1;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2e5oueg.java:37)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq += i;\n            if (freq > max) {\n            \
    \    max = freq;\n            }\n        }\n        return max > 0 ? max : -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxk0s71ww.java:32)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6eubnsc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq >= maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq36wabf.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq += i;\n            if (freq > max) {\n            \
    \    max = freq;\n            }\n        }\n        if (max > 0) {\n         \
    \   return max;\n        }\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkq40r30v.java:35)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwvl3w8a.java:35)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            freq++;\n            if (freq > max) {\n             \
    \   max = i;\n                freq = freq - 1;\n            }\n        }\n   \
    \     return max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcdfzh3w.java:33)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu1ahzrq.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu1ahzrq.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq == -1\
    \ || maxFreq > val) {\n                    maxFreq = val;\n                  \
    \  maxVal = val;\n                }\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe9h2wj_0.java:35)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6g1cyls.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z6tyoj6.java:33)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu1ahzrq.java:35)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            freq++;\n            if (freq > i) {\n                max\
    \ = i;\n                freq = freq - i;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtx2i6x0.java:34)\n"
  stdout: ''
  timestamp: 1659794216
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = 0;\n        long freq = 0;\n        for (long i :\
    \ lst) {\n            if (freq == 0 || freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n            else if (freq == i) {\n\
    \                freq++;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8qi7rn_.java:36)\n"
  stdout: ''
  timestamp: 1659794215
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq >= i) {\n                freq--;\n          \
    \  } else {\n                max = i;\n                freq++;\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzkv5qmv.java:34)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxVal = val;\n            }\n        }\n        return maxVal;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_mhhtcp.java:33)\n"
  stdout: ''
  timestamp: 1659794217
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20mlybob.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxs6vmjj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty array list of positive integers.\
    \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the array list.\n    // If\
    \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n\
    \    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long>\
    \ lst) {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if(freq > maxFreq) {\n                maxFreq = freq;\n            \
    \    maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e31s0eg.java:33)\n"
  stdout: ''
