name: HumanEval_16_count_distinct_characters
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n\
  \    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n   \
  \ public static long countDistinctCharacters(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        long distinctCharacters = 0;\n        for(char c : string.toCharArray())\
    \ {\n            distinctCharacters += Character.isLetterOrDigit(c) ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toLowerCase(c) == Character.toLowerCase(c) ? 1 : 0;\n        }\n\
    \        return distinctCharacters;", "        long distinctCharacters = 0;\n\
    \        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.isLetterOrDigit(c) ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        for (char c : string.toCharArray())\
    \ {\n            distinctCharacters += Character.isLetterOrDigit(c) ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.isLetterOrDigit(c) ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        long stringLength = string.length();\n\
    \        long stringCharCount = stringLength;\n        long stringCharCountLower\
    \ = 0;\n        long stringCharCountUpper = 0;\n        long stringCharCountDigit\
    \ = 0;\n        long stringCharCountSpace = 0;\n        long stringCharCountOther\
    \ = 0;\n        long stringCharCountAll = 0;\n        long stringCharCountAllLower\
    \ = 0;\n        long stringCharCountAllUpper = 0;\n        long stringCharCountAllDigit\
    \ = 0;\n        long stringCharCountAllSpace = 0;\n        long stringCharCountAllOther\
    \ = 0;\n        long stringCharCountAllAll = 0;\n        long stringCharCountAllAllLower\
    \ = 0;\n        long stringCharCountAllAllUpper = 0;\n        long stringCharCountAllAllDigit\
    \ = 0;\n        long stringCharCountAllAllSpace = 0;\n        long stringCharCountAllAllOther\
    \ = 0;\n        long stringCharCountAllAllAll = 0;\n        long stringCharCountAllAllAllLower\
    \ = 0;\n        long stringCharCountAllAllAllUpper = 0;\n        long stringCharCountAllAllAllDigit\
    \ = 0;\n        long stringCharCountAllAllAllSpace = 0;\n        long stringCharCountAllAllAllOther\
    \ = 0;\n        long stringCharCountAllAllAllAll = 0;\n        long stringCharCountAllAllAllAllLower\
    \ = 0;\n        long stringCharCountAllAllAllAllUpper = 0;\n        long stringCharCountAllAllAllAllDigit\
    \ = 0;\n        long stringCharCountAllAllAllAllSpace = 0;\n        long stringCharCountAllAllAllAllOther\
    \ = 0;\n        long stringCharCountAllAllAllAllAll = 0;\n        long stringCharCountAllAllAllAllAllLower\
    \ = 0;\n        long stringCharCountAllAllAllAllAllUpper = 0;\n        long stringCharCountAllAllAllAllAllDigit\
    \ = 0;\n        long stringCharCountAllAllAllAllAllSpace = 0;\n        long stringCharCountAllAllAllAllAllOther\
    \ = 0;\n        long stringCharCountAllAllAllAllAllAll = 0;\n        long stringCharCountAllAllAllAllAllAllLower\
    \ = 0;\n        long stringCharCountAllAllAllAllAllAllUpper = 0;\n        long\
    \ stringCharCountAllAllAllAllAllAllDigit = 0;\n        long stringCharCountAllAllAllAllAllAllSpace\
    \ = 0;\n        long stringCharCountAllAllAllAllAllAllOther = 0;\n        long\
    \ stringCharCountAllAllAllAllAllAllAll = 0;\n        long stringCharCountAllAllAllAllAllAllAllLower\
    \ = 0;\n        long stringCharCountAllAllAllAllAllAllAll", "        long distinctCharacters\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toLowerCase(c) == c ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        Set<Character> set = new HashSet<>();\n\
    \        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        for (char c : set) {\n            distinctCharacters++;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.isLetterOrDigit(c) ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        for (char c : string.toCharArray())\
    \ {\n            distinctCharacters += Character.isLetterOrDigit(c) ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.isLetterOrDigit(c) ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        for(char c : string.toCharArray())\
    \ {\n            distinctCharacters += Character.isLetterOrDigit(c) ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toLowerCase(c) == Character.toLowerCase(c) ? 1 : 0;\n        }\n\
    \        return distinctCharacters;", "        long distinctCharacters = 0;\n\
    \        for (char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toLowerCase(c) == c ? 1 : 0;\n        }\n        return distinctCharacters;",
  "        long distinctCharacters = 0;\n        for (char c : string.toCharArray())\
    \ {\n            distinctCharacters += Character.toLowerCase(c) == c ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toUpperCase(c) - Character.toLowerCase(c);\n        }\n       \
    \ return distinctCharacters;", "        long distinctCharacters = 0;\n       \
    \ long stringLength = string.length();\n        long lastChar = stringLength -\
    \ 1;\n        long lastCharIndex = 0;\n        long currentChar = string.charAt(lastCharIndex);\n\
    \        long currentCharIndex = lastCharIndex;\n        do {\n            currentCharIndex\
    \ = currentCharIndex + 1;\n            currentChar = string.charAt(currentCharIndex);\n\
    \            distinctCharacters = distinctCharacters + 1;\n        } while (currentChar\
    \ != string.charAt(lastCharIndex));\n        return distinctCharacters;", "  \
    \      long distinctCharacters = 0;\n        Set<Character> characterSet = new\
    \ HashSet<>();\n        for (char c : string.toCharArray()) {\n            characterSet.add(c);\n\
    \        }\n        for (char c : characterSet) {\n            distinctCharacters++;\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toUpperCase(c) - Character.toUpperCase(Character.toLowerCase(c));\n\
    \        }\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        for(char c : string.toCharArray()) {\n            distinctCharacters\
    \ += Character.toLowerCase(c) == Character.toLowerCase(c) ? 1 : 0;\n        }\n\
    \        return distinctCharacters;"]
stop_tokens:
- "\n    }\n"
