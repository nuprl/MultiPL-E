language: java
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float smallest = numbers.get(0f);\n     \
    \   float largest = numbers.get(0);\n        for (Float number : numbers) {\n\
    \            rescaled.add(smallest);\n            rescaled.add(number);\n    \
    \        rescaled.add(largest);\n            smallest = number;\n            largest\
    \ = number;\n        }\n        return rescaled;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6b_3tum.java:15: error: no suitable method found for get(float)\n\
    \        float smallest = numbers.get(0f);\n                                ^\n\
    \    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from float to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from float to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from float to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = Float.MAX_VALUE;\n        float\
    \ max = Float.MIN_VALUE;\n        for (Float number : numbers) {\n           \
    \ min = Math.min(min, number);\n            max = Math.max(max, number);\n   \
    \     }\n        for (Float number : numbers) {\n            result.add(number\
    \ * (max - min) / (max - min));\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxvo_ldr.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = numbers.get(0); // min of numbers\n\
    \        float max = numbers.get(numbers.size()-1); // max of numbers\n      \
    \  float range = max - min;\n        float scale = (float) 1.0 / (float) range;\n\
    \        for (Float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71x1og63.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float smallest = Math.min(numbers.get(0), numbers.get(1));\n\
    \        float largest = Math.max(numbers.get(0), numbers.get(1));\n        float\
    \ range = (largest - smallest);\n        float scale = (float) 1.0 / (range +\
    \ 1.0f);\n        for (float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmigncoq.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = numbers.get(0); // First element\
    \ is the smallest\n        float max = numbers.get(numbers.size()-1); // Last\
    \ element is the largest\n        float range = max - min;\n        float scale\
    \ = 1.0f / range;\n        for (Float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7o21nmy.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); // smallest number\
    \ in numbers\n        float max = numbers.get(numbers.size()-1); // largest number\
    \ in numbers\n        float range = max - min;\n        float rescaleFactor =\
    \ 1.0f / range;\n        for (Float number : numbers) {\n            rescaled.add(number\
    \ * rescaleFactor);\n        }\n        return rescaled;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqtgyu0f.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); // smallest number\
    \ in numbers\n        float max = numbers.get(numbers.size()-1); // largest number\
    \ in numbers\n        float range = max - min;\n        float rescaleFactor =\
    \ range / numbers.size();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            rescaled.add(numbers.get(i) * rescaleFactor);\n        }\n      \
    \  return rescaled;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg22anlwi.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        float smallestNumber = numbers.get(0); //\
    \ smallest number in the list\n        float largestNumber = numbers.get(numbers.size()-1);\
    \ // largest number in the list\n        float smallestNumberInUnitRange = smallestNumber\
    \ / largestNumber; // smallest number in unit range\n        float largestNumberInUnitRange\
    \ = largestNumber / smallestNumber; // largest number in unit range\n        float\
    \ smallestNumberInUnitRangeInv = 1.0f / smallestNumberInUnitRange; // smallest\
    \ number in unit range in inverse\n        float largestNumberInUnitRangeInv =\
    \ 1.0f / largestNumberInUnitRange; // largest number in unit range in inverse\n\
    \        float smallestNumberInUnitRangeInvInv = 1.0f / smallestNumberInUnitRangeInv;\n\
    \        float largestNumberInUnitRangeInvInv = 1.0f / largestNumberInUnitRangeInv;\n\
    \        float smallestNumberInUnitRangeInvInvInv = 1.0f / smallestNumberInUnitRangeInvInv;\n\
    \        float largestNumberInUnitRangeInvInvInv = 1.0f / largestNumberInUnitRangeInvInv;\n\
    \        float smallestNumberInUnitRangeInvInvInvInv = 1.0f / smallestNumberInUnitRangeInvInvInv;\n\
    \        float largestNumberInUnitRangeInvInvInvInv = 1.0f / largestNumberInUnitRangeInvInvInv;\n\
    \        float smallestNumberInUnitRangeInvInvInvInvInv = 1.0f / smallestNumberInUnitRangeInvInvInvInv;\n\
    \        float largestNumberInUnitRangeInvInvInvInvInv = 1.0f / largestNumberInUnitRangeInvInvInvInv;\n\
    \        float smallestNumberInUnitRangeInvInvInvInvInvInv = 1.0f / smallestNumberInUnitRangeInvInvInvInvInv;\n\
    \        float largestNumberInUnitRangeInvInvInvInvInvInv = 1.0f / largestNumberInUnitRangeInvInvInvInvInv;\n\
    \        float smallestNumberInUnitRangeInvInvInvInvInvInvInv = 1.0f / smallestNumberInUnitRangeInvInvInvInvInvInv;\n\
    \        float largestNumberInUnitRangeInvInvInvInvInvInvInv = 1.0f / largestNumberInUnitRangeInvInvInvInvInvInv;\n\
    \        float smallestNumberInUnitRangeInvInvInvInvInvInvInvInv = 1.0f / smallestNumberInUnitRangeInvInvInvInvInvInv\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4h1qm8zl.java:33: error: ';' expected\n        float smallestNumberInUnitRangeInvInvInvInvInvInvInvInv\
    \ = 1.0f / smallestNumberInUnitRangeInvInvInvInvInvInv\n                     \
    \                                                                            \
    \                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); // Get the minimum\
    \ value\n        float max = numbers.get(numbers.size()-1); // Get the maximum\
    \ value\n        float range = max - min; // Get the range of the numbers\n  \
    \      float rescaleFactor = 1.0f / range; // Get the rescale factor\n       \
    \ for (Float number : numbers) {\n            rescaled.add(number * rescaleFactor);\
    \ // Rescale the numbers\n        }\n        return rescaled;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjg1wnp9.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); // smallest number\
    \ in numbers\n        float max = numbers.get(numbers.size()-1); // largest number\
    \ in numbers\n        float range = max - min;\n        for (Float number : numbers)\
    \ {\n            rescaled.add(number * (range / numbers.size()));\n        }\n\
    \        return rescaled;\n    }\n    public static void main(String[] args) {\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)0.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcj0e_0y.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        float smallestNumber = numbers.get(0); //\
    \ smallest number in numbers\n        float largestNumber = numbers.get(numbers.size()-1);\
    \ // largest number in numbers\n        float rescaleFactor = (largestNumber -\
    \ smallestNumber) / (float) numbers.size();\n        for (Float number : numbers)\
    \ {\n            rescaledNumbers.add(smallestNumber + (number - smallestNumber)\
    \ * rescaleFactor);\n        }\n        return rescaledNumbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23vcjzzx.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float minValue = numbers.get(0); // Get min\
    \ value\n        float maxValue = numbers.get(numbers.size()-1); // Get max value\n\
    \        float range = (maxValue - minValue); // Get range\n        float rescaleFactor\
    \ = 1.0f / range; // Get rescale factor\n        for (float number : numbers)\
    \ {\n            rescaled.add(number * rescaleFactor); // Rescale number\n   \
    \     }\n        return rescaled;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfftb0b_i.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float minValue = numbers.get(0); // Get the\
    \ minimum value\n        float maxValue = numbers.get(numbers.size()-1); // Get\
    \ the maximum value\n        float range = (maxValue - minValue); // Get the range\n\
    \        float rescaleFactor = (float) 1.0 / (range + 1); // Get the rescale factor\n\
    \        for (float number : numbers) { // For each number\n            rescaled.add(number\
    \ * rescaleFactor); // Rescale the number\n        }\n        return rescaled;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeclfw9oe.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = Float.MAX_VALUE;\n        float\
    \ max = Float.MIN_VALUE;\n        for (Float number : numbers) {\n           \
    \ min = Math.min(min, number);\n            max = Math.max(max, number);\n   \
    \     }\n        for (Float number : numbers) {\n            result.add(number\
    \ * (max - min) / number);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hmmgjin.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float smallest = Math.min(numbers.get(0), numbers.get(1));\n\
    \        float largest = Math.max(numbers.get(0), numbers.get(1));\n        float\
    \ range = largest - smallest;\n        float scale = (float) range / numbers.size();\n\
    \        for (float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3byxayeh.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = numbers.get(0); // min of numbers\n\
    \        float max = numbers.get(numbers.size()-1); // max of numbers\n      \
    \  float range = max - min;\n        float scale = (float) 1.0 / (float) range;\n\
    \        for (float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptmx9l0_f.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); // Get min value\n\
    \        float max = numbers.get(numbers.size()-1); // Get max value\n       \
    \ float range = max - min; // Get range\n        float scale = (float) 1.0 / (float)\
    \ range; // Get scale\n        for (Float number : numbers) {\n            rescaled.add(number\
    \ * scale);\n        }\n        return rescaled;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6pgvheyd.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers);\n        Collections.sort(rescaled);\n    \
    \    rescaled.set(rescaled.size() - 1, 1.0f);\n        rescaled.set(rescaled.size()\
    \ - 2, 0.0f);\n        return rescaled;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp245wv7cw.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        float min = numbers.get(0); float max = numbers.get(0);\n\
    \        for (Float number : numbers) {\n            min = Math.min(min, number);\n\
    \            max = Math.max(max, number);\n        }\n        for (Float number\
    \ : numbers) {\n            rescaled.add(number * (max - min) / (max - min));\n\
    \        }\n        return rescaled;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfn0w5iil.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of numbers (of at least two elements),\
    \ apply a linear transform to that array list,\n    // such that the smallest\
    \ number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float min = numbers.get(0); // Get smallest\
    \ number\n        float max = numbers.get(numbers.size()-1); // Get largest number\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   for (float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3om75jz9.java:25)\n"
  stdout: ''
