name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
  )\n    public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c\
    \ -> string.setCharAt(charArray.indexOf(c), c));\n        return string;", " \
    \       return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n\
    \                .collect(Collectors.joining(\"\"));", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n        return new String(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n        return new String(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            String uc = Character.toString((char)\
    \ c);\n            String lc = Character.toString((char) Character.toLowerCase(c));\n\
    \            String uclc = Character.toString((char) Character.toUpperCase(c));\n\
    \            sb.append(uclc);\n            sb.append(lc);\n            sb.append(uc);\n\
    \        }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                builder.append(charArray[i] - 'a' + 'A');\n     \
    \       } else {\n                builder.append(charArray[i]);\n            }\n\
    \        }\n        return builder.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\
    \"));", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());',
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        return\
    \ string.chars()\n            .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        StringBuilder builder = new\
    \ StringBuilder();\n        for (char c : string.toCharArray()) {\n          \
    \  builder.append((char) (c != c ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n\
    \        }\n        return builder.toString();", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\
    \"));", '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        StringBuilder sb = new StringBuilder();\n        for (char\
    \ c : string.toCharArray()) {\n            String upperCase = Character.toString((char)\
    \ (c).toUpperCase());\n            String lowerCase = Character.toString((char)\
    \ (c).toLowerCase());\n            sb.append(upperCase).append(lowerCase);\n \
    \       }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        return string.chars().mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : (char) 'a')).collect(Collectors.joining());", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            builder.append(charArray[i]);\n        }\n        return\
    \ builder.toString();", "        StringBuilder sb = new StringBuilder();\n   \
    \     char[] charArray = string.toCharArray();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        return new\
    \ String(charArray);", "        return string.chars().mapToObj(c -> (char) (c\
    \ == (char) 'a' ? 'A' : c))\n                .collect(Collectors.joining(\"\"\
    ));", '        return string.toUpperCase().replaceAll("[a-z]", s -> s.toUpperCase());',
  '        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)
    ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  '        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)
    ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        return string.chars()\n                .mapToObj(c -> (char) (c == (char)\
    \ 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\"));",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(\"\
    \"));\n        return string;", "        return string.chars().mapToObj(c -> (char)\
    \ (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\
    \"));", "        StringBuilder sb = new StringBuilder();\n        for (char c\
    \ : string.toCharArray()) {\n            boolean upperCase = Character.isUpperCase(c);\n\
    \            boolean lowerCase = Character.isLowerCase(c);\n            if (upperCase)\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ if (lowerCase) {\n                sb.append(Character.toUpperCase(c));\n   \
    \         } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", "        return string.chars()\n            \
    \    .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char) (c == (char) 'A' ?\
    \ 'a' : c)))\n                .collect(Collectors.joining());", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c\
    \ -> string.setCharAt(charArray.indexOf(c), c));\n        return string;", " \
    \       char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", '        return string.toLowerCase().replaceAll("[a-z]",
    Character.toUpperCase).replaceAll("[A-Z]", Character.toLowerCase);', "       \
    \ char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a'))\n                .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> (char) (c\
    \ == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c))).toArray();\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n                .collect(Collectors.joining());", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           String upperCase = Character.toString((char) (c).toUpperCase());\n\
    \            String lowerCase = Character.toString((char) (c).toLowerCase());\n\
    \            sb.append(upperCase);\n            sb.append(lowerCase);\n      \
    \  }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i]\
    \ + 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                charArray[i] = (char) (charArray[i] - 32);\n            }\n \
    \       }\n        return new String(charArray);", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.sort(charArray);\n        return new String(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(\"\
    \"));\n        return string;", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n                .mapToObj(c\
    \ -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n\
    \                .collect(Collectors.joining());", "        StringBuilder builder\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return new String(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n\
    \                .collect(Collectors.joining(\"\"));", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           String upperCase = Character.toUpperCase(c);\n            String lowerCase\
    \ = Character.toLowerCase(c);\n            sb.append(upperCase);\n           \
    \ sb.append(lowerCase);\n        }\n        return sb.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                charArray[i] = (char) (charArray[i] + 32);\n            }\n \
    \       }\n        return new String(charArray);", "        char[] charArray =\
    \ string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n\
    \            if (Character.isLowerCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toUpperCase(charArray[i]);\n            }\n            if (Character.isUpperCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n   \
    \         }\n        }\n        return new String(charArray);", "        StringBuilder\
    \ builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ (char) (c == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining(\"\"\
    ));\n        return string;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c -> string.setCharAt(charArray.indexOf(c),\
    \ c));\n        return string;", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(\"\
    \"));\n        return string;", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a'))\n            .collect(Collectors.joining(\"\
    \"));", "        StringBuilder builder = new StringBuilder();\n        for (char\
    \ c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n \
    \               builder.append(Character.toUpperCase(c));\n            } else\
    \ {\n                builder.append(Character.toLowerCase(c));\n            }\n\
    \        }\n        return builder.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", '        return string.toLowerCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        return string.chars()\n            .mapToObj(c -> (char)\
    \ (c == (char) 'a' ? 'A' : c))\n            .collect(Collectors.joining(\"\"));",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a')).collect(Collectors.joining());", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : charArray) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        return string.chars()\n\
    \            .mapToObj(c -> (char) (c == ' ' ? '_' : Character.toUpperCase(c)))\n\
    \            .collect(Collectors.joining(\"\"));", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c -> string.setCharAt(charArray.indexOf(c),\
    \ c));\n        return string;", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a'))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", '        return
    string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c))).collect(Collectors.joining());', "        return\
    \ string.chars()\n                .mapToObj(c -> (char) (c == (char) 'a' ? 'A'\
    \ : (char) 'a'))\n                .collect(Collectors.joining(\"\"));", "    \
    \    char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase)\n                .replaceAll(\"[A-Z]\", Character.toLowerCase);",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        StringBuilder builder =\
    \ new StringBuilder();\n        for (char c : string.toCharArray()) {\n      \
    \      if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c\
    \ -> string.setCharAt(charArray.indexOf(c), c));\n        return string;", " \
    \       char[] charArray = string.toCharArray();\n        for (int i = 0; i <\
    \ charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n\
    \            }\n        }\n        return new String(charArray);", '        return
    string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c))).collect(Collectors.joining());', "        return\
    \ string.chars()\n                .mapToObj(c -> (char) (c == (char) 'a' ? 'A'\
    \ : (char) 'a'))\n                .collect(Collectors.joining());", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        return string.chars().mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : c))\n                .collect(Collectors.joining());", '        return
    string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)
    : Character.toUpperCase(c))).collect(Collectors.joining());', "        return\
    \ string.chars()\n            .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                builder.append(Character.toUpperCase(charArray[i]));\n  \
    \          } else {\n                builder.append(Character.toLowerCase(charArray[i]));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            charArray[i] = (char) (charArray[i] + 32);\n            } else if\
    \ (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i]\
    \ = (char) (charArray[i] - 32);\n            }\n        }\n        return new\
    \ String(charArray);", "        return string.chars().mapToObj(c -> (char) (c\
    \ == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining());", "      \
    \  char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            charArray[i] = (char) (charArray[i] - 32);\n            } else if\
    \ (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i]\
    \ = (char) (charArray[i] + 32);\n            }\n        }\n        return new\
    \ String(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        return string.chars()\n\
    \            .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n            .collect(Collectors.joining());",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(Character::toLowerCase).forEach(c -> {\n  \
    \          charArray[c] = Character.toUpperCase(c);\n        });\n        return\
    \ new String(charArray);", "        StringBuilder builder = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            builder.append((char)\
    \ (c != (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n  \
    \      }\n        return builder.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : charArray) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining(\"\"));\n        return\
    \ string;", "        StringBuilder sb = new StringBuilder(string);\n        char[]\
    \ chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i]\
    \ = Character.toUpperCase(chars[i]);\n            }\n            if (Character.isUpperCase(chars[i]))\
    \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n           \
    \ }\n        }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return String.valueOf(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\
    \"));", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            if(c>='a' && c<='z')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ if(c>='A' && c<='Z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.stream(charArray).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", "        return string.chars().mapToObj(c -> (char) (c\
    \ == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining(\"\"));", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);"]
stop_tokens:
- "\n    }\n"
