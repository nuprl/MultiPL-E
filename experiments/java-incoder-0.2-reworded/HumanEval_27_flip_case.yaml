name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
  )\n    public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c\
    \ -> string.setCharAt(charArray.indexOf(c), c));\n        return string;", " \
    \       return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n\
    \                .collect(Collectors.joining(\"\"));", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n        return new String(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n        return new String(charArray);",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", '        return string.chars().mapToObj(c
    -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);", '        return string.chars().mapToObj(c -> (char) (c
    == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            String uc = Character.toString((char)\
    \ c);\n            String lc = Character.toString((char) Character.toLowerCase(c));\n\
    \            String uclc = Character.toString((char) Character.toUpperCase(c));\n\
    \            sb.append(uclc);\n            sb.append(lc);\n            sb.append(uc);\n\
    \        }\n        return sb.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                builder.append(charArray[i] - 'a' + 'A');\n     \
    \       } else {\n                builder.append(charArray[i]);\n            }\n\
    \        }\n        return builder.toString();", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);", "  \
    \      char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);"]
stop_tokens:
- "\n    }\n"
