name: HumanEval_24_largest_divisor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    public\
  \ static long largestDivisor(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
  \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
  \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
  \ == (7l));\n    }\n\n}\n"
completions: ["        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                long divisor =\
    \ i;\n                while (divisor < n && n % divisor == 0) {\n            \
    \        divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = n;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= maxDivisor)\
    \ {\n            if (n % currentDivisor == 0) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n            currentDivisor++;\n        }\n \
    \       return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n    \
    \    for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n         \
    \       long divisor = i;\n                while (n % divisor == 0) {\n      \
    \              divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 2; i <= n / 2; i++) {\n           \
    \ if (n % i == 0) {\n                maxDivisor = Math.max(maxDivisor, i);\n \
    \           }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long divisor = 2; divisor <= n; divisor++) {\n\
    \            if (n % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ divisor);\n            }\n        }\n        return maxDivisor;", "        long\
    \ maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n     \
    \       if (n % i == 0) {\n                long divisor = i;\n               \
    \ while (n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 1;\n        long currentDivisor\
    \ = 1;\n        long currentDivisorFactor = 1;\n        long currentDivisorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactor = 1;\n     \
    \   long currentDivisorFactorFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n      \
    \  long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor =\
    \ 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor",
  "        long largestDivisor = Long.MAX_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (n % divisor == 0) {\n                    divisor++;\n \
    \               }\n                if (divisor > largestDivisor) {\n         \
    \           largestDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 0;\n        long\
    \ divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor ==\
    \ 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor", "  \
    \      long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                while (n % divisor == 0) {\n    \
    \                divisor++;\n                }\n                if (divisor >\
    \ maxDivisor) {\n                    maxDivisor = divisor;\n                }\n\
    \            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            if (currentNumber %\
    \ 2 == 0) {\n                currentDivisor *= 2;\n            }\n           \
    \ currentDivisor /= currentNumber;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n           \
    \ currentNumber /= 2;\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            divisor = i;\n                if (maxDivisor < divisor) {\n     \
    \               maxDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (n % divisor == 0) {\n                    divisor++;\n          \
    \      }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = 0;\n        long currentDivisor = 1;\n        long currentNumber = n;\n  \
    \      while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor > largestDivisor)\
    \ {\n                largestDivisor = currentDivisor;\n            }\n       \
    \ }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        long divisor = 1;\n        while (divisor <= n) {\n\
    \            if (n % divisor == 0) {\n                largestDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        long currentNumber = n;\n        while (currentNumber != 0) {\n     \
    \       currentDivisor *= currentNumber;\n            currentNumber /= 2;\n  \
    \          if (currentDivisor > largestDivisor) {\n                largestDivisor\
    \ = currentDivisor;\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (n % divisor == 0) {\n                    divisor++;\n \
    \               }\n                if (divisor > largestDivisor) {\n         \
    \           largestDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = n;\n        long currentDivisor\
    \ = 1;\n        while (currentDivisor <= maxDivisor) {\n            if (n % currentDivisor\
    \ == 0) {\n                maxDivisor = currentDivisor;\n            }\n     \
    \       currentDivisor++;\n        }\n        return maxDivisor;", "        long\
    \ largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > largestDivisor) {\n        \
    \            largestDivisor = divisor;\n                }\n            }\n   \
    \     }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = 0;\n        long currentDivisor = 1;\n        long\
    \ currentNumber = n;\n        while(currentDivisor <= n) {\n            currentDivisor\
    \ *= currentNumber;\n            currentNumber--;\n            if(currentDivisor\
    \ > largestDivisor) {\n                largestDivisor = currentDivisor;\n    \
    \        }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                long divisor = i;\n                while (n % divisor == 0) {\n\
    \                    divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = 0;\n        for (long i = 1; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                long divisor = i;\n\
    \                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor > maxDivisor) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            divisor = i;\n                if (maxDivisor < divisor) {\n     \
    \               maxDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        long currentDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorRemainder2 = 0;\n        do {\n           \
    \ currentDivisorRemainder = currentDivisor % n;\n            currentDivisorRemainder2\
    \ = currentDivisorRemainder * currentDivisor;\n            currentDivisor = currentDivisorRemainder2;\n\
    \            largestDivisor = currentDivisor;\n        } while (currentDivisor\
    \ != 1);\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                largestDivisor = i;\n            }\n        }\n\
    \        return largestDivisor;", "        long maxDivisor = 1;\n        long\
    \ currentDivisor = 1;\n        while (currentDivisor <= n) {\n            if (n\
    \ % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n   \
    \         }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor = currentDivisor\
    \ / currentNumber;\n            if (currentDivisor % 2 == 0) {\n             \
    \   maxDivisor = currentDivisor;\n            }\n            currentNumber = currentNumber\
    \ / 2;\n        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n\
    \        while (currentDivisor <= n) {\n            currentDivisorRemainder =\
    \ n % currentDivisor;\n            if (currentDivisorRemainder == 0) {\n     \
    \           maxDivisor = currentDivisor;\n                break;\n           \
    \ }\n            currentDivisor = currentDivisor + 1;\n        }\n        return\
    \ maxDivisor;", "        long maxDivisor = 0;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ i);\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = n;\n        long currentDivisor = 1;\n        while (currentDivisor <= maxDivisor)\
    \ {\n            if (n % currentDivisor == 0) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n            currentDivisor++;\n        }\n \
    \       return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n    \
    \    for (long divisor = 2; divisor <= n; divisor++) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n     \
    \       }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (n % divisor == 0) {\n                 \
    \   divisor++;\n                }\n                if (divisor > maxDivisor) {\n\
    \                    maxDivisor = divisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 2; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        long currentNum = 1;\n     \
    \   long currentNumDivisor = 1;\n        while (currentDivisor <= n) {\n     \
    \       currentNum = currentDivisor * currentNum;\n            currentNumDivisor\
    \ = currentDivisor;\n            currentDivisor++;\n            if (currentNum\
    \ % 2 == 0) {\n                currentNumDivisor++;\n            }\n         \
    \   if (currentNumDivisor > maxDivisor) {\n                maxDivisor = currentNumDivisor;\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        while (currentDivisor <= n)\
    \ {\n            if (n % currentDivisor == 0) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n            currentDivisor++;\n        }\n \
    \       return maxDivisor;", "        long maxDivisor = 1;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = Math.max(maxDivisor, i);\n            }\n      \
    \  }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while(currentNumber != 0) {\n            currentDivisor = currentDivisor\
    \ / currentNumber;\n            if(currentDivisor % 2 == 0) {\n              \
    \  maxDivisor = currentDivisor;\n            }\n            currentNumber = currentNumber\
    \ / 2;\n        }\n        return maxDivisor;", "        long maxDivisor = 0;\n\
    \        long currentDivisor = 1;\n        long currentNumber = n;\n        while\
    \ (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n     \
    \       currentNumber /= 2;\n            if (currentDivisor > maxDivisor) {\n\
    \                maxDivisor = currentDivisor;\n            }\n        }\n    \
    \    return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (n % divisor == 0) {\n     \
    \               divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = Long.MAX_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           divisor = i;\n                if (largestDivisor < divisor) {\n  \
    \                  largestDivisor = divisor;\n                }\n            }\n\
    \        }\n        return largestDivisor;", "        long maxDivisor = 0;\n \
    \       for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNum\
    \ = 1;\n        while(currentDivisor <= n) {\n            currentNum = currentDivisor\
    \ * currentDivisor;\n            if(currentNum > maxDivisor) {\n             \
    \   maxDivisor = currentNum;\n            }\n            currentDivisor++;\n \
    \       }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     while(currentDivisor <= n) {\n            if(n % currentDivisor == 0) {\n\
    \                maxDivisor = currentDivisor;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor > maxDivisor) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n \
    \       while (currentDivisor <= n) {\n            if (n % currentDivisor == 0)\
    \ {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n    \
    \        }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (n % divisor == 0) {\n                 \
    \   divisor++;\n                }\n                if (divisor > maxDivisor) {\n\
    \                    maxDivisor = divisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 0;\n     \
    \   for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      long divisor = i;\n                while (n % divisor == 0) {\n       \
    \             divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        long divisor = 1;\n        while (divisor < n) {\n\
    \            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor % 2 == 0) {\n\
    \                maxDivisor = currentDivisor;\n            }\n        }\n    \
    \    return maxDivisor;", "        long largestDivisor = 0;\n        long divisor\
    \ = 1;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n\
    \                largestDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return largestDivisor;", "        long largestDivisor = 0;\n\
    \        long currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n\
    \        long currentDivisorRemainder2 = 0;\n        long currentDivisorRemainder3\
    \ = 0;\n        long currentDivisorRemainder4 = 0;\n        long currentDivisorRemainder5\
    \ = 0;\n        long currentDivisorRemainder6 = 0;\n        long currentDivisorRemainder7\
    \ = 0;\n        long currentDivisorRemainder8 = 0;\n        long currentDivisorRemainder9\
    \ = 0;\n        long currentDivisorRemainder10 = 0;\n        long currentDivisorRemainder11\
    \ = 0;\n        long currentDivisorRemainder12 = 0;\n        long currentDivisorRemainder13\
    \ = 0;\n        long currentDivisorRemainder14 = 0;\n        long currentDivisorRemainder15\
    \ = 0;\n        long currentDivisorRemainder16 = 0;\n        long currentDivisorRemainder17\
    \ = 0;\n        long currentDivisorRemainder18 = 0;\n        long currentDivisorRemainder19\
    \ = 0;\n        long currentDivisorRemainder20 = 0;\n        long currentDivisorRemainder21\
    \ = 0;\n        long currentDivisorRemainder22 = 0;\n        long currentDivisorRemainder23\
    \ = 0;\n        long currentDivisorRemainder24 = 0;\n        long currentDivisorRemainder25\
    \ = 0;\n        long currentDivisorRemainder26 = 0;\n        long currentDivisorRemainder27\
    \ = 0;\n        long currentDivisorRemainder28 = 0;\n        long currentDivisorRemainder29\
    \ = 0;\n        long currentDivisorRemainder30 = 0;\n        long currentDivisorRemainder31\
    \ = 0;\n        long currentDivisorRemainder32 = 0;\n        long currentDivisorRemainder33\
    \ = 0;\n        long currentDivisorRemainder34 = 0;\n        long currentDivisorRemainder35\
    \ = 0;\n        long currentDivisorRemainder36 = 0;\n        long currentDivisorRemainder37\
    \ = 0;\n        long currentDivisorRemainder38 = 0;\n        long currentDivisorRemainder39\
    \ = 0;\n        long currentDivisorRemainder40 = 0;\n        long currentDivisorRemainder41\
    \ = 0;\n        long currentDivisorRemainder42 = 0;\n        long currentDivisorRemainder43\
    \ = 0;\n        long currentDivisorRemainder44 = 0;\n        long currentDivisorRemainder45\
    \ = 0;\n        long currentDivisorRemainder46 = 0;\n        long currentDivisorRemainder47\
    \ = 0;\n        long currentDivisorRemainder48 = 0;\n        long currentDivisorRemainder49\
    \ = 0;\n        long currentDivisorRemainder50 = 0;\n        long ", "       \
    \ long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                maxDivisor = i;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (n % divisor == 0) {\n     \
    \               divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        while (currentDivisor <= n) {\n            if (n % currentDivisor\
    \ == 0) {\n                maxDivisor = currentDivisor;\n            }\n     \
    \       currentDivisor++;\n        }\n        return maxDivisor;", "        long\
    \ largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n \
    \           if (n % i == 0) {\n                long divisor = i;\n           \
    \     while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > largestDivisor) {\n        \
    \            largestDivisor = divisor;\n                }\n            }\n   \
    \     }\n        return largestDivisor;", "        long maxDivisor = 1;\n    \
    \    long maxDividend = 1;\n        for (long i = 1; i < n; i++) {\n         \
    \   long divisor = i;\n            while (divisor < n && n % divisor == 0) {\n\
    \                divisor++;\n            }\n            if (divisor > maxDivisor)\
    \ {\n                maxDivisor = divisor;\n                maxDividend = i;\n\
    \            }\n        }\n        return maxDividend;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = 0;\n        long\
    \ currentDivisor = 1;\n        while (currentDivisor <= n) {\n            if (n\
    \ % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 1;\n        long currentDivisor\
    \ = 1;\n        while (currentDivisor <= n) {\n            if (n % currentDivisor\
    \ == 0) {\n                maxDivisor = currentDivisor;\n            }\n     \
    \       currentDivisor++;\n        }\n        return maxDivisor;", "        long\
    \ maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) {\n                maxDivisor = i;\n            }\n        }\n     \
    \   return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n    \
    \    for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n         \
    \       long divisor = i;\n                while (n % divisor == 0) {\n      \
    \              divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorRemainder\
    \ = 1;\n        while (currentDivisor <= n) {\n            currentDivisorRemainder\
    \ = n % currentDivisor;\n            if (currentDivisorRemainder == 0) {\n   \
    \             maxDivisor = currentDivisor;\n                break;\n         \
    \   }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = n;\n        long divisor = 1;\n        while (divisor <= maxDivisor) {\n \
    \           if (n % divisor == 0) {\n                maxDivisor = divisor;\n \
    \           }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        while (currentDivisor <= n) {\n            if (n % currentDivisor ==\
    \ 0) {\n                largestDivisor = currentDivisor;\n            }\n    \
    \        currentDivisor++;\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;", "        long maxDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                while (n % divisor == 0) {\n    \
    \                divisor++;\n                }\n                if (divisor >\
    \ maxDivisor) {\n                    maxDivisor = divisor;\n                }\n\
    \            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MAX_VALUE;\n        for (long i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n \
    \       long currentNumber = n;\n        while (currentNumber != 0) {\n      \
    \      currentDivisor *= currentNumber;\n            currentNumber /= 2;\n   \
    \         if (currentDivisor > maxDivisor) {\n                maxDivisor = currentDivisor;\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        while (currentDivisor <= n)\
    \ {\n            if (n % currentDivisor == 0) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n            currentDivisor++;\n        }\n \
    \       return maxDivisor;", "        long largestDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) {\n                maxDivisor = i;\n            }\n        }\n     \
    \   return maxDivisor;", "        long largestDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        while (currentDivisor <= n) {\n            if (n % currentDivisor\
    \ == 0) {\n                largestDivisor = currentDivisor;\n            }\n \
    \           currentDivisor++;\n        }\n        return largestDivisor;", " \
    \       long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = Long.MAX_VALUE;\n\
    \        long currentDivisor = 1;\n        while(currentDivisor <= n) {\n    \
    \        if(n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ long divisor = i;\n                while (n % divisor == 0) {\n            \
    \        divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        long divisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n   \
    \         if (n % i == 0) {\n                largestDivisor = i;\n           \
    \ }\n        }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n / i) {\n   \
    \                 divisor++;\n                }\n                if (divisor >\
    \ maxDivisor) {\n                    maxDivisor = divisor;\n                }\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long maxDividend = 1;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      long dividend = n;\n                while (dividend % divisor == 0) {\n\
    \                    divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \     maxDividend = dividend;\n                }\n            }\n        }\n \
    \       return maxDividend;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     long currentDivisor = 1;\n        for(long i = 1; i <= n; i++) {\n     \
    \       currentDivisor *= i;\n            if(currentDivisor % 2 == 0) {\n    \
    \            maxDivisor = currentDivisor;\n            }\n        }\n        return\
    \ maxDivisor;", "        long maxDivisor = 1;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                maxDivisor = i;\n   \
    \         }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = n;\n        long divisor = 1;\n        while (divisor < n) {\n           \
    \ if (n % divisor == 0) {\n                maxDivisor = divisor;\n           \
    \ }\n            divisor++;\n        }\n        return maxDivisor;", "       \
    \ long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisorDivisor = 1;\n       \
    \ long currentDivisorDivisorDivisorDivisorRemainder = 0;\n        long currentDivisorDivisorDivisorDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorDivisorRemainder = 0;\n        long\
    \ currentDivisorDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisorDivisor = 1;\n        long currentDivisorDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        ", "        long largestDivisor = 0;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = Long.MIN_VALUE;\n        for (long divisor = 2; divisor <= n; divisor++)\
    \ {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \                break;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            \
    \    break;\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     while (currentDivisor <= n) {\n            if (n % currentDivisor == 0)\
    \ {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n    \
    \        }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentDivisor <= n) {\n            if (currentNumber %\
    \ currentDivisor == 0) {\n                currentDivisor++;\n            } else\
    \ {\n                currentDivisor = 1;\n            }\n            currentNumber--;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = n;\n     \
    \   long divisor = 1;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = 0;\n \
    \       long currentDivisor = 1;\n        long currentNum = 1;\n        while(currentDivisor\
    \ <= n) {\n            currentDivisor *= currentNum;\n            currentNum++;\n\
    \            if(currentDivisor > n) {\n                currentDivisor = n;\n \
    \           }\n            largestDivisor = currentDivisor;\n        }\n     \
    \   return largestDivisor;", "        long maxDivisor = n;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largestDivisor = i;\n            }\n        }\n\
    \        return largestDivisor;", "        long maxDivisor = n;\n        long\
    \ currentDivisor = 1;\n        while (currentDivisor <= maxDivisor) {\n      \
    \      if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n / 2;\
    \ i++) {\n            if (n % i == 0) {\n                maxDivisor = i;\n   \
    \         }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                long divisor = i;\n                while (n % divisor == 0) {\n\
    \                    divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                long divisor = i;\n                while (n % divisor == 0) {\n\
    \                    divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        long currentDivisor = 1;\n        long currentNumber = n;\n  \
    \      while (currentNumber != 0) {\n            if (currentNumber % 2 == 0) {\n\
    \                currentDivisor *= 2;\n            }\n            currentNumber\
    \ /= 2;\n            if (currentDivisor > maxDivisor) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber = currentNumber\
    \ / 2;\n            if (currentDivisor > maxDivisor) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     while (currentDivisor <= n) {\n            if (n % currentDivisor == 0)\
    \ {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n    \
    \        }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNum\
    \ = 1;\n        while (currentDivisor <= n) {\n            if (currentDivisor\
    \ % 2 == 0) {\n                currentNum = currentNum * currentDivisor;\n   \
    \         }\n            currentDivisor++;\n            if (currentDivisor > n)\
    \ {\n                break;\n            }\n        }\n        maxDivisor = currentNum;\n\
    \        return maxDivisor;", "        long largestDivisor = 0;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = n;\n        long divisor = 1;\n        while (divisor <= maxDivisor)\
    \ {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     long divisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                divisor = i;\n               \
    \ if (maxDivisor < divisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                maxDivisor = i;\n        \
    \    }\n        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 2; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                long divisor = i;\n                while (n % divisor == 0) {\n\
    \                    divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = 0;\n        long divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                largestDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = 0;\n        for (long i = 1; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                long divisor = i;\n\
    \                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = Long.MAX_VALUE;\n\
    \        long divisor = Long.MAX_VALUE;\n        for(long i = 1; i < n; i++) {\n\
    \            divisor = i;\n            while(divisor > 0 && n % divisor == 0)\
    \ {\n                divisor--;\n            }\n            if(divisor > largestDivisor)\
    \ {\n                largestDivisor = divisor;\n            }\n        }\n   \
    \     return largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long largestDivisor = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         divisor = currentDivisor;\n            currentDivisor *= currentDivisor;\n\
    \            if (currentDivisor > largestDivisor) {\n                largestDivisor\
    \ = divisor;\n            }\n        }\n        return largestDivisor;", "   \
    \     long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > largestDivisor) {\n              \
    \      largestDivisor = divisor;\n                }\n            }\n        }\n\
    \        return largestDivisor;", "        long maxDivisor = 1;\n        long\
    \ currentDivisor = 1;\n        long currentNumber = n;\n        while (currentDivisor\
    \ <= n) {\n            currentDivisor *= currentNumber;\n            currentNumber\
    \ /= currentDivisor;\n            maxDivisor = Math.max(maxDivisor, currentDivisor);\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = n;\n     \
    \   long currentDivisor = 1;\n        while (currentDivisor <= maxDivisor) {\n\
    \            if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 1;\n        long currentDivisor\
    \ = 1;\n        long currentNum = 1;\n        while(currentDivisor <= n) {\n \
    \           currentNum = currentDivisor * currentDivisor;\n            if(currentNum\
    \ > n) {\n                break;\n            }\n            currentDivisor++;\n\
    \            maxDivisor = currentNum;\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        long currentDivisorFactor = 1;\n        long currentDivisorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactor = 1;\n     \
    \   long currentDivisorFactorFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n      \
    \  long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDi", "        long maxDivisor = n;\n        long divisor\
    \ = 1;\n        while (divisor <= maxDivisor) {\n            if (n % divisor ==\
    \ 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = 0;\n \
    \       for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ maxDivisor = i;\n            }\n        }\n        return maxDivisor;", "  \
    \      long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = 0;\n        for (long i = 1; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                long divisor = i;\n\
    \                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (n % divisor == 0) {\n     \
    \               divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = 0;\n        long\
    \ currentDivisor = 1;\n        long currentNumber = n;\n        while (currentDivisor\
    \ <= n) {\n            if (currentNumber % currentDivisor == 0) {\n          \
    \      currentDivisor++;\n            } else {\n                currentDivisor\
    \ = 1;\n            }\n            currentNumber = currentNumber / currentDivisor;\n\
    \            maxDivisor = currentDivisor;\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = 1;\n        long currentDivisor\
    \ = 1;\n        for(long i = 1; i <= n; i++) {\n            currentDivisor = i;\n\
    \            while(currentDivisor % 2 == 0) {\n                currentDivisor\
    \ = currentDivisor / 2;\n            }\n            if(currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long divisor = 2; divisor <= n; divisor++) {\n            if (n % divisor\
    \ == 0) {\n                long divisorDivisor = n / divisor;\n              \
    \  if (divisorDivisor > maxDivisor) {\n                    maxDivisor = divisorDivisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (n % divisor == 0) {\n     \
    \               divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long largestDivisor = 0;\n\
    \        long divisor = 1;\n        while (divisor <= n) {\n            if (n\
    \ % divisor == 0) {\n                largestDivisor = divisor;\n            }\n\
    \            divisor++;\n        }\n        return largestDivisor;", "       \
    \ long maxDivisor = n;\n        long currentDivisor = 1;\n        while (currentDivisor\
    \ <= maxDivisor) {\n            if (n % currentDivisor == 0) {\n             \
    \   maxDivisor = currentDivisor;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 0;\n     \
    \   long currentDivisor = 1;\n        long currentNumber = n;\n        while (currentDivisor\
    \ < n) {\n            currentDivisor *= currentNumber;\n            currentNumber--;\n\
    \            if (currentDivisor > maxDivisor) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;"]
stop_tokens:
- "\n    }\n"
