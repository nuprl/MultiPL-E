language: java
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyemv46eb.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyemv46eb.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n\
    \        char[] vowels2 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels2);\n\
    \        char[] vowels3 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels3);\n\
    \        char[] vowels4 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels4);\n\
    \        char[] vowels5 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels5);\n\
    \        char[] vowels6 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels6);\n\
    \        char[] vowels7 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels7);\n\
    \        char[] vowels8 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels8);\n\
    \        char[] vowels9 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels9);\n\
    \        char[] vowels10 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels10);\n\
    \        char[] vowels11 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels11);\n\
    \        char[] vowels12 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels12);\n\
    \        char[] vowels13 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels13);\n\
    \        char[] vowels14 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels14);\n\
    \        char[] vowels15 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels15);\n\
    \        char[] vowels16 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels16);\n\
    \        char[] vowels17 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels17);\n\
    \        char[] vowels18 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels18);\n\
    \        char[] vowels19 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels19\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96yo1owm.java:68: error: ')' expected\n        Arrays.sort(vowels19\n\
    \                            ^\n/tmp/tmp96yo1owm.java:70: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp96yo1owm.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp96yo1owm.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp96yo1owm.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp96yo1owm.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp96yo1owm.java:78: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            }\n            else {\n          \
    \      sb.append(Character.toLowerCase(c));\n            }\n        }\n      \
    \  for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(Character.toUpperCase(c));\n            }\n       \
    \ }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad7zipgk.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a') {\n                sb.append(\"A\");\n            }\
    \ else if(c == 'e') {\n                sb.append(\"E\");\n            } else if(c\
    \ == 'i') {\n                sb.append(\"I\");\n            } else if(c == 'o')\
    \ {\n                sb.append(\"O\");\n            } else if(c == 'u') {\n  \
    \              sb.append(\"U\");\n            } else if(c == 'A') {\n        \
    \        sb.append(\"a\");\n            } else if(c == 'E') {\n              \
    \  sb.append(\"e\");\n            } else if(c == 'I') {\n                sb.append(\"\
    i\");\n            } else if(c == 'O') {\n                sb.append(\"o\");\n\
    \            } else if(c == 'U') {\n                sb.append(\"u\");\n      \
    \      } else if(c == 'a') {\n                sb.append(\"A\");\n            }\
    \ else if(c == 'e') {\n                sb.append(\"E\");\n            } else if(c\
    \ == 'i') {\n                sb.append(\"I\");\n            } else if(c == 'o')\
    \ {\n                sb.append(\"O\");\n            } else if(c == 'u') {\n  \
    \              sb.append(\"U\");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprx0f45n5.java:58)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if('A' <= c && c <= 'Z')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ if('a' <= c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else if('0' <= c && c <= '9') {\n                sb.append(c);\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrq3iae2.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctq38vz8.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      char[] newChars = new char[chars.length];\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                newChars[i] = 'A';\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                newChars[i] = 'a';\n            } else if(c == 'B' || c ==\
    \ 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M'\
    \ || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c\
    \ == 'V' || c == 'W' || c == 'Y') {\n                newChars[i] = 'b';\n    \
    \        } else if(c == 'C' || c == 'G' || c == 'H' || c == 'J' || c == 'K' ||\
    \ c == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c ==\
    \ 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n                newChars[i]\
    \ = 'c';\n            } else if(c == 'D' || c == 'H' || c == 'J' || c == 'K' ||\
    \ c == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c ==\
    \ 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n                newChars[i]\
    \ = 'd';\n            } else if(c == 'E' || c == 'J' || c == 'K' || c == 'L' ||\
    \ c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c ==\
    \ 'T' || c == 'V' || c == 'W' || c == 'Y') {\n                newChars[i] = 'e';\n\
    \            } else if(c == 'F' || c == 'J' || c == 'K' || c == 'L' || c == 'M'\
    \ || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c\
    \ == 'V' || c == 'W' || c == 'Y') {\n                newChars[i] = 'f';\n    \
    \        } else if(c == 'G' || c == 'J' || c == 'K' || c == 'L' || c == 'M' ||\
    \ c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c ==\
    \ 'V' || c == 'W' || c == '\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dajjml5.java:38: error: illegal line end in character literal\n\
    \            } else if(c == 'G' || c == 'J' || c == 'K' || c == 'L' || c == 'M'\
    \ || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c\
    \ == 'V' || c == 'W' || c == '\n                                             \
    \                                                                            \
    \                                                              ^\n/tmp/tmp3dajjml5.java:39:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp3dajjml5.java:40: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmp3dajjml5.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n           ^\n/tmp/tmp3dajjml5.java:40: error:\
    \ ';' expected\n    public static void main(String[] args) {\n               \
    \  ^\n/tmp/tmp3dajjml5.java:40: error: '.class' expected\n    public static void\
    \ main(String[] args) {\n                                     ^\n/tmp/tmp3dajjml5.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3dajjml5.java:48: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n                continue;\n            }\n   \
    \         int index = c - 'a';\n            int index2 = index - 2;\n        \
    \    char replacement = chars[index2];\n            sb.append(replacement);\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -30\n\tat Problem.encode(tmp0a3iyw6a.java:31)\n\tat Problem.main(tmp0a3iyw6a.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isUpperCase(ch)) {\n                      \
    \  sb.append(Character.toLowerCase(ch));\n                    } else if (Character.isLowerCase(ch))\
    \ {\n                        sb.append(Character.toUpperCase(ch));\n         \
    \           }\n                }\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7dqjjfjb.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            } else if(c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n                sb.append(c);\n       \
    \     } else {\n                sb.append(Character.toUpperCase(c));\n       \
    \     }\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_rd2yo2.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] letters = message.toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ letters.length; i++) {\n            char c = letters[i];\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n\
    \        Arrays.stream(vowels).forEach(v -> {\n            int index = Arrays.binarySearch(vowels,\
    \ v);\n            if (index >= 0) {\n                sb.append(letters[index\
    \ + 2]);\n            }\n        });\n        return sb.toString();\n    }\n \
    \   public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3ni54yw.java:32: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(vowels).forEach(v -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        upper bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            } else {\n\
    \                sb.append(Character.toLowerCase(c));\n            }\n       \
    \ }\n        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprabzog2z.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Character.isLetter(ch11\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnktymo72.java:68: error: ')' expected\n                       \
    \                                                                            \
    \ if (Character.isLetter(ch11\n                                              \
    \                                                                            \
    \     ^\n/tmp/tmpnktymo72.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpnktymo72.java:70: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpnktymo72.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpnktymo72.java:70: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpnktymo72.java:70:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnktymo72.java:78: error: reached\
    \ end of file while parsing\n}\n ^\n/tmp/tmpnktymo72.java:79: error: reached end\
    \ of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49el6koa.java:277: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                String s = Character.toString(c);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    char\
    \ ch = s.charAt(j);\n                    if (Character.isLetter(ch)) {\n     \
    \                   String s2 = Character.toString(ch);\n                    \
    \    int index = s2.indexOf(ch);\n                        if (index != -1) {\n\
    \                            String s2 = Character.toString(s2.charAt(index +\
    \ 1));\n                            sb.append(s2.toUpperCase());\n           \
    \             } else {\n                            sb.append(ch);\n         \
    \               }\n                    } else {\n                        sb.append(ch);\n\
    \                    }\n                }\n            } else {\n            \
    \    sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_yn6qr1b.java:33: error: variable s2 is already defined in method\
    \ encode(String)\n                            String s2 = Character.toString(s2.charAt(index\
    \ + 1));\n                                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      char[] newChars = new char[chars.length];\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            char newChar = Character.toUpperCase(chars[++i]);\n    \
    \        newChars[index] = newChar;\n        }\n        return new String(newChars);\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ 19\n\tat Problem.encode(tmptarl3jh8.java:26)\n\tat Problem.main(tmptarl3jh8.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdi_mmi3.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] chars = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyemv46eb.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"\
    This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String\
    \ encode(String message) {\n        char[] letters = message.toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ letters.length; i++) {\n            char letter = letters[i];\n            if\
    \ (Character.isLetter(letter)) {\n                String upperLetter = Character.toUpperCase(letter);\n\
    \                String lowerLetter = Character.toLowerCase(letter);\n       \
    \         for (int j = 0; j < i; j++) {\n                    if (Character.isLetter(letters[j]))\
    \ {\n                        String upperLetter2 = Character.toUpperCase(letters[j]);\n\
    \                        String lowerLetter2 = Character.toLowerCase(letters[j]);\n\
    \                        if (upperLetter.equals(upperLetter2)) {\n           \
    \                 letters[j] = lowerLetter;\n                        }\n     \
    \                   else if (lowerLetter.equals(lowerLetter2)) {\n           \
    \                 letters[j] = upperLetter;\n                        }\n     \
    \               }\n                }\n                sb.append(letter);\n   \
    \         }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps0ijd7qt.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                String upperLetter = Character.toUpperCase(letter);\n\
    \                                                          ^\n/tmp/tmps0ijd7qt.java:26:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    String lowerLetter = Character.toLowerCase(letter);\n                   \
    \                                       ^\n/tmp/tmps0ijd7qt.java:29: error: incompatible\
    \ types: char cannot be converted to String\n                        String upperLetter2\
    \ = Character.toUpperCase(letters[j]);\n                                     \
    \                              ^\n/tmp/tmps0ijd7qt.java:30: error: incompatible\
    \ types: char cannot be converted to String\n                        String lowerLetter2\
    \ = Character.toLowerCase(letters[j]);\n                                     \
    \                              ^\n/tmp/tmps0ijd7qt.java:32: error: incompatible\
    \ types: String cannot be converted to char\n                            letters[j]\
    \ = lowerLetter;\n                                         ^\n/tmp/tmps0ijd7qt.java:35:\
    \ error: incompatible types: String cannot be converted to char\n            \
    \                letters[j] = upperLetter;\n                                 \
    \        ^\n6 errors\n"
  stdout: ''
