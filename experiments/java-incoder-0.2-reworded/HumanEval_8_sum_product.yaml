name: HumanEval_8_sum_product
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given array list of integers, return a pair consisting\
  \ of a sum and a product of all the integers in an array array list.\n    // Empty\
  \ sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((new\
  \ ArrayList<Long>(Arrays.asList())))\n    // (Pair.with(0l, 1l))\n    // >>> sumProduct((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n   \
  \ // (Pair.with(10l, 24l))\n    public static Pair<Long, Long> sumProduct(ArrayList<Long>\
  \ numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sumProduct((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));\n    assert(sumProduct((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l,\
  \ 1l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l,\
  \ (long)0l)))).equals((Pair.with(100l, 0l))));\n    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));\n    assert(sumProduct((new\
  \ ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));\n\
  \    }\n\n}\n"
completions: ["        long sum = 0;\n        long product = 1;\n        for (long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (Long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (Long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (Long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (Long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (Long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (long\
    \ num : numbers) {\n            sum += num;\n            product *= num;\n   \
    \     }\n        return Pair.with(sum, product);", "        long sum = 0;\n  \
    \      long product = 1;\n        for (Long number : numbers) {\n            sum\
    \ += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (Long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (Long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (Long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        for (Long\
    \ number : numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Pair.with(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        for (Long number : numbers) {\n          \
    \  sum += number;\n            product *= number;\n        }\n        return Pair.with(sum,\
    \ product);"]
stop_tokens:
- "\n    }\n"
