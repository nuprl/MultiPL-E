language: java
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcooowmtn.java:64: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcooowmtn.java:65: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpcooowmtn.java:65: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpcooowmtn.java:65:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpcooowmtn.java:65: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpcooowmtn.java:65:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpcooowmtn.java:77: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long currentMinValue = minValue;\n       \
    \ Long currentMaxValue = maxValue;\n        Long currentMinValueIndex = -1;\n\
    \        Long currentMaxValueIndex = -1;\n        Long currentMinValueIndex2 =\
    \ -1;\n        Long currentMaxValueIndex2 = -1;\n        Long currentMinValueIndex3\
    \ = -1;\n        Long currentMaxValueIndex3 = -1;\n        Long currentMinValueIndex4\
    \ = -1;\n        Long currentMaxValueIndex4 = -1;\n        Long currentMinValueIndex5\
    \ = -1;\n        Long currentMaxValueIndex5 = -1;\n        Long currentMinValueIndex6\
    \ = -1;\n        Long currentMaxValueIndex6 = -1;\n        Long currentMinValueIndex7\
    \ = -1;\n        Long currentMaxValueIndex7 = -1;\n        Long currentMinValueIndex8\
    \ = -1;\n        Long currentMaxValueIndex8 = -1;\n        Long currentMinValueIndex9\
    \ = -1;\n        Long currentMaxValueIndex9 = -1;\n        Long currentMinValueIndex10\
    \ = -1;\n        Long currentMaxValueIndex10 = -1;\n        Long currentMinValueIndex11\
    \ = -1;\n        Long currentMaxValueIndex11 = -1;\n        Long currentMinValueIndex12\
    \ = -1;\n        Long currentMaxValueIndex12 = -1;\n        Long currentMinValueIndex13\
    \ = -1;\n        Long currentMaxValueIndex13 = -1;\n        Long currentMinValueIndex14\
    \ = -1;\n        Long currentMaxValueIndex14 = -1;\n        Long currentMinValueIndex15\
    \ = -1;\n        Long currentMaxValueIndex15 = -1;\n        Long currentMinValueIndex16\
    \ = -1;\n        Long currentMaxValueIndex16 = -1;\n        Long currentMinValueIndex17\
    \ = -1;\n        Long currentMaxValueIndex17 = -1;\n        Long currentMinValueIndex18\
    \ = -1;\n        Long currentMaxValueIndex18 = -1;\n        Long currentMinValueIndex19\
    \ = -1;\n        Long currentMaxValueIndex19 = -1;\n        Long currentMinValueIndex20\
    \ = -1;\n        Long currentMaxValueIndex20 = -1;\n        Long currentMinValueIndex21\
    \ = -1;\n        Long currentMaxValueIndex21 = -1;\n        Long currentMinValueIndex22\
    \ = -1;\n        Long currentMaxValueIndex22 = -1;\n        Long currentMin\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45ehj729.java:69: error: ';' expected\n        Long currentMin\n\
    \                       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid4\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzr4xnt18.java:63: error: ';' expected\n        long mid4\n    \
    \             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpki5xsm48.java:61: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = null;\n        Long max = null;\n   \
    \     for (Long val : lst) {\n            if (min == null || val < min) {\n  \
    \              min = val;\n            }\n            if (max == null || val >\
    \ max) {\n                max = val;\n            }\n        }\n        if (min\
    \ == null) {\n            min = 0l;\n        }\n        if (max == null) {\n \
    \           max = 0l;\n        }\n        Long current = min;\n        while (current\
    \ <= max) {\n            result.add(current);\n            current += 1;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zha8u7d.java:45)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_1ay81g.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_e6m6kt.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_e6m6kt.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long current = min;\n  \
    \      long next = max;\n        do {\n            result.add(current);\n    \
    \        current = next;\n            next = next + 1;\n        } while (current\
    \ < max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanzqlgns.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpanzqlgns.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.get(0);\n        long max = lst.get(lst.size()\
    \ - 1);\n        long mid = min + ((max - min) / 2);\n        long temp;\n   \
    \     for (long i : lst) {\n            if (i < mid) {\n                temp =\
    \ i;\n            } else if (i > mid) {\n                temp = mid;\n       \
    \     } else {\n                temp = mid;\n            }\n            result.add(temp);\n\
    \            mid = temp + ((max - temp) / 2);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaf42dljx.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            result.add(lst.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz8mn2_d.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc31lrzx1.java:60: error: ';' expected\n        long mid38 = mid\n\
    \                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(max);\n                max = i;\n  \
    \          } else {\n                result.add(min);\n                min = i;\n\
    \                max = i;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4okwm7si.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size()-1);\n        long temp;\n        for(int i = 1; i < lst.size();\
    \ i++) {\n            temp = lst.get(i);\n            if(temp < minValue) {\n\
    \                minValue = temp;\n            }\n            if(temp > maxValue)\
    \ {\n                maxValue = temp;\n            }\n        }\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            temp = lst.get(i);\n            if(temp\
    \ < minValue) {\n                result.add(minValue);\n                minValue\
    \ = temp;\n            }\n            if(temp > maxValue) {\n                result.add(maxValue);\n\
    \                maxValue = temp;\n            }\n        }\n        result.add(minValue);\n\
    \        result.add(maxValue);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5v13f0d9.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_e6m6kt.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n  \
    \      long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 =\
    \ mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n     \
    \   long mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 =\
    \ mid / 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n\
    \        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long\
    \ mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid\
    \ / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n    \
    \    long mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23\
    \ = mid / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n\
    \        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long\
    \ mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid\
    \ / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n    \
    \    long mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35\
    \ = mid / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n\
    \        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long\
    \ mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid\
    \ / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n    \
    \    long mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47\
    \ = mid / 47;\n        long mid48 = mid / 48;\n        long mid49 = mid / \n \
    \   }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpodu_89fd.java:72: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpodu_89fd.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpodu_89fd.java:73: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpodu_89fd.java:73:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpodu_89fd.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpodu_89fd.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpodu_89fd.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        while (current < max) {\n            result.add(current);\n\
    \            current += 1;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9l784ih.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j > min;\
    \ j--) {\n                if (lst.get(j) < temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplm2d2ug9.java:28: error: no suitable method found for get(long)\n\
    \                if (lst.get(j) < temp) {\n                       ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n/tmp/tmplm2d2ug9.java:29: error: no suitable method\
    \ found for get(long)\n                    temp = lst.get(j);\n              \
    \                ^\n    method List.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method AbstractList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method ArrayList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n       \
    \ long currentMaxValue = maxValue;\n        long currentMinIndex = 0;\n      \
    \  long currentMaxIndex = 0;\n        boolean isFirst = true;\n        boolean\
    \ isLast = true;\n        boolean isMiddle = true;\n        boolean isFirstMiddle\
    \ = true;\n        boolean isLastMiddle = true;\n        boolean isFirstLast =\
    \ true;\n        boolean isMiddleMiddle = true;\n        boolean isFirstLastMiddle\
    \ = true;\n        boolean isLastLast = true;\n        boolean isFirstLastLast\
    \ = true;\n        boolean isMiddleLast = true;\n        boolean isFirstMiddleLast\
    \ = true;\n        boolean isLastMiddleLast = true;\n        boolean isFirstMiddleMiddle\
    \ = true;\n        boolean isLastMiddleMiddle = true;\n        boolean isFirstLastMiddleMiddle\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        \n    }\n    public static void main(String[] args) {\n   \
    \ assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpydyblquq.java:49: error: variable isLastLastMiddle is already defined\
    \ in method strangeSortList(ArrayList<Long>)\n        boolean isLastLastMiddle\
    \ = true;\n                ^\n/tmp/tmpydyblquq.java:50: error: variable isFirstLastLastMiddle\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        boolean\
    \ isFirstLastLastMiddle = true;\n                ^\n/tmp/tmpydyblquq.java:51:\
    \ error: variable isMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:52:\
    \ error: variable isFirstMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isFirstMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:53:\
    \ error: variable isLastMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:54:\
    \ error: variable isFirstLastMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isFirstLastMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:55:\
    \ error: variable isLastLastMiddle is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastLastMiddle = true;\n                ^\n/tmp/tmpydyblquq.java:56:\
    \ error: variable isFirstLastLastMiddle is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isFirstLastLastMiddle = true;\n                ^\n/tmp/tmpydyblquq.java:57:\
    \ error: variable isMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:58:\
    \ error: variable isFirstMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isFirstMiddleMiddleLast = true;\n                ^\n/tmp/tmpydyblquq.java:59:\
    \ error: variable isLastMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastMiddleMid"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(Long i : lst) {\n\
    \            result.add(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyilqbbj.java:28)\n"
  stdout: ''
