language: java
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(new String(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwbva7bf.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (byte b : md5Bytes)\
    \ {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1tt8dcc.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_mqormu.java:14: error: <identifier> expected\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(St"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toString((md5Bytes[i] & 0xff) + 0x100,\
    \ 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5zyge3v.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64xwyi16.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79nz55dn.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \         throw new RuntimeException(e);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrt6klij.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e0mb53u.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtcxrtue.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_7yzcf.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString);\n        \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ md5()\n    location: class String\n/tmp/tmpqv_7yzcf.java:14: error: invalid\
    \ method reference\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \                                                              ^\n  non-static\
    \ method toString() cannot be referenced from a static context\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString(md5Bytes[i] & 0xFF));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_312rroi.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
