language: java
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(new String(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwbva7bf.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (byte b : md5Bytes)\
    \ {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1tt8dcc.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_mqormu.java:14: error: <identifier> expected\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(St"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toString((md5Bytes[i] & 0xff) + 0x100,\
    \ 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5zyge3v.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64xwyi16.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79nz55dn.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \         throw new RuntimeException(e);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrt6klij.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e0mb53u.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtcxrtue.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_7yzcf.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString);\n        \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ md5()\n    location: class String\n/tmp/tmpqv_7yzcf.java:14: error: invalid\
    \ method reference\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \                                                              ^\n  non-static\
    \ method toString() cannot be referenced from a static context\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString(md5Bytes[i] & 0xFF));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_312rroi.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length;\
    \ i++) {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxrvs528.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuygqzzfx.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \         throw new RuntimeException(e);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrt6klij.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddfy8f39.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy54f9lsn.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length;\
    \ i++) {\n            sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxrvs528.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] hash = digest.digest();\n            return Optional.of(String.format(\"\
    %032x\", new BigInteger(1, hash)));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnqpmr4e.java:27)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_mqormu.java:14: error: <identifier> expected\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(St"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9pb2po7.java:14: error: <identifier> expected\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toLowerCase).map(String::trim).map(Strin"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = s.getBytes(\"UTF-8\");\n             \
    \   digest.update(bytes, 0, bytes.length);\n                byte[] md5Bytes =\
    \ digest.digest();\n                StringBuilder sb = new StringBuilder();\n\
    \                for (int i = 0; i < md5Bytes.length; i++) {\n               \
    \     sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            \
    \    throw new RuntimeException(e);\n            }\n        });\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1n3wb51.java:31)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqghmfqce.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr2m0n_5.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp511ergmb.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc_tqk7hq.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(String.format(\"\
    %032x\", new BigInteger(1, bytes)));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptdwz5n4.java:26)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79nz55dn.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                return new\
    \ String(md.digest());\n            } catch (NoSuchAlgorithmException e) {\n \
    \               throw new RuntimeException(e);\n            }\n        });\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ax2o0ts.java:25)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = s.getBytes(\"UTF-8\");\n             \
    \   digest.update(bytes, 0, bytes.length);\n                byte[] md5Bytes =\
    \ digest.digest();\n                StringBuilder sb = new StringBuilder();\n\
    \                for (int i = 0; i < md5Bytes.length; i++) {\n               \
    \     sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n                }\n                return sb.toString();\n           \
    \ } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n    \
    \            throw new RuntimeException(e);\n            }\n        });\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7oc0iptp.java:31)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr516vbuz.java:32)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr2m0n_5.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr2m0n_5.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilsihom_.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = digest.digest(text.getBytes());\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61bleutj.java:30)\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnt6ldmpl.java:31)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : md5Bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.reverse().toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dx1qjie.java:32)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.reverse().toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9lwr61vd.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr516vbuz.java:32)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(new String(sb));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4qva_95.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtcxrtue.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = s.getBytes(\"UTF-8\");\n             \
    \   digest.update(bytes, 0, bytes.length);\n                byte[] md5Bytes =\
    \ digest.digest();\n                StringBuilder sb = new StringBuilder();\n\
    \                for (int i = 0; i < md5Bytes.length; i++) {\n               \
    \     sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n\
    \            }\n        });\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqpxnyn4n.java:17: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n                byte[] bytes = s.getBytes(\"\
    UTF-8\");\n                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0lwa5a3e.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString).map(String::trim).map(String::toLowerCase).map(String::trim).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyat8pv60.java:14: error: <identifier> expected\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString).map(String::trim).map(String::toLowerCase).map(String::trim).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::toUpperCase).map(String::hashCode).map(String::toString).map(String::to"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                StringBuilder sb = new StringBuilder();\n  \
    \              for (byte b : digest) {\n                    sb.append(Integer.toHexString((b\
    \ & 0xFF) | 0x100).substring(1,3));\n                }\n                return\
    \ sb.toString();\n            } catch (NoSuchAlgorithmException e) {\n       \
    \         throw new RuntimeException(e);\n            }\n        });\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfso87f__.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqghmfqce.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5 = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5.length; i++) {\n     \
    \           sb.append(Integer.toHexString((md5[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2dtph6uo.java:32)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString().getBytes(),\
    \ \"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcyh1d7_.java:24: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(sb.toString().getBytes(), \"UTF-8\"));\n                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(new String(Hex.encodeHex(bytes)));\n        }\
    \ catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n      \
    \      throw new RuntimeException(e);\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ltynq6n.java:20: error: cannot find symbol\n            return\
    \ Optional.of(new String(Hex.encodeHex(bytes)));\n                           \
    \               ^\n  symbol:   variable Hex\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::hashCode).map(String::toString).map(String::md5).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::to\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk33mgtbk.java:14: error: ')' expected\n        return Optional.ofNullable(text).map(String::hashCode).map(String::toString).map(String::md5).map(String::toLowerCase).map(String::trim).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(String::toUpperCase).map(Str"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddfy8f39.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztuvjjlm.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy54f9lsn.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpugoxuvh_.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(bytesToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hs69mpg.java:20: error: cannot find symbol\n            return\
    \ Optional.of(bytesToHexString(bytes));\n                               ^\n  symbol:\
    \   method bytesToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toString((md5Bytes[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmy88al74.java:32)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79nz55dn.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchtzuyvj.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString()));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtdqcr4j.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddfy8f39.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqgg1x56.java:31)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3tf25rb8.java:32)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hhz9874.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmg9pote.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            throw new RuntimeException(e);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeey8zr3z.java:32)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecdf_oxy.java:32)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6yw2qea.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString().getBytes(),\
    \ \"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcyh1d7_.java:24: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(sb.toString().getBytes(), \"UTF-8\"));\n                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2_e27qx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < md5Bytes.length;\
    \ i++) {\n            sb.append(Integer.toString((md5Bytes[i] & 0xff) + 0x100,\
    \ 16).substring(1));\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpye7wvn61.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5 = digest.digest();\n      \
    \  StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < md5.length;\
    \ i++) {\n            sb.append(Integer.toString((md5[i] & 0xff) + 0x100, 16).substring(1));\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pwmvn8l.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztuvjjlm.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr2m0n_5.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toHexString(md5Bytes[i]\
    \ & 0xFF));\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_ova479.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                StringBuilder sb = new StringBuilder();\n  \
    \              for (int i = 0; i < digest.length; i++) {\n                   \
    \ sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n\
    \            }\n        });\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkr52pbo.java:30)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            throw\
    \ new RuntimeException(e);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwskx0wa.java:32)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (byte b : md5Bytes) {\n            \
    \    sb.append(String.format(\"%02x\", b));\n            }\n            return\
    \ Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbwv3db6m.java:32)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xnw1bd2.java:31)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.reverse().toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpah0f2i49.java:30)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchtzuyvj.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < bytes.length; i++) {\n                sb.append(Integer.toHexString((bytes[i]\
    \ & 0xff) + 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9q0r6y5.java:30)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilsihom_.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr2m0n_5.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(bytesToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwjnb61x.java:20: error: cannot find symbol\n            return\
    \ Optional.of(bytesToHexString(bytes));\n                               ^\n  symbol:\
    \   method bytesToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                return new String(Hex.encodeHex(digest));\n\
    \            } catch (NoSuchAlgorithmException e) {\n                throw new\
    \ RuntimeException(e);\n            }\n        });\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp5s_xoxh.java:19: error: cannot find symbol\n                return\
    \ new String(Hex.encodeHex(digest));\n                                  ^\n  symbol:\
    \   variable Hex\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \         return Optional.empty();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyc8fdv_.java:32)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,\
    \ 3));\n            }\n            return Optional.of(sb.toString());\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8hwt8nno.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes();\n            digest.update(bytes);\n            byte[]\
    \ md5Bytes = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbh5t5_1.java:32)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr516vbuz.java:32)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                StringBuilder sb = new StringBuilder();\n  \
    \              for (int i = 0; i < digest.length; i++) {\n                   \
    \ sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n\
    \            }\n        });\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkr52pbo.java:30)\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_7yzcf.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString);\n        \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ md5()\n    location: class String\n/tmp/tmpqv_7yzcf.java:14: error: invalid\
    \ method reference\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \                                                              ^\n  non-static\
    \ method toString() cannot be referenced from a static context\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmg9pote.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddfy8f39.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqghmfqce.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvvvjs69.java:30)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder md5StringBuilder = new StringBuilder();\n        for (byte\
    \ b : md5Bytes) {\n            md5StringBuilder.append(String.format(\"%02x\"\
    , b));\n        }\n        return Optional.of(md5StringBuilder.toString());\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnq6886l.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] hash = digest.digest();\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (byte b : hash) {\n \
    \           sb.append(String.format(\"%02x\", b));\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnujx9ubr.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_7yzcf.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString);\n        \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ md5()\n    location: class String\n/tmp/tmpqv_7yzcf.java:14: error: invalid\
    \ method reference\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \                                                              ^\n  non-static\
    \ method toString() cannot be referenced from a static context\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy54f9lsn.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvvvjs69.java:30)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xFF));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmg9pote.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc_tqk7hq.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            int val = ((int) md5Bytes[i]) & 0xff;\n\
    \            if (val < 16) {\n                sb.append(\"0\");\n            }\n\
    \            sb.append(Integer.toHexString(val));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvspupygf.java:29: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (byte b : md5Bytes)\
    \ {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1tt8dcc.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(new String(sb.toString().getBytes(),\
    \ \"UTF-8\"));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lrw4hr1.java:30)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03tzm_sb.java:31)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            int val = ((int) md5Bytes[i]) & 0xff;\n\
    \            if (val < 16) {\n                sb.append(\"0\");\n            }\n\
    \            sb.append(Integer.toHexString(val));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvspupygf.java:29: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(Integer.toHexString(b\
    \ & 0xff));\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjndli7i.java:23: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(String.format(\"\
    %02x\", b));\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw4jrqkb3.java:23: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb);\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyq_bwqcg.java:24: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            return Optional.of(sb);\n           \
    \                   ^\n    equality constraints: String\n    lower bounds: StringBuilder\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5 = digest.digest();\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < md5.length; i++) {\n                sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rss0azm.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        return Optional.of(new\
    \ String(digest.digest()));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrqpzflk.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(new String(sb.toString()));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztuvjjlm.java:30)\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyc3urgym.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_7yzcf.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).map(String::toString);\n        \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ md5()\n    location: class String\n/tmp/tmpqv_7yzcf.java:14: error: invalid\
    \ method reference\n        return Optional.ofNullable(text).map(String::md5).map(String::toString);\n\
    \                                                              ^\n  non-static\
    \ method toString() cannot be referenced from a static context\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtcxrtue.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvau8p6wm.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr516vbuz.java:32)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes);\n     \
    \       byte[] md5Bytes = digest.digest();\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++) {\n\
    \                sb.append(Integer.toHexString(md5Bytes[i] & 0xFF));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6ux12xp.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(new String(bytes,\
    \ \"UTF-8\"));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4uxpwlqh.java:26)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).orElse(null);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaefh26ab.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).orElse(null);\n                 \
    \                            ^\n  cannot find symbol\n    symbol:   method md5()\n\
    \    location: class String\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toString((md5Bytes[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgeem8gxk.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpafufikjm.java:26)\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.reverse().toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_ebg7x9.java:30)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                StringBuilder sb = new StringBuilder();\n  \
    \              for (int i = 0; i < digest.length; i++) {\n                   \
    \ sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1,3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException e) {\n                return null;\n            }\n\
    \        }).orElse(null);\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8xfkxfx.java:27: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        }).orElse(null);\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(new String(sb.toString().getBytes(),\
    \ \"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgziajcs0.java:24: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(sb.toString().getBytes(), \"UTF-8\"));\n                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes, 0, bytes.length);\n            byte[] md5Bytes\
    \ = digest.digest();\n            StringBuilder sb = new StringBuilder();\n  \
    \          for (int i = 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplae3hrj0.java:32)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptw76e44u.java:32)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8agfkz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(String.format(\"\
    %02x\", b));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptut1as_.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hhz9874.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyc3urgym.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = md.digest(s.getBytes());\n           \
    \     return new String(bytes);\n            } catch (NoSuchAlgorithmException\
    \ e) {\n                throw new RuntimeException(e);\n            }\n      \
    \  });\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_uaxzsav.java:25)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyc3urgym.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = digest.digest(text.getBytes());\n            StringBuilder sb = new\
    \ StringBuilder();\n            for (int i = 0; i < bytes.length; i++) {\n   \
    \             sb.append(Integer.toHexString((bytes[i] & 0xFF) | 0x100).substring(1));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpem0rrx7a.java:30)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5Bytes = digest.digest();\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < md5Bytes.length; i++) {\n                sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e0mb53u.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                md.update(s.getBytes());\n                byte[] digest\
    \ = md.digest();\n                StringBuilder sb = new StringBuilder();\n  \
    \              for (int i = 0; i < digest.length; i++) {\n                   \
    \ sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1, 3));\n\
    \                }\n                return sb.toString();\n            } catch\
    \ (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n\
    \            }\n        });\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5w8khe.java:30)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkshhmyge.java:30)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            return Optional.of(byteToHexString(bytes));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ukba0y5.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes);\n        byte[] md5Bytes = digest.digest();\n \
    \       StringBuilder sb = new StringBuilder();\n        for (byte b : md5Bytes)\
    \ {\n            sb.append(Integer.toHexString(b & 0xff));\n        }\n      \
    \  return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yagjtbv.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00w32yj1.java:30)\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmayx20iz.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw6fa6u0.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xff));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdirmp_7h.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.of(byteToHexString(bytes));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_skwnbm.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToHexString(bytes));\n                               ^\n  symbol:\
    \   method byteToHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (byte b : bytes) {\n                sb.append(Integer.toHexString(b\
    \ & 0xff));\n            }\n            return Optional.of(sb.toString());\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp789ilyp2.java:30)\n"
  stdout: ''
  timestamp: 1659798678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = null;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\"\
    );\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \        }\n        byte[] bytes = text.getBytes();\n        digest.update(bytes);\n\
    \        byte[] md5 = digest.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < md5.length; i++) {\n            sb.append(Integer.toHexString((md5[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpht4__0pn.java:30: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = text.getBytes(\"UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n\
    \            byte[] md5Bytes = digest.digest();\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length; i++)\
    \ {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy87borx.java:19: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] md5Bytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ md5Bytes.length; i++) {\n            sb.append(Integer.toHexString((md5Bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy54f9lsn.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            return Optional.ofHexString(bytes);\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11h6ykq4.java:20: error: cannot find symbol\n            return\
    \ Optional.ofHexString(bytes);\n                           ^\n  symbol:   method\
    \ ofHexString(byte[])\n  location: class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659798682
