name: HumanEval_48_is_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\
  \"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static boolean isPalindrome(String text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\
  \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n\
    \        return new String(chars).equals(new String(chars).reverse());", "   \
    \     char[] chars = text.toCharArray();\n        int length = chars.length;\n\
    \        if (length == 0) {\n            return true;\n        }\n        if (length\
    \ == 1) {\n            return chars[0] == chars[length - 1];\n        }\n    \
    \    int mid = (length / 2) + 1;\n        char[] left = new char[mid];\n     \
    \   char[] right = new char[length - mid];\n        for (int i = 0; i < mid; i++)\
    \ {\n            left[i] = chars[i];\n        }\n        for (int i = mid; i <\
    \ length; i++) {\n            right[i - mid] = chars[i];\n        }\n        return\
    \ Arrays.equals(left, right);", "        if (text == null || text.length() ==\
    \ 0) {\n            return true;\n        }\n        char[] chars = text.toCharArray();\n\
    \        int length = chars.length;\n        int half = length / 2;\n        for\
    \ (int i = 0; i < half; i++) {\n            if (chars[i] != chars[length - i -\
    \ 1]) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n\
    \        return Arrays.equals(chars, new StringBuilder(chars).reverse().toCharArray());",
  '        return text.length() <= 1 ? true : text.charAt(0) == text.charAt(text.length()
    - 1) && isPalindrome(text.substring(1, text.length() - 1));', "        char[]\
    \ chars = text.toCharArray();\n        Arrays.sort(chars);\n        return new\
    \ String(chars).equals(new String(chars).trim());", "        if (text == null\
    \ || text.length() == 0) {\n            return true;\n        }\n        char[]\
    \ chars = text.toCharArray();\n        Arrays.sort(chars);\n        return Arrays.equals(chars,\
    \ new char[chars.length / 2]);", '        return text.equals(new StringBuilder(text).reverse().toString());',
  "        char[] charArray = text.toCharArray();\n        int length = charArray.length;\n\
    \        int halfLength = (length / 2);\n        for (int i = 0; i < halfLength;\
    \ i++) {\n            if (charArray[i] != charArray[length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       if (text == null || text.length() == 0) {\n            return true;\n\
    \        }\n        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n\
    \        return Arrays.equals(chars, new StringBuilder(chars).reverse().toCharArray());",
  '        return text.equals(new StringBuilder(text).reverse().toString());', " \
    \       char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n    \
    \    return Arrays.equals(chars, new StringBuilder(chars).reverse().toCharArray());",
  "        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n     \
    \   return new String(chars).equals(new String(chars).trim());", "        char[]\
    \ charArray = text.toCharArray();\n        int length = charArray.length;\n  \
    \      int halfLength = (length / 2);\n        for (int i = 0; i < halfLength;\
    \ i++) {\n            if (charArray[i] != charArray[length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n    \
    \    return Arrays.equals(chars, new StringBuilder(chars).reverse().toCharArray());",
  "        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n     \
    \   return new String(chars).equals(new String(chars).trim());", "        char[]\
    \ chars = text.toCharArray();\n        Arrays.sort(chars);\n        return new\
    \ String(chars).equals(new String(chars).trim());", "        char[] charArray\
    \ = text.toCharArray();\n        Arrays.sort(charArray);\n        return new String(charArray).equals(new\
    \ String(charArray).reverse());", '        return text.equals(new StringBuilder(text).reverse().toString());',
  '        return text.length() <= 1 ? true : text.equals(new StringBuilder(text).reverse().toString());']
stop_tokens:
- "\n    }\n"
