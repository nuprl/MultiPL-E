name: HumanEval_47_median
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return median of elements in the array list l.\n    // >>>\
  \ median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l,\
  \ (long)5l))))\n    // (float)3l\n    // >>> median((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    // (15.0f)\n  \
  \  public static float median(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(median((new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
  \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
  \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
  \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
completions: ["        Collections.sort(l);\n        float mid = l.get(l.size()/2);\n\
    \        if (l.size()%2 == 0) {\n            return mid;\n        } else {\n \
    \           return (float)mid;\n        }", "        Collections.sort(l);\n  \
    \      if (l.size() % 2 == 0) {\n            return l.get(l.size() / 2);\n   \
    \     } else {\n            return (float) l.get(l.size() / 2);\n        }", " \
    \       Collections.sort(l);\n        return l.get(l.size()/2);", "        Collections.sort(l);\n\
    \        float mid = l.get(l.size()/2);\n        return mid;", "        float\
    \ median = 0;\n        float sum = 0;\n        float average = 0;\n        int\
    \ count = 0;\n        long largest = 0;\n        long smallest = 0;\n        long\
    \ sumOfSquares = 0;\n        long sumOfProducts = 0;\n        long productOfSquares\
    \ = 0;\n        long productOfProducts = 0;\n        long sumOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfSquares = 0;\n        long productOfProductsOfProducts\
    \ = 0;\n        long sumOfProductsOfProductsOfSquares = 0;\n        long productOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProducts = 0;\n        long\
    \ sumOfProductsOfProductsOfProductsOfSquares = 0;\n        long productOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProducts = 0;\n  \
    \      long sumOfProductsOfProductsOfProductsOfProductsOfSquares = 0;\n      \
    \  long productOfProductsOfProductsOfProductsOfProductsOfSquares = 0;\n      \
    \  long productOfProductsOfProductsOfProductsOfProductsOfProducts = 0;\n     \
    \   long sumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares = 0;\n\
    \        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long sumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long sumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long sumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long productOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts",
  "        Collections.sort(l);\n        return l.get(l.size()/2);", "        Collections.sort(l);\n\
    \        return l.get(l.size()/2);", "        float median = 0;\n        if (l.size()\
    \ % 2 == 0) {\n            median = (float) l.get(l.size() / 2);\n        }\n\
    \        else {\n            median = (float) (((long) l.get(l.size() / 2)) +\
    \ l.get(l.size() / 2 - 1));\n        }\n        return median;", "        float\
    \ median;\n        long largest = Collections.max(l);\n        long smallest =\
    \ Collections.min(l);\n        if (largest == smallest) {\n            median\
    \ = Collections.min(l);\n        } else {\n            float average = (float)\
    \ largest / 2;\n            float diff = (float) largest - average;\n        \
    \    float midpoint = average + diff / 2;\n            median = midpoint;\n  \
    \      }\n        return median;", "        float median = Collections.max(l).floatValue();\n\
    \        float min = Collections.min(l).floatValue();\n        float diff = max\
    \ - min;\n        if (diff > 0)\n            median = (median + min) / 2;\n  \
    \      return median;", "        Collections.sort(l);\n        return l.get(l.size()/2);",
  "        float sum = 0;\n        float median;\n        float average;\n       \
    \ int size = l.size();\n        if (size == 0) {\n            return 0;\n    \
    \    }\n        float largest = l.get(0);\n        for (int i = 1; i < size; i++)\
    \ {\n            sum += l.get(i);\n            if (largest < l.get(i)) {\n   \
    \             largest = l.get(i);\n            }\n        }\n        average =\
    \ sum / size;\n        median = largest + (largest - average) / 2;\n        return\
    \ median;", "        float median;\n        long medianIndex;\n        long medianValue;\n\
    \        long sum;\n        long count;\n        long largest;\n        long smallest;\n\
    \        float average;\n        float largestFloat;\n        float smallestFloat;\n\
    \        float averageFloat;\n        float medianFloat;\n        float medianFloat2;\n\
    \        float medianFloat3;\n        float medianFloat4;\n        float medianFloat5;\n\
    \        float medianFloat6;\n        float medianFloat7;\n        float medianFloat8;\n\
    \        float medianFloat9;\n        float medianFloat10;\n        float medianFloat11;\n\
    \        float medianFloat12;\n        float medianFloat13;\n        float medianFloat14;\n\
    \        float medianFloat15;\n        float medianFloat16;\n        float medianFloat17;\n\
    \        float medianFloat18;\n        float medianFloat19;\n        float medianFloat20;\n\
    \        float medianFloat21;\n        float medianFloat22;\n        float medianFloat23;\n\
    \        float medianFloat24;\n        float medianFloat25;\n        float medianFloat26;\n\
    \        float medianFloat27;\n        float medianFloat28;\n        float medianFloat29;\n\
    \        float medianFloat30;\n        float medianFloat31;\n        float medianFloat32;\n\
    \        float medianFloat33;\n        float medianFloat34;\n        float medianFloat35;\n\
    \        float medianFloat36;\n        float medianFloat37;\n        float medianFloat38;\n\
    \        float medianFloat39;\n        float medianFloat40;\n        float medianFloat41;\n\
    \        float medianFloat42;\n        float medianFloat43;\n        float medianFloat44;\n\
    \        float medianFloat45;\n        float medianFloat46;\n        float medianFloat47;\n\
    \        float medianFloat48;\n        float medianFloat49;\n        float medianFloat50;\n\
    \        float medianFloat51;\n        float medianFloat52;\n        float medianFloat53;\n\
    \        float medianFloat54;\n        float medianFloat55;\n        float medianFloat56;\n\
    \        float medianFloat57;\n        float medianFloat58;\n        float medianFloat59;\n\
    \        float medianFloat60;\n        float medianFloat61;\n        float medianFloat62;\n\
    \        float medianFloat63;\n        float medianFloat64;\n        float medianFloat65;\n\
    \        float medianFloat66;\n        float medianFloat67;\n        float ",
  "        Collections.sort(l);\n        return l.get(l.size()/2);", "        long\
    \ low = l.get(0);\n        long high = l.get(l.size() - 1);\n        float mid\
    \ = (float) low + (float) high;\n        float lower = (float) low;\n        float\
    \ upper = (float) high;\n        if (l.size() % 2 == 0) {\n            lower =\
    \ (float) l.get(0);\n            upper = (float) l.get(l.size() - 1);\n      \
    \  }\n        float median = (float) (((lower + upper) / 2));\n        if (median\
    \ == low) {\n            return (float) low;\n        }\n        if (median ==\
    \ high) {\n            return (float) high;\n        }\n        if (median ==\
    \ mid) {\n            return (float) mid;\n        }\n        return median;",
  "        Collections.sort(l);\n        return l.get(l.size()/2);", "        Collections.sort(l);\n\
    \        return l.get(l.size()/2);", "        Collections.sort(l);\n        return\
    \ l.get(l.size()/2);", "        Collections.sort(l);\n        float median = (float)\
    \ l.get(l.size() / 2);\n        return median;", "        float median = 0;\n\
    \        if (l.size() % 2 == 0) {\n            median = (float) l.stream().sorted().skip(l.size()\
    \ / 2).findFirst().get();\n        } else {\n            median = (float) l.stream().sorted().skip(l.size()\
    \ / 2 + 1).findFirst().get();\n        }\n        return median;"]
stop_tokens:
- "\n    }\n"
