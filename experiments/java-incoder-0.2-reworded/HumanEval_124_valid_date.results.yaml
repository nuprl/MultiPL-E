language: java
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = false;\n        if (dateParts.length\
    \ == 3) {\n            int month = Integer.parseInt(dateParts[0]);\n         \
    \   int day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >=\
    \ 1 && year <= 3000) {\n                valid = true;\n            }\n       \
    \     else if (month >= 4 && month <= 12 && day >= 1 && day <= 30 && year >= 1\
    \ && year <= 3000) {\n                valid = true;\n            }\n         \
    \   else if (month == 2 && day >= 1 && day <= 29 && year >= 1 && year <= 3000)\
    \ {\n                valid = true;\n            }\n            else {\n      \
    \          valid = false;\n            }\n        }\n        else {\n        \
    \    valid = false;\n        }\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc3tc3iv6.java:60)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 29) {\n            return false;\n        }\n        if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11 && day > 30) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 1 && day > 31) {\n            return \n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2tlz67m.java:131: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpd2tlz67m.java:132: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpd2tlz67m.java:132: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpd2tlz67m.java:132:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpd2tlz67m.java:132: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpd2tlz67m.java:132:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpd2tlz67m.java:151: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {\n     \
    \           if (month != 2 && month != 4 && month != 6 && month != 9 && month\
    \ != 11 && month != 12) {\n                    if (day >= 1 && day <= 30) {\n\
    \                        if (month != 1 && month != 3 && month != 5 && month !=\
    \ 7 && month != 8 && month != 10 && month != 12) {\n                         \
    \   if (day >= 1 && day <= 29) {\n                                valid = true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return valid;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjb2gf5o2.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date date1 = null;\n  \
    \      try {\n            date1 = sdf.parse(date);\n        } catch (ParseException\
    \ e) {\n            e.printStackTrace();\n        }\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.setTime(date1);\n        int month = cal.get(Calendar.MONTH);\n \
    \       int day = cal.get(Calendar.DAY_OF_MONTH);\n        int year = cal.get(Calendar.YEAR);\n\
    \        int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n    \
    \    if (month < 1 || month > 12) {\n            return false;\n        }\n  \
    \      if (day < 1 || day > daysInMonth) {\n            return false;\n      \
    \  }\n        if (month == 2) {\n            if (day > 29) {\n               \
    \ return false;\n            }\n        }\n        if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day > 31) {\n                return false;\n            }\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaaxwx21y.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpaaxwx21y.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpaaxwx21y.java:32: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31\n        \
    \            && day <= 30) {\n                if (month == 2) {\n            \
    \        if (day > 29) {\n                        valid = false;\n           \
    \         } else {\n                        valid = true;\n                  \
    \  }\n                } else {\n                    if (day > 31) {\n        \
    \                valid = false;\n                    } else {\n              \
    \          valid = true;\n                    }\n                }\n         \
    \   } else {\n                valid = false;\n            }\n        }\n     \
    \   return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ 1\n\tat Problem.validDate(tmpuv22ihiw.java:31)\n\tat Problem.main(tmpuv22ihiw.java:66)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 28) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return \n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplk4a7fx9.java:133: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmplk4a7fx9.java:134: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmplk4a7fx9.java:134: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmplk4a7fx9.java:134:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmplk4a7fx9.java:134: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmplk4a7fx9.java:134:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplk4a7fx9.java:153: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 30) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 29) {\n            valid = false;\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l89qqd6.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        LocalDate date1 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date2 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date3 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date4 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date5 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date6 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date7 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date8 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date9 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date10 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date11 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date12 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date13 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date14 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date15 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date16 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date17 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tlddy69.java:50: error: <identifier> expected\n        LocalDate\
    \ date17 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.\n                                                                 \
    \                                               ^\n/tmp/tmp2tlddy69.java:51: error:\
    \ ';' expected\n    }\n     ^\n/tmp/tmp2tlddy69.java:52: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmp2tlddy69.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp2tlddy69.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp2tlddy69.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp2tlddy69.java:71:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date date1 = null;\n  \
    \      try {\n            date1 = sdf.parse(date);\n        } catch (ParseException\
    \ e) {\n            e.printStackTrace();\n        }\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.setTime(date1);\n        int month = cal.get(Calendar.MONTH);\n \
    \       int year = cal.get(Calendar.YEAR);\n        int day = cal.get(Calendar.DAY_OF_MONTH);\n\
    \        int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n    \
    \    boolean valid = true;\n        if (date.length() == 0) {\n            valid\
    \ = false;\n        }\n        if (day < 1 || day > daysInMonth) {\n         \
    \   valid = false;\n        }\n        if (month < 1 || month > 12) {\n      \
    \      valid = false;\n        }\n        if (year < 1900 || year > 2100) {\n\
    \            valid = false;\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr22kfow8.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpr22kfow8.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpr22kfow8.java:32: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        boolean valid = false;\n        if (date.length() > 0) {\n          \
    \  if (month >= 1 && month <= 12) {\n                if (day >= 1 && day <= 31)\
    \ {\n                    if (month != 2 && month != 4 && month != 6 && month !=\
    \ 9 && month != 11) {\n                        if (day >= 1 && day <= 30) {\n\
    \                            if (month != 1 && month != 3 && month != 5 && month\
    \ != 7 && month != 8 && month != 10 && month != 12) {\n                      \
    \          valid = true;\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \       return valid;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft73rjb5.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg8fdrb_.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpjg8fdrb_.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpjg8fdrb_.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return valid;\n        }\n        Calendar\
    \ cal = Calendar.getInstance();\n        cal.setLenient(false);\n        cal.set(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]) - 1, Integer.parseInt(dateParts[2]));\n     \
    \   int days = cal.get(Calendar.DAY_OF_MONTH);\n        int months = cal.get(Calendar.MONTH);\n\
    \        int years = cal.get(Calendar.YEAR);\n        if (days < 1 || days > 31)\
    \ {\n            return valid;\n        }\n        if (months < 1 || months >\
    \ 12) {\n            return valid;\n        }\n        if (years < 1000 || years\
    \ > 9999) {\n            return valid;\n        }\n        return valid;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: DAY_OF_MONTH\n\
    \tat java.util.GregorianCalendar.computeTime(GregorianCalendar.java:2648)\n\t\
    at java.util.Calendar.updateTime(Calendar.java:3393)\n\tat java.util.Calendar.complete(Calendar.java:2265)\n\
    \tat java.util.Calendar.get(Calendar.java:1826)\n\tat Problem.validDate(tmpag4gio1k.java:36)\n\
    \tat Problem.main(tmpag4gio1k.java:51)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month1 = Integer.parseInt(dateParts[0]);\n        int day1\
    \ = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        int month2 = Integer.parseInt(dateParts[0]);\n        int day2 = Integer.parseInt(dateParts[1]);\n\
    \        int year2 = Integer.parseInt(dateParts[2]);\n        if (month1 < 1 ||\
    \ month1 > 12) {\n            return false;\n        }\n        if (month2 < 1\
    \ || month2 > 12) {\n            return false;\n        }\n        if (day1 <\
    \ 1 || day1 > 31) {\n            return false;\n        }\n        if (day2 <\
    \ 1 || day2 > 30) {\n            return false;\n        }\n        if (month1\
    \ == month2) {\n            if (day1 > day2) {\n                return false;\n\
    \            }\n            if (year1 > year2) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 30) {\n\
    \                        if (month != 2 && month != 4 && month != 6 && month !=\
    \ 9\n                                && month != 11 && month != 12) {\n      \
    \                      if (day >= 1 && day <= 29) {\n                        \
    \        valid = true;\n                            }\n                      \
    \  }\n                    }\n                } catch (NumberFormatException nfe)\
    \ {\n                    valid = false;\n                }\n            }\n  \
    \      }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2vk6avf1.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        } else {\n            int daysInMonth\
    \ = 0;\n            int month = 0;\n            int year = 0;\n            try\
    \ {\n                month = Integer.parseInt(dateParts[0]);\n               \
    \ year = Integer.parseInt(dateParts[1]);\n                daysInMonth = daysInMonth(month,\
    \ year);\n            } catch (NumberFormatException e) {\n                valid\
    \ = false;\n            }\n            if (month < 1 || month > 12) {\n      \
    \          valid = false;\n            }\n            if (daysInMonth < 1 || daysInMonth\
    \ > 31) {\n                valid = false;\n            }\n            if (month\
    \ == 2 && daysInMonth < 1 || daysInMonth > 30) {\n                valid = false;\n\
    \            }\n            if (month == 4 && daysInMonth < 1 || daysInMonth >\
    \ 29) {\n                valid = false;\n            }\n        }\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kiurtyt.java:39: error: cannot find symbol\n                daysInMonth\
    \ = daysInMonth(month, year);\n                              ^\n  symbol:   method\
    \ daysInMonth(int,int)\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2040) {\n           \
    \             valid = true;\n                    }\n                } catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                int month = Integer.parseInt(dateParts[0]);\n\
    \                int day = Integer.parseInt(dateParts[1]);\n                int\
    \ year = Integer.parseInt(dateParts[2]);\n                if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                        && day != 31) {\n  \
    \                  if (month != 2 && month != 4 && month != 6 && month != 9\n\
    \                            && month != 11 && month != 12) {\n              \
    \          if (day >= 1 && day <= 30) {\n                            if (month\
    \ != 1 && month != 3 && month != 5 && month != 7\n                           \
    \         && month != 8 && month != 10 && month != 12) {\n                   \
    \             if (day >= 1 && day <= 29) {\n                                 \
    \   valid = true;\n                                }\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return valid;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpywfmrxlp.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 2 && day > 28) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return \n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfdxrdaw.java:133: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpsfdxrdaw.java:134: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpsfdxrdaw.java:134: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpsfdxrdaw.java:134:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpsfdxrdaw.java:134: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpsfdxrdaw.java:134:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpsfdxrdaw.java:153: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg8fdrb_.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpjg8fdrb_.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpjg8fdrb_.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            if(!dateParts[i].matches(\"\\\\d{1,2}\")){\n                return\
    \ false;\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() < 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() < 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() < 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() < 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() < 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length() > 2){\n                    return false;\n      \
    \          }\n            }\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++){\n            if(dateParts[i].matches(\"\\\\d{1,2}\")){\n             \
    \   if(dateParts[i].length\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_68ded3.java:116: error: ')' expected\n                if(dateParts[i].length\n\
    \                                      ^\n/tmp/tmpz_68ded3.java:117: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpz_68ded3.java:118: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpz_68ded3.java:118:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpz_68ded3.java:118: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmpz_68ded3.java:118:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmpz_68ded3.java:118: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpz_68ded3.java:137: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  stdout: ''
