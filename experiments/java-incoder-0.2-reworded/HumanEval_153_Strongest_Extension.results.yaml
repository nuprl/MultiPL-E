language: java
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        double maxStrength = 0;\n        double minStrength = Double.MAX_VALUE;\n\
    \        for(String extension : extensions) {\n            String extensionName\
    \ = extension.substring(0,1).toUpperCase() + extension.substring(1);\n       \
    \     int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n            if(strength\
    \ < minStrength) {\n                minStrength = strength;\n            }\n \
    \       }\n        double strengthRatio = maxStrength / minStrength;\n       \
    \ for(String extension : extensions) {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int cap = extensionName.length();\n \
    \           int sm = extensionName.substring(0,1).toLowerCase().length();\n  \
    \          strength += (cap - sm);\n        }\n        double strengthRatio =\
    \ maxStrength / minStrength;\n        for(String extension : extensions) {\n \
    \           String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap\n    }\n    public static void main(String[] args) {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyuid13w.java:79: error: ';' expected\n            int cap\n  \
    \                 ^\n/tmp/tmpuyuid13w.java:81: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpuyuid13w.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpuyuid13w.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpuyuid13w.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpuyuid13w.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpuyuid13w.java:93: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String extension : extensions) {\n       \
    \     int strength = extension.substring(extension.indexOf('C') - 1, extension.indexOf('C')).chars().filter(Character::isUpperCase).count()\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).chars().filter(Character::isLowerCase).count();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(Integer strength : strengths)\
    \ {\n            if(strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e17jx47.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).chars().filter(Character::isUpperCase).count()\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).chars().filter(Character::isLowerCase).count();\n\
    \                                                                            \
    \                                                                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = -1;\n\
    \        double maxStrength = -1;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            strength += fraction;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        if(maxStrength\
    \ == -1) {\n            return class_name;\n        }\n        double maxFraction\
    \ = maxStrength / strength;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).length();\n            int sm =\
    \ extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            if(fraction > maxFraction) {\n                return class_name +\
    \ \".\" + extension;\n            }\n        }\n        return class_name;\n \
    \   }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpal0d0m1j.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        String\
    \ strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            try {\n                Class<?> clazz = Class.forName(class_name\
    \ + \".\" + extension);\n                Method method = clazz.getMethod(\"main\"\
    , String[].class);\n                String extension_str = extension;\n      \
    \          String method_name = method.getName();\n                for (String\
    \ extension_str2 : extensions_sorted) {\n                    try {\n         \
    \               Class<?> clazz2 = Class.forName(class_name + \".\" + extension_str2);\n\
    \                        Method method2 = clazz2.getMethod(method_name, String[].class);\n\
    \                        String method_name2 = method2.getName();\n          \
    \              double method_strength = method2.invoke(null, new Object[]{new\
    \ String[]{method_name2}});\n                        if (method_strength > strength)\
    \ {\n                            strength = method_strength;\n               \
    \             strongest_extension = class_name + \".\" + extension_str2;\n   \
    \                     }\n                    } catch (ClassNotFoundException e)\
    \ {\n                        e.printStackTrace();\n                    } catch\
    \ (NoSuchMethodException e) {\n                        e.printStackTrace();\n\
    \                    } catch (IllegalAccessException e) {\n                  \
    \      e.printStackTrace();\n                    } catch (InvocationTargetException\
    \ e) {\n                        e.printStackTrace();\n                    }\n\
    \                }\n            } catch (ClassNotFoundException e) {\n       \
    \         e.printStackTrace();\n            } catch (NoSuchMethodException e)\
    \ {\n                e.printStackTrace();\n            } catch (IllegalAccessException\
    \ e) {\n                e.printStackTrace();\n            } catch (InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return strongest_extension;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvh1jm4se.java:42: error: incompatible types: Object cannot be converted\
    \ to double\n                        double method_strength = method2.invoke(null,\
    \ new Object[]{new String[]{method_name2}});\n                               \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        double maxStrength = 0;\n        for(String extension : extensions) {\n\
    \            int cap = extension.substring(0, 1).toUpperCase().length();\n   \
    \         int sm = extension.substring(0, 1).toLowerCase().length();\n       \
    \     strength += (cap - sm);\n        }\n        strength = strength / extensions.size();\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            if(cap - sm > maxStrength) {\n                maxStrength = cap -\
    \ sm;\n            }\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(extensions.stream().filter(e\
    \ -> e.substring(0, 1).toUpperCase().equals(extension.substring(0, 1).toUpperCase())).findFirst().get())\
    \ + 1);\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppt5s4q4a.java:41: error: cannot find symbol\n        return class_name\
    \ + \".\" + extensions.get(extensions.indexOf(extensions.stream().filter(e ->\
    \ e.substring(0, 1).toUpperCase().equals(extension.substring(0, 1).toUpperCase())).findFirst().get())\
    \ + 1);\n                                                                    \
    \                                                                       ^\n  symbol:\
    \   variable extension\n  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<Integer> strengths\
    \ = new ArrayList<Integer>();\n        for(String ext : extensions) {\n      \
    \      int strength = ext.toUpperCase().replaceAll(\"[^A-Z]\", \"\").length()\
    \ - ext.toLowerCase().replaceAll(\"[^a-z]\", \"\").length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer s : strengths) {\n            if(s == strongest) {\n    \
    \            strongest = s;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(strengths.indexOf(strongest));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcwlwoe3f.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double frac\
    \ = cap - sm;\n            if (frac > strength) {\n                strength =\
    \ frac;\n                strongest_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4rwwsyg.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        double maxStrength = 0;\n        double maxExtension = 0;\n        double\
    \ maxExtensionIndex = 0;\n        double maxExtensionLength = 0;\n        double\
    \ maxExtensionStrength = 0;\n        double maxExtensionStrengthIndex = 0;\n \
    \       double maxExtensionStrengthLength = 0;\n        double maxExtensionStrengthIndex2\
    \ = 0;\n        double maxExtensionStrengthLength2 = 0;\n        double maxExtensionStrengthIndex3\
    \ = 0;\n        double maxExtensionStrengthLength3 = 0;\n        double maxExtensionStrengthIndex4\
    \ = 0;\n        double maxExtensionStrengthLength4 = 0;\n        double maxExtensionStrengthIndex5\
    \ = 0;\n        double maxExtensionStrengthLength5 = 0;\n        double maxExtensionStrengthIndex6\
    \ = 0;\n        double maxExtensionStrengthLength6 = 0;\n        double maxExtensionStrengthIndex7\
    \ = 0;\n        double maxExtensionStrengthLength7 = 0;\n        double maxExtensionStrengthIndex8\
    \ = 0;\n        double maxExtensionStrengthLength8 = 0;\n        double maxExtensionStrengthIndex9\
    \ = 0;\n        double maxExtensionStrengthLength9 = 0;\n        double maxExtensionStrengthIndex10\
    \ = 0;\n        double maxExtensionStrengthLength10 = 0;\n        double maxExtensionStrengthIndex11\
    \ = 0;\n        double maxExtensionStrengthLength11 = 0;\n        double maxExtensionStrengthIndex12\
    \ = 0;\n        double maxExtensionStrengthLength12 = 0;\n        double maxExtensionStrengthIndex13\
    \ = 0;\n        double maxExtensionStrengthLength13 = 0;\n        double maxExtensionStrengthIndex14\
    \ = 0;\n        double maxExtensionStrengthLength14 = 0;\n        double maxExtensionStrengthIndex15\
    \ = 0;\n        double maxExtensionStrengthLength15 = 0;\n        double maxExtensionStrengthIndex16\
    \ = 0;\n        double maxExtensionStrengthLength16 = 0;\n        double maxExtensionStrengthIndex17\
    \ = 0;\n        double maxExtensionStrengthLength17 = 0;\n        double maxExtensionStrengthIndex18\
    \ = 0;\n        double maxExtensionStrengthLength18 = 0;\n        double maxExtensionStrengthIndex19\
    \ = 0;\n        double maxExtensionStrengthLength19 = 0;\n        double maxExtensionStrengthIndex20\
    \ = 0;\n        double maxExtensionStrengthLength20 = 0;\n        double maxExtensionStrengthIndex21\
    \ = 0;\n        double maxExtensionStrengthLength21 = 0;\n        double maxExtensionStrengthIndex22\
    \ = 0;\n        double maxExtensionStrengthLength22 = 0;\n        double maxExtensionStrengthIndex23\
    \ = 0;\n        double maxExtensionStrengthLength23 = 0;\n        double maxExtensionStrengthIndex24\
    \ = 0;\n        double maxExtensionStrengthLength24 = 0;\n        double \n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplo14c845.java:80: error: not a statement\n        double \n   \
    \     ^\n/tmp/tmplo14c845.java:80: error: ';' expected\n        double \n    \
    \          ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('.')+1, class_name.length()).length();\n\
    \            double frac = cap - sm;\n            if (frac > strength) {\n   \
    \             strength = frac;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0znjewvg.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        double maxStrength = 0;\n        double maxExtension = 0;\n        double\
    \ maxExtensionIndex = 0;\n        double maxExtensionLength = 0;\n        double\
    \ maxExtensionName = 0;\n        double maxExtensionNameIndex = 0;\n        double\
    \ maxExtensionNameLength = 0;\n        double maxExtensionNameLengthIndex = 0;\n\
    \        double maxExtensionNameLengthIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp563am9zi.java:36: error: variable maxExtensionNameLengthIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndex = 0;\n               ^\n/tmp/tmp563am9zi.java:38:\
    \ error: variable maxExtensionNameLengthIndexIndexIndex is already defined in\
    \ method StrongestExtension(String,ArrayList<String>)\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n               ^\n/tmp/tmp563am9zi.java:39: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:40: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:41: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:42: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:43: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:44: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n               ^\n\
    /tmp/tmp563am9zi.java:45: error: variable maxExtensionNameLengthIndexIndexIndex\
    \ is already defined in method StrongestExtension(String,ArrayList<String>)\n\
    \        double maxExtensionNameLengthIndexIndexIndex = 0;\n              "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        double maxStrength = 0;\n        double maxExtension = 0;\n        double\
    \ maxExtensionIndex = 0;\n        for(String extension : extensions) {\n     \
    \       int cap = extension.substring(0, 1).toUpperCase().length();\n        \
    \    int sm = extension.substring(0, 1).toLowerCase().length();\n            strength\
    \ += (cap - sm);\n            if(strength > maxStrength) {\n                maxStrength\
    \ = strength;\n                maxExtension = extension;\n                maxExtensionIndex\
    \ = extensions.indexOf(extension);\n            }\n        }\n        return class_name\
    \ + \".\" + maxExtension;\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0y62s2f.java:36: error: incompatible types: String cannot be converted\
    \ to double\n                maxExtension = extension;\n                     \
    \          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            return class_name;\n\
    \        }\n        int extension_strength = extensions_sorted.get(strongest_extension_index).length()\
    \ - extensions_sorted.get(strongest_extension_index).replaceAll(\"[^A-Z]\", \"\
    \").length();\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            return class_name + \".\" + strongest_extension;\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(strongest_extension_index);\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvt7wui6.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).charAt(0) - extension.substring(extension.indexOf('S')\
    \ - 1, extension.indexOf('S')).charAt(0);\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -2\n\tat java.lang.String.substring(String.java:1960)\n\
    \tat Problem.StrongestExtension(tmpu1od8b2m.java:30)\n\tat Problem.main(tmpu1od8b2m.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double max_strength = -1;\n\
    \        double max_index = -1;\n        double max_extension_length = -1;\n \
    \       double max_extension_class = -1;\n        double max_extension_class_length\
    \ = -1;\n        double max_extension_class_name = -1;\n        double max_extension_class_name_length\
    \ = -1;\n        double max_extension_class_name_class = -1;\n        double max_extension_class_name_class_length\
    \ = -1;\n        double max_extension_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_length = -1;\n        double max_extension_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_length = -1;\n\
    \        double max_extension_class_name_class_name_class_name = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_length = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_class = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_length = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name_length = -1;\n   \
    \     double max_extension_class_name_class_name_class_name_class_name_class =\
    \ -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_\n    }\n    public static void\
    \ main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrxyngd_.java:58: error: ';' expected\n        double max_extension_class_name_\n\
    \                                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double fraction\
    \ = cap - sm;\n            if (strength == -1 || fraction > strength) {\n    \
    \            strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_9nru6e.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n\
    \            if (extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvh71wo21.java:31: error: boolean cannot be dereferenced\n     \
    \       int extension_strength = extension.matches(\"[A-Z]+\").length() - extension.matches(\"\
    [a-z]+\").length();\n                                                        \
    \        ^\n/tmp/tmpvh71wo21.java:31: error: boolean cannot be dereferenced\n\
    \            int extension_strength = extension.matches(\"[A-Z]+\").length() -\
    \ extension.matches(\"[a-z]+\").length();\n                                  \
    \                                                                     ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        if (strength > 0)\
    \ {\n            String extension = extensions_sorted.get(0);\n            String\
    \ extension_class = class_name + \".\" + extension;\n            return extension_class;\n\
    \        }\n        return class_name;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntn46_t4.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        String class_name_with_strongest_extension = class_name + \".\" + strongest_extension;\n\
    \        return class_name_with_strongest_extension;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb__qo2uz.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        double strength = 0;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n        }\n        double maxStrength = strength;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n            if(strength > maxStrength) {\n   \
    \             maxStrength = strength;\n            }\n        }\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            if(strength == maxStrength) {\n                return\
    \ class_name + \".\" + extension;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3rf1ag5.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and an\
    \ array array list of extensions.\n    // The extensions are to be used to load\
    \ additional classes to the class. The\n    // strength of the extension is as\
    \ follows: Let CAP be the number of the uppercase\n    // letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n    // in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n    // You should find\
    \ the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the array list.\n    // For example,\
    \ if you are given \"Slices\" as the class and an array array list of the\n  \
    \  // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   \
    \ // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"\
    my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\"\
    , (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
    \ class_name, ArrayList<String> extensions) {\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength = Math.max(strength,\
    \ cap - sm);\n        }\n        return class_name + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.stream().max(Comparator.comparingInt(s\
    \ -> s.length())).orElse(null)))\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvi73ceu.java:34: error: ';' expected\n        return class_name\
    \ + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.stream().max(Comparator.comparingInt(s\
    \ -> s.length())).orElse(null)))\n                                           \
    \                                                                            \
    \                                           ^\n1 error\n"
  stdout: ''
