name: HumanEval_70_strange_sort_list
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given array list of integers, return array list in strange\
  \ order.\n    // Strange sorting, is when you start with the minimum value,\n  \
  \  // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
  \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
  \ (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ strangeSortList(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l,\
  \ (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l,\
  \ (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long currentMinValue = minValue;\n        Long currentMaxValue\
    \ = maxValue;\n        Long currentMinValueIndex = -1;\n        Long currentMaxValueIndex\
    \ = -1;\n        Long currentMinValueIndex2 = -1;\n        Long currentMaxValueIndex2\
    \ = -1;\n        Long currentMinValueIndex3 = -1;\n        Long currentMaxValueIndex3\
    \ = -1;\n        Long currentMinValueIndex4 = -1;\n        Long currentMaxValueIndex4\
    \ = -1;\n        Long currentMinValueIndex5 = -1;\n        Long currentMaxValueIndex5\
    \ = -1;\n        Long currentMinValueIndex6 = -1;\n        Long currentMaxValueIndex6\
    \ = -1;\n        Long currentMinValueIndex7 = -1;\n        Long currentMaxValueIndex7\
    \ = -1;\n        Long currentMinValueIndex8 = -1;\n        Long currentMaxValueIndex8\
    \ = -1;\n        Long currentMinValueIndex9 = -1;\n        Long currentMaxValueIndex9\
    \ = -1;\n        Long currentMinValueIndex10 = -1;\n        Long currentMaxValueIndex10\
    \ = -1;\n        Long currentMinValueIndex11 = -1;\n        Long currentMaxValueIndex11\
    \ = -1;\n        Long currentMinValueIndex12 = -1;\n        Long currentMaxValueIndex12\
    \ = -1;\n        Long currentMinValueIndex13 = -1;\n        Long currentMaxValueIndex13\
    \ = -1;\n        Long currentMinValueIndex14 = -1;\n        Long currentMaxValueIndex14\
    \ = -1;\n        Long currentMinValueIndex15 = -1;\n        Long currentMaxValueIndex15\
    \ = -1;\n        Long currentMinValueIndex16 = -1;\n        Long currentMaxValueIndex16\
    \ = -1;\n        Long currentMinValueIndex17 = -1;\n        Long currentMaxValueIndex17\
    \ = -1;\n        Long currentMinValueIndex18 = -1;\n        Long currentMaxValueIndex18\
    \ = -1;\n        Long currentMinValueIndex19 = -1;\n        Long currentMaxValueIndex19\
    \ = -1;\n        Long currentMinValueIndex20 = -1;\n        Long currentMaxValueIndex20\
    \ = -1;\n        Long currentMinValueIndex21 = -1;\n        Long currentMaxValueIndex21\
    \ = -1;\n        Long currentMinValueIndex22 = -1;\n        Long currentMaxValueIndex22\
    \ = -1;\n        Long currentMin", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid4", "        ArrayList<Long> result = new ArrayList<Long>();\n        Long\
    \ min = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long mid = min + (max - min) / 2;\n        Long mid2 = min + (max - min)\
    \ / 2;\n        Long mid3 = min + (max - min) / 2;\n        Long mid4 = min +\
    \ (max - min) / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6\
    \ = min + (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n     \
    \   Long mid8 = min + (max - min) / 2;\n        Long mid9 = min + (max - min)\
    \ / 2;\n        Long mid10 = min + (max - min) / 2;\n        Long mid11 = min\
    \ + (max - min) / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long\
    \ mid13 = min + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n\
    \        Long mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max\
    \ - min) / 2;\n        Long mid17 = min + (max - min) / 2;\n        Long mid18\
    \ = min + (max - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n    \
    \    Long mid20 = min + (max - min) / 2;\n        Long mid21 = min + (max - min)\
    \ / 2;\n        Long mid22 = min + (max - min) / 2;\n        Long mid23 = min\
    \ + (max - min) / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long\
    \ mid25 = min + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n\
    \        Long mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max\
    \ - min) / 2;\n        Long mid29 = min + (max - min) / 2;\n        Long mid30\
    \ = min + (max - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n    \
    \    Long mid32 = min + (max - min) / 2;\n        Long mid33 = min + (max - min)\
    \ / 2;\n        Long mid34 = min + (max - min) / 2;\n        Long mid35 = min\
    \ + (max - min) / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long\
    \ mid37 = min + (max - min) / 2;\n        ", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        Long min = null;\n        Long max = null;\n\
    \        for (Long val : lst) {\n            if (min == null || val < min) {\n\
    \                min = val;\n            }\n            if (max == null || val\
    \ > max) {\n                max = val;\n            }\n        }\n        if (min\
    \ == null) {\n            min = 0l;\n        }\n        if (max == null) {\n \
    \           max = 0l;\n        }\n        Long current = min;\n        while (current\
    \ <= max) {\n            result.add(current);\n            current += 1;\n   \
    \     }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49 = m", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long current = min;\n        long next = max;\n        do {\n       \
    \     result.add(current);\n            current = next;\n            next = next\
    \ + 1;\n        } while (current < max);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.get(0);\n        long max\
    \ = lst.get(lst.size() - 1);\n        long mid = min + ((max - min) / 2);\n  \
    \      long temp;\n        for (long i : lst) {\n            if (i < mid) {\n\
    \                temp = i;\n            } else if (i > mid) {\n              \
    \  temp = mid;\n            } else {\n                temp = mid;\n          \
    \  }\n            result.add(temp);\n            mid = temp + ((max - temp) /\
    \ 2);\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            result.add(lst.get(i));\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        result.add(mid);\n       \
    \ min = mid;\n        max = mid;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                result.add(i);\n                min = i;\n    \
    \        } else if (i > mid) {\n                result.add(max);\n           \
    \     max = i;\n            } else {\n                result.add(min);\n     \
    \           min = i;\n                max = i;\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()-1);\n\
    \        long temp;\n        for(int i = 1; i < lst.size(); i++) {\n         \
    \   temp = lst.get(i);\n            if(temp < minValue) {\n                minValue\
    \ = temp;\n            }\n            if(temp > maxValue) {\n                maxValue\
    \ = temp;\n            }\n        }\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            temp = lst.get(i);\n            if(temp < minValue) {\n     \
    \           result.add(minValue);\n                minValue = temp;\n        \
    \    }\n            if(temp > maxValue) {\n                result.add(maxValue);\n\
    \                maxValue = temp;\n            }\n        }\n        result.add(minValue);\n\
    \        result.add(maxValue);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long mid5 =\
    \ mid / 5;\n        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n     \
    \   long mid8 = mid / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid\
    \ / 10;\n        long mid11 = mid / 11;\n        long mid12 = mid / 12;\n    \
    \    long mid13 = mid / 13;\n        long mid14 = mid / 14;\n        long mid15\
    \ = mid / 15;\n        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n\
    \        long mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long\
    \ mid20 = mid / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid\
    \ / 22;\n        long mid23 = mid / 23;\n        long mid24 = mid / 24;\n    \
    \    long mid25 = mid / 25;\n        long mid26 = mid / 26;\n        long mid27\
    \ = mid / 27;\n        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n\
    \        long mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long\
    \ mid32 = mid / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid\
    \ / 34;\n        long mid35 = mid / 35;\n        long mid36 = mid / 36;\n    \
    \    long mid37 = mid / 37;\n        long mid38 = mid / 38;\n        long mid39\
    \ = mid / 39;\n        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n\
    \        long mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long\
    \ mid44 = mid / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid\
    \ / 46;\n        long mid47 = mid / 47;\n        long mid48 = mid / 48;\n    \
    \    long mid49 = mid / ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long current = min;\n  \
    \      while (current < max) {\n            result.add(current);\n           \
    \ current += 1;\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j > min;\
    \ j--) {\n                if (lst.get(j) < temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()\
    \ - 1);\n        long currentMinValue = minValue;\n        long currentMaxValue\
    \ = maxValue;\n        long currentMinIndex = 0;\n        long currentMaxIndex\
    \ = 0;\n        boolean isFirst = true;\n        boolean isLast = true;\n    \
    \    boolean isMiddle = true;\n        boolean isFirstMiddle = true;\n       \
    \ boolean isLastMiddle = true;\n        boolean isFirstLast = true;\n        boolean\
    \ isMiddleMiddle = true;\n        boolean isFirstLastMiddle = true;\n        boolean\
    \ isLastLast = true;\n        boolean isFirstLastLast = true;\n        boolean\
    \ isMiddleLast = true;\n        boolean isFirstMiddleLast = true;\n        boolean\
    \ isLastMiddleLast = true;\n        boolean isFirstMiddleMiddle = true;\n    \
    \    boolean isLastMiddleMiddle = true;\n        boolean isFirstLastMiddleMiddle\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isLastMiddleMiddleLast = true;\n        boolean isFirstLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        ", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       Collections.sort(lst);\n        for(Long i : lst) {\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long curr = min;\n        long next = 0;\n        for (long i\
    \ = min; i <= max; i++) {\n            if (lst.contains(i)) {\n              \
    \  result.add(curr);\n                curr = i;\n            } else {\n      \
    \          next = i;\n            }\n        }\n        result.add(curr);\n  \
    \      result.add(next);\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n \
    \       long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long temp;\n        for (long i = min; i <= max; i++) {\n\
    \            temp = i;\n            while (lst.contains(temp)) {\n           \
    \     temp = temp + mid;\n            }\n            result.add(temp);\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min2 = lst.stream().min(Long::compareTo).get();\n\
    \        long max2 = lst.stream().max(Long::compareTo).get();\n        long min3\
    \ = lst.stream().min(Long::compareTo).get();\n        long max3 = lst.stream().max(Long::compareTo).get();\n\
    \        long min4 = lst.stream().min(Long::compareTo).get();\n        long max4\
    \ = lst.stream().max(Long::compareTo).get();\n        long min5 = lst.stream().min(Long::compareTo).get();\n\
    \        long max5 = lst.stream().max(Long::compareTo).get();\n        long min6\
    \ = lst.stream().min(Long::compareTo).get();\n        long max6 = lst.stream().max(Long::compareTo).get();\n\
    \        long min7 = lst.stream().min(Long::compareTo).get();\n        long max7\
    \ = lst.stream().max(Long::compareTo).get();\n        long min8 = lst.stream().min(Long::compareTo).get();\n\
    \        long max8 = lst.stream().max(Long::compareTo).get();\n        long min9\
    \ = lst.stream().min(Long::compareTo).get();\n        long max9 = lst.stream().max(Long::compareTo).get();\n\
    \        long min10 = lst.stream().min(Long::compareTo).get();\n        long max10\
    \ = lst.stream().max(Long::compareTo).get();\n        long min11 = lst.stream().min(Long::compareTo).get();\n\
    \        long max11 = lst.stream().max(Long::compareTo).get();\n        long min12\
    \ = lst.stream().min(Long::compareTo).get();\n        long max12 = lst.stream().max(Long::compareTo).get();\n\
    \        long min13 = lst.stream().min(Long::compareTo).get();\n        long max13\
    \ = lst.stream().max(Long::compareTo).get();\n        long min14 = lst.stream().min(Long::compareTo).get();\n\
    \        long max14 = lst.stream().max(Long::compareTo).get();\n        long min15\
    \ = lst.stream().min(Long::compareTo).get();\n        long max15 = lst.stream().max(Long::compareTo).get();\n\
    \        long min16 = lst.stream().min(Long::compareTo).get();\n        long ",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long ", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid * 2;\n        long mid4 = mid * 3;\n        long mid5 =\
    \ mid * 4;\n        long mid6 = mid * 5;\n        long mid7 = mid * 6;\n     \
    \   long mid8 = mid * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid\
    \ * 9;\n        long mid11 = mid * 10;\n        long mid12 = mid * 11;\n     \
    \   long mid13 = mid * 12;\n        long mid14 = mid * 13;\n        long mid15\
    \ = mid * 14;\n        long mid16 = mid * 15;\n        long mid17 = mid * 16;\n\
    \        long mid18 = mid * 17;\n        long mid19 = mid * 18;\n        long\
    \ mid20 = mid * 19;\n        long mid21 = mid * 20;\n        long mid22 = mid\
    \ * 21;\n        long mid23 = mid * 22;\n        long mid24 = mid * 23;\n    \
    \    long mid25 = mid * 24;\n        long mid26 = mid * 25;\n        long mid27\
    \ = mid * 26;\n        long mid28 = mid * 27;\n        long mid29 = mid * 28;\n\
    \        long mid30 = mid * 29;\n        long mid31 = mid * 30;\n        long\
    \ mid32 = mid * 31;\n        long mid33 = mid * 32;\n        long mid34 = mid\
    \ * 33;\n        long mid35 = mid * 34;\n        long mid36 = mid * 35;\n    \
    \    long mid37 = mid * 36;\n        long mid38 = mid * 37;\n        long mid39\
    \ = mid * 38;\n        long mid40 = mid * 39;\n        long mid41 = mid * 40;\n\
    \        long mid42 = mid * 41;\n        long mid43 = mid * 42;\n        long\
    \ mid44 = mid * 43;\n        long mid45 = mid * 44;\n        long mid46 = mid\
    \ * 45;\n        long mid47 = mid * 46;\n        long mid48 = mid * 47;\n    \
    \    long mid49 = mid * 48;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min2 = lst.stream().min(Long::compareTo).get();\n\
    \        long max2 = lst.stream().max(Long::compareTo).get();\n        long min3\
    \ = lst.stream().min(Long::compareTo).get();\n        long max3 = lst.stream().max(Long::compareTo).get();\n\
    \        long min4 = lst.stream().min(Long::compareTo).get();\n        long max4\
    \ = lst.stream().max(Long::compareTo).get();\n        long min5 = lst.stream().min(Long::compareTo).get();\n\
    \        long max5 = lst.stream().max(Long::compareTo).get();\n        long min6\
    \ = lst.stream().min(Long::compareTo).get();\n        long max6 = lst.stream().max(Long::compareTo).get();\n\
    \        long min7 = lst.stream().min(Long::compareTo).get();\n        long max7\
    \ = lst.stream().max(Long::compareTo).get();\n        long min8 = lst.stream().min(Long::compareTo).get();\n\
    \        long max8 = lst.stream().max(Long::compareTo).get();\n        long min9\
    \ = lst.stream().min(Long::compareTo).get();\n        long max9 = lst.stream().max(Long::compareTo).get();\n\
    \        long min10 = lst.stream().min(Long::compareTo).get();\n        long max10\
    \ = lst.stream().max(Long::compareTo).get();\n        long min11 = lst.stream().min(Long::compareTo).get();\n\
    \        long max11 = lst.stream().max(Long::compareTo).get();\n        long min12\
    \ = lst.stream().min(Long::compareTo).get();\n        long max12 = lst.stream().max(Long::compareTo).get();\n\
    \        long min13 = lst.stream().min(Long::compareTo).get();\n        long max13\
    \ = lst.stream().max(Long::compareTo).get();\n        long min14 = lst.stream().min(Long::compareTo).get();\n\
    \        long max14 = lst.stream().max(Long::compareTo).get();\n        long min15\
    \ = lst.stream().min(Long::compareTo).get();\n        long max15 = lst.stream().max(Long::compareTo).get();\n\
    \        long min16 = lst.stream().min(Long::compareTo).get();\n        long ",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j >= min;\
    \ j--) {\n                if (lst.get(j) < temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long minValue = lst.stream().min(Long::compareTo).get();\n        long\
    \ maxValue = lst.stream().max(Long::compareTo).get();\n        long minIndex =\
    \ lst.indexOf(minValue);\n        long maxIndex = lst.indexOf(maxValue);\n   \
    \     long minIndex2 = lst.indexOf(minValue);\n        long maxIndex2 = lst.indexOf(maxValue);\n\
    \        long minIndex3 = lst.indexOf(minValue);\n        long maxIndex3 = lst.indexOf(maxValue);\n\
    \        long minIndex4 = lst.indexOf(minValue);\n        long maxIndex4 = lst.indexOf(maxValue);\n\
    \        long minIndex5 = lst.indexOf(minValue);\n        long maxIndex5 = lst.indexOf(maxValue);\n\
    \        long minIndex6 = lst.indexOf(minValue);\n        long maxIndex6 = lst.indexOf(maxValue);\n\
    \        long minIndex7 = lst.indexOf(minValue);\n        long maxIndex7 = lst.indexOf(maxValue);\n\
    \        long minIndex8 = lst.indexOf(minValue);\n        long maxIndex8 = lst.indexOf(maxValue);\n\
    \        long minIndex9 = lst.indexOf(minValue);\n        long maxIndex9 = lst.indexOf(maxValue);\n\
    \        long minIndex10 = lst.indexOf(minValue);\n        long maxIndex10 = lst.indexOf(maxValue);\n\
    \        long minIndex11 = lst.indexOf(minValue);\n        long maxIndex11 = lst.indexOf(maxValue);\n\
    \        long minIndex12 = lst.indexOf(minValue);\n        long maxIndex12 = lst.indexOf(maxValue);\n\
    \        long minIndex13 = lst.indexOf(minValue);\n        long maxIndex13 = lst.indexOf(maxValue);\n\
    \        long minIndex14 = lst.indexOf(minValue);\n        long maxIndex14 = lst.indexOf(maxValue);\n\
    \        long minIndex15 = lst.indexOf(minValue);\n        long maxIndex15 = lst.indexOf(maxValue);\n\
    \        long minIndex16 = lst.indexOf(minValue);\n        long maxIndex16 = lst.indexOf(maxValue);\n\
    \        long minIndex17 = lst.indexOf(minValue);\n        long maxIndex17 = lst.indexOf(maxValue);\n\
    \        long minIndex18 = lst.indexOf(minValue);\n        long maxIndex18 = lst.indexOf(maxValue);\n\
    \        long minIndex19 = lst.indexOf(minValue);\n        long maxIndex19 = lst.indexOf(maxValue);\n\
    \        long minIndex20 = lst.indexOf(minValue);\n        long maxIndex20 = lst.indexOf(maxValue);\n\
    \        long minIndex21 = lst.indexOf(minValue);\n        long maxIndex2", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        long mid = min + (max - min) / 2;\n        for (long i : lst)\
    \ {\n            if (i < mid) {\n                result.add(i);\n            }\
    \ else if (i > mid) {\n                result.add(max - i);\n            } else\
    \ {\n                result.add(min - i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size() - 1);\n\
    \        Long minIndex = 0;\n        Long maxIndex = 0;\n        Long currentValue\
    \ = minValue;\n        Long currentIndex = lst.indexOf(minValue);\n        Long\
    \ currentMax = maxValue;\n        Long currentMin = minValue;\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMaxIndex = lst.indexOf(maxValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMaxIndex = lst.indexOf(maxValue);\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMaxIndex = lst.indexOf(maxValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMaxIndex = lst.indexOf(maxValue);\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMaxIndex\
    \ = lst.indexOf(maxValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMinIndex = lst.indexOf(minValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMaxIndex = lst.indexOf(maxValue);\n\
    \        Long currentMaxIndex = lst.indexOf(maxValue);\n        Long currentMinIndex\
    \ = lst.indexOf(minValue);\n        Long currentMinIndex = lst.indexOf(minValue);\n\
    \        Long currentMaxIndex = lst.indexOf(", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long min2 = lst.stream().min(Long::compare).get();\n\
    \        long max2 = lst.stream().max(Long::compare).get();\n        long min3\
    \ = lst.stream().min(Long::compare).get();\n        long max3 = lst.stream().max(Long::compare).get();\n\
    \        long min4 = lst.stream().min(Long::compare).get();\n        long max4\
    \ = lst.stream().max(Long::compare).get();\n        long min5 = lst.stream().min(Long::compare).get();\n\
    \        long max5 = lst.stream().max(Long::compare).get();\n        long min6\
    \ = lst.stream().min(Long::compare).get();\n        long max6 = lst.stream().max(Long::compare).get();\n\
    \        long min7 = lst.stream().min(Long::compare).get();\n        long max7\
    \ = lst.stream().max(Long::compare).get();\n        long min8 = lst.stream().min(Long::compare).get();\n\
    \        long max8 = lst.stream().max(Long::compare).get();\n        long min9\
    \ = lst.stream().min(Long::compare).get();\n        long max9 = lst.stream().max(Long::compare).get();\n\
    \        long min10 = lst.stream().min(Long::compare).get();\n        long max10\
    \ = lst.stream().max(Long::compare).get();\n        long min11 = lst.stream().min(Long::compare).get();\n\
    \        long max11 = lst.stream().max(Long::compare).get();\n        long min12\
    \ = lst.stream().min(Long::compare).get();\n        long max12 = lst.stream().max(Long::compare).get();\n\
    \        long min13 = lst.stream().min(Long::compare).get();\n        long max13\
    \ = lst.stream().max(Long::compare).get();\n        long min14 = lst.stream().min(Long::compare).get();\n\
    \        long max14 = lst.stream().max(Long::compare).get();\n        long min15\
    \ = lst.stream().min(Long::compare).get();\n        long max15 = lst.stream().max(Long::compare).get();\n\
    \        long min16 = lst.stream().min(Long::compare).get();\n        long max16\
    \ = lst.stream().max(Long::compare).get();\n        long min17 = lst.stream().min(Long::compare).get();\n\
    \        ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.get(0);\n        long max = lst.get(0);\n        for (long i : lst)\
    \ {\n            if (i < min) {\n                min = i;\n            } else\
    \ if (i > max) {\n                max = i;\n            }\n        }\n       \
    \ long mid = min + (max - min) / 2;\n        for (long i : lst) {\n          \
    \  if (i < mid) {\n                result.add(i);\n            } else if (i >\
    \ mid) {\n                result.add(max - i);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        long temp;\n        for (long i : lst) {\n            if (i\
    \ == min) {\n                temp = min;\n                min = max;\n       \
    \         max = temp;\n            }\n            result.add(i);\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long mid = min + (max - min)\
    \ / 2;\n        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.addAll(lst);\n        result.sort(Comparator.comparingLong(Long::compare).reversed());\n\
    \        result.add", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        long mid = min + (max - min) / 2;\n        for (long i : lst)\
    \ {\n            if (i < mid) {\n                result.add(i);\n            }\
    \ else if (i > mid) {\n                result.add(mid - i);\n            } else\
    \ {\n                result.add(mid - i);\n                result.add(i);\n  \
    \          }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Long minValue = lst.get(0);\n        Long\
    \ maxValue = lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n\
    \        Long maxIndex = lst.lastIndexOf(maxValue);\n        Long minIndex2 =\
    \ lst.indexOf(minValue);\n        Long maxIndex2 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex3 = lst.indexOf(minValue);\n        Long maxIndex3 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex4 = lst.indexOf(minValue);\n        Long maxIndex4 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex5 = lst.indexOf(minValue);\n        Long maxIndex5 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex6 = lst.indexOf(minValue);\n        Long maxIndex6 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex7 = lst.indexOf(minValue);\n        Long maxIndex7 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex8 = lst.indexOf(minValue);\n        Long maxIndex8 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex9 = lst.indexOf(minValue);\n        Long maxIndex9 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex10 = lst.indexOf(minValue);\n        Long maxIndex10 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex11 = lst.indexOf(minValue);\n        Long maxIndex11 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex12 = lst.indexOf(minValue);\n        Long maxIndex12 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex13 = lst.indexOf(minValue);\n        Long maxIndex13 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex14 = lst.indexOf(minValue);\n        Long maxIndex14 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex15 = lst.indexOf(minValue);\n        Long maxIndex15 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex16 = lst.indexOf(minValue);\n        Long maxIndex16 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex17 = lst.indexOf(minValue);\n        Long maxIndex17 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex18 = lst.indexOf(minValue);\n        Long maxIndex18 = lst.lastIndexOf(maxValue);\n\
    \        Long minIndex19 = lst.indexOf(minValue);\n        Long maxIndex19 = ",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = max - mid;\n        long mid5 = min - mid;\n \
    \       long mid6 = max - mid2;\n        long mid7 = min - mid2;\n        long\
    \ mid8 = max - mid3;\n        long mid9 = min - mid3;\n        long mid10 = max\
    \ - mid4;\n        long mid11 = min - mid4;\n        long mid12 = max - mid5;\n\
    \        long mid13 = min - mid5;\n        long mid14 = max - mid6;\n        long\
    \ mid15 = min - mid6;\n        long mid16 = max - mid7;\n        long mid17 =\
    \ min - mid7;\n        long mid18 = max - mid8;\n        long mid19 = min - mid8;\n\
    \        long mid20 = max - mid9;\n        long mid21 = min - mid9;\n        long\
    \ mid22 = max - mid10;\n        long mid23 = min - mid10;\n        long mid24\
    \ = max - mid11;\n        long mid25 = min - mid11;\n        long mid26 = max\
    \ - mid12;\n        long mid27 = min - mid12;\n        long mid28 = max - mid13;\n\
    \        long mid29 = min - mid13;\n        long mid30 = max - mid14;\n      \
    \  long mid31 = min - mid14;\n        long mid32 = max - mid15;\n        long\
    \ mid33 = min - mid15;\n        long mid34 = max - mid16;\n        long mid35\
    \ = min - mid16;\n        long mid36 = max - mid17;\n        long mid37 = min\
    \ - mid17;\n        long mid38 = max - mid18;\n        long mid39 = min - mid18;\n\
    \        long mid40 = max - mid19;\n        long mid41 = min - mid19;\n      \
    \  long mid42 = max - mid20;\n        long mid43 = min - mid20;\n        long\
    \ mid44 = max - mid21;\n        long mid45 = min - mid21;\n        long mid46\
    \ = max - mid22;\n        long mid47 = min - mid22;\n        long mid48 = max\
    \ - mid23;\n        long mid49 = min - mid23;\n        long mid50 = ", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long minValue = lst.stream().min(Long::compareTo).get();\n\
    \        long maxValue = lst.stream().max(Long::compareTo).get();\n        long\
    \ minIndex = lst.indexOf(minValue);\n        long maxIndex = lst.indexOf(maxValue);\n\
    \        long currentValue = minValue;\n        long currentIndex = minIndex;\n\
    \        boolean isFirst = true;\n        boolean isLast = true;\n        boolean\
    \ isMiddle = true;\n        boolean isMiddleMiddle = true;\n        boolean isMiddleLast\
    \ = true;\n        boolean isLastMiddle = true;\n        boolean isLastLast =\
    \ true;\n        boolean isFirstMiddle = true;\n        boolean isFirstLast =\
    \ true;\n        boolean isFirstMiddleMiddle = true;\n        boolean isFirstMiddleLast\
    \ = true;\n        boolean isFirstLastMiddle = true;\n        boolean isFirstLastLast\
    \ = true;\n        boolean isLastMiddleMiddle = true;\n        boolean isLastMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isLastLastLast\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isMiddleLastMiddle = true;\n        boolean isMiddleLastLast\
    \ = true;\n        boolean isLastMiddleMiddle = true;\n        boolean isLastMiddleLast\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddle = true;\n        boolean isFirstMiddleMiddleLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLast = true;\n        boolean\
    \ isFirstMiddleMiddleLastLastLast = true;\n        boolean isFirstMiddleMiddleLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLast = true;\n \
    \       boolean isFirstMiddleMiddleLastLastLastLastLast = true;\n        boolean\
    \ isFirstMiddleMiddleLastLastLastLastLastLast = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirstMiddleMiddleLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        boolean isFirst", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min2 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max2 = lst.stream().max(Long::compareTo).get();\n        Long min3\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max3 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min4 = lst.stream().min(Long::compareTo).get();\n        Long max4\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min5 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max5 = lst.stream().max(Long::compareTo).get();\n        Long min6\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max6 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min7 = lst.stream().min(Long::compareTo).get();\n        Long max7\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min8 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max8 = lst.stream().max(Long::compareTo).get();\n        Long min9\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max9 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min10 = lst.stream().min(Long::compareTo).get();\n        Long max10\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min11 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max11 = lst.stream().max(Long::compareTo).get();\n        Long min12\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max12 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min13 = lst.stream().min(Long::compareTo).get();\n        Long max13\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min14 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max14 = lst.stream().max(Long::compareTo).get();\n        Long min15\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max15 = l", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            for (long j =\
    \ mid; j < max; j++) {\n                if (lst.contains(temp)) {\n          \
    \          temp = j;\n                    break;\n                }\n        \
    \    }\n            result.add(temp);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + 1;\n        long mid3 =\
    \ mid + 2;\n        long mid4 = mid + 3;\n        long mid5 = mid + 4;\n     \
    \   long mid6 = mid + 5;\n        long mid7 = mid + 6;\n        long mid8 = mid\
    \ + 7;\n        long mid9 = mid + 8;\n        long mid10 = mid + 9;\n        long\
    \ mid11 = mid + 10;\n        long mid12 = mid + 11;\n        long mid13 = mid\
    \ + 12;\n        long mid14 = mid + 13;\n        long mid15 = mid + 14;\n    \
    \    long mid16 = mid + 15;\n        long mid17 = mid + 16;\n        long mid18\
    \ = mid + 17;\n        long mid19 = mid + 18;\n        long mid20 = mid + 19;\n\
    \        long mid21 = mid + 20;\n        long mid22 = mid + 21;\n        long\
    \ mid23 = mid + 22;\n        long mid24 = mid + 23;\n        long mid25 = mid\
    \ + 24;\n        long mid26 = mid + 25;\n        long mid27 = mid + 26;\n    \
    \    long mid28 = mid + 27;\n        long mid29 = mid + 28;\n        long mid30\
    \ = mid + 29;\n        long mid31 = mid + 30;\n        long mid32 = mid + 31;\n\
    \        long mid33 = mid + 32;\n        long mid34 = mid + 33;\n        long\
    \ mid35 = mid + 34;\n        long mid36 = mid + 35;\n        long mid37 = mid\
    \ + 36;\n        long mid38 = mid + 37;\n        long mid39 = mid + 38;\n    \
    \    long mid40 = mid + 39;\n        long mid41 = mid + 40;\n        long mid42\
    \ = mid + 41;\n        long mid43 = mid + 42;\n        long mid44 = mid + 43;\n\
    \        long mid45 = mid + 44;\n        long mid46 = mid + 45;\n        long\
    \ mid47 = mid + 46;\n        long mid48 = mid + 47;\n        long mid49 = mid\
    \ + 48;\n        long mid50 = mid + 49;\n        long mid51 = mid + 50;\n    \
    \    long mid52 = mid + 51;\n        long mid53 = mid + 52;\n        long mid54",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n\
    \        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6\
    \ = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n   \
    \     long mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11\
    \ = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n\
    \        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long\
    \ mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid\
    \ / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n    \
    \    long mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23\
    \ = mid / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n\
    \        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long\
    \ mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid\
    \ / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n    \
    \    long mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35\
    \ = mid / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n\
    \        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long\
    \ mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid\
    \ / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n    \
    \    long mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47\
    \ = mid / 47;\n        long mid48 = mid / 48;\n        long mid49 = mid / 49",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n    \
    \    long mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6 = mid\
    \ * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n        long\
    \ mid9 = mid * 9;\n        long mid10 = mid * 10;\n        long mid11 = mid *\
    \ 11;\n        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n      \
    \  long mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long mid16\
    \ = mid * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid * 18;\n\
    \        long mid19 = mid * 19;\n        long mid20 = mid * 20;\n        long\
    \ mid21 = mid * 21;\n        long mid22 = mid * 22;\n        long mid23 = mid\
    \ * 23;\n        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n    \
    \    long mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long mid28\
    \ = mid * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid * 30;\n\
    \        long mid31 = mid * 31;\n        long mid32 = mid * 32;\n        long\
    \ mid33 = mid * 33;\n        long mid34 = mid * 34;\n        long mid35 = mid\
    \ * 35;\n        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n    \
    \    long mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long mid40\
    \ = mid * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid * 42;\n\
    \        long mid43 = mid * 43;\n        long mid44 = mid * 44;\n        long\
    \ mid45 = mid * 45;\n        long mid46 = mid * 46;\n        long mid47 = mid\
    \ * 47;\n        long mid48 = mid * 48;\n        long mid49", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()-1);\n\
    \        long minIndex = lst.indexOf(minValue);\n        long maxIndex = lst.indexOf(maxValue);\n\
    \        for(int i = minIndex; i <= maxIndex; i++) {\n            result.add(lst.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid4", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid - 1;\n   \
    \     long mid3 = mid + 1;\n        long mid4 = mid * 2;\n        long mid5 =\
    \ mid * 3;\n        long mid6 = mid * 4;\n        long mid7 = mid * 5;\n     \
    \   long mid8 = mid * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid\
    \ * 8;\n        long mid11 = mid * 9;\n        long mid12 = mid * 10;\n      \
    \  long mid13 = mid * 11;\n        long mid14 = mid * 12;\n        long mid15\
    \ = mid * 13;\n        long mid16 = mid * 14;\n        long mid17 = mid * 15;\n\
    \        long mid18 = mid * 16;\n        long mid19 = mid * 17;\n        long\
    \ mid20 = mid * 18;\n        long mid21 = mid * 19;\n        long mid22 = mid\
    \ * 20;\n        long mid23 = mid * 21;\n        long mid24 = mid * 22;\n    \
    \    long mid25 = mid * 23;\n        long mid26 = mid * 24;\n        long mid27\
    \ = mid * 25;\n        long mid28 = mid * 26;\n        long mid29 = mid * 27;\n\
    \        long mid30 = mid * 28;\n        long mid31 = mid * 29;\n        long\
    \ mid32 = mid * 30;\n        long mid33 = mid * 31;\n        long mid34 = mid\
    \ * 32;\n        long mid35 = mid * 33;\n        long mid36 = mid * 34;\n    \
    \    long mid37 = mid * 35;\n        long mid38 = mid * 36;\n        long mid39\
    \ = mid * 37;\n        long mid40 = mid * 38;\n        long mid41 = mid * 39;\n\
    \        long mid42 = mid * 40;\n        long mid43 = mid * 41;\n        long\
    \ mid44 = mid * 42;\n        long mid45 = mid * 43;\n        long mid46 = mid\
    \ * 44;\n        long mid47 = mid * 45;\n        long mid48 = mid * 46;\n    \
    \    long mid49 = mid * ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n    \
    \    long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid\
    \ / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long\
    \ mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid /\
    \ 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n      \
    \  long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16\
    \ = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n\
    \        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long\
    \ mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid\
    \ / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n    \
    \    long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28\
    \ = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n\
    \        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long\
    \ mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid\
    \ / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n    \
    \    long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40\
    \ = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n\
    \        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long\
    \ mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid\
    \ / 47;\n        long mid48 = mid / 48;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long minValue = lst.get(0);\n     \
    \   long maxValue = lst.get(lst.size() - 1);\n        long currentMin = minValue;\n\
    \        long currentMax = maxValue;\n        long currentMinIndex = -1;\n   \
    \     long currentMaxIndex = -1;\n        boolean isSorted = false;\n        for(int\
    \ i = 1; i < lst.size(); i++) {\n            currentMin = lst.get(i);\n      \
    \      currentMax = lst.get(i + 1);\n            if(currentMin < currentMax) {\n\
    \                isSorted = true;\n                currentMinIndex = i;\n    \
    \            currentMaxIndex = i + 1;\n            }\n            else if(currentMin\
    \ > currentMax) {\n                isSorted = false;\n                currentMinIndex\
    \ = i;\n                currentMaxIndex = i;\n            }\n            else\
    \ if(currentMin == currentMax) {\n                isSorted = false;\n        \
    \        currentMinIndex = i;\n                currentMaxIndex = i;\n        \
    \    }\n            else if(currentMin < minValue) {\n                isSorted\
    \ = false;\n                currentMinIndex = i;\n                currentMaxIndex\
    \ = i;\n            }\n            else if(currentMin > maxValue) {\n        \
    \        isSorted = false;\n                currentMinIndex = i;\n           \
    \     currentMaxIndex = i;\n            }\n            else if(currentMin == minValue\
    \ && currentMax > maxValue) {\n                isSorted = false;\n           \
    \     currentMinIndex = i;\n                currentMaxIndex = i;\n           \
    \ }\n            else if(currentMin == maxValue && currentMax < minValue) {\n\
    \                isSorted = false;\n                currentMinIndex = i;\n   \
    \             currentMaxIndex = i;\n            }\n            else if(currentMin\
    \ == minValue && currentMax == maxValue) {\n                isSorted = false;\n\
    \                currentMinIndex = i;\n                currentMaxIndex = i;\n\
    \            }\n            else if(currentMin > minValue && currentMax > maxValue)\
    \ {\n                isSorted = false;\n                currentMinIndex = i;\n\
    \                currentMaxIndex = i;\n            }\n            else if(currentMin\
    \ < minValue && currentMax == maxValue) {\n                isSorted = false;\n\
    \                currentMinIndex = i;\n                currentMaxIndex = i;\n\
    \            }\n            else if(currentMin > minValue && currentMax < maxValue)\
    \ {\n                isSorted = false;\n                currentMinIndex = i;\n\
    \                currentMaxIndex = i;\n            }\n            else if(currentMin\
    \ == minValue && currentMax == maxValue) {\n                isSorted = false;\n\
    \                currentMinIndex = i;\n                currentMaxIndex = i;\n\
    \            }\n            else if(currentMin > minValue && currentMax < maxValue)\
    \ {\n                isSorted = false;\n                currentMinIndex = i;\n\
    \                currentMaxIndex = i;\n            }\n            else if(current",
  "        ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long mid =\
    \ min + (max - min) / 2;\n        Long mid2 = mid + (max - min) / 2;\n       \
    \ Long mid3 = mid + (max - min) / 2;\n        Long mid4 = mid + (max - min) /\
    \ 2;\n        Long mid5 = mid + (max - min) / 2;\n        Long mid6 = mid + (max\
    \ - min) / 2;\n        Long mid7 = mid + (max - min) / 2;\n        Long mid8 =\
    \ mid + (max - min) / 2;\n        Long mid9 = mid + (max - min) / 2;\n       \
    \ Long mid10 = mid + (max - min) / 2;\n        Long mid11 = mid + (max - min)\
    \ / 2;\n        Long mid12 = mid + (max - min) / 2;\n        Long mid13 = mid\
    \ + (max - min) / 2;\n        Long mid14 = mid + (max - min) / 2;\n        Long\
    \ mid15 = mid + (max - min) / 2;\n        Long mid16 = mid + (max - min) / 2;\n\
    \        Long mid17 = mid + (max - min) / 2;\n        Long mid18 = mid + (max\
    \ - min) / 2;\n        Long mid19 = mid + (max - min) / 2;\n        Long mid20\
    \ = mid + (max - min) / 2;\n        Long mid21 = mid + (max - min) / 2;\n    \
    \    Long mid22 = mid + (max - min) / 2;\n        Long mid23 = mid + (max - min)\
    \ / 2;\n        Long mid24 = mid + (max - min) / 2;\n        Long mid25 = mid\
    \ + (max - min) / 2;\n        Long mid26 = mid + (max - min) / 2;\n        Long\
    \ mid27 = mid + (max - min) / 2;\n        Long mid28 = mid + (max - min) / 2;\n\
    \        Long mid29 = mid + (max - min) / 2;\n        Long mid30 = mid + (max\
    \ - min) / 2;\n        Long mid31 = mid + (max - min) / 2;\n        Long mid32\
    \ = mid + (max - min) / 2;\n        Long mid33 = mid + (max - min) / 2;\n    \
    \    Long mid34 = mid + (max - min) / 2;\n        Long mid35 = mid + (max - min)\
    \ / 2;\n        Long mid36 = mid + (max - min) / 2;\n        Long mid", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long minValue =\
    \ lst.get(0);\n        long maxValue = lst.get(lst.size() - 1);\n        long\
    \ currentMin = minValue;\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentCount = 0;\n        long currentSumOfSquares = 0;\n\
    \        long currentSumOfProducts = 0;\n        long currentProduct = 1;\n  \
    \      long currentProductOfSquares = 0;\n        long currentProductOfProducts\
    \ = 0;\n        long currentProductOfSumOfSquares = 0;\n        long currentProductOfSumOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfSquares = 0;\n        long\
    \ currentProductOfSumOfProductsOfProducts = 0;\n        long currentProductOfSumOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProducts = 0;\n\
    \        long currentProductOfSumOfProductsOfProductsOfProductsOfSquares = 0;\n\
    \        long currentProductOfSumOfProductsOfProductsOfProductsOfProducts = 0;\n\
    \        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquare",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long current = min;\n        long nextMax = max;\n        long nextMin\
    \ = min;\n        long nextCurrent = current;\n        long nextNextMax = nextMax;\n\
    \        long nextNextMin = nextMin;\n        long nextNextCurrent = nextCurrent;\n\
    \        long nextNextNextMax = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n\
    \        long nextNextNextCurrent = nextNextCurrent;\n        long nextNextNextNextMax\
    \ = nextNextNextMax;\n        long nextNextNextNextMin = nextNextNextMin;\n  \
    \      long nextNextNextNextCurrent = nextNextNextCurrent;\n        long nextNextNextNextNextMax\
    \ = nextNextNextNextMax;\n        long nextNextNextNextNextMin = nextNextNextNextMin;\n\
    \        long nextNextNextNextNextCurrent = nextNextNextNextCurrent;\n       \
    \ long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n        long nextNextNextNextNextNextMin\
    \ = nextNextNextNextNextMin;\n        long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextNextMin = next", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        long\
    \ nextCurrent = current;\n        long nextNextMax = nextMax;\n        long nextNextMin\
    \ = nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextNextMax;\n\
    \        long next", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      long min = lst.stream().min(Long::compareTo).get();\n        long max =\
    \ lst.stream().max(Long::compareTo).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n        long\
    \ mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6 = mid * 6;\n\
    \        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n        long mid9\
    \ = mid * 9;\n        long mid10 = mid * 10;\n        long mid11 = mid * 11;\n\
    \        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n        long\
    \ mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long mid16 = mid\
    \ * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid * 18;\n    \
    \    long mid19 = mid * 19;\n        long mid20 = mid * 20;\n        long mid21\
    \ = mid * 21;\n        long mid22 = mid * 22;\n        long mid23 = mid * 23;\n\
    \        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n        long\
    \ mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long mid28 = mid\
    \ * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid * 30;\n    \
    \    long mid31 = mid * 31;\n        long mid32 = mid * 32;\n        long mid33\
    \ = mid * 33;\n        long mid34 = mid * 34;\n        long mid35 = mid * 35;\n\
    \        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n        long\
    \ mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long mid40 = mid\
    \ * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid * 42;\n    \
    \    long mid43 = mid * 43;\n        long mid44 = mid * 44;\n        long mid45\
    \ = mid * 45;\n        long mid46 = mid * 46;\n        long mid47 = mid * 47;\n\
    \        long mid48 = mid * 48;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long ", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long minIndex = lst.indexOf(minValue);\n        Long maxIndex\
    \ = lst.lastIndexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.lastIndexOf(maxValue, maxIndex\
    \ - 1);\n        Long minIndex3 = lst.indexOf(minValue, minIndex2 + 1);\n    \
    \    Long maxIndex3 = lst.lastIndexOf(maxValue, maxIndex2 - 1);\n        Long\
    \ minIndex4 = lst.indexOf(minValue, minIndex3 + 1);\n        Long maxIndex4 =\
    \ lst.lastIndexOf(maxValue, maxIndex3 - 1);\n        Long minIndex5 = lst.indexOf(minValue,\
    \ minIndex4 + 1);\n        Long maxIndex5 = lst.lastIndexOf(maxValue, maxIndex4\
    \ - 1);\n        Long minIndex6 = lst.indexOf(minValue, minIndex5 + 1);\n    \
    \    Long maxIndex6 = lst.lastIndexOf(maxValue, maxIndex5 - 1);\n        Long\
    \ minIndex7 = lst.indexOf(minValue, minIndex6 + 1);\n        Long maxIndex7 =\
    \ lst.lastIndexOf(maxValue, maxIndex6 - 1);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex7 + 1);\n        Long maxIndex8 = lst.lastIndexOf(maxValue, maxIndex7\
    \ - 1);\n        Long minIndex9 = lst.indexOf(minValue, minIndex8 + 1);\n    \
    \    Long maxIndex9 = lst.lastIndexOf(maxValue, maxIndex8 - 1);\n        Long\
    \ minIndex10 = lst.indexOf(minValue, minIndex9 + 1);\n        Long maxIndex10\
    \ = lst.lastIndexOf(maxValue, maxIndex9 - 1);\n        Long minIndex11 = lst.indexOf(minValue,\
    \ minIndex10 + 1);\n        Long maxIndex11 = lst.lastIndexOf(maxValue, maxIndex10\
    \ - 1);\n        Long minIndex12 = lst.indexOf(minValue, minIndex11 + 1);\n  \
    \      Long maxIndex12 = lst.lastIndexOf(maxValue, maxIndex11 - 1);\n        Long\
    \ minIndex13 = lst.indexOf(minValue, minIndex12 + 1);\n        Long maxIndex13\
    \ = lst.lastIndexOf(maxValue, maxIndex12 - 1);\n        Long minIndex14 = lst.indexOf(minValue,\
    \ minIndex13 + 1);\n        Long maxIndex14 = lst.lastIndexOf(maxValue, maxIndex13\
    \ - 1);\n        Long minIndex15 = lst.indexOf(minValue, minIndex14 + 1);\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2\
    \ / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n       \
    \ long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7\
    \ / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n      \
    \  long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13\
    \ = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 /\
    \ 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n     \
    \   long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid49 = ", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long mid = min + (max -\
    \ min) / 2;\n        Long mid2 = min + (max - min) / 2;\n        Long mid3 = min\
    \ + (max - min) / 2;\n        Long mid4 = min + (max - min) / 2;\n        Long\
    \ mid5 = min + (max - min) / 2;\n        Long mid6 = min + (max - min) / 2;\n\
    \        Long mid7 = min + (max - min) / 2;\n        Long mid8 = min + (max -\
    \ min) / 2;\n        Long mid9 = min + (max - min) / 2;\n        Long mid10 =\
    \ min + (max - min) / 2;\n        Long mid11 = min + (max - min) / 2;\n      \
    \  Long mid12 = min + (max - min) / 2;\n        Long mid13 = min + (max - min)\
    \ / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long mid15 = min\
    \ + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n        Long\
    \ mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max - min) / 2;\n\
    \        Long mid19 = min + (max - min) / 2;\n        Long mid20 = min + (max\
    \ - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n        Long mid22\
    \ = min + (max - min) / 2;\n        Long mid23 = min + (max - min) / 2;\n    \
    \    Long mid24 = min + (max - min) / 2;\n        Long mid25 = min + (max - min)\
    \ / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long mid27 = min\
    \ + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n        Long\
    \ mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max - min) / 2;\n\
    \        Long mid31 = min + (max - min) / 2;\n        Long mid32 = min + (max\
    \ - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n        Long mid34\
    \ = min + (max - min) / 2;\n        Long mid35 = min + (max - min) / 2;\n    \
    \    Long mid36 = min + (max - min) / 2;\n        Long mid37 = min + (max - min)\
    \ / 2;\n        ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long curr = min;\n        while (curr <= max) {\n       \
    \     result.add(lst.get(curr));\n            curr++;\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Long\
    \ min = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n\
    \        Long current = min;\n        Long next = max;\n        while(current\
    \ != next) {\n            result.add(current);\n            current = next;\n\
    \            next = lst.stream().min(Long::compareTo).get();\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n\
    \        long mid = min + ((max - min) / 2);\n        long temp;\n        for\
    \ (long i : lst) {\n            if (i < mid) {\n                temp = i;\n  \
    \          } else if (i > mid) {\n                temp = mid;\n            } else\
    \ {\n                temp = mid;\n            }\n            result.add(temp);\n\
    \            mid = (mid + temp) / 2;\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = mid;\n\
    \        long prev = 0;\n        long currMax = max;\n        long currMin = min;\n\
    \        long nextMax = max;\n        long nextMin = min;\n        long prevMax\
    \ = max;\n        long prevMin = min;\n        do {\n            while (curr <\
    \ max) {\n                result.add(new Long(curr));\n                curr =\
    \ curr + (max - curr) / 2;\n            }\n            while (next < max) {\n\
    \                result.add(new Long(next));\n                next = next + (max\
    \ - next) / 2;\n            }\n            while (currMax < max) {\n         \
    \       result.add(new Long(currMax));\n                currMax = currMax + (max\
    \ - currMax) / 2;\n            }\n            while (nextMax < max) {\n      \
    \          result.add(new Long(nextMax));\n                nextMax = nextMax +\
    \ (max - nextMax) / 2;\n            }\n            while (currMin < max) {\n \
    \               result.add(new Long(currMin));\n                currMin = currMin\
    \ + (max - currMin) / 2;\n            }\n            while (nextMin < max) {\n\
    \                result.add(new Long(nextMin));\n                nextMin = nextMin\
    \ + (max - nextMin) / 2;\n            }\n            while (prev < max) {\n  \
    \              result.add(new Long(prev));\n                prev = prev + (max\
    \ - prev) / 2;\n            }\n            while (prevMax < max) {\n         \
    \       result.add(new Long(prevMax));\n                prevMax = prevMax + (max\
    \ - prevMax) / 2;\n            }\n            while (prevMin < max) {\n      \
    \          result.add(new Long(prevMin));\n                prevMin = prevMin +\
    \ (max - prevMin) / 2;\n            }\n        } while (curr != max);\n      \
    \  return result;", "        ArrayList<Long> result = new ArrayList<>();\n   \
    \     long min = lst.stream().min(Long::compareTo).get();\n        long max =\
    \ lst.stream().max(Long::compareTo).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min +\
    \ (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long mid5\
    \ = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n     \
    \   long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max - min)\
    \ / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 = min +\
    \ (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n        long\
    \ mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min) / 2;\n\
    \        long mid14 = min + (max - min) / 2;\n        long mid15 = min + (max\
    \ - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long mid17\
    \ = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n    \
    \    long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max - min)\
    \ / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22 = min\
    \ + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n        long\
    \ mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min) / 2;\n\
    \        long mid26 = min + (max - min) / 2;\n        long mid27 = min + (max\
    \ - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long mid29\
    \ = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n    \
    \    long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max - min)\
    \ / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34 = min\
    \ + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n        long\
    \ mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min) / 2;\n\
    \        long mid38 = min + (max - min) / 2;\n        long mid39 = min + (max\
    \ - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long mid41\
    \ = ", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid", "        ArrayList<Long> res =\
    \ new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        res.add(mid);\n        min = mid;\n      \
    \  max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n    \
    \            min = i;\n            } else if (i > mid) {\n                max\
    \ = i;\n            }\n            res.add(i);\n        }\n        res.add(max);\n\
    \        res.add(min);\n        return res;", "        ArrayList<Long> res = new\
    \ ArrayList<>();\n        Long minValue = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue2 = lst.stream().min(Long::compare).get();\n        Long maxValue2 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue3 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue3 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue4 = lst.stream().min(Long::compare).get();\n        Long maxValue4 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue5 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue5 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue6 = lst.stream().min(Long::compare).get();\n        Long maxValue6 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue7 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue7 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue8 = lst.stream().min(Long::compare).get();\n        Long maxValue8 =\
    \ lst.stream().max(Long::compare).get();\n        Long minValue9 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue9 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue10 = lst.stream().min(Long::compare).get();\n        Long maxValue10\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue11 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue11 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue12 = lst.stream().min(Long::compare).get();\n        Long maxValue12\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue13 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue13 = lst.stream().max(Long::compare).get();\n        Long\
    \ minValue14 = lst.stream().min(Long::compare).get();\n        Long maxValue14\
    \ = lst.stream().max(Long::compare).get();\n        Long minValue15 = lst.stream().min(Long::compare).get();\n\
    \        Long maxValue15 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long current = min;\n        long nextMax = max;\n        long nextMin\
    \ = min;\n        do {\n            result.add(current);\n            nextMax\
    \ = nextMax + 1;\n            nextMin = nextMin - 1;\n            current = nextMax;\n\
    \        } while (current != nextMin);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long minValue = lst.get(0);\n     \
    \   long maxValue = lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n\
    \        long currentMaxValue = maxValue;\n        long currentMinIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        boolean isFirst = true;\n       \
    \ boolean isLast = true;\n        boolean isMiddle = true;\n        boolean isMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddle", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid\
    \ - mid2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid3 - mid4;\n \
    \       long mid6 = mid5 / 2;\n        long mid7 = mid5 - mid6;\n        long\
    \ mid8 = mid7 / 2;\n        long mid9 = mid7 - mid8;\n        long mid10 = mid9\
    \ / 2;\n        long mid11 = mid9 - mid10;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid11 - mid12;\n        long mid14 = mid13 / 2;\n      \
    \  long mid15 = mid13 - mid14;\n        long mid16 = mid15 / 2;\n        long\
    \ mid17 = mid15 - mid16;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid17 - mid18;\n        long mid20 = mid19 / 2;\n        long mid21 = mid19\
    \ - mid20;\n        long mid22 = mid21 / 2;\n        long mid23 = mid21 - mid22;\n\
    \        long mid24 = mid23 / 2;\n        long mid25 = mid23 - mid24;\n      \
    \  long mid26 = mid25 / 2;\n        long mid27 = mid25 - mid26;\n        long\
    \ mid28 = mid27 / 2;\n        long mid29 = mid27 - mid28;\n        long mid30\
    \ = mid29 / 2;\n        long mid31 = mid29 - mid30;\n        long mid32 = mid31\
    \ / 2;\n        long mid33 = mid31 - mid32;\n        long mid34 = mid33 / 2;\n\
    \        long mid35 = mid33 - mid34;\n        long mid36 = mid35 / 2;\n      \
    \  long mid37 = mid35 - mid36;\n        long mid38 = mid37 / 2;\n        long\
    \ mid39 = mid37 - mid38;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid39 - mid40;\n        long mid42 = mid41 / 2;\n        long mid43 = mid41\
    \ - mid42;\n        long mid44 = mid43 / 2;\n        long mid45 = mid43 - mid44;\n\
    \        ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long min = lst.stream().min(Long::compare).get();\n        Long max =\
    \ lst.stream().max(Long::compare).get();\n        Long min2 = lst.stream().min(Long::compare).get();\n\
    \        Long max2 = lst.stream().max(Long::compare).get();\n        Long min3\
    \ = lst.stream().min(Long::compare).get();\n        Long max3 = lst.stream().max(Long::compare).get();\n\
    \        Long min4 = lst.stream().min(Long::compare).get();\n        Long max4\
    \ = lst.stream().max(Long::compare).get();\n        Long min5 = lst.stream().min(Long::compare).get();\n\
    \        Long max5 = lst.stream().max(Long::compare).get();\n        Long min6\
    \ = lst.stream().min(Long::compare).get();\n        Long max6 = lst.stream().max(Long::compare).get();\n\
    \        Long min7 = lst.stream().min(Long::compare).get();\n        Long max7\
    \ = lst.stream().max(Long::compare).get();\n        Long min8 = lst.stream().min(Long::compare).get();\n\
    \        Long max8 = lst.stream().max(Long::compare).get();\n        Long min9\
    \ = lst.stream().min(Long::compare).get();\n        Long max9 = lst.stream().max(Long::compare).get();\n\
    \        Long min10 = lst.stream().min(Long::compare).get();\n        Long max10\
    \ = lst.stream().max(Long::compare).get();\n        Long min11 = lst.stream().min(Long::compare).get();\n\
    \        Long max11 = lst.stream().max(Long::compare).get();\n        Long min12\
    \ = lst.stream().min(Long::compare).get();\n        Long max12 = lst.stream().max(Long::compare).get();\n\
    \        Long min13 = lst.stream().min(Long::compare).get();\n        Long max13\
    \ = lst.stream().max(Long::compare).get();\n        Long min14 = lst.stream().min(Long::compare).get();\n\
    \        Long max14 = lst.stream().max(Long::compare).get();\n        Long min15\
    \ = lst.stream().min(Long::compare).get();\n        Long max15 = lst.stream().max(Long::compare).get();\n\
    \        Long min16 = lst.stream().min(Long::compare).get();\n        Long", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = ", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ min = lst.get(0);\n        long max = lst.get(0);\n        for (long i : lst)\
    \ {\n            if (i < min) {\n                min = i;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long mid = min + (max - min) / 2;\n        for (long i : lst) {\n   \
    \         if (i < mid) {\n                result.add(i);\n            } else if\
    \ (i > mid) {\n                result.add(max - i);\n            } else {\n  \
    \              result.add(min - i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(long j = mid; j > i; j--) {\n    \
    \            temp = lst.get(j);\n                lst.set(j, lst.get(j - 1));\n\
    \                lst.set(j - 1, temp);\n            }\n        }\n        for(long\
    \ i = min; i < max; i++) {\n            for(", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n \
    \       long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 =\
    \ min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n       \
    \ long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) /\
    \ 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max\
    \ - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2\
    \ + (max - min) / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long\
    \ mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n\
    \        long mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max\
    \ - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n        long mid10\
    \ = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n \
    \       long mid12 = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max\
    \ - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n        long mid15\
    \ = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n\
    \        long mid17 = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max\
    \ - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n        long mid20\
    \ = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n\
    \        long mid22 = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max\
    \ - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n        long mid25\
    \ = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n\
    \        long mid27 = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max\
    \ - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n        long mid30\
    \ = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n\
    \        long mid32 = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max\
    \ - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n        long mid35\
    \ = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n\
    \        long mid37 = mid36 + (max - min) / 2;\n        long mid38 = mid", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = mid + 2;\n        long mid5 = mid + 3;\n     \
    \   long mid6 = mid + 4;\n        long mid7 = mid + 5;\n        long mid8 = mid\
    \ + 6;\n        long mid9 = mid + 7;\n        long mid10 = mid + 8;\n        long\
    \ mid11 = mid + 9;\n        long mid12 = mid + 10;\n        long mid13 = mid +\
    \ 11;\n        long mid14 = mid + 12;\n        long mid15 = mid + 13;\n      \
    \  long mid16 = mid + 14;\n        long mid17 = mid + 15;\n        long mid18\
    \ = mid + 16;\n        long mid19 = mid + 17;\n        long mid20 = mid + 18;\n\
    \        long mid21 = mid + 19;\n        long mid22 = mid + 20;\n        long\
    \ mid23 = mid + 21;\n        long mid24 = mid + 22;\n        long mid25 = mid\
    \ + 23;\n        long mid26 = mid + 24;\n        long mid27 = mid + 25;\n    \
    \    long mid28 = mid + 26;\n        long mid29 = mid + 27;\n        long mid30\
    \ = mid + 28;\n        long mid31 = mid + 29;\n        long mid32 = mid + 30;\n\
    \        long mid33 = mid + 31;\n        long mid34 = mid + 32;\n        long\
    \ mid35 = mid + 33;\n        long mid36 = mid + 34;\n        long mid37 = mid\
    \ + 35;\n        long mid38 = mid + 36;\n        long mid39 = mid + 37;\n    \
    \    long mid40 = mid + 38;\n        long mid41 = mid + 39;\n        long mid42\
    \ = mid + 40;\n        long mid43 = mid + 41;\n        long mid44 = mid + 42;\n\
    \        long mid45 = mid + 43;\n        long mid46 = mid + 44;\n        long\
    \ mid47 = mid + 45;\n        long mid48 = mid + 46;\n        long mid49 = mid\
    \ + 47;\n        long mid50 = mid + 48;\n        long mid51 = mid + 49;\n    \
    \    long mid52 = mid + 50;\n        long mid53 = mid + 51;\n        long mid54",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long currentMin = minValue;\n        Long currentMax = maxValue;\n\
    \        Long currentMinIndex = 0;\n        Long currentMaxIndex = 0;\n      \
    \  Long currentMinIndex2 = 0;\n        Long currentMaxIndex2 = 0;\n        Long\
    \ currentMinIndex3 = 0;\n        Long currentMaxIndex3 = 0;\n        Long currentMinIndex4\
    \ = 0;\n        Long currentMaxIndex4 = 0;\n        Long currentMinIndex5 = 0;\n\
    \        Long currentMaxIndex5 = 0;\n        Long currentMinIndex6 = 0;\n    \
    \    Long currentMaxIndex6 = 0;\n        Long currentMinIndex7 = 0;\n        Long\
    \ currentMaxIndex7 = 0;\n        Long currentMinIndex8 = 0;\n        Long currentMaxIndex8\
    \ = 0;\n        Long currentMinIndex9 = 0;\n        Long currentMaxIndex9 = 0;\n\
    \        Long currentMinIndex10 = 0;\n        Long currentMaxIndex10 = 0;\n  \
    \      Long currentMinIndex11 = 0;\n        Long currentMaxIndex11 = 0;\n    \
    \    Long currentMinIndex12 = 0;\n        Long currentMaxIndex12 = 0;\n      \
    \  Long currentMinIndex13 = 0;\n        Long currentMaxIndex13 = 0;\n        Long\
    \ currentMinIndex14 = 0;\n        Long currentMaxIndex14 = 0;\n        Long currentMinIndex15\
    \ = 0;\n        Long currentMaxIndex15 = 0;\n        Long currentMinIndex16 =\
    \ 0;\n        Long currentMaxIndex16 = 0;\n        Long currentMinIndex17 = 0;\n\
    \        Long currentMaxIndex17 = 0;\n        Long currentMinIndex18 = 0;\n  \
    \      Long currentMaxIndex18 = 0;\n        Long currentMinIndex19 = 0;\n    \
    \    Long currentMaxIndex19 = 0;\n        Long currentMinIndex20 = 0;\n      \
    \  Long currentMaxIndex20 = 0;\n        Long currentMinIndex21 = 0;\n        Long\
    \ currentMaxIndex21 = 0;\n        Long currentMinIndex22 = 0;\n        Long currentMaxIndex22\
    \ = 0;\n        Long currentMinIndex23 = 0;\n        Long currentMaxIndex23 =\
    \ 0;\n        Long currentMinIndex24 = 0;\n        Long currentMaxIndex24 = 0;\n\
    \        Long currentMinIndex25 = 0;\n        Long currentMaxIndex25 = 0;\n  \
    \      Long currentMinIndex26 = 0;\n        Long currentMaxIndex26 = 0;\n    \
    \    Long currentMin", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min2 = lst.stream().min(Long::compareTo).get();\n\
    \        long max2 = lst.stream().max(Long::compareTo).get();\n        long min3\
    \ = lst.stream().min(Long::compareTo).get();\n        long max3 = lst.stream().max(Long::compareTo).get();\n\
    \        long min4 = lst.stream().min(Long::compareTo).get();\n        long max4\
    \ = lst.stream().max(Long::compareTo).get();\n        long min5 = lst.stream().min(Long::compareTo).get();\n\
    \        long max5 = lst.stream().max(Long::compareTo).get();\n        long min6\
    \ = lst.stream().min(Long::compareTo).get();\n        long max6 = lst.stream().max(Long::compareTo).get();\n\
    \        long min7 = lst.stream().min(Long::compareTo).get();\n        long max7\
    \ = lst.stream().max(Long::compareTo).get();\n        long min8 = lst.stream().min(Long::compareTo).get();\n\
    \        long max8 = lst.stream().max(Long::compareTo).get();\n        long min9\
    \ = lst.stream().min(Long::compareTo).get();\n        long max9 = lst.stream().max(Long::compareTo).get();\n\
    \        long min10 = lst.stream().min(Long::compareTo).get();\n        long max10\
    \ = lst.stream().max(Long::compareTo).get();\n        long min11 = lst.stream().min(Long::compareTo).get();\n\
    \        long max11 = lst.stream().max(Long::compareTo).get();\n        long min12\
    \ = lst.stream().min(Long::compareTo).get();\n        long max12 = lst.stream().max(Long::compareTo).get();\n\
    \        long min13 = lst.stream().min(Long::compareTo).get();\n        long max13\
    \ = lst.stream().max(Long::compareTo).get();\n        long min14 = lst.stream().min(Long::compareTo).get();\n\
    \        long max14 = lst.stream().max(Long::compareTo).get();\n        long min15\
    \ = lst.stream().min(Long::compareTo).get();\n        long max15 = lst.stream().max(Long::compareTo).get();\n\
    \        long min16 = lst.stream().min(Long::compareTo).get();\n        long ",
  "        ArrayList<Long> result = new ArrayList<>();\n        long minValue = lst.get(0);\n\
    \        long maxValue = lst.get(lst.size() - 1);\n        long currentMin = minValue;\n\
    \        long currentMax = maxValue;\n        long currentMinIndex = -1;\n   \
    \     long currentMaxIndex = -1;\n        boolean isFirst = true;\n        boolean\
    \ isLast = true;\n        boolean isMiddle = true;\n        boolean isMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddle", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long minValue = lst.stream().min().getAsLong();\n\
    \        long maxValue = lst.stream().max().getAsLong();\n        long minIndex\
    \ = lst.indexOf(minValue);\n        long maxIndex = lst.indexOf(maxValue);\n \
    \       long currentValue = minValue;\n        long currentIndex = minIndex;\n\
    \        do {\n            result.add(currentValue);\n            currentValue\
    \ = currentIndex == maxIndex ? minValue : currentIndex == minIndex ? maxValue\
    \ : currentIndex == lst.size() - 1 ? lst.stream().max().getAsLong() : currentIndex\
    \ == lst.size() - 2 ? lst.stream().min().getAsLong() : currentIndex == lst.size()\
    \ - 3 ? lst.stream().max().getAsLong() : currentIndex == lst.size() - 4 ? lst.stream().min().getAsLong()\
    \ : lst.stream().findFirst().getAsLong();\n            currentIndex = lst.indexOf(currentValue);\n\
    \        } while (currentIndex != -1);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long ", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long minValue = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue = lst.stream().max(Long::compare).get();\n        Long minValue2 =\
    \ lst.stream().min(Long::compare).get();\n        Long maxValue2 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue3 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue3 = lst.stream().max(Long::compare).get();\n        Long minValue4 =\
    \ lst.stream().min(Long::compare).get();\n        Long maxValue4 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue5 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue5 = lst.stream().max(Long::compare).get();\n        Long minValue6 =\
    \ lst.stream().min(Long::compare).get();\n        Long maxValue6 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue7 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue7 = lst.stream().max(Long::compare).get();\n        Long minValue8 =\
    \ lst.stream().min(Long::compare).get();\n        Long maxValue8 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue9 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue9 = lst.stream().max(Long::compare).get();\n        Long minValue10\
    \ = lst.stream().min(Long::compare).get();\n        Long maxValue10 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue11 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue11 = lst.stream().max(Long::compare).get();\n        Long minValue12\
    \ = lst.stream().min(Long::compare).get();\n        Long maxValue12 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue13 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue13 = lst.stream().max(Long::compare).get();\n        Long minValue14\
    \ = lst.stream().min(Long::compare).get();\n        Long maxValue14 = lst.stream().max(Long::compare).get();\n\
    \        Long minValue15 = lst.stream().min(Long::compare).get();\n        Long\
    \ maxValue15 = ", "        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long minIndex = lst.indexOf(minValue);\n        Long maxIndex\
    \ = lst.indexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue, minIndex\
    \ + 1);\n        Long maxIndex2 = lst.indexOf(maxValue, maxIndex + 1);\n     \
    \   Long minIndex3 = lst.indexOf(minValue, minIndex + 2);\n        Long maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2);\n        Long minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3);\n        Long maxIndex4 = lst.indexOf(maxValue, maxIndex + 3);\n\
    \        Long minIndex5 = lst.indexOf(minValue, minIndex + 4);\n        Long maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4);\n        Long minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5);\n        Long maxIndex6 = lst.indexOf(maxValue, maxIndex + 5);\n\
    \        Long minIndex7 = lst.indexOf(minValue, minIndex + 6);\n        Long maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7);\n        Long maxIndex8 = lst.indexOf(maxValue, maxIndex + 7);\n\
    \        Long minIndex9 = lst.indexOf(minValue, minIndex + 8);\n        Long maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8);\n        Long minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9);\n        Long maxIndex10 = lst.indexOf(maxValue, maxIndex + 9);\n\
    \        Long minIndex11 = lst.indexOf(minValue, minIndex + 10);\n        Long\
    \ maxIndex11 = lst.indexOf(maxValue, maxIndex + 10);\n        Long minIndex12\
    \ = lst.indexOf(minValue, minIndex + 11);\n        Long maxIndex12 = lst.indexOf(maxValue,\
    \ maxIndex + 11);\n        Long minIndex13 = lst.indexOf(minValue, minIndex +\
    \ 12);\n        Long maxIndex13 = lst.indexOf(maxValue, maxIndex + 12);\n    \
    \    Long minIndex14 = lst.indexOf(minValue, minIndex + 13);\n        Long maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex + 13);\n        Long minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 14);\n        Long maxIndex15 = lst.indexOf(maxValue, maxIndex +\
    \ 14);\n        Long minIndex16", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        result.add(mid);\n        long curr = mid;\n        long\
    \ next = mid;\n        long prev = 0;\n        for (long i : lst) {\n        \
    \    if (i > mid) {\n                result.add(curr);\n                curr =\
    \ next;\n                next = i;\n            } else {\n                next\
    \ = i;\n            }\n        }\n        result.add(curr);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long minValue\
    \ = lst.get(0);\n        long maxValue = lst.get(lst.size() - 1);\n        long\
    \ temp;\n        for (long i = minValue; i <= maxValue; i++) {\n            for\
    \ (long j = lst.size() - 1; j >= 0; j--) {\n                temp = lst.get(j);\n\
    \                if (temp == i) {\n                    lst.add(j, i);\n      \
    \              lst.remove(j);\n                    result.add(temp);\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Long\
    \ min = lst.stream().min(Long::compare).get();\n        Long max = lst.stream().max(Long::compare).get();\n\
    \        Long mid = min + (max - min) / 2;\n        result.add(mid);\n       \
    \ min = mid;\n        max = mid;\n        for (Long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        result.add(min);\n\
    \        result.add(max);\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n \
    \       long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 =\
    \ min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n       \
    \ long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) /\
    \ 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max\
    \ - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        while(current\
    \ != nextMax) {\n            result.add(current);\n            nextMax = nextMax\
    \ == max ? min : nextMax;\n            nextMin = nextMin == min ? max : nextMin;\n\
    \            current = nextMin;\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i.compareTo(min)\
    \ < 0) {\n                min = i;\n            }\n            if (i.compareTo(max)\
    \ > 0) {\n                max = i;\n            }\n        }\n        result.add(min);\n\
    \        result.add(max);\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long current = min;\n        long nextMax = max;\n        long nextMin\
    \ = min;\n        do {\n            result.add(current);\n            nextMax\
    \ = nextMax + 1;\n            nextMin = nextMin - 1;\n            current = nextMax;\n\
    \        } while (current != nextMin);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n\
    \        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid49 = mid", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long curr = min;\n        long nextMin = mid;\n        long\
    \ nextMax = mid;\n        long nextMid;\n        do {\n            nextMin = mid;\n\
    \            nextMax = mid;\n            nextMid = mid + 1;\n            while\
    \ (nextMin < max && lst.contains(nextMin)) {\n                nextMin++;\n   \
    \         }\n            while (nextMax < max && lst.contains(nextMax)) {\n  \
    \              nextMax--;\n            }\n            if (nextMin > nextMax) {\n\
    \                result.add(curr);\n                curr = nextMin;\n        \
    \        nextMin = mid;\n                nextMax = mid;\n                nextMid\
    \ = mid + 1;\n            } else {\n                result.add(curr);\n      \
    \          curr = nextMax;\n                nextMin = mid;\n                nextMax\
    \ = mid;\n                nextMid = mid + 1;\n            }\n        } while (nextMin\
    \ < max && lst.contains(nextMin));\n        result.add(curr);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long mid5 =\
    \ mid / 5;\n        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n     \
    \   long mid8 = mid / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid\
    \ / 10;\n        long mid11 = mid / 11;\n        long mid12 = mid / 12;\n    \
    \    long mid13 = mid / 13;\n        long mid14 = mid / 14;\n        long mid15\
    \ = mid / 15;\n        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n\
    \        long mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long\
    \ mid20 = mid / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid\
    \ / 22;\n        long mid23 = mid / 23;\n        long mid24 = mid / 24;\n    \
    \    long mid25 = mid / 25;\n        long mid26 = mid / 26;\n        long mid27\
    \ = mid / 27;\n        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n\
    \        long mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long\
    \ mid32 = mid / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid\
    \ / 34;\n        long mid35 = mid / 35;\n        long mid36 = mid / 36;\n    \
    \    long mid37 = mid / 37;\n        long mid38 = mid / 38;\n        long mid39\
    \ = mid / 39;\n        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n\
    \        long mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long\
    \ mid44 = mid / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid\
    \ / 46;\n        long mid47 = mid / 47;\n", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 =\
    \ min + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n       \
    \ long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) /\
    \ 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max\
    \ - min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10\
    \ = min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n    \
    \    long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = min + (max - min", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long mid = min + (max -\
    \ min) / 2;\n        Long mid2 = mid + (max - min) / 2;\n        Long mid3 = mid2\
    \ + (max - min) / 2;\n        Long mid4 = mid3 + (max - min) / 2;\n        Long\
    \ mid5 = mid4 + (max - min) / 2;\n        Long mid6 = mid5 + (max - min) / 2;\n\
    \        Long mid7 = mid6 + (max - min) / 2;\n        Long mid8 = mid7 + (max\
    \ - min) / 2;\n        Long mid9 = mid8 + (max - min) / 2;\n        Long mid10\
    \ = mid9 + (max - min) / 2;\n        Long mid11 = mid10 + (max - min) / 2;\n \
    \       Long mid12 = mid11 + (max - min) / 2;\n        Long mid13 = mid12 + (max\
    \ - min) / 2;\n        Long mid14 = mid13 + (max - min) / 2;\n        Long mid15\
    \ = mid14 + (max - min) / 2;\n        Long mid16 = mid15 + (max - min) / 2;\n\
    \        Long mid17 = mid16 + (max - min) / 2;\n        Long mid18 = mid17 + (max\
    \ - min) / 2;\n        Long mid19 = mid18 + (max - min) / 2;\n        Long mid20\
    \ = mid19 + (max - min) / 2;\n        Long mid21 = mid20 + (max - min) / 2;\n\
    \        Long mid22 = mid21 + (max - min) / 2;\n        Long mid23 = mid22 + (max\
    \ - min) / 2;\n        Long mid24 = mid23 + (max - min) / 2;\n        Long mid25\
    \ = mid24 + (max - min) / 2;\n        Long mid26 = mid25 + (max - min) / 2;\n\
    \        Long mid27 = mid26 + (max - min) / 2;\n        Long mid28 = mid27 + (max\
    \ - min) / 2;\n        Long mid29 = mid28 + (max - min) / 2;\n        Long mid30\
    \ = mid29 + (max - min) / 2;\n        Long mid31 = mid30 + (max - min) / 2;\n\
    \        Long mid32 = mid31 + (max - min) / 2;\n        Long mid33 = mid32 + (max\
    \ - min) / 2;\n        Long mid34 = mid33 + (max - min) / 2;\n        Long mid35\
    \ = mid34 + (", "        ArrayList<Long> result = new ArrayList<>();\n       \
    \ long min = lst.get(0);\n        long max = lst.get(0);\n        for (Long i\
    \ : lst) {\n            if (i < min) {\n                min = i;\n           \
    \ }\n            if (i > max) {\n                max = i;\n            }\n   \
    \     }\n        long mid = min + (max - min) / 2;\n        long left = mid;\n\
    \        long right = mid;\n        for (Long i : lst) {\n            if (i <\
    \ left) {\n                result.add(i);\n                left = i;\n       \
    \     }\n            if (i > right) {\n                result.add(i);\n      \
    \          right = i;\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> res = new ArrayList<>();\n \
    \       long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid - 1;\n        long mid3 = mid + 1;\n    \
    \    long mid4 = mid * 2;\n        long mid5 = mid * 3;\n        long mid6 = mid\
    \ * 4;\n        long mid7 = mid * 5;\n        long mid8 = mid * 6;\n        long\
    \ mid9 = mid * 7;\n        long mid10 = mid * 8;\n        long mid11 = mid * 9;\n\
    \        long mid12 = mid * 10;\n        long mid13 = mid * 11;\n        long\
    \ mid14 = mid * 12;\n        long mid15 = mid * 13;\n        long mid16 = mid\
    \ * 14;\n        long mid17 = mid * 15;\n        long mid18 = mid * 16;\n    \
    \    long mid19 = mid * 17;\n        long mid20 = mid * 18;\n        long mid21\
    \ = mid * 19;\n        long mid22 = mid * 20;\n        long mid23 = mid * 21;\n\
    \        long mid24 = mid * 22;\n        long mid25 = mid * 23;\n        long\
    \ mid26 = mid * 24;\n        long mid27 = mid * 25;\n        long mid28 = mid\
    \ * 26;\n        long mid29 = mid * 27;\n        long mid30 = mid * 28;\n    \
    \    long mid31 = mid * 29;\n        long mid32 = mid * 30;\n        long mid33\
    \ = mid * 31;\n        long mid34 = mid * 32;\n        long mid35 = mid * 33;\n\
    \        long mid36 = mid * 34;\n        long mid37 = mid * 35;\n        long\
    \ mid38 = mid * 36;\n        long mid39 = mid * 37;\n        long mid40 = mid\
    \ * 38;\n        long mid41 = mid * 39;\n        long mid42 = mid * 40;\n    \
    \    long mid43 = mid * 41;\n        long mid44 = mid * 42;\n        long mid45\
    \ = mid * 43;\n        long mid46 = mid * 44;\n        long mid47 = mid * 45;\n\
    \        long mid48 = mid * 46;\n        long mid49 = mid * ", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = mid + 2;\n        long mid5 = mid + 3;\n     \
    \   long mid6 = mid + 4;\n        long mid7 = mid + 5;\n        long mid8 = mid\
    \ + 6;\n        long mid9 = mid + 7;\n        long mid10 = mid + 8;\n        long\
    \ mid11 = mid + 9;\n        long mid12 = mid + 10;\n        long mid13 = mid +\
    \ 11;\n        long mid14 = mid + 12;\n        long mid15 = mid + 13;\n      \
    \  long mid16 = mid + 14;\n        long mid17 = mid + 15;\n        long mid18\
    \ = mid + 16;\n        long mid19 = mid + 17;\n        long mid20 = mid + 18;\n\
    \        long mid21 = mid + 19;\n        long mid22 = mid + 20;\n        long\
    \ mid23 = mid + 21;\n        long mid24 = mid + 22;\n        long mid25 = mid\
    \ + 23;\n        long mid26 = mid + 24;\n        long mid27 = mid + 25;\n    \
    \    long mid28 = mid + 26;\n        long mid29 = mid + 27;\n        long mid30\
    \ = mid + 28;\n        long mid31 = mid + 29;\n        long mid32 = mid + 30;\n\
    \        long mid33 = mid + 31;\n        long mid34 = mid + 32;\n        long\
    \ mid35 = mid + 33;\n        long mid36 = mid + 34;\n        long mid37 = mid\
    \ + 35;\n        long mid38 = mid + 36;\n        long mid39 = mid + 37;\n    \
    \    long mid40 = mid + 38;\n        long mid41 = mid + 39;\n        long mid42\
    \ = mid + 40;\n        long mid43 = mid + 41;\n        long mid44 = mid + 42;\n\
    \        long mid45 = mid + 43;\n        long mid46 = mid + 44;\n        long\
    \ mid47 = mid + 45;\n        long mid48 = mid + 46;\n        long mid49 = mid\
    \ + 47;\n        long mid50 = mid + 48;\n        long mid51 = mid + 49;\n    \
    \    long mid52 = mid + 50;\n        long mid53 = mid + 51;\n        long mid",
  "        ArrayList<Long> result = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i.compareTo(mid)\
    \ < 0) {\n                min = i;\n            } else if (i.compareTo(mid) >\
    \ 0) {\n                max = i;\n            }\n            result.add(i);\n\
    \        }\n        result.add(min);\n        result.add(max);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(min);\n        result.add(mid);\n\
    \        result.add(max);\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = mid + (max - min) / 2;\n     \
    \   Long mid3 = mid2 + (max - min) / 2;\n        Long mid4 = mid3 + (max - min)\
    \ / 2;\n        Long mid5 = mid4 + (max - min) / 2;\n        Long mid6 = mid5\
    \ + (max - min) / 2;\n        Long mid7 = mid6 + (max - min) / 2;\n        Long\
    \ mid8 = mid7 + (max - min) / 2;\n        Long mid9 = mid8 + (max - min) / 2;\n\
    \        Long mid10 = mid9 + (max - min) / 2;\n        Long mid11 = mid10 + (max\
    \ - min) / 2;\n        Long mid12 = mid11 + (max - min) / 2;\n        Long mid13\
    \ = mid12 + (max - min) / 2;\n        Long mid14 = mid13 + (max - min) / 2;\n\
    \        Long mid15 = mid14 + (max - min) / 2;\n        Long mid16 = mid15 + (max\
    \ - min) / 2;\n        Long mid17 = mid16 + (max - min) / 2;\n        Long mid18\
    \ = mid17 + (max - min) / 2;\n        Long mid19 = mid18 + (max - min) / 2;\n\
    \        Long mid20 = mid19 + (max - min) / 2;\n        Long mid21 = mid20 + (max\
    \ - min) / 2;\n        Long mid22 = mid21 + (max - min) / 2;\n        Long mid23\
    \ = mid22 + (max - min) / 2;\n        Long mid24 = mid23 + (max - min) / 2;\n\
    \        Long mid25 = mid24 + (max - min) / 2;\n        Long mid26 = mid25 + (max\
    \ - min) / 2;\n        Long mid27 = mid26 + (max - min) / 2;\n        Long mid28\
    \ = mid27 + (max - min) / 2;\n        Long mid29 = mid28 + (max - min) / 2;\n\
    \        Long mid30 = mid29 + (max - min) / 2;\n        Long mid31 = mid30 + (max\
    \ - min) / 2;\n        Long mid32 = mid31 + (max - min) / 2;\n        Long mid33\
    \ = mid32 + (max - min) / 2;\n        Long mid34 = mid33 + (max - min) / 2;\n\
    \        Long mid35 = mid34 + (", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().mapToLong(x -> x).min().getAsLong();\n      \
    \  long max = lst.stream().mapToLong(x -> x).max().getAsLong();\n        long\
    \ mid = min + (max - min) / 2;\n        long current = mid;\n        long previous\
    \ = mid;\n        long next = 0;\n        for (long i : lst) {\n            if\
    \ (current > i) {\n                result.add(previous);\n                previous\
    \ = current;\n                current = i;\n            } else if (current < i)\
    \ {\n                result.add(current);\n                current = i;\n    \
    \        } else {\n                result.add(current);\n                current\
    \ = i;\n            }\n        }\n        result.add(previous);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            for (long j =\
    \ mid; j <= max; j++) {\n                if (lst.get(j) < temp) {\n          \
    \          temp = lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n    \
    \    long mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6 = mid\
    \ * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n        long\
    \ mid9 = mid * 9;\n        long mid10 = mid * 10;\n        long mid11 = mid *\
    \ 11;\n        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n      \
    \  long mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long mid16\
    \ = mid * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid * 18;\n\
    \        long mid19 = mid * 19;\n        long mid20 = mid * 20;\n        long\
    \ mid21 = mid * 21;\n        long mid22 = mid * 22;\n        long mid23 = mid\
    \ * 23;\n        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n    \
    \    long mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long mid28\
    \ = mid * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid * 30;\n\
    \        long mid31 = mid * 31;\n        long mid32 = mid * 32;\n        long\
    \ mid33 = mid * 33;\n        long mid34 = mid * 34;\n        long mid35 = mid\
    \ * 35;\n        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n    \
    \    long mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long mid40\
    \ = mid * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid * 42;\n\
    \        long mid43 = mid * 43;\n        long mid44 = mid * 44;\n        long\
    \ mid45 = mid * 45;\n        long mid46 = mid * 46;\n        long mid47 = mid\
    \ * 47;\n        long mid48 = mid * 48;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2\
    \ / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n       \
    \ long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7\
    \ / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n      \
    \  long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13\
    \ = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 /\
    \ 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n     \
    \   long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid49", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        result.add(mid);\n       \
    \ min = mid;\n        max = mid;\n        for (Long i : lst) {\n            if\
    \ (i.compareTo(mid) < 0) {\n                min = i;\n            } else if (i.compareTo(mid)\
    \ > 0) {\n                max = i;\n            }\n            result.add(max);\n\
    \            result.add(min);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long curr = min;\n       \
    \ long next = 0;\n        for (long i : lst) {\n            if (i == mid) {\n\
    \                result.add(curr);\n                curr = next;\n           \
    \     next = 0;\n            } else if (i == max) {\n                result.add(curr);\n\
    \                curr = next;\n                next = 0;\n            } else {\n\
    \                next = i;\n            }\n        }\n        result.add(curr);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i : lst) {\n            if (i < mid) {\n                temp = i;\n        \
    \    } else if (i > mid) {\n                temp = mid;\n            } else {\n\
    \                temp = mid;\n            }\n            res.add(temp);\n    \
    \    }\n        return res;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long curr = min;\n        long nextMax = max;\n        long nextMin =\
    \ min;\n        while (curr < max) {\n            result.add(curr);\n        \
    \    curr++;\n            nextMax--;\n            nextMin++;\n        }\n    \
    \    while (nextMin < max) {\n            result.add(nextMin);\n            nextMin++;\n\
    \        }\n        while (nextMax < max) {\n            result.add(nextMax);\n\
    \            nextMax--;\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long minIndex = lst.indexOf(minValue);\n        Long maxIndex\
    \ = lst.indexOf(maxValue);\n        Long temp;\n        for(int i = 1; i < lst.size();\
    \ i++) {\n            temp = lst.get(i);\n            if(temp < minValue) {\n\
    \                minValue = temp;\n                minIndex = i;\n           \
    \ }\n            if(temp > maxValue) {\n                maxValue = temp;\n   \
    \             maxIndex = i;\n            }\n        }\n        for(int i = minIndex;\
    \ i <= maxIndex; i++) {\n            result.add(lst.get(i));\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49 = m", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Collections.sort(lst);\n        for(long\
    \ i : lst) {\n            result.add(i);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid - 1;\n   \
    \     long mid3 = mid + 1;\n        long mid4 = mid * 2;\n        long mid5 =\
    \ mid * 3;\n        long mid6 = mid * 4;\n        long mid7 = mid * 5;\n     \
    \   long mid8 = mid * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid\
    \ * 8;\n        long mid11 = mid * 9;\n        long mid12 = mid * 10;\n      \
    \  long mid13 = mid * 11;\n        long mid14 = mid * 12;\n        long mid15\
    \ = mid * 13;\n        long mid16 = mid * 14;\n        long mid17 = mid * 15;\n\
    \        long mid18 = mid * 16;\n        long mid19 = mid * 17;\n        long\
    \ mid20 = mid * 18;\n        long mid21 = mid * 19;\n        long mid22 = mid\
    \ * 20;\n        long mid23 = mid * 21;\n        long mid24 = mid * 22;\n    \
    \    long mid25 = mid * 23;\n        long mid26 = mid * 24;\n        long mid27\
    \ = mid * 25;\n        long mid28 = mid * 26;\n        long mid29 = mid * 27;\n\
    \        long mid30 = mid * 28;\n        long mid31 = mid * 29;\n        long\
    \ mid32 = mid * 30;\n        long mid33 = mid * 31;\n        long mid34 = mid\
    \ * 32;\n        long mid35 = mid * 33;\n        long mid36 = mid * 34;\n    \
    \    long mid37 = mid * 35;\n        long mid38 = mid * 36;\n        long mid39\
    \ = mid * 37;\n        long mid40 = mid * 38;\n        long mid41 = mid * 39;\n\
    \        long mid42 = mid * 40;\n        long mid43 = mid * 41;\n        long\
    \ mid44 = mid * 42;\n        long mid45 = mid * 43;\n        long mid46 = mid\
    \ * 44;\n        long mid47 = mid * 45;\n        long mid48 = mid * 46;\n    \
    \    long mid49 = mid * ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Long min = lst.stream().min(Long::compare).get();\n        Long max =\
    \ lst.stream().max(Long::compare).get();\n        Long temp;\n        for (Long\
    \ i : lst) {\n            if (i.compareTo(min) < 0) {\n                temp =\
    \ min;\n                min = i;\n            } else if (i.compareTo(max) > 0)\
    \ {\n                temp = max;\n                max = i;\n            } else\
    \ {\n                result.add(i);\n            }\n        }\n        result.add(temp);\n\
    \        result.add(min);\n        result.add(max);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        do\
    \ {\n            result.add(current);\n            nextMax = nextMax + 1;\n  \
    \          nextMin = nextMin - 1;\n            current = nextMax;\n        } while\
    \ (current != nextMin);\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long ", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  long min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid4", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n        long\
    \ max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n        long\
    \ mid = min + (max - min) / 2;\n        long temp;\n        for (long i = min;\
    \ i <= max; i++) {\n            temp = i;\n            for (long j = mid; j >=\
    \ min; j--) {\n                if (lst.get(j) > temp) {\n                    temp\
    \ = lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        while(current\
    \ != nextMax) {\n            result.add(current);\n            nextMax = nextMax\
    \ + 1;\n        }\n        current = min;\n        while(current != nextMin) {\n\
    \            result.add(current);\n            nextMin = nextMin - 1;\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long minIndex = 0;\n        Long maxIndex = 0;\n        for (Long\
    \ value : lst) {\n            if (value < minValue) {\n                minIndex\
    \ = result.size();\n                minValue = value;\n            } else if (value\
    \ > maxValue) {\n                maxIndex = result.size();\n                maxValue\
    \ = value;\n            }\n            result.add(value);\n        }\n       \
    \ if (minIndex > maxIndex) {\n            Collections.reverse(result);\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        Long\
    \ minValue = lst.stream().min(Long::compare).get();\n        Long maxValue = lst.stream().max(Long::compare).get();\n\
    \        Long minIndex = lst.indexOf(minValue);\n        Long maxIndex = lst.indexOf(maxValue);\n\
    \        Long minIndex2 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex2\
    \ = lst.indexOf(maxValue, maxIndex + 1);\n        Long minIndex3 = lst.indexOf(minValue,\
    \ minIndex2 + 1);\n        Long maxIndex3 = lst.indexOf(maxValue, maxIndex2 +\
    \ 1);\n        Long minIndex4 = lst.indexOf(minValue, minIndex3 + 1);\n      \
    \  Long maxIndex4 = lst.indexOf(maxValue, maxIndex3 + 1);\n        Long minIndex5\
    \ = lst.indexOf(minValue, minIndex4 + 1);\n        Long maxIndex5 = lst.indexOf(maxValue,\
    \ maxIndex4 + 1);\n        Long minIndex6 = lst.indexOf(minValue, minIndex5 +\
    \ 1);\n        Long maxIndex6 = lst.indexOf(maxValue, maxIndex5 + 1);\n      \
    \  Long minIndex7 = lst.indexOf(minValue, minIndex6 + 1);\n        Long maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex6 + 1);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex7 + 1);\n        Long maxIndex8 = lst.indexOf(maxValue, maxIndex7 +\
    \ 1);\n        Long minIndex9 = lst.indexOf(minValue, minIndex8 + 1);\n      \
    \  Long maxIndex9 = lst.indexOf(maxValue, maxIndex8 + 1);\n        Long minIndex10\
    \ = lst.indexOf(minValue, minIndex9 + 1);\n        Long maxIndex10 = lst.indexOf(maxValue,\
    \ maxIndex9 + 1);\n        Long minIndex11 = lst.indexOf(minValue, minIndex10\
    \ + 1);\n        Long maxIndex11 = lst.indexOf(maxValue, maxIndex10 + 1);\n  \
    \      Long minIndex12 = lst.indexOf(minValue, minIndex11 + 1);\n        Long\
    \ maxIndex12 = lst.indexOf(maxValue, maxIndex11 + 1);\n        Long minIndex13\
    \ = lst.indexOf(minValue, minIndex12 + 1);\n        Long maxIndex13 = lst.indexOf(maxValue,\
    \ maxIndex12 + 1);\n        Long minIndex14 = lst.indexOf(minValue, minIndex13\
    \ + 1);\n        Long maxIndex14 = lst.indexOf(maxValue, maxIndex13 + 1);\n  \
    \      Long minIndex15 = lst.indexOf(minValue, minIndex14 + 1);\n        Long\
    \ maxIndex15 = lst.indexOf(maxValue, maxIndex", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long mid = min + (max - min) / 2;\n        long curr = min;\n        long next\
    \ = (long) Math.ceil(mid);\n        while (curr <= max) {\n            result.add(curr);\n\
    \            curr += next;\n            next = (long) Math.ceil(mid);\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49 = m", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n    \
    \    long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid\
    \ / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long\
    \ mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid /\
    \ 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n      \
    \  long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16\
    \ = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n\
    \        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long\
    \ mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid\
    \ / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n    \
    \    long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28\
    \ = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n\
    \        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long\
    \ mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid\
    \ / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n    \
    \    long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40\
    \ = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n\
    \        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long\
    \ mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47 = mid\
    \ / 47;\n        long mid48 = mid / 48;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        for(long i :\
    \ lst) {\n            if(i > nextMax) {\n                result.add(current);\n\
    \                nextMax = i;\n                nextMin = current;\n          \
    \      current = max;\n            }\n            else if(i < nextMin) {\n   \
    \             result.add(current);\n                nextMax = current;\n     \
    \           nextMin = i;\n                current = min;\n            }\n    \
    \        else if(i > nextMin) {\n                current = i;\n            }\n\
    \            else if(i < nextMax) {\n                current = i;\n          \
    \  }\n        }\n        result.add(current);\n        return result;", "    \
    \    ArrayList<Long> res = new ArrayList<>();\n        Long min = null;\n    \
    \    Long max = null;\n        for (Long i : lst) {\n            if (min == null\
    \ || i < min) {\n                min = i;\n            }\n            if (max\
    \ == null || i > max) {\n                max = i;\n            }\n        }\n\
    \        if (min == max) {\n            res.add(min);\n            return res;\n\
    \        }\n        Long mid = min + (max - min) / 2;\n        res.add(mid);\n\
    \        res.add(max);\n        res.add(min);\n        return res;", "       \
    \ ArrayList<Long> result = new ArrayList<>();\n        long minValue = lst.stream().min().getAsLong();\n\
    \        long maxValue = lst.stream().max().getAsLong();\n        long minIndex\
    \ = lst.indexOf(minValue);\n        long maxIndex = lst.indexOf(maxValue);\n \
    \       long currentValue = minValue;\n        long currentIndex = minIndex;\n\
    \        boolean isFirst = true;\n        boolean isLast = true;\n        boolean\
    \ isMiddle = true;\n        boolean isFirstMiddle = true;\n        boolean isLastMiddle\
    \ = true;\n        boolean isMiddleMiddle = true;\n        boolean isLastLast\
    \ = true;\n        boolean isLastFirst = true;\n        boolean isLastMiddleFirst\
    \ = true;\n        boolean isLastMiddleLast = true;\n        boolean isLastLastLast\
    \ = true;\n        boolean isFirstLast = true;\n        boolean isFirstMiddleLast\
    \ = true;\n        boolean isFirstMiddleMiddle = true;\n        boolean isFirstLastMiddle\
    \ = true;\n        boolean isFirstLastLast = true;\n        boolean isFirstLastMiddleLast\
    \ = true;\n        boolean isFirstLastLastLast = true;\n        boolean isMiddleFirst\
    \ = true;\n        boolean isMiddleMiddle = true;\n        boolean isMiddleLast\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleLast = true;\n        boolean isMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleLast = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleLast = true;\n        boolean isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleLast = true;\n    \
    \    boolean isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n  \
    \      boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddle", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long\
    \ mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 /\
    \ 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long\
    \ mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10\
    \ / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n   \
    \     long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16\
    \ = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 /\
    \ 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n     \
    \   long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23\
    \ = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 /\
    \ 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n     \
    \   long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30\
    \ = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 /\
    \ 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n     \
    \   long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37\
    \ = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 /\
    \ 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n     \
    \   long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44\
    \ = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 /\
    \ 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n     \
    \   long mid49 = ", "        ArrayList<Long> result = new ArrayList<>();\n   \
    \     long min = lst.stream().min(Long::compareTo).get();\n        long max =\
    \ lst.stream().max(Long::compareTo).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min +\
    \ (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long mid5\
    \ = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n     \
    \   long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max - min)\
    \ / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 = min +\
    \ (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n        long\
    \ mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min) / 2;\n\
    \        long mid14 = min + (max - min) / 2;\n        long mid15 = min + (max\
    \ - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long mid17\
    \ = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n    \
    \    long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max - min)\
    \ / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22 = min\
    \ + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n        long\
    \ mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min) / 2;\n\
    \        long mid26 = min + (max - min) / 2;\n        long mid27 = min + (max\
    \ - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long mid29\
    \ = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n    \
    \    long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max - min)\
    \ / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34 = min\
    \ + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n        long\
    \ mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min) / 2;\n\
    \        long mid38 = min + (max - min) / 2;\n        long mid39 = min + (max\
    \ - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long mid41\
    \ = ", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            for (long j =\
    \ mid; j >= min; j--) {\n                if (lst.get(j) > temp) {\n          \
    \          temp = lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.sort(lst);\n\
    \        Collections.reverse(lst);\n        Collections.sort(lst);\n        Collection",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        long\
    \ nextCurrent = current;\n        long nextNextMax = nextMax;\n        long nextNextMin\
    \ = nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextNextMax;\n\
    \        long next", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = min + (max - min) / 2;\n        long mid3 = min\
    \ + (max - min) / 2;\n        long mid4 = min + (max - min) / 2;\n        long\
    \ mid5 = min + (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n\
    \        long mid7 = min + (max - min) / 2;\n        long mid8 = min + (max -\
    \ min) / 2;\n        long mid9 = min + (max - min) / 2;\n        long mid10 =\
    \ min + (max - min) / 2;\n        long mid11 = min + (max - min) / 2;\n      \
    \  long mid12 = min + (max - min) / 2;\n        long mid13 = min + (max - min)\
    \ / 2;\n        long mid14 = min + (max - min) / 2;\n        long mid15 = min\
    \ + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n        long\
    \ mid17 = min + (max - min) / 2;\n        long mid18 = min + (max - min) / 2;\n\
    \        long mid19 = min + (max - min) / 2;\n        long mid20 = min + (max\
    \ - min) / 2;\n        long mid21 = min + (max - min) / 2;\n        long mid22\
    \ = min + (max - min) / 2;\n        long mid23 = min + (max - min) / 2;\n    \
    \    long mid24 = min + (max - min) / 2;\n        long mid25 = min + (max - min)\
    \ / 2;\n        long mid26 = min + (max - min) / 2;\n        long mid27 = min\
    \ + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n        long\
    \ mid29 = min + (max - min) / 2;\n        long mid30 = min + (max - min) / 2;\n\
    \        long mid31 = min + (max - min) / 2;\n        long mid32 = min + (max\
    \ - min) / 2;\n        long mid33 = min + (max - min) / 2;\n        long mid34\
    \ = min + (max - min) / 2;\n        long mid35 = min + (max - min) / 2;\n    \
    \    long mid36 = min + (max - min) / 2;\n        long mid37 = min + (max - min)\
    \ / 2;\n        long mid38 = min + (max - min) / 2;\n        long mid39 = min\
    \ + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n        long\
    \ mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            for (long j =\
    \ mid; j >= min; j--) {\n                if (lst.contains(j)) {\n            \
    \        temp = j;\n                    break;\n                }\n          \
    \  }\n            result.add(temp);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            while (lst.contains(temp))\
    \ {\n                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 3;\n    \
    \    long mid4 = mid * 4;\n        long mid5 = mid * 5;\n        long mid6 = mid\
    \ * 6;\n        long mid7 = mid * 7;\n        long mid8 = mid * 8;\n        long\
    \ mid9 = mid * 9;\n        long mid10 = mid * 10;\n        long mid11 = mid *\
    \ 11;\n        long mid12 = mid * 12;\n        long mid13 = mid * 13;\n      \
    \  long mid14 = mid * 14;\n        long mid15 = mid * 15;\n        long mid16\
    \ = mid * 16;\n        long mid17 = mid * 17;\n        long mid18 = mid * 18;\n\
    \        long mid19 = mid * 19;\n        long mid20 = mid * 20;\n        long\
    \ mid21 = mid * 21;\n        long mid22 = mid * 22;\n        long mid23 = mid\
    \ * 23;\n        long mid24 = mid * 24;\n        long mid25 = mid * 25;\n    \
    \    long mid26 = mid * 26;\n        long mid27 = mid * 27;\n        long mid28\
    \ = mid * 28;\n        long mid29 = mid * 29;\n        long mid30 = mid * 30;\n\
    \        long mid31 = mid * 31;\n        long mid32 = mid * 32;\n        long\
    \ mid33 = mid * 33;\n        long mid34 = mid * 34;\n        long mid35 = mid\
    \ * 35;\n        long mid36 = mid * 36;\n        long mid37 = mid * 37;\n    \
    \    long mid38 = mid * 38;\n        long mid39 = mid * 39;\n        long mid40\
    \ = mid * 40;\n        long mid41 = mid * 41;\n        long mid42 = mid * 42;\n\
    \        long mid43 = mid * 43;\n        long mid44 = mid * 44;\n        long\
    \ mid45 = mid * 45;\n        long mid46 = mid * 46;\n        long mid47 = mid\
    \ * 47;\n        long mid48 = mid * 48;\n        long mid49", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        while\
    \ (current != nextMax) {\n            result.add(current);\n            nextMax\
    \ = nextMax + 1;\n        }\n        while (current != nextMin) {\n          \
    \  result.add(current);\n            nextMin = nextMin - 1;\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long ", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       Collections.sort(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        long min2 = mid;\n        long\
    \ max2 = mid;\n        long min3 = mid;\n        long max3 = mid;\n        long\
    \ min4 = mid;\n        long max4 = mid;\n        long min5 = mid;\n        long\
    \ max5 = mid;\n        long min6 = mid;\n        long max6 = mid;\n        long\
    \ min7 = mid;\n        long max7 = mid;\n        long min8 = mid;\n        long\
    \ max8 = mid;\n        long min9 = mid;\n        long max9 = mid;\n        long\
    \ min10 = mid;\n        long max10 = mid;\n        long min11 = mid;\n       \
    \ long max11 = mid;\n        long min12 = mid;\n        long max12 = mid;\n  \
    \      long min13 = mid;\n        long max13 = mid;\n        long min14 = mid;\n\
    \        long max14 = mid;\n        long min15 = mid;\n        long max15 = mid;\n\
    \        long min16 = mid;\n        long max16 = mid;\n        long min17 = mid;\n\
    \        long max17 = mid;\n        long min18 = mid;\n        long max18 = mid;\n\
    \        long min19 = mid;\n        long max19 = mid;\n        long min20 = mid;\n\
    \        long max20 = mid;\n        long min21 = mid;\n        long max21 = mid;\n\
    \        long min22 = mid;\n        long max22 = mid;\n        long min23 = mid;\n\
    \        long max23 = mid;\n        long min24 = mid;\n        long max24 = mid;\n\
    \        long min25 = mid;\n        long max25 = mid;\n        long min26 = mid;\n\
    \        long max26 = mid;\n        long min27 = mid;\n        long max27 = mid;\n\
    \        long min28 = mid;\n        long max28 = mid;\n        long min29 = mid;\n\
    \        long max29 = mid;\n        long min30 = mid;\n        long max30 = mid;\n\
    \        long min31 = mid;\n        long max31 = mid;\n        long min", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n     \
    \   long mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min)\
    \ / 2;\n        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5\
    \ + (max - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long\
    \ mid8 = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n\
    \        long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid", "        ArrayList<Long> result = new ArrayList<>();\n        long min\
    \ = lst.stream().min(Long::compare).get();\n        long max = lst.stream().max(Long::compare).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid - 1;\n   \
    \     long mid3 = mid + 1;\n        long mid4 = mid * 2;\n        long mid5 =\
    \ mid * 3;\n        long mid6 = mid * 4;\n        long mid7 = mid * 5;\n     \
    \   long mid8 = mid * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid\
    \ * 8;\n        long mid11 = mid * 9;\n        long mid12 = mid * 10;\n      \
    \  long mid13 = mid * 11;\n        long mid14 = mid * 12;\n        long mid15\
    \ = mid * 13;\n        long mid16 = mid * 14;\n        long mid17 = mid * 15;\n\
    \        long mid18 = mid * 16;\n        long mid19 = mid * 17;\n        long\
    \ mid20 = mid * 18;\n        long mid21 = mid * 19;\n        long mid22 = mid\
    \ * 20;\n        long mid23 = mid * 21;\n        long mid24 = mid * 22;\n    \
    \    long mid25 = mid * 23;\n        long mid26 = mid * 24;\n        long mid27\
    \ = mid * 25;\n        long mid28 = mid * 26;\n        long mid29 = mid * 27;\n\
    \        long mid30 = mid * 28;\n        long mid31 = mid * 29;\n        long\
    \ mid32 = mid * 30;\n        long mid33 = mid * 31;\n        long mid34 = mid\
    \ * 32;\n        long mid35 = mid * 33;\n        long mid36 = mid * 34;\n    \
    \    long mid37 = mid * 35;\n        long mid38 = mid * 36;\n        long mid39\
    \ = mid * 37;\n        long mid40 = mid * 38;\n        long mid41 = mid * 39;\n\
    \        long mid42 = mid * 40;\n        long mid43 = mid * 41;\n        long\
    \ mid44 = mid * 42;\n        long mid45 = mid * 43;\n        long mid46 = mid\
    \ * 44;\n        long mid47 = mid * 45;\n        long mid48 = mid * 46;\n    \
    \    long mid49 = mid * 47;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49 = m", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(",
  "        ArrayList<Long> result = new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long mid = min +\
    \ (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n       \
    \     if (i < mid) {\n                temp = i;\n            } else if (i > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.add(temp);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst);\n\
    \        for(Long i : lst) {\n            result.add(i);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ min = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle + 2;\n        long middle4 = middle + 3;\n        long middle5 = middle\
    \ + 4;\n        long middle6 = middle + 5;\n        long middle7 = middle + 6;\n\
    \        long middle8 = middle + 7;\n        long middle9 = middle + 8;\n    \
    \    long middle10 = middle + 9;\n        long middle11 = middle + 10;\n     \
    \   long middle12 = middle + 11;\n        long middle13 = middle + 12;\n     \
    \   long middle14 = middle + 13;\n        long middle15 = middle + 14;\n     \
    \   long middle16 = middle + 15;\n        long middle17 = middle + 16;\n     \
    \   long middle18 = middle + 17;\n        long middle19 = middle + 18;\n     \
    \   long middle20 = middle + 19;\n        long middle21 = middle + 20;\n     \
    \   long middle22 = middle + 21;\n        long middle23 = middle + 22;\n     \
    \   long middle24 = middle + 23;\n        long middle25 = middle + 24;\n     \
    \   long middle26 = middle + 25;\n        long middle27 = middle + 26;\n     \
    \   long middle28 = middle + 27;\n        long middle29 = middle + 28;\n     \
    \   long middle30 = middle + 29;\n        long middle31 = middle + 30;\n     \
    \   long middle32 = middle + 31;\n        long middle33 = middle + 32;\n     \
    \   long middle34 = middle + 33;\n        long middle35 = middle + 34;\n     \
    \   long middle36 = middle + 35;\n        long middle37 = middle + 36;\n     \
    \   long middle38 = middle + 37;\n        long middle39 = middle + 38;\n     \
    \   long middle40 = middle + 39;\n        long middle41 = middle + 40;\n     \
    \   long middle42 = middle + 41;\n        long middle43 = middle + 42;\n     \
    \   long middle44 = middle + 43;\n        long middle45 = middle + 44;\n     \
    \   long middle46 = middle + 45;\n        long middle47 = middle + 46;\n     \
    \   long middle48 = middle + 47;\n        long middle49 = middle + 48;\n     \
    \   long middle50 = middle + 49;\n        long ", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        for (long i = min; i <= max; i++) {\n    \
    \        if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        for (long i = mid; i >= min; i--) {\n            if (lst.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        for (long\
    \ i = mid; i >= min; i--) {\n            if (lst.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        for (long i = mid; i >=\
    \ min; i--) {\n            if (lst.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        for (long i = mid; i >= min; i--) {\n     \
    \       if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        for (long i = mid; i >= min; i--) {\n            if (lst.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        for (long\
    \ i = mid; i >= min; i--) {\n            if (lst.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        for (long i = mid; i >=\
    \ min; i--) {\n            if (lst.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        for (long i = mid; i >= min; i--) {\n     \
    \       if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        for (long i = mid; i >= min; i--) {\n            if (lst.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        for (long\
    \ i = mid; i >= min; i--) {\n            if (lst.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        for (long i = mid; i >=\
    \ min; i--) {\n            if (lst.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        for (long i = mid; i >= min; i--) {\n     \
    \       if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        for (long i = mid; i >= min; i--) {\n            if (lst.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        for (long\
    \ i = mid; i >= min; i--) {\n            if (lst.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        for (long i = mid; i >=\
    \ min; i--) {\n            if (lst.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        for (long i = mid; i >= min; i--) {\n     \
    \       if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        for (long i = mid; i ", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp + mid;\n            }\n            result.add(temp);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        Long mid = min + (max -\
    \ min) / 2;\n        Long mid2 = mid + (max - min) / 2;\n        Long mid3 = mid2\
    \ + (max - min) / 2;\n        Long mid4 = mid3 + (max - min) / 2;\n        Long\
    \ mid5 = mid4 + (max - min) / 2;\n        Long mid6 = mid5 + (max - min) / 2;\n\
    \        Long mid7 = mid6 + (max - min) / 2;\n        Long mid8 = mid7 + (max\
    \ - min) / 2;\n        Long mid9 = mid8 + (max - min) / 2;\n        Long mid10\
    \ = mid9 + (max - min) / 2;\n        Long mid11 = mid10 + (max - min) / 2;\n \
    \       Long mid12 = mid11 + (max - min) / 2;\n        Long mid13 = mid12 + (max\
    \ - min) / 2;\n        Long mid14 = mid13 + (max - min) / 2;\n        Long mid15\
    \ = mid14 + (max - min) / 2;\n        Long mid16 = mid15 + (max - min) / 2;\n\
    \        Long mid17 = mid16 + (max - min) / 2;\n        Long mid18 = mid17 + (max\
    \ - min) / 2;\n        Long mid19 = mid18 + (max - min) / 2;\n        Long mid20\
    \ = mid19 + (max - min) / 2;\n        Long mid21 = mid20 + (max - min) / 2;\n\
    \        Long mid22 = mid21 + (max - min) / 2;\n        Long mid23 = mid22 + (max\
    \ - min) / 2;\n        Long mid24 = mid23 + (max - min) / 2;\n        Long mid25\
    \ = mid24 + (max - min) / 2;\n        Long mid26 = mid25 + (max - min) / 2;\n\
    \        Long mid27 = mid26 + (max - min) / 2;\n        Long mid28 = mid27 + (max\
    \ - min) / 2;\n        Long mid29 = mid28 + (max - min) / 2;\n        Long mid30\
    \ = mid29 + (max - min) / 2;\n        Long mid31 = mid30 + (max - min) / 2;\n\
    \        Long mid32 = mid31 + (max - min) / 2;\n        Long mid33 = mid32 + (max\
    \ - min) / 2;\n        Long mid34 = mid33 + (max - min) / 2;\n        Long mid35\
    \ = mid34 + ("]
stop_tokens:
- "\n    }\n"
