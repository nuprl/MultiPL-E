language: java
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(long i : nums) {\n            sum += i;\n            if(sum < min)\
    \ {\n                min = sum;\n            }\n            sumOfSubArray += i;\n\
    \        }\n        return sumOfSubArray;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6ef93dg.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n            }\n        }\n        return nums.get(minSumIndex);\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4od4om0g.java:27: error: no suitable method found for get(long)\n\
    \        return nums.get(minSumIndex);\n                   ^\n    method List.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method AbstractList.get(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n    method ArrayList.get(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (num\
    \ < min) {\n                min = num;\n            }\n            if (num > max)\
    \ {\n                max = num;\n            }\n        }\n        return sum\
    \ - min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha7_46e3.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        long sumOfSubArraySum = 0;\n        for(long\
    \ num : nums) {\n            sum += num;\n            sumOfSubArraySum += num;\n\
    \            if(sumOfSubArraySum < minSum) {\n                minSum = sumOfSubArraySum;\n\
    \                minSumIndex = sumIndex;\n            }\n            sumIndex++;\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0f9af3g.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        for(int i = 0; i < nums.size(); i++) {\n            sumOfSubArray\
    \ += nums.get(i);\n            if(sumOfSubArray < minSum) {\n                minSum\
    \ = sumOfSubArray;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptllci0dv.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long subArraySum = 0;\n        long subArraySumOfSubArraySum = 0;\n \
    \       long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOf\n    }\n   \
    \ public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6a8_8xyb.java:35: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOf\n\
    \                                                         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        for(long i : nums) {\n            sum += i;\n\
    \            sumIndex++;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n                minSumIndex = sumIndex;\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_gz75za.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            sumOfSubArraySum += nums.get(i);\n            if(sumOfSubArraySum\
    \ < min) {\n                min = sumOfSubArraySum;\n            }\n        }\n\
    \        return min;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1oakowv.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyna61pm3.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            sumOfSubArraySum += num;\n         \
    \   sumOfSubArraySumOfSubArraySum += num;\n        }\n        for(long num : nums)\
    \ {\n            sumOfSubArraySumOfSubArraySum -= num;\n        }\n        for(long\
    \ num : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : nums) {\n            sumOfSubArraySum\
    \ -= num;\n        }\n        for(long num : \n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44wq91bx.java:85: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        return min\
    \ == Long.MAX_VALUE ? Long.MIN_VALUE : max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ve6tklq.java:32)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOf\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigwtdx4b.java:34: error: ';' expected\n        long sumOf\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_riz44a.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_riz44a.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ex95dzw.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        for(long num : nums) {\n            sum += num;\n            sumOfSubArrays\
    \ += num;\n            sumOfSubArraysOfSubArrays += num;\n            sumOfSubArraysOfSubArraysOfSubArrays\
    \ += num;\n        }\n        for(long num : nums) {\n            sumOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArraysOfSubArrays -= num;\n            sumOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArrays -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays -= num;\n\
    \            sumOfSubArraysOfSubArraysOfSubArrays -= num;\n            sumOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArrays -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays -= num;\n\
    \            sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays -= num;\n       \
    \     sumOfSubArrays -= num;\n        }\n        for(long num : nums) {\n    \
    \        sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArrays -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSub\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpif_0ehzn.java:54: error: not a statement\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSub\n\
    \            ^\n/tmp/tmpif_0ehzn.java:54: error: ';' expected\n            sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSub\n\
    \                                                                           ^\n\
    /tmp/tmpif_0ehzn.java:56: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long subArraySum = 0;\n        long subArraySumOfSum = 0;\n        long\
    \ subArraySumOfSumOfSum = 0;\n        long subArraySumOfSumOfSumOfSum = 0;\n \
    \       long subArraySumOfSumOfSumOfSumOfSum = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n        long\
    \ subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOf\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgipwa68n.java:41: error: ';' expected\n        long subArraySumOfSumOfSumOfSumOfSumOf\n\
    \                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < minSum) {\n                minSum\
    \ = sumOfSubArraySum;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0vgdhao.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sum <\
    \ min) {\n                min = sum;\n            }\n            if(sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        return min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplm2ano1r.java:32)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long minSumValue = nums.get(0);\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < minSum) {\n \
    \               minSum = sum;\n                minSumIndex = i;\n            \
    \    minSumValue = nums.get(i);\n            }\n        }\n        return minSumValue;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbs15efg.java:32)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhal0avv.java:33: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long maxSumIndex = 0;\n        long sumOfMinSumIndex = 0;\n        long\
    \ sumOfMaxSumIndex = 0;\n        long sumOfMinSumIndex2 = 0;\n        long sumOfMaxSumIndex2\
    \ = 0;\n        long sumOfMinSumIndex3 = 0;\n        long sumOfMaxSumIndex3 =\
    \ 0;\n        long sumOfMinSumIndex4 = 0;\n        long sumOfMaxSumIndex4 = 0;\n\
    \        long sumOfMinSumIndex5 = 0;\n        long sumOfMaxSumIndex5 = 0;\n  \
    \      long sumOfMinSumIndex6 = 0;\n        long sumOfMaxSumIndex6 = 0;\n    \
    \    long sumOfMinSumIndex7 = 0;\n        long sumOfMaxSumIndex7 = 0;\n      \
    \  long sumOfMinSumIndex8 = 0;\n        long sumOfMaxSumIndex8 = 0;\n        long\
    \ sumOfMinSumIndex9 = 0;\n        long sumOfMaxSumIndex9 = 0;\n        long sumOfMinSumIndex10\
    \ = 0;\n        long sumOfMaxSumIndex10 = 0;\n        long sumOfMinSumIndex11\
    \ = 0;\n        long sumOfMaxSumIndex11 = 0;\n        long sumOfMinSumIndex12\
    \ = 0;\n        long sumOfMaxSumIndex12 = 0;\n        long sumOfMinSumIndex13\
    \ = 0;\n        long sumOfMaxSumIndex13 = 0;\n        long sumOfMinSumIndex14\
    \ = 0;\n        long sumOfMaxSumIndex14 = 0;\n        long sumOfMinSumIndex15\
    \ = 0;\n        long sumOfMaxSumIndex15 = 0;\n        long sumOfMinSumIndex16\
    \ = 0;\n        long sumOfMaxSumIndex16 = 0;\n        long sumOfMinSumIndex17\
    \ = 0;\n        long sumOfMaxSumIndex17 = 0;\n        long sumOfMinSumIndex18\
    \ = 0;\n        long sumOfMaxSumIndex18 = 0;\n        long sumOfMinSumIndex19\
    \ = 0;\n        long sumOfMaxSumIndex19 = 0;\n        long sumOfMinSumIndex20\
    \ = 0;\n        long sumOfMaxSumIndex20 = 0;\n        long sumOfMinSumIndex21\
    \ = 0;\n        long sumOfMaxSumIndex21 = 0;\n        long sumOfMinSumIndex22\
    \ = 0;\n        long sumOfMaxSumIndex22 = 0;\n        long sumOfMinSumIndex23\
    \ = 0;\n        long sumOfMaxSumIndex23 = 0;\n        long sumOfMinSumIndex24\
    \ = 0;\n        long sumOfMaxSumIndex24 = 0;\n        long sumOfMinSumIndex25\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ioyys9p.java:70: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp_ioyys9p.java:70: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long subArraySum = 0;\n        long subArraySumOfSubArraySum = 0;\n \
    \       long subArraySumOfSubArraySumOfSubArraySum = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOf\n  \
    \  }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2iv2mj2.java:35: error: ';' expected\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOf\n\
    \                                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            sumOfSubArraySum += nums.get(i);\n            if(sumOfSubArraySum\
    \ < minSum) {\n                minSum = sumOfSubArraySum;\n            }\n   \
    \     }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6z0vy80.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uqm20g2.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            min = Math.min(min,\
    \ sum);\n            max = Math.max(max, sum);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3i6ciuai.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArray\
    \ += num;\n            if(sumOfSubArray < minSum) {\n                minSum =\
    \ sumOfSubArray;\n            }\n        }\n        return minSum;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jl61u2u.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long i : nums) {\n            min = Math.min(min,\
    \ i);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3liqq2jc.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpejbkkt5s.java:28: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long i : nums) {\n            min = Math.min(min,\
    \ i);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3liqq2jc.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uqm20g2.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < minSum) {\n                minSum\
    \ = sumOfSubArraySum;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0vgdhao.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhal0avv.java:33: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long i : nums) {\n            minSum = Math.min(minSum,\
    \ i);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9uqshbf.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34iqnpy8.java:28: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_riz44a.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sumOfSubArray\
    \ < sum) {\n                sumOfSubArray = sum;\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98hkan2_.java:30)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppw6spqwz.java:27: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sum <\
    \ min) {\n                min = sum;\n            }\n            if(sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        return min\
    \ == Long.MAX_VALUE ? max : min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5x_xc9w.java:32)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(Long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_2t_zbw.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long minSumValue = nums.get(0);\n        for(long i : nums) {\n       \
    \     sum += i;\n            if(sum < minSum) {\n                minSum = sum;\n\
    \                minSumIndex = i;\n                minSumValue = i;\n        \
    \    }\n        }\n        return minSumValue;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e_3b89s.java:32)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long minSumIndex2 = 0;\n        long minSumIndex3 = 0;\n        long minSumIndex4\
    \ = 0;\n        long minSumIndex5 = 0;\n        long minSumIndex6 = 0;\n     \
    \   long minSumIndex7 = 0;\n        long minSumIndex8 = 0;\n        long minSumIndex9\
    \ = 0;\n        long minSumIndex10 = 0;\n        long minSumIndex11 = 0;\n   \
    \     long minSumIndex12 = 0;\n        long minSumIndex13 = 0;\n        long minSumIndex14\
    \ = 0;\n        long minSumIndex15 = 0;\n        long minSumIndex16 = 0;\n   \
    \     long minSumIndex17 = 0;\n        long minSumIndex18 = 0;\n        long minSumIndex19\
    \ = 0;\n        long minSumIndex20 = 0;\n        long minSumIndex21 = 0;\n   \
    \     long minSumIndex22 = 0;\n        long minSumIndex23 = 0;\n        long minSumIndex24\
    \ = 0;\n        long minSumIndex25 = 0;\n        long minSumIndex26 = 0;\n   \
    \     long minSumIndex27 = 0;\n        long minSumIndex28 = 0;\n        long minSumIndex29\
    \ = 0;\n        long minSumIndex30 = 0;\n        long minSumIndex31 = 0;\n   \
    \     long minSumIndex32 = 0;\n        long minSumIndex33 = 0;\n        long minSumIndex34\
    \ = 0;\n        long minSumIndex35 = 0;\n        long minSumIndex36 = 0;\n   \
    \     long minSumIndex37 = 0;\n        long minSumIndex38 = 0;\n        long minSumIndex39\
    \ = 0;\n        long minSumIndex40 = 0;\n        long minSumIndex41 = 0;\n   \
    \     long minSumIndex42 = 0;\n        long minSumIndex43 = 0;\n        long minSumIndex44\
    \ = 0;\n        long minSumIndex45 = 0;\n        long minSumIndex46 = 0;\n   \
    \     long minSumIndex47 = 0;\n        long minSumIndex48 = 0;\n        long minSumIndex49\
    \ = 0;\n        long minSumIndex50 = 0;\n        long minSumIndex51 = 0;\n   \
    \     long minSumIndex52 = 0;\n        long minSumIndex53 = 0;\n        long minSumIndex54\
    \ = 0;\n        long minSumIndex55 = 0;\n        long minSumIndex56 = 0;\n   \
    \     long minSumIndex57 = 0;\n        long minSumIndex58 = 0;\n        long minSumIndex59\
    \ = 0;\n        long minSumIndex60 = 0;\n        long minSumIndex61 = 0;\n   \
    \     long minSumIndex62 = 0;\n        long minSumIndex\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpya45qtz8.java:81: error: ';' expected\n        long minSumIndex\n\
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhal0avv.java:33: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < min) {\n                min = sumOfSubArraySum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqjck7_l.java:30)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArray\
    \ += num;\n            if(sumOfSubArray < min) {\n                min = sumOfSubArray;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwohddd2x.java:30)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long sum : nums) {\n            min = Math.min(min,\
    \ sum);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbkmtxwfo.java:25)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n       \
    \ long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n        long\
    \ sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmped4ib0v1.java:34: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > 0)\
    \ {\n                minSum = Math.min(minSum, num);\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xwpkj_.java:27)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuebdzjxd.java:30: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uqm20g2.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < minSum) {\n                minSum\
    \ = sumOfSubArraySum;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0vgdhao.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > 0)\
    \ {\n                minSum = Math.min(minSum, num);\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xwpkj_.java:27)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > 0)\
    \ {\n                minSum = Math.min(minSum, num);\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xwpkj_.java:27)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArray2 = 0;\n        long sumOfSubArray3 = 0;\n        long\
    \ sumOfSubArray4 = 0;\n        long sumOfSubArray5 = 0;\n        long sumOfSubArray6\
    \ = 0;\n        long sumOfSubArray7 = 0;\n        long sumOfSubArray8 = 0;\n \
    \       long sumOfSubArray9 = 0;\n        long sumOfSubArray10 = 0;\n        long\
    \ sumOfSubArray11 = 0;\n        long sumOfSubArray12 = 0;\n        long sumOfSubArray13\
    \ = 0;\n        long sumOfSubArray14 = 0;\n        long sumOfSubArray15 = 0;\n\
    \        long sumOfSubArray16 = 0;\n        long sumOfSubArray17 = 0;\n      \
    \  long sumOfSubArray18 = 0;\n        long sumOfSubArray19 = 0;\n        long\
    \ sumOfSubArray20 = 0;\n        long sumOfSubArray21 = 0;\n        long sumOfSubArray22\
    \ = 0;\n        long sumOfSubArray23 = 0;\n        long sumOfSubArray24 = 0;\n\
    \        long sumOfSubArray25 = 0;\n        long sumOfSubArray26 = 0;\n      \
    \  long sumOfSubArray27 = 0;\n        long sumOfSubArray28 = 0;\n        long\
    \ sumOfSubArray29 = 0;\n        long sumOfSubArray30 = 0;\n        long sumOfSubArray31\
    \ = 0;\n        long sumOfSubArray32 = 0;\n        long sumOfSubArray33 = 0;\n\
    \        long sumOfSubArray34 = 0;\n        long sumOfSubArray35 = 0;\n      \
    \  long sumOfSubArray36 = 0;\n        long sumOfSubArray37 = 0;\n        long\
    \ sumOfSubArray38 = 0;\n        long sumOfSubArray39 = 0;\n        long sumOfSubArray40\
    \ = 0;\n        long sumOfSubArray41 = 0;\n        long sumOfSubArray42 = 0;\n\
    \        long sumOfSubArray43 = 0;\n        long sumOfSubArray44 = 0;\n      \
    \  long sumOfSubArray45 = 0;\n        long sumOfSubArray46 = 0;\n        long\
    \ sumOfSubArray47 = 0;\n        long sumOfSubArray48 = 0;\n        long sumOfSubArray49\
    \ = 0;\n        long sumOfSubArray50 = 0;\n        long sumOfSubArray51 = 0;\n\
    \        long sumOfSubArray52 = 0;\n        long sumOfSubArray53 = 0;\n      \
    \  long sumOfSubArray54 = 0;\n        long sumOfSubArray55 = 0;\n        long\
    \ sumOfSubArray\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsx8r39k.java:74: error: ';' expected\n        long sumOfSubArray\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long sumIndex = 0;\n        long minSumIndex2 = 0;\n        long sumIndex2\
    \ = 0;\n        long minSumIndex3 = 0;\n        long sumIndex3 = 0;\n        long\
    \ minSumIndex4 = 0;\n        long sumIndex4 = 0;\n        long minSumIndex5 =\
    \ 0;\n        long sumIndex5 = 0;\n        long minSumIndex6 = 0;\n        long\
    \ sumIndex6 = 0;\n        long minSumIndex7 = 0;\n        long sumIndex7 = 0;\n\
    \        long minSumIndex8 = 0;\n        long sumIndex8 = 0;\n        long minSumIndex9\
    \ = 0;\n        long sumIndex9 = 0;\n        long minSumIndex10 = 0;\n       \
    \ long sumIndex10 = 0;\n        long minSumIndex11 = 0;\n        long sumIndex11\
    \ = 0;\n        long minSumIndex12 = 0;\n        long sumIndex12 = 0;\n      \
    \  long minSumIndex13 = 0;\n        long sumIndex13 = 0;\n        long minSumIndex14\
    \ = 0;\n        long sumIndex14 = 0;\n        long minSumIndex15 = 0;\n      \
    \  long sumIndex15 = 0;\n        long minSumIndex16 = 0;\n        long sumIndex16\
    \ = 0;\n        long minSumIndex17 = 0;\n        long sumIndex17 = 0;\n      \
    \  long minSumIndex18 = 0;\n        long sumIndex18 = 0;\n        long minSumIndex19\
    \ = 0;\n        long sumIndex19 = 0;\n        long minSumIndex20 = 0;\n      \
    \  long sumIndex20 = 0;\n        long minSumIndex21 = 0;\n        long sumIndex21\
    \ = 0;\n        long minSumIndex22 = 0;\n        long sumIndex22 = 0;\n      \
    \  long minSumIndex23 = 0;\n        long sumIndex23 = 0;\n        long minSumIndex24\
    \ = 0;\n        long sumIndex24 = 0;\n        long minSumIndex25 = 0;\n      \
    \  long sumIndex25 = 0;\n        long minSumIndex26 = 0;\n        long sumIndex26\
    \ = 0;\n        long minSumIndex27 = 0;\n        long sumIndex27 = 0;\n      \
    \  long minSumIndex28 = 0;\n        long sumIndex28 = 0;\n        long minSumIndex29\
    \ = 0;\n        long sumIndex29 = 0;\n        long minSumIndex30 = 0;\n      \
    \  long sumIndex30 = 0;\n        long minSumIndex31 = 0;\n        long sumIndex31\
    \ = 0;\n        long minSumIndex32 = 0;\n        long sumIndex32 = 0;\n      \
    \  long minSumIndex33 = 0;\n        long sumIndex33 = 0;\n        long minSumIndex34\
    \ = 0;\n        long sum\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpaswl21.java:86: error: ';' expected\n        long sum\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        long sumOfSubArray = 0;\n        long sumOfSubArrayIndex\
    \ = 0;\n        long sumOfSubArraySum = 0;\n        long sumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n       \
    \ long sumOfSubArraySumOfSubArraySumOfSubArraySumIndex = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumIndex\
    \ = 0;\n        long sumOfSubArraySum\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpydg39atc.java:41: error: ';' expected\n        long sumOfSubArraySum\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhal0avv.java:33: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        long sumOfSubArraySum = 0;\n        long subArraySum\
    \ = 0;\n        long subArraySumIndex = 0;\n        long subArraySumOfSum = 0;\n\
    \        long subArraySumOfSumIndex = 0;\n        long subArraySumOfSumOfSum =\
    \ 0;\n        long subArraySumOfSumOfSumIndex = 0;\n        long subArraySumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumIndex = 0;\n        long subArraySumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumIndex = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n        long\
    \ subArraySumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n   \
    \     long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n        long\
    \ subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long subArraySumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2pr8ses.java:47: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (num\
    \ < min) {\n                min = num;\n            }\n            if (num > max)\
    \ {\n                max = num;\n            }\n        }\n        if (sum < min)\
    \ {\n            return min;\n        }\n        if (sum > max) {\n          \
    \  return max;\n        }\n        long min = Long.MAX_VALUE;\n        long max\
    \ = Long.MIN_VALUE;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (num < min) {\n                min = num;\n            }\n   \
    \         if (num > max) {\n                max = num;\n            }\n      \
    \  }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl99kn0ao.java:35: error: variable min is already defined in method\
    \ minSubArraySum(ArrayList<Long>)\n        long min = Long.MAX_VALUE;\n      \
    \       ^\n/tmp/tmpl99kn0ao.java:36: error: variable max is already defined in\
    \ method minSubArraySum(ArrayList<Long>)\n        long max = Long.MIN_VALUE;\n\
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < minSum) {\n                minSum\
    \ = sumOfSubArraySum;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0vgdhao.java:30)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i : nums) {\n  \
    \          sum += i;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplo7pf3wg.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc021w7nq.java:30: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArray\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > 0)\
    \ {\n                minSum = Math.min(minSum, num);\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xwpkj_.java:27)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long subArraySum = 0;\n        long sumOfSubArraySumOfSubArraySum = 0;\n\
    \        long subArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n \
    \       long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_8qasej.java:38: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < min) {\n     \
    \           min = sum;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwro5jod.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num > 0)\
    \ {\n                minSum = Math.min(minSum, num);\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xwpkj_.java:27)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx5b00uu.java:33: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmprx5b00uu.java:33: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long minSum = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xfjspe7.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        for(int i = 0; i < nums.size(); i++) {\n  \
    \          sum += nums.get(i);\n            if(sum < minSum) {\n             \
    \   minSum = sum;\n                minSumIndex = i;\n            }\n        }\n\
    \        for(int i = minSumIndex; i < nums.size(); i++) {\n            sum -=\
    \ nums.get(i);\n            sum += nums.get(i);\n            if(sum < minSum)\
    \ {\n                minSum = sum;\n                minSumIndex = i;\n       \
    \     }\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx27j_1ih.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = minSumIndex; i < nums.size(); i++) {\n\
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < min) {\n     \
    \           min = sum;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwro5jod.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(Long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxzv47ic.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uqm20g2.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArray2 = 0;\n        long sumOfSubArray3 = 0;\n        long\
    \ sumOfSubArray4 = 0;\n        long sumOfSubArray5 = 0;\n        long sumOfSubArray6\
    \ = 0;\n        long sumOfSubArray7 = 0;\n        long sumOfSubArray8 = 0;\n \
    \       long sumOfSubArray9 = 0;\n        long sumOfSubArray10 = 0;\n        long\
    \ sumOfSubArray11 = 0;\n        long sumOfSubArray12 = 0;\n        long sumOfSubArray13\
    \ = 0;\n        long sumOfSubArray14 = 0;\n        long sumOfSubArray15 = 0;\n\
    \        long sumOfSubArray16 = 0;\n        long sumOfSubArray17 = 0;\n      \
    \  long sumOfSubArray18 = 0;\n        long sumOfSubArray19 = 0;\n        long\
    \ sumOfSubArray20 = 0;\n        long sumOfSubArray21 = 0;\n        long sumOfSubArray22\
    \ = 0;\n        long sumOfSubArray23 = 0;\n        long sumOfSubArray24 = 0;\n\
    \        long sumOfSubArray25 = 0;\n        long sumOfSubArray26 = 0;\n      \
    \  long sumOfSubArray27 = 0;\n        long sumOfSubArray28 = 0;\n        long\
    \ sumOfSubArray29 = 0;\n        long sumOfSubArray30 = 0;\n        long sumOfSubArray31\
    \ = 0;\n        long sumOfSubArray32 = 0;\n        long sumOfSubArray33 = 0;\n\
    \        long sumOfSubArray34 = 0;\n        long sumOfSubArray35 = 0;\n      \
    \  long sumOfSubArray36 = 0;\n        long sumOfSubArray37 = 0;\n        long\
    \ sumOfSubArray38 = 0;\n        long sumOfSubArray39 = 0;\n        long sumOfSubArray40\
    \ = 0;\n        long sumOfSubArray41 = 0;\n        long sumOfSubArray42 = 0;\n\
    \        long sumOfSubArray43 = 0;\n        long sumOfSubArray44 = 0;\n      \
    \  long sumOfSubArray45 = 0;\n        long sumOfSubArray46 = 0;\n        long\
    \ sumOfSubArray47 = 0;\n        long sumOfSubArray48 = 0;\n        long sumOfSubArray49\
    \ = 0;\n        long sumOfSubArray50 = 0;\n        long sumOfSubArray51 = 0;\n\
    \        long sumOfSubArray52 = 0;\n        long sumOfSubArray53 = 0;\n      \
    \  long sumOfSubArray54 = 0;\n        long sumOfSubArray55 = 0;\n        long\
    \ sumOfSubArray\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsx8r39k.java:74: error: ';' expected\n        long sumOfSubArray\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArray2 = 0;\n        long sumOfSubArray3 = 0;\n        long\
    \ sumOfSubArray4 = 0;\n        long sumOfSubArray5 = 0;\n        long sumOfSubArray6\
    \ = 0;\n        long sumOfSubArray7 = 0;\n        long sumOfSubArray8 = 0;\n \
    \       long sumOfSubArray9 = 0;\n        long sumOfSubArray10 = 0;\n        long\
    \ sumOfSubArray11 = 0;\n        long sumOfSubArray12 = 0;\n        long sumOfSubArray13\
    \ = 0;\n        long sumOfSubArray14 = 0;\n        long sumOfSubArray15 = 0;\n\
    \        long sumOfSubArray16 = 0;\n        long sumOfSubArray17 = 0;\n      \
    \  long sumOfSubArray18 = 0;\n        long sumOfSubArray19 = 0;\n        long\
    \ sumOfSubArray20 = 0;\n        long sumOfSubArray21 = 0;\n        long sumOfSubArray22\
    \ = 0;\n        long sumOfSubArray23 = 0;\n        long sumOfSubArray24 = 0;\n\
    \        long sumOfSubArray25 = 0;\n        long sumOfSubArray26 = 0;\n      \
    \  long sumOfSubArray27 = 0;\n        long sumOfSubArray28 = 0;\n        long\
    \ sumOfSubArray29 = 0;\n        long sumOfSubArray30 = 0;\n        long sumOfSubArray31\
    \ = 0;\n        long sumOfSubArray32 = 0;\n        long sumOfSubArray33 = 0;\n\
    \        long sumOfSubArray34 = 0;\n        long sumOfSubArray35 = 0;\n      \
    \  long sumOfSubArray36 = 0;\n        long sumOfSubArray37 = 0;\n        long\
    \ sumOfSubArray38 = 0;\n        long sumOfSubArray39 = 0;\n        long sumOfSubArray40\
    \ = 0;\n        long sumOfSubArray41 = 0;\n        long sumOfSubArray42 = 0;\n\
    \        long sumOfSubArray43 = 0;\n        long sumOfSubArray44 = 0;\n      \
    \  long sumOfSubArray45 = 0;\n        long sumOfSubArray46 = 0;\n        long\
    \ sumOfSubArray47 = 0;\n        long sumOfSubArray48 = 0;\n        long sumOfSubArray49\
    \ = 0;\n        long sumOfSubArray50 = 0;\n        long sumOfSubArray51 = 0;\n\
    \        long sumOfSubArray52 = 0;\n        long sumOfSubArray53 = 0;\n      \
    \  long sumOfSubArray54 = 0;\n        long sumOfSubArray55 = 0;\n        long\
    \ sumOfSubArray\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsx8r39k.java:74: error: ';' expected\n        long sumOfSubArray\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n       \
    \ long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n        long\
    \ sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmped4ib0v1.java:34: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < min) {\n                min = sum;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uqm20g2.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long subArraySum = 0;\n        long subArraySumOfSubArrays = 0;\n   \
    \     long subArraySumOfSubArraysOfSubArrays = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArrays =\
    \ 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxavp72e.java:33: error: ';' expected\n        long subArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\n\
    \                                                                            \
    \                                                                            \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumOfSubArray = Long.MAX_VALUE;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sum <\
    \ minSum) {\n                minSum = sum;\n                minSumOfSubArray =\
    \ num;\n            }\n        }\n        return minSumOfSubArray;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdp7b698.java:30)\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            sumOfSubArrays\
    \ += num;\n            if(sumOfSubArrays < min) {\n                min = sumOfSubArrays;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cqemzzx.java:30)\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc021w7nq.java:30: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArray\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            sumOfSubArrays += num;\n            sumOfSubArraysOfSubArrays\
    \ += num;\n        }\n        for(long num : nums) {\n            sumOfSubArraysOfSubArrays\
    \ -= num;\n            sumOfSubArrays -= num;\n            sumOfSubArraysOfSubArrays\
    \ += num;\n            minSum = Math.min(minSum, sumOfSubArrays);\n          \
    \  minSum = Math.min(minSum, sumOfSubArraysOfSubArrays);\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcwc07ch.java:36)\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      long sumIndex = 0;\n        for(long i : nums) {\n            sum += i;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = sumIndex;\n            }\n            sumIndex++;\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjkg3lfn2.java:32)\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_99iklsr.java:25)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            min = Math.min(min,\
    \ sum);\n            max = Math.max(max, sum);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3i6ciuai.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhal0avv.java:33: error: ';' expected\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\n\
    \                                                                            \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex = 0;\n  \
    \      long minSumValue = nums.get(0);\n        long minSumIndexValue = nums.get(0);\n\
    \        for(long i : nums) {\n            sum += i;\n            if(sum < minSum)\
    \ {\n                minSum = sum;\n                minSumIndex = i;\n       \
    \         minSumValue = i;\n                minSumIndexValue = i;\n          \
    \  }\n        }\n        for(long i : nums) {\n            sum += i;\n       \
    \     if(sum < minSum) {\n                minSum = sum;\n                minSumIndex\
    \ = i;\n                minSumValue = i;\n                minSumIndexValue = i;\n\
    \            }\n        }\n        for(long i : nums) {\n            sum += i;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n                minSumValue = i;\n                minSumIndexValue\
    \ = i;\n            }\n        }\n        for(long i : nums) {\n            sum\
    \ += i;\n            if(sum < minSum) {\n                minSum = sum;\n     \
    \           minSumIndex = i;\n                minSumValue = i;\n             \
    \   minSumIndexValue = i;\n            }\n        }\n        for(long i : nums)\
    \ {\n            sum += i;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n                minSumIndex = i;\n                minSumValue = i;\n\
    \                minSumIndexValue = i;\n            }\n        }\n        for(long\
    \ i : nums) {\n            sum += i;\n            if(sum < minSum) {\n       \
    \         minSum = sum;\n                minSumIndex = i;\n                minSumValue\
    \ = i;\n                minSumIndexValue = i;\n            }\n        }\n    \
    \    for(long i : nums) {\n            sum += i;\n            if(sum < minSum)\
    \ {\n                minSum = sum;\n                minSumIndex = i;\n       \
    \         minSumValue = i;\n                minSumIndexValue = i;\n          \
    \  }\n        }\n        for(long i : nums) {\n            sum += i;\n       \
    \     if(sum < minSum) {\n                minSum = sum;\n                minSumIndex\
    \ = i;\n                minSumValue = i;\n                minSumIndexValue = i;\n\
    \            }\n        }\n        for(long i : nums) {\n            sum += i;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n                minSumValue = i;\n                minSumIndexValue\
    \ = i;\n            }\n        }\n        for(long i : nums) {\n            sum\
    \ += i;\n            if(sum < minSum) {\n                minSum = sum;\n     \
    \           minSum\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkjbn7xg.java:107: error: not a statement\n                minSum\n\
    \                ^\n/tmp/tmpgkjbn7xg.java:107: error: ';' expected\n         \
    \       minSum\n                      ^\n/tmp/tmpgkjbn7xg.java:109: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long sum = 0;\n  \
    \      for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n            }\n        }\n        return nums.get(minSumIndex);\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzpt7br6.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return nums.get(minSumIndex);\n                  \
    \      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcdx4wjo5.java:28)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89_r10nu.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum < min) {\n     \
    \           min = sum;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwro5jod.java:28)\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7e8_trs.java:32: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArray2 = 0;\n        long sumOfSubArray3 = 0;\n        long\
    \ sumOfSubArray4 = 0;\n        long sumOfSubArray5 = 0;\n        long sumOfSubArray6\
    \ = 0;\n        long sumOfSubArray7 = 0;\n        long sumOfSubArray8 = 0;\n \
    \       long sumOfSubArray9 = 0;\n        long sumOfSubArray10 = 0;\n        long\
    \ sumOfSubArray11 = 0;\n        long sumOfSubArray12 = 0;\n        long sumOfSubArray13\
    \ = 0;\n        long sumOfSubArray14 = 0;\n        long sumOfSubArray15 = 0;\n\
    \        long sumOfSubArray16 = 0;\n        long sumOfSubArray17 = 0;\n      \
    \  long sumOfSubArray18 = 0;\n        long sumOfSubArray19 = 0;\n        long\
    \ sumOfSubArray20 = 0;\n        long sumOfSubArray21 = 0;\n        long sumOfSubArray22\
    \ = 0;\n        long sumOfSubArray23 = 0;\n        long sumOfSubArray24 = 0;\n\
    \        long sumOfSubArray25 = 0;\n        long sumOfSubArray26 = 0;\n      \
    \  long sumOfSubArray27 = 0;\n        long sumOfSubArray28 = 0;\n        long\
    \ sumOfSubArray29 = 0;\n        long sumOfSubArray30 = 0;\n        long sumOfSubArray31\
    \ = 0;\n        long sumOfSubArray32 = 0;\n        long sumOfSubArray33 = 0;\n\
    \        long sumOfSubArray34 = 0;\n        long sumOfSubArray35 = 0;\n      \
    \  long sumOfSubArray36 = 0;\n        long sumOfSubArray37 = 0;\n        long\
    \ sumOfSubArray38 = 0;\n        long sumOfSubArray39 = 0;\n        long sumOfSubArray40\
    \ = 0;\n        long sumOfSubArray41 = 0;\n        long sumOfSubArray42 = 0;\n\
    \        long sumOfSubArray43 = 0;\n        long sumOfSubArray44 = 0;\n      \
    \  long sumOfSubArray45 = 0;\n        long sumOfSubArray46 = 0;\n        long\
    \ sumOfSubArray47 = 0;\n        long sumOfSubArray48 = 0;\n        long sumOfSubArray49\
    \ = 0;\n        long sumOfSubArray50 = 0;\n        long sumOfSubArray51 = 0;\n\
    \        long sumOfSubArray52 = 0;\n        long sumOfSubArray53 = 0;\n      \
    \  long sumOfSubArray54 = 0;\n        long sumOfSubArray55 = 0;\n        long\
    \ sumOfSubArray\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsx8r39k.java:74: error: ';' expected\n        long sumOfSubArray\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8myltuc0.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyo4olqh.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        long sumOfSubArray2 = 0;\n        for(long i : nums) {\n            sum\
    \ += i;\n            sumOfSubArray += i;\n            sumOfSubArray2 += i;\n \
    \       }\n        for(long i : nums) {\n            sumOfSubArray -= i;\n   \
    \         sumOfSubArray2 -= i;\n            sumOfSubArray += sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSubArray2 += sumOfSubArray;\n            sumOfSubArray -= sumOfSubArray2;\n\
    \            sumOfSub\n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4auk7qx.java:64: error: not a statement\n            sumOfSub\n\
    \            ^\n/tmp/tmpu4auk7qx.java:64: error: ';' expected\n            sumOfSub\n\
    \                    ^\n/tmp/tmpu4auk7qx.java:66: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum = 0;\n\
    \        long sumOfSubArraySumOfSubArraySum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            sumOfSubArraySum += num;\n         \
    \   sumOfSubArraySumOfSubArraySum += num;\n        }\n        for(long num : nums)\
    \ {\n            sumOfSubArraySumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            sumOfSubArraySum -= num;\n        }\n        for(long num\
    \ : nums) {\n            sumOfSubArraySum -= num;\n            sumOfSubArraySum\
    \ -= num;\n            \n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5_wwwu1.java:81: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72puvdmm.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xz4j0wj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArrays = 0;\n        long sumOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n  \
    \      long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = 0;\n\
    \        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays\
    \ = 0;\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsj5bles5.java:30: error: ';' expected\n        long sumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOf\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659805078
