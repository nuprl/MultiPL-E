name: HumanEval_69_search
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a non-empty array list of positive integers.\
  \ Return the greatest integer that is greater than \n    // zero, and has a frequency\
  \ greater than or equal to the value of the integer itself. \n    // The frequency\
  \ of an integer is the number of times it appears in the array list.\n    // If\
  \ no such a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
  \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
  \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
  \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
  \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
  \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
  \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
  \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));\n\
  \    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l,\
  \ (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
  \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
  \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));\n\
  \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l,\
  \ (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l))))\
  \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
  \ (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l,\
  \ (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l,\
  \ (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l,\
  \ (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l,\
  \ (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l,\
  \ (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l,\
  \ (long)5l, (long)3l, (long)10l)))) == (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
  \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
  \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
  \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
  \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
  \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
  \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));\n\
  \    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l,\
  \ (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l,\
  \ (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l,\
  \ (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l,\
  \ (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l,\
  \ (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l,\
  \ (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));\n  \
  \  assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l,\
  \ (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l,\
  \ (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));\n\
  \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l,\
  \ (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l,\
  \ (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l,\
  \ (long)10l, (long)8l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)10l))))\
  \ == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l,\
  \ (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l,\
  \ (long)5l, (long)7l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l,\
  \ (long)1l, (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
  \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
  \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
  \ == (-1l));\n    }\n\n}\n"
completions: ["        long max = -1;\n        long freq = 0;\n        for (long i\
    \ : lst) {\n            if (freq == 0 || freq > i) {\n                freq = i;\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = 0;\n        long maxFreq = -1;\n        for(long i : lst) {\n\
    \            long freq = Collections.frequency(lst, i);\n            if(freq >\
    \ maxFreq) {\n                max = i;\n                maxFreq = freq;\n    \
    \        }\n        }\n        return max;", "        long max = 0;\n        long\
    \ freq = 0;\n        for(long i : lst) {\n            freq++;\n            if(freq\
    \ > max) {\n                max = freq;\n            }\n        }\n        if(max\
    \ > 0) {\n            for(long i : lst) {\n                if(i == max) {\n  \
    \                  return i;\n                }\n            }\n        }\n  \
    \      return -1;", "        long maxVal = -1;\n        long maxFreq = -1;\n \
    \       for (long val : lst) {\n            if (val > 0) {\n                long\
    \ freq = lst.stream().filter(x -> x == val).count();\n                if (freq\
    \ >= maxFreq) {\n                    maxFreq = freq;\n                    maxVal\
    \ = val;\n                }\n            }\n        }\n        return maxVal;",
  "        long maxVal = -1;\n        long maxFreq = -1;\n        for (long val :\
    \ lst) {\n            long freq = Collections.frequency(lst, val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;", "        long maxVal\
    \ = -1;\n        long maxFreq = -1;\n        for (long val : lst) {\n        \
    \    long freq = Collections.frequency(lst, val);\n            if (freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = val;\n        \
    \    }\n        }\n        return maxVal;", "        long maxVal = -1;\n     \
    \   long maxFreq = -1;\n        for (long val : lst) {\n            if (val >\
    \ 0) {\n                long freq = lst.stream().filter(v -> v == val).count();\n\
    \                if (freq >= maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;", "        long maxVal = -1;\n        long maxFreq\
    \ = -1;\n        for(long val : lst) {\n            if(val > 0) {\n          \
    \      long freq = lst.stream().filter(e -> e == val).count();\n             \
    \   if(freq >= maxFreq) {\n                    maxFreq = freq;\n             \
    \       maxVal = val;\n                }\n            }\n        }\n        return\
    \ maxVal;", "        long max = 0;\n        long freq = 0;\n        for (long\
    \ i : lst) {\n            if (freq >= i) {\n                max = i;\n       \
    \         freq = i;\n            }\n        }\n        return max;", "       \
    \ long max = 0;\n        long freq = 0;\n        for (long i : lst) {\n      \
    \      if (i > 0 && freq >= i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;", "        long maxVal =\
    \ -1;\n        long maxFreq = -1;\n        for (long val : lst) {\n          \
    \  long freq = Collections.frequency(lst, val);\n            if (freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = val;\n        \
    \    }\n        }\n        return maxVal;", "        long max = -1;\n        long\
    \ maxFreq = -1;\n        for(long i : lst) {\n            long freq = Collections.frequency(lst,\
    \ i);\n            if(freq > maxFreq) {\n                max = i;\n          \
    \      maxFreq = freq;\n            }\n        }\n        return max;", "    \
    \    long maxVal = -1;\n        long maxFreq = -1;\n        for (long val : lst)\
    \ {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;", "        long max = 0;\n \
    \       long freq = 0;\n        for (long i : lst) {\n            if (freq > i)\
    \ {\n                max = i;\n                freq = i;\n            }\n    \
    \    }\n        return max;", "        long maxVal = -1;\n        long maxFreq\
    \ = -1;\n        for(long val : lst) {\n            long freq = Collections.frequency(lst,\
    \ val);\n            if(freq >= maxFreq) {\n                maxFreq = freq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;",
  "        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val : lst)\
    \ {\n            long freq = Collections.frequency(lst, val);\n            if(freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = val;\n\
    \            }\n        }\n        return maxVal;", "        long maxVal = -1;\n\
    \        long maxFreq = -1;\n        for(long val : lst) {\n            long freq\
    \ = lst.stream().filter(x -> x == val).count();\n            if(freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = val;\n        \
    \    }\n        }\n        return maxVal;", "        long maxVal = -1;\n     \
    \   long maxFreq = -1;\n        for(long val : lst) {\n            if(val > 0)\
    \ {\n                long freq = Collections.frequency(lst, val);\n          \
    \      if(freq >= maxFreq) {\n                    maxFreq = freq;\n          \
    \          maxVal = val;\n                }\n            }\n        }\n      \
    \  return maxVal;", "        long max = 0;\n        long freq = 0;\n        for\
    \ (long i : lst) {\n            if (freq > i) {\n                max = i;\n  \
    \              freq = i;\n            }\n        }\n        return max;", "  \
    \      long maxVal = -1;\n        long maxFreq = -1;\n        for (long val :\
    \ lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;"]
stop_tokens:
- "\n    }\n"
