name: HumanEval_19_sort_numbers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted\
  \ from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    //\
  \ (\"one three five\")\n    public static String sortNumbers(String numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
  \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
  \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
  \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four\
  \ five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two\
  \ one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"
completions: ["        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);", "        List<String> numbersList = new ArrayList<>();\n\
    \        numbersList.addAll(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(numbersList);\n\
    \        return numbersList.stream().collect(Collectors.joining(\" \"));", " \
    \       List<Integer> numberList = Arrays.stream(numbers.split(\" \")).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        Collections.sort(numberList);\n        return numberList.toString();",
  "        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);", "        List<String> numberList = Arrays.asList(numbers.split(\"\
    \ \"));\n        Collections.sort(numberList);\n        return String.join(\"\
    \ \", numberList);", "        String[] numberArray = numbers.split(\" \");\n \
    \       Arrays.sort(numberArray);\n        return String.join(\" \", numberArray);",
  "        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);", "        String[] numberArray = numbers.split(\" \");\n\
    \        Arrays.sort(numberArray);\n        return Arrays.toString(numberArray);",
  "        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        List<String> list\
    \ = Arrays.asList(numbers.split(\" \"));\n        Collections.sort(list);\n  \
    \      return list.toString();", "        String[] numberArray = numbers.split(\"\
    \ \");\n        Arrays.sort(numberArray);\n        return String.join(\" \", numberArray);",
  "        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);", "        List<String> list = Arrays.asList(numbers.split(\"\
    \ \"));\n        Collections.sort(list);\n        return list.stream().collect(Collectors.joining(\"\
    \ \"));", "        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);", "        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);", "        List<String> list = Arrays.asList(numbers.split(\"\
    \ \"));\n        Collections.sort(list);\n        return String.join(\" \", list);"]
stop_tokens:
- "\n    }\n"
