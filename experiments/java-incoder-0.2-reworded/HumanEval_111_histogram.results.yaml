language: java
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = result.get(word);\n            if (count == null) {\n              \
    \  result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27j7k3xl.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp27j7k3xl.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp27j7k3xl.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp27j7k3xl.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntssitgm.java:27: error: no suitable method found for merge(String,int,(oldVal,ne[...]ewVal)\n\
    \            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n      \
    \         ^\n    method Map.merge(String,Long,BiFunction<? super Long,? super\
    \ Long,? extends Long>) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<? super\
    \ Long,? super Long,? extends Long>) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Long)\n/tmp/tmpntssitgm.java:32: error: cannot find\
    \ symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpntssitgm.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpntssitgm.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpntssitgm.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpntssitgm.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: in"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            Long count = result.getOrDefault(key, 0L);\n            result.put(key,\
    \ count + 1L);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2q31vw2q.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp2q31vw2q.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp2q31vw2q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp2q31vw2q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp2q31vw2q.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp2q31vw2q.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp2q31vw2q.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            Long count = map.get(word);\n     \
    \       map.put(word, count == null ? 1L : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nad209q.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp3nad209q.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp3nad209q.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp3nad209q.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            long count = result.getOrDefault(word,\
    \ 0L);\n            result.put(word, count + 1);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03vo9rye.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp03vo9rye.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp03vo9rye.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp03vo9rye.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp03vo9rye.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp03vo9rye.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp03vo9rye.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        Arrays.sort(words);\n        for (String word : words) {\n   \
    \         Long count = result.get(word);\n            if (count == null) {\n \
    \               result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvdq7j_9t.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            map.merge(word, 1, (oldVal,\
    \ newVal) -> oldVal + newVal);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqjj940ms.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n\
    \                            ^\n/tmp/tmpqjj940ms.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal + newVal);\n                                                        \
    \  ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n    V\
    \ extends Object declared in class HashMap\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.trim();\n         \
    \   Long count = result.get(word);\n            if (count == null) {\n       \
    \         result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3g4h_y2r.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            map.merge(word, 1, (oldValue,\
    \ newValue) -> oldValue + newValue);\n        }\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr6v1vlb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpwr6v1vlb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.merge(word, 1l, Long::sum);\n \
    \       }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5tul4q9.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfly1f1wb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n\
    \                            ^\n/tmp/tmpfly1f1wb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal + newVal);\n                                                        \
    \  ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n    V\
    \ extends Object declared in class HashMap\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            map.merge(word, 1, (oldValue,\
    \ newValue) -> oldValue + newValue);\n        }\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr6v1vlb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpwr6v1vlb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntssitgm.java:27: error: no suitable method found for merge(String,int,(oldVal,ne[...]ewVal)\n\
    \            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n      \
    \         ^\n    method Map.merge(String,Long,BiFunction<? super Long,? super\
    \ Long,? extends Long>) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<? super\
    \ Long,? super Long,? extends Long>) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Long)\n/tmp/tmpntssitgm.java:32: error: cannot find\
    \ symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpntssitgm.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpntssitgm.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpntssitgm.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpntssitgm.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: in"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            map.merge(word, 1, (oldValue,\
    \ newValue) -> oldValue + newValue);\n        }\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr6v1vlb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpwr6v1vlb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            Long count = result.get(key);\n            if (count == null) {\n\
    \                result.put(key, 1l);\n            } else {\n                result.put(key,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprzw0ig8d.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            long count = map.getOrDefault(word,\
    \ 0L);\n            map.put(word, count + 1);\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35nkcyul.java:34)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pwnc1x_.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7d7vw_yt.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyau_6g_a.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyau_6g_a.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            Long count = result.get(key);\n            if (count == null) {\n\
    \                result.put(key, 1l);\n            } else {\n                result.put(key,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprzw0ig8d.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1l);\n            } else {\n                map.put(word, count + 1l);\n   \
    \         }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeav2frw.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpak_uxxc8.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoe_1jbxy.java:34)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.trim();\n         \
    \   if (word.length() == 0) {\n                continue;\n            }\n    \
    \        Long count = result.get(word);\n            if (count == null) {\n  \
    \              result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjk9lm0j.java:42)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoe_1jbxy.java:34)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.get(word);\n    \
    \        if (count == 0) {\n                map.put(word, 1l);\n            }\
    \ else {\n                map.put(word, count + 1);\n            }\n        }\n\
    \        return map;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmphuyy1f1w.java:27)\n\tat Problem.main(tmphuyy1f1w.java:37)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1l);\n            } else {\n                map.put(word, count + 1l);\n   \
    \         }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeav2frw.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            Long count = result.get(key);\n            if (count == null) {\n\
    \                result.put(key, 1l);\n            } else {\n                result.put(key,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkpt9iv2u.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9e31bgy.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpk9e31bgy.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799409
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for(String word : words) {\n            Long count = map.get(word);\n\
    \            if(count == null) {\n                map.put(word, 1l);\n       \
    \     } else {\n                map.put(word, count + 1l);\n            }\n  \
    \      }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf3kt_qbd.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.getOrDefault(word,\
    \ 0L);\n            map.put(word, count + 1);\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ox_0pxi.java:34)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgujy9vvv.java:33)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            long count = Collections.frequency(Arrays.asList(word),\
    \ word);\n            result.put(word, count);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaolcw8kf.java:33)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpak_uxxc8.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            String key = word.toLowerCase();\n\
    \            Long count = result.get(key);\n            if (count == null) {\n\
    \                result.put(key, 1l);\n            } else {\n                result.put(key,\
    \ count + 1l);\n            }\n        });\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvf6n3lw.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfly1f1wb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n\
    \                            ^\n/tmp/tmpfly1f1wb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal + newVal);\n                                                        \
    \  ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n    V\
    \ extends Object declared in class HashMap\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            long count = result.get(word);\n\
    \            if (count == 0) {\n                result.put(word, 1l);\n      \
    \      } else {\n                result.put(word, count + 1);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmpliwjkbxk.java:27)\n\tat Problem.main(tmpliwjkbxk.java:37)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgujy9vvv.java:33)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoe_1jbxy.java:34)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = result.get(word);\n            if (count == null) {\n              \
    \  result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27j7k3xl.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp27j7k3xl.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp27j7k3xl.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp27j7k3xl.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.get(word);\n    \
    \        if (count == 0) {\n                map.put(word, 1l);\n            }\
    \ else {\n                map.put(word, count + 1);\n            }\n        }\n\
    \        return map;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmphuyy1f1w.java:27)\n\tat Problem.main(tmphuyy1f1w.java:37)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99d9y8kc.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfly1f1wb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n\
    \                            ^\n/tmp/tmpfly1f1wb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal + newVal);\n                                                        \
    \  ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n    V\
    \ extends Object declared in class HashMap\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            long count = Collections.frequency(Arrays.asList(word.toLowerCase().split(\"\
    \ \")), word.toLowerCase());\n            result.put(word, count);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74qze1m0.java:33)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.containsKey(word)\
    \ ? map.get(word) + 1 : 1;\n            map.put(word, count);\n        }\n   \
    \     return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00nyyvw0.java:34)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1l);\n            } else {\n                map.put(word, count + 1l);\n   \
    \         }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeav2frw.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pwnc1x_.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.trim();\n\
    \            if (word.isEmpty()) {\n                continue;\n            }\n\
    \            Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ful5j6e.java:42)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = map.get(letter);\n            if (count == null)\
    \ {\n                map.put(letter, 1l);\n            } else {\n            \
    \    map.put(letter, count + 1l);\n            }\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi9ppvdg7.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1l);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezd5qysf.java:38)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpak_uxxc8.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7d7vw_yt.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99d9y8kc.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            Long count = map.get(word);\n     \
    \       map.put(word, count == null ? 1l : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdy026sc.java:34)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            Long count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1l);\n      \
    \      } else {\n                map.put(word, count + 1l);\n            }\n \
    \       });\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4l9g_tg.java:38)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.containsKey(letter) ? result.get(letter)\
    \ : 0;\n            result.put(letter, count + 1);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_oc450w.java:35)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgxsy5z1.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpfgxsy5z1.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpfgxsy5z1.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpfgxsy5z1.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpfgxsy5z1.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1l);\n            } else {\n                map.put(word, count + 1l);\n   \
    \         }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeav2frw.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for(String word : words) {\n            Long count = map.get(word);\n\
    \            map.put(word, count == null ? 1l : count + 1);\n        }\n     \
    \   return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tcs92yf.java:34)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyau_6g_a.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  Arrays.stream(words).forEach(word -> {\n            String key = word.toLowerCase();\n\
    \            Long count = map.get(key);\n            if (count == null) {\n  \
    \              map.put(key, 1l);\n            } else {\n                map.put(key,\
    \ count + 1);\n            }\n        });\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91qv7jlj.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            Long count = map.get(word);\n     \
    \       map.put(word, count == null ? 1L : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nad209q.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp3nad209q.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp3nad209q.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp3nad209q.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = result.get(letter);\n            if (count ==\
    \ null) {\n                result.put(letter, 1l);\n            } else {\n   \
    \             result.put(letter, count + 1l);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktsq8bmj.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpktsq8bmj.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpktsq8bmj.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpktsq8bmj.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpktsq8bmj.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            String letter = word.substring(0, 1);\n\
    \            Long count = map.get(letter);\n            map.put(letter, count\
    \ == null ? 1l : count + 1);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu10otgzt.java:35)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            long count = Collections.frequency(Arrays.asList(word),\
    \ word);\n            result.put(word, count);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b4dlerb.java:33)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            Long count = map.get(word);\n     \
    \       map.put(word, count == null ? 1L : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nad209q.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp3nad209q.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp3nad209q.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp3nad209q.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsmh0m9c.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb55vi5l2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpb55vi5l2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpb55vi5l2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpb55vi5l2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpb55vi5l2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1l, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zbtkoim.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.trim();\n         \
    \   Long count = result.get(word);\n            if (count == null) {\n       \
    \         result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3g4h_y2r.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5cyqe9c.java:27: error: no suitable method found for merge(String,int,(oldValue,[...]Value)\n\
    \            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \               ^\n    method Map.merge(String,Long,BiFunction<? super Long,?\
    \ super Long,? extends Long>) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n    method HashMap.merge(String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n/tmp/tmpr5cyqe9c.java:32: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n                                                   \
    \                   ^\n  symbol:   method of(String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpr5cyqe9c.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                        ^\n \
    \ symbol:   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpr5cyqe9c.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \       ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpr5cyqe9c.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  loca"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.trim();\n         \
    \   Long count = result.get(word);\n            if (count == null) {\n       \
    \         result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3g4h_y2r.java:39)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(String word : words) {\n            Long count = map.get(word);\n     \
    \       map.put(word, count == null ? 1L : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nad209q.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp3nad209q.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp3nad209q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp3nad209q.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp3nad209q.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.containsKey(word)\
    \ ? map.get(word) + 1 : 1;\n            map.put(word, count);\n        }\n   \
    \     return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00nyyvw0.java:34)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            long count = map.get(word);\n    \
    \        map.put(word, count == null ? 1 : count + 1);\n        }\n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1hrdf2bm.java:28: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  long\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal + newVal);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfly1f1wb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal + newVal);\n\
    \                            ^\n/tmp/tmpfly1f1wb.java:27: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal + newVal);\n                                                        \
    \  ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n    V\
    \ extends Object declared in class HashMap\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7d7vw_yt.java:33)\n"
  stdout: ''
  timestamp: 1659799410
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cti7ba9.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp6cti7ba9.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp6cti7ba9.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp6cti7ba9.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp6cti7ba9.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99d9y8kc.java:39)\n"
  stdout: ''
  timestamp: 1659799411
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.sort(words);\n        for (String word : words) {\n            Long\
    \ count = result.get(word);\n            if (count == null) {\n              \
    \  result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27j7k3xl.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmp27j7k3xl.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmp27j7k3xl.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmp27j7k3xl.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmp27j7k3xl.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvctw8zks.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \                                                                      ^\n  symbol:\
    \   method of(String,long,String,long)\n  location: interface Map\n/tmp/tmpvctw8zks.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n                   \
    \                                                     ^\n  symbol:   method of(String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n                  \
    \                                                      ^\n  symbol:   method of(String,long,String,long,String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n                                        \
    \                            ^\n  symbol:   method of(String,long,String,long,String,long)\n\
    \  location: interface Map\n/tmp/tmpvctw8zks.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n                                                              \
    \          ^\n  symbol:   method of(String,long)\n  location: interface Map\n\
    /tmp/tmpvctw8zks.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n                                                                 \
    \   ^\n  symbol:   method of(String,long,String,long,String,long)\n  location:\
    \ interface Map\n/tmp/tmpvctw8zks.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n              \
    \                                                "
  stdout: ''
