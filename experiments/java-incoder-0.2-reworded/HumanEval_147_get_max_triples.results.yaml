language: java
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long max = 0;\n        long sum = 0;\n        for(int i = 0; i < a.length;\
    \ i++) {\n            sum += a[i];\n            if(sum % 3 == 0) {\n         \
    \       max = Math.max(max, sum);\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23qlwhwg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            sum += a[i];\n            if (sum % 3 == 0) {\n             \
    \   ans += 1;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxh_48rz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long tripleCount = 0;\n        long tripleMax\
    \ = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n;\
    \ j++) {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        tripleCount++;\n            \
    \            if(triple < a[i]) {\n                            triple = a[i];\n\
    \                        }\n                        if(triple < a[j]) {\n    \
    \                        triple = a[j];\n                        }\n         \
    \               if(triple < a[k]) {\n                            triple = a[k];\n\
    \                        }\n                        tripleMax = triple;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ tripleCount;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5r08vr1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(sum == (3 * sum)) {\n\
    \                        if(max < a.get(i) + a.get(j) + a.get(k)) {\n        \
    \                    max = a.get(i) + a.get(j) + a.get(k);\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        return max;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzbqy9qy.java:23: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long triples = 0;\n        for(int\
    \ i = 1; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpycz5y9ei.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n       \
    \     sum += i;\n        }\n        for(int i = 0; i < a.size(); i++) {\n    \
    \        for(int j = i + 1; j < a.size(); j++) {\n                for(int k =\
    \ j + 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum) {\n                        if(a.get(i) * a.get(j) * a.get(k) % 3 ==\
    \ 0) {\n                            max = Math.max(max, a.get(i) * a.get(j) *\
    \ a.get(k));\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mlnk_55.java:24: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        return a.stream().filter(i -> i < a.size()\
    \ && i < a.size() && i < a.size()).count();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxopf3qt.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long max = 0;\n        for(int i = 1;\
    \ i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4esppq5.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ct7kdbw.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)){\n                   \
    \     max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                 \
    \   }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps239nir9.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        a.add(1l);\n        a.add(3l);\n       \
    \ a.add(7l);\n        a.add(13l);\n        a.add(21l);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++)\
    \ {\n                for(int k = 1; k < n; k++) {\n                    if(i +\
    \ j + k == a.get(k)) {\n                        ans += 1;\n                  \
    \  }\n                }\n            }\n        }\n        return ans;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9877xadc.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            a.add(i, i * i - i + 1);\n     \
    \       sum += i;\n        }\n        for(int i = 0; i < n; i++) {\n         \
    \   for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n\
    \                    if(i != j && j != k && k != i) {\n                      \
    \  long tripleSum = sum;\n                        for(int l = 0; l < n; l++) {\n\
    \                            tripleSum -= a[l];\n                        }\n \
    \                       if(tripleSum == 0) continue;\n                       \
    \ if(tripleSum > max) {\n                            max = tripleSum;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqggzu_e.java:24: error: no suitable method found for add(int,int)\n\
    \            a.add(i, i * i - i + 1);\n             ^\n    method List.add(int,Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method AbstractList.add(int,Long) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Long)\n    method ArrayList.add(int,Long) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Long)\n/tmp/tmpnqggzu_e.java:33:\
    \ error: array required, but ArrayList<Long> found\n                         \
    \   tripleSum -= a[l];\n                                          ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(i+j+k == n) {\n             \
    \           a.add(i*i-i+1);\n                        a.add(j*j-i+1);\n       \
    \                 a.add(k*k-j+1);\n                        max = Math.max(max,\
    \ Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtcfdhwf.java:30: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpwtcfdhwf.java:30: error: ')' expected\n    }\n     ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n\
    \    public static void main(String[] args) {\n                      ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public\
    \ static void main(String[] args) {\n                            ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                                   ^\n/tmp/tmpwtcfdhwf.java:31: error: ')'\
    \ expected\n    public static void main(String[] args) {\n                   \
    \                 ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \  ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public static void main(String[]\
    \ args) {\n                                            ^\n/tmp/tmpwtcfdhwf.java:32:\
    \ error: ')' expected\n    assert(getMaxTriples((5l)) == (1l));\n          ^\n\
    /tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n           ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n                        ^\n/tmp/tmpwtcfdhwf.java:32:\
    \ error: ')' expected\n    assert(getMaxTriples((5l)) == (1l));\n            \
    \             ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n                          ^\n/tmp/tmpwtcfdhwf.java:32: error: ')'\
    \ expected\n    assert(getMaxTriples((5l)) == (1l));\n                       \
    \                ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n                                        ^\n/tmp/"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4hldk8m.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvqgcprg.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max =\
    \ Math.max(max, i);\n                        max = Math.max(max, j);\n       \
    \                 max = Math.max(max, k);\n                    }\n           \
    \     }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkcceke3w.java:23: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n    \
    \            for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqj0g1_ko.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result += 1;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_6gtcdt.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        long temp = 0;\n    \
    \    for(int i = 1; i <= n; i++) {\n            temp = i * i - i + 1;\n      \
    \      a.add(temp);\n            sum += temp;\n        }\n        long max = 0;\n\
    \        for(int i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j\
    \ < a.size(); j++) {\n                for(int k = j + 1; k < a.size(); k++) {\n\
    \                    if(a.get(i) + a.get(j) + a.get(k) == sum) {\n           \
    \             if(max < a.get(i) + a.get(j) + a.get(k)) {\n                   \
    \         max = a.get(i) + a.get(j) + a.get(k);\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1rnzemjz.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        long sum = 0;\n        for(int i = 1; i <=\
    \ n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i =\
    \ 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        sum +=\
    \ a.get(i) + a.get(j) + a.get(k);\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ajhv4p7.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        result += 1;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2tcq8er.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n    \
    \            for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        result = Math.max(result,\
    \ i);\n                        result = Math.max(result, j);\n               \
    \         result = Math.max(result, k);\n                    }\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55zyua6i.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long ans = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        ans += 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpca35fbhf.java:37)\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    long triple = sum - a.get(i) -\
    \ a.get(j) - a.get(k);\n                    if(triple % 3 == 0) {\n          \
    \              max = Math.max(max, triple);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubj8yre1.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        long triple = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i; j < n; j++) {\n                for(int k\
    \ = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n    \
    \                    triple++;\n                    }\n                }\n   \
    \         }\n        }\n        return triple;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0l8lxjc0.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs56kv_p.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n      \
    \          for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrvo94a9.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsrujn9y.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        sum +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmct_9v_8.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94jljxjj.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i)){\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmglcswz_.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> {\n            a[i]\
    \ = i * i - i + 1;\n        });\n        return Arrays.stream(a).filter(i -> i\
    \ < n && n < i + 1 && i < n + 1 && i < n + 2)\n                .filter(i -> i\
    \ % 3 == 0).count();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xv6cy86.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp9xv6cy86.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            a[i] = i * i - i + 1;\n              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long ans = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        ans += 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcet30yf.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcf0ubdib.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum && max < a.get(i) + a.get(j) + a.get(k)) {\n                        max\
    \ = a.get(i) + a.get(j) + a.get(k);\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzxmj6s1.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple82 = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxhrxg7z.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp47kpjzav.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp47kpjzav.java:25: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:26:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:27: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:28: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:29: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:30:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:31: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:32: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:33: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:34:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:35: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:36: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:37: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:38:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i + 1; j < a.size(); j++){\n      \
    \          for(int k = j + 1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjyg8s6j.java:37)\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max =\
    \ Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n    \
    \            }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3g21wkp0.java:37)\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7sp001c.java:37)\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for (int i = 0; i < a.length; i++) {\n      \
    \      for (int j = i + 1; j < a.length; j++) {\n                for (int k =\
    \ j + 1; k < a.length; k++) {\n                    if (a[i] < a[j] && a[i] < a[k])\
    \ {\n                        result = Math.max(result, a[i] + a[j] + a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_56me0rc.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf433e03a.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>(n);\n        long result = 0;\n        for(int i\
    \ = 1; i < n; i++) {\n            for(int j = i; j < n; j++) {\n             \
    \   for(int k = j; k < n; k++) {\n                    if(i + j + k == n) {\n \
    \                       a.add(i);\n                        a.add(j);\n       \
    \                 a.add(k);\n                        if(a.get(i) + a.get(j) +\
    \ a.get(k) == n) {\n                            result += 1;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2qu3fpx.java:20: error: no suitable constructor found for ArrayList(long)\n\
    \        ArrayList<Integer> a = new ArrayList<Integer>(n);\n                 \
    \              ^\n    constructor ArrayList.ArrayList(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    constructor\
    \ ArrayList.ArrayList(Collection<? extends Integer>) is not applicable\n     \
    \ (argument mismatch; long cannot be converted to Collection<? extends Integer>)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i +\
    \ 1);\n        long triples = Arrays.stream(a).filter(i -> i < n && i < n && i\
    \ < n).count();\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk55wzgn3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpk55wzgn3.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i + 1);\n\
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)){\n                   \
    \     max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                 \
    \   }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps239nir9.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++){\n      \
    \      a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++){\n            for(int j = i + 1; j < a.size(); j++){\n\
    \                for(int k = j + 1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0){\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kfbwk1n.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_3mq_ln.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long ans = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        ans += 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpca35fbhf.java:37)\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j)\
    \ + a.get(k) == sum && max < a.get(i) * a.get(j) * a.get(k)) {\n             \
    \           max = a.get(i) * a.get(j) * a.get(k);\n                    }\n   \
    \             }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yaxl6v2.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long max = 0;\n        for(int i = 1;\
    \ i <= n; i++) {\n            a.add(i);\n        }\n        for(int i = 1; i <=\
    \ n; i++) {\n            for(int j = 1; j <= n; j++) {\n                for(int\
    \ k = 1; k <= n; k++) {\n                    if(i + j + k == (3 * i)) {\n    \
    \                    if(a.get(i) + a.get(j) + a.get(k) > max) {\n            \
    \                max = a.get(i) + a.get(j) + a.get(k);\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      return max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.getMaxTriples(tmp65elq_56.java:29)\n\tat Problem.main(tmp65elq_56.java:39)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result =\
    \ Math.max(result, a[i] - a[j] - a[k]);\n                    }\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsy5dk_hj.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n       \
    \ }\n        for(int i = 0; i < a.size(); i++) {\n            for(int j = i +\
    \ 1; j < a.size(); j++) {\n                for(int k = j + 1; k < a.size(); k++)\
    \ {\n                    if(a.get(i) + a.get(j) + a.get(k) == 3) {\n         \
    \               sum = sum + a.get(i);\n                        max = Math.max(max,\
    \ sum);\n                    }\n                }\n            }\n        }\n\
    \        return max;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimhx7shd.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long result = 0;\n        for(int i =\
    \ 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppgltp5v4.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_uo03_rj.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(sum % 3 == 0) {\n  \
    \                      max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5p9e65f.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long triples = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvucn5e1o.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sim3vnd.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i < n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokrmcgta.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++){\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n    \
    \            for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi39pa7k.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqt4y8zk.java:37)\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        sum += a[i];\n                        sum += a[j];\n\
    \                        sum += a[k];\n                        triples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa00u2_c6.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kyukqvx.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        long triples_sum =\
    \ 0;\n        long triples_sum2 = 0;\n        long triples_sum3 = 0;\n       \
    \ long triples_sum4 = 0;\n        long triples_sum5 = 0;\n        long triples_sum6\
    \ = 0;\n        long triples_sum7 = 0;\n        long triples_sum8 = 0;\n     \
    \   long triples_sum9 = 0;\n        long triples_sum10 = 0;\n        long triples_sum11\
    \ = 0;\n        long triples_sum12 = 0;\n        long triples_sum13 = 0;\n   \
    \     long triples_sum14 = 0;\n        long triples_sum15 = 0;\n        long triples_sum16\
    \ = 0;\n        long triples_sum17 = 0;\n        long triples_sum18 = 0;\n   \
    \     long triples_sum19 = 0;\n        long triples_sum20 = 0;\n        long triples_sum21\
    \ = 0;\n        long triples_sum22 = 0;\n        long triples_sum23 = 0;\n   \
    \     long triples_sum24 = 0;\n        long triples_sum25 = 0;\n        long triples_sum26\
    \ = 0;\n        long triples_sum27 = 0;\n        long triples_sum28 = 0;\n   \
    \     long triples_sum29 = 0;\n        long triples_sum30 = 0;\n        long triples_sum31\
    \ = 0;\n        long triples_sum32 = 0;\n        long triples_sum33 = 0;\n   \
    \     long triples_sum34 = 0;\n        long triples_sum35 = 0;\n        long triples_sum36\
    \ = 0;\n        long triples_sum37 = 0;\n        long triples_sum38 = 0;\n   \
    \     long triples_sum39 = 0;\n        long triples_sum40 = 0;\n        long triples_sum41\
    \ = 0;\n        long triples_sum42 = 0;\n        long triples_sum43 = 0;\n   \
    \     long triples_sum44 = 0;\n        long triples_sum45 = 0;\n        long triples_sum46\
    \ = 0;\n        long triples_sum47 = 0;\n        long triples_sum48 = 0;\n   \
    \     long triples_sum49 = 0;\n        long triples_sum50 = 0;\n        long triples_sum51\
    \ = 0;\n        long triples_sum52 = 0;\n        long triples_sum53 = 0;\n   \
    \     long triples_sum54 = 0;\n        long triples_sum55 = 0;\n        long triples_sum56\
    \ = 0;\n        long triples_sum57 = 0;\n        long triples_sum58 = 0;\n   \
    \     long triples_sum59 = 0;\n        long triples_sum60 = 0;\n        long triples_sum61\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07abgt2i.java:85: error: ';' expected\n        long triples_sum61\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbb14a3ui.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        for(int i = 1; i <= n; i++) {\n           \
    \ a.add(i * i - i + 1);\n        }\n        return a.stream().filter(t -> t %\
    \ 3 == 0).count();\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp31htsq21.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        a.add(1);\n        a.add(3);\n        a.add(7);\n\
    \        a.add(13);\n        a.add(21);\n        long ans = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)) {\n                  \
    \      ans += 1;\n                    }\n                }\n            }\n  \
    \      }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6gv2q3jv.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp47kpjzav.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp47kpjzav.java:25: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:26:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:27: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:28: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:29: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:30:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:31: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:32: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:33: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:34:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:35: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:36: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:37: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:38:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    long\
    \ triple = a.get(i) + a.get(j) + a.get(k);\n                    if(triple % 3\
    \ == 0) {\n                        if(triple > max) {\n                      \
    \      max = triple;\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5v1bxpxr.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpie6ds533.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(sum % 3 == 0) {\n          \
    \              if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                   \
    \         max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8zqduxz.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            sum += i * i - i + 1;\n            a.add(i * i - i + 1);\n\
    \        }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j)\
    \ + a.get(k) == sum && max < a.get(i) * a.get(j) * a.get(k)) {\n             \
    \           max = a.get(i) * a.get(j) * a.get(k);\n                    }\n   \
    \             }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xmr95c9.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd57eabvb.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        long max = 0;\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i; j < n; j++) {\n                for(int k = j;\
    \ k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n         \
    \               sum += 1;\n                        if(sum > max) {\n         \
    \                   max = sum;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxf1mo8d.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n      \
    \          for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxhx95f3.java:39)\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    sum += a[i];\n               \
    \     sum += a[j];\n                    sum += a[k];\n                    if(sum\
    \ % 3 == 0) {\n                        triples++;\n                    }\n   \
    \             }\n            }\n        }\n        return triples;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8f95tbx.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> i = i * i - i + 1);\n\
    \        long triples = 0;\n        Arrays.stream(a).forEach(i -> Arrays.stream(a).forEach(j\
    \ -> Arrays.stream(a).forEach(k -> {\n            if (i < j && j < k && i + j\
    \ + k == 3 * i) {\n                triples += 1;\n            }\n        })));\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvfya3yzh.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long max = 0;\n        for(int i = 1;\
    \ i < n; i++){\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n\
    \                for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)){\n                   \
    \     max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                 \
    \   }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenn3ckr3.java:37)\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n      \
    \          for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)) {\n                  \
    \      max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                \
    \    }\n                }\n            }\n        }\n        return max;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbz0x5yk.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long max = 0;\n        long sum = 0;\n        long sum2 = 0;\n        long\
    \ sum3 = 0;\n        for(int i = 0; i < n; i++) {\n            sum += a[i];\n\
    \            sum2 += a[i] * a[i];\n            sum3 += a[i] * a[i] * a[i];\n \
    \       }\n        for(int i = 0; i < n; i++) {\n            if(a[i] % 3 == 0)\
    \ {\n                max = Math.max(max, sum);\n                max = Math.max(max,\
    \ sum2);\n                max = Math.max(max, sum3);\n                sum = 0;\n\
    \                sum2 = 0;\n                sum3 = 0;\n            }\n       \
    \     sum += a[i];\n            sum2 += a[i] * a[i];\n            sum3 += a[i]\
    \ * a[i] * a[i];\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8cwfgexs.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long triples = 0;\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8182tl47.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i; j < a.size(); j++) {\n                for(int k =\
    \ j; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum && max < a.get(i) * a.get(j) * a.get(k)) {\n                        max\
    \ = a.get(i) * a.get(j) * a.get(k);\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2m1e4v0.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n  \
    \              for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb08ky0wt.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68n56rgn.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long maxTriples = 0;\n        for(int i = 0; i < a.size(); i++) {\n \
    \           for(int j = i + 1; j < a.size(); j++) {\n                for(int k\
    \ = j + 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) +\
    \ a.get(k) == sum) {\n                        maxTriples += 1;\n             \
    \       }\n                }\n            }\n        }\n        return maxTriples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphg5sbi9z.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i +\
    \ 1);\n        long triples = 0;\n        Arrays.stream(a).forEach(i -> Arrays.stream(a).forEach(j\
    \ -> Arrays.stream(a).forEach(k -> {\n            long sum = i + j + k;\n    \
    \        if (sum % 3 == 0) {\n                triples += 1;\n            }\n \
    \       })));\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjuizy88o.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpjuizy88o.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i + 1);\n\
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cayplv0.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int\
    \ k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples += 1;\n                        sum += a[i];\n\
    \                        sum += a[j];\n                        sum += a[k];\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4_q_3og.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long triples = 0;\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n  \
    \              for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        triples += 1;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqujvd48o.java:37)\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum && max < a.get(i) + a.get(j) + a.get(k)) {\n                        max\
    \ = a.get(i) + a.get(j) + a.get(k);\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzxmj6s1.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i +\
    \ 1);\n        return Arrays.stream(a).filter(i -> i < n && i < n && i < n).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm68vvfo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpqm68vvfo.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i + 1);\n\
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0so3y4z2.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> i = i * i - i + 1);\n\
    \        long max = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    triple = a[i] + a[j] + a[k];\n                    if (triple > max) {\n \
    \                       max = triple;\n                        triples = i;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprsj5hu_5.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i->{\n            a[i]\
    \ = i * i - i + 1;\n        });\n        Arrays.sort(a);\n        long sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++)\
    \ {\n                for(int k = j+1; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        sum += 1;\n                 \
    \   }\n                }\n            }\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgfnly3k.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpqgfnly3k.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            a[i] = i * i - i + 1;\n              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboxvjq_v.java:39)\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        a.stream().forEach(i -> a.add(i * i - i + 1));\n\
    \        long res = 0;\n        for (int i = 0; i < a.size(); i++) {\n       \
    \     for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j\
    \ + 1; k < a.size(); k++) {\n                    long triple = a.stream().filter(t\
    \ -> t < i && t < j && t < k).count();\n                    if (triple == 3) {\n\
    \                        res = Math.max(res, a.stream().filter(t -> t == i ||\
    \ t == j || t == k).count());\n                    }\n                }\n    \
    \        }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1v9tji5h.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        long sum = 0;\n        for(int i = 1; i <=\
    \ n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i =\
    \ 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        sum +=\
    \ i;\n                        sum += j;\n                        sum += k;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph9uul4ty.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    long\
    \ triple = a.stream().filter(t -> t > 0).sum();\n                    if(triple\
    \ % 3 == 0) {\n                        max = Math.max(max, triple);\n        \
    \            }\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntmfrssa.java:28: error: cannot find symbol\n                 \
    \   long triple = a.stream().filter(t -> t > 0).sum();\n                     \
    \                                          ^\n  symbol:   method sum()\n  location:\
    \ interface Stream<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i < n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavuiw2hj.java:39)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3f8_ptm.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long maxTriples = 0;\n        for(int i =\
    \ 0; i < a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n \
    \               for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0){\n                        maxTriples += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ maxTriples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxiujchpd.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcw51fxh.java:39)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph1mch63j.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        long triple = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    triple = a[i] + a[j] + a[k];\n\
    \                    if (triple % 3 == 0) {\n                        sum += triple;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvqmoja7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboxvjq_v.java:39)\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i < n; i++) {\n         \
    \   a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int i\
    \ = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     long triple = a.stream().filter(x -> x < i).filter(x -> x < j).filter(x\
    \ -> x < k).sum();\n                    if(triple % 3 == 0) {\n              \
    \          max = Math.max(max, triple);\n                    }\n             \
    \   }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9kmgc6mi.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    /tmp/tmp9kmgc6mi.java:28: error: cannot find symbol\n                    long\
    \ triple = a.stream().filter(x -> x < i).filter(x -> x < j).filter(x -> x < k).sum();\n\
    \                                                                            \
    \                         ^\n  symbol:   method sum()\n  location: interface Stream<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(sum % 3 == 0) {\n  \
    \                      max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5p9e65f.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long max = 0;\n        for(int i = 1;\
    \ i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3w5x3k1v.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        result = Math.max(result,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbz89nyp.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        result++;\n                        sum += a[i];\n   \
    \                     sum += a[j];\n                        sum += a[k];\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75q7dk50.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4hldk8m.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long max = 0;\n        long sum = 0;\n        long sum2 = 0;\n        for(int\
    \ i = 0; i < n; i++) {\n            sum += a[i];\n            sum2 += a[i] * a[i];\n\
    \            if(sum > sum2) {\n                max = sum;\n                sum\
    \ = 0;\n                sum2 = 0;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6620ndd.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)){\n                   \
    \     max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                 \
    \   }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps239nir9.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshukjkzl.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach((i) -> a[i] = i * i - i\
    \ + 1);\n        long triples = 0;\n        Arrays.stream(a).forEach((i) -> Arrays.stream(a).forEach((j)\
    \ -> Arrays.stream(a).forEach((k) -> {\n            if (i < j && j < k && a[i]\
    \ + a[j] + a[k] == 3) {\n                triples += 1;\n            }\n      \
    \  })));\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp76mt9i92.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp76mt9i92.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach((i) -> a[i] = i * i - i +\
    \ 1);\n                                          ^\n/tmp/tmp76mt9i92.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if (i < j && j < k && a[i] + a[j] + a[k] == 3) {\n                  \
    \                  ^\n/tmp/tmp76mt9i92.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if (i < j && j < k && a[i] +\
    \ a[j] + a[k] == 3) {\n                                           ^\n/tmp/tmp76mt9i92.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        if (i < j && j < k && a[i] + a[j] + a[k] == 3) {\n                  \
    \                                ^\n5 errors\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        triples +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \     return triples;\n    }\n    public static void main(String[] args) {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefc802v_.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz09xxuit.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        long triple = 0;\n\
    \        long triples = 0;\n        long triple = 0;\n        long triples = 0;\n\
    \        long triple = 0;\n        long triples = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp47kpjzav.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp47kpjzav.java:25: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:26:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:27: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:28: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:29: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:30:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:31: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:32: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:33: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:34:\
    \ error: variable triples is already defined in method getMaxTriples(long)\n \
    \       long triples = 0;\n             ^\n/tmp/tmp47kpjzav.java:35: error: variable\
    \ triple is already defined in method getMaxTriples(long)\n        long triple\
    \ = 0;\n             ^\n/tmp/tmp47kpjzav.java:36: error: variable triples is already\
    \ defined in method getMaxTriples(long)\n        long triples = 0;\n         \
    \    ^\n/tmp/tmp47kpjzav.java:37: error: variable triple is already defined in\
    \ method getMaxTriples(long)\n        long triple = 0;\n             ^\n/tmp/tmp47kpjzav.java:38:\
    \ error: variable triples is already defined in method getMa"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68n56rgn.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i +\
    \ 1);\n        return Arrays.stream(a).filter(i -> i < n && i < n && i < n).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm68vvfo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpqm68vvfo.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i + 1);\n\
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple82 = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxhrxg7z.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_dysvm0.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsrujn9y.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    long triple = sum - a.get(i) -\
    \ a.get(j) - a.get(k);\n                    if(triple % 3 == 0) {\n          \
    \              max = Math.max(max, triple);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubj8yre1.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i +\
    \ 1);\n        return Arrays.stream(a).filter(i -> i < n && i < n && i < n).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm68vvfo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmpqm68vvfo.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Arrays.stream(a).forEach(i -> a[i] = i * i - i + 1);\n\
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3uk4zt6l.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp496rcmjg.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    long triple = a.get(i) + a.get(j)\
    \ + a.get(k);\n                    if(triple % 3 == 0) {\n                   \
    \     if(max < triple) {\n                            max = triple;\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_dwbo5h.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4hldk8m.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long triples = 0;\n        long sum = 0;\n  \
    \      long sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n      \
    \  long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long\
    \ sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11\
    \ = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 =\
    \ 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n\
    \        long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n \
    \       long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n  \
    \      long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n   \
    \     long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n    \
    \    long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n     \
    \   long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n      \
    \  long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n       \
    \ long sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long\
    \ sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45\
    \ = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long sum48 =\
    \ 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n\
    \        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n \
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n  \
    \      long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n   \
    \     long sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n    \
    \    long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n     \
    \   long sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n      \
    \  long sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n       \
    \ long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long\
    \ sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long sum79\
    \ = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxv6mp9m3.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>(n);\n        for(int i = 1; i < n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprp6obpwn.java:20: error: no suitable constructor found for ArrayList(long)\n\
    \        ArrayList<Integer> a = new ArrayList<Integer>(n);\n                 \
    \              ^\n    constructor ArrayList.ArrayList(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    constructor\
    \ ArrayList.ArrayList(Collection<? extends Integer>) is not applicable\n     \
    \ (argument mismatch; long cannot be converted to Collection<? extends Integer>)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs56kv_p.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94jljxjj.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> i = i * i - i + 1);\n\
    \        long max = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6fvtvod4.java:104: error: ';' expected\n        long triple\n \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n      \
    \          for(int k = j+1; k < a.size(); k++) {\n                    long triple\
    \ = a.get(i) + a.get(j) + a.get(k);\n                    if(triple % 3 == 0) {\n\
    \                        if(triple > max) {\n                            max =\
    \ triple;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpis1jg9ap.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        a.add(1);\n        a.add(3);\n        a.add(7);\n\
    \        a.add(13);\n        a.add(21);\n        long triples = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * a.get(i)) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3d4p26i.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    long triple = a.get(i) + a.get(j)\
    \ + a.get(k);\n                    if(triple % 3 == 0) {\n                   \
    \     if(max < triple) {\n                            max = triple;\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_dwbo5h.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 0);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long sum = 0;\n        long max = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            sum += a[i];\n            if(sum\
    \ % 3 == 0) {\n                triples += 1;\n                max = Math.max(max,\
    \ sum);\n            }\n        }\n        return triples;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdw18q4wh.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kax2uws.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            sum += i * i - i + 1;\n            a.add(i);\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(sum % 3 == 0) {\n          \
    \              max = Math.max(max, sum);\n                    }\n            \
    \    }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3dtm8u8.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i);\n                  ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs56kv_p.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshukjkzl.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzkgw_t1q.java:37)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        sum\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_zku1jtr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs56kv_p.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    long tripleSum = a.get(i) + a.get(j)\
    \ + a.get(k);\n                    if(tripleSum > max && tripleSum % 3 == 0) {\n\
    \                        max = tripleSum;\n                    }\n           \
    \     }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4tx6r1q.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i < n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3le96fbr.java:37)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long sum = 0;\n        long count = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            long j = i;\n            while (j > 0) {\n             \
    \   long k = j - 1;\n                while (k >= 0) {\n                    sum\
    \ += a[k] * a[k] * a[k];\n                    k--;\n                }\n      \
    \          j--;\n            }\n            if (sum % 3 == 0) {\n            \
    \    count++;\n            }\n            sum = 0;\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0d7wwut7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n/tmp/tmp0d7wwut7.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    sum += a[k] * a[k] * a[k];\n         \
    \                    ^\n/tmp/tmp0d7wwut7.java:30: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    sum += a[k] * a[k] *\
    \ a[k];\n                                    ^\n/tmp/tmp0d7wwut7.java:30: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \         sum += a[k] * a[k] * a[k];\n                                       \
    \    ^\n4 errors\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            sum += i * i - i + 1;\n            a.add(i);\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum && max < a.get(i) * a.get(j) * a.get(k)) {\n                        max\
    \ = a.get(i) * a.get(j) * a.get(k);\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp14kzvkki.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i);\n                  ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                    }\n                }\n            }\n        }\n  \
    \      return max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv4av3bcd.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long sum = 0;\n        for(int i = 1;\
    \ i < n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        sum\
    \ += a.get(i);\n                        sum += a.get(j);\n                   \
    \     sum += a.get(k);\n                    }\n                }\n           \
    \ }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s7_hjvj.java:39)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpingr0i6l.java:39)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuo9yvplo.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3f8_ptm.java:37)\n"
  stdout: ''
  timestamp: 1659797987
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n         \
    \       for(int k = 1; k <= n; k++) {\n                    if(i + j + k == a.get(k))\
    \ {\n                        ans += 1;\n                    }\n              \
    \  }\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.getMaxTriples(tmpsu2ek825.java:28)\n\tat Problem.main(tmpsu2ek825.java:37)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsrujn9y.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    triple = a[i] + a[j] + a[k];\n              \
    \      if (triple % 3 == 0) {\n                        triples += 1;\n       \
    \             }\n                }\n            }\n        }\n        return triples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptmpnypxo.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrxqnpte.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0){\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8pwuva0.java:37)\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffrycjyy.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n        }\n\
    \        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n        \
    \    for(int j = i + 1; j < a.size(); j++) {\n                for(int k = j +\
    \ 1; k < a.size(); k++) {\n                    if(sum - a.get(i) - a.get(j) -\
    \ a.get(k) % 3 == 0) {\n                        max = Math.max(max, a.get(i) +\
    \ a.get(j) + a.get(k));\n                    }\n                }\n          \
    \  }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pmwhj2s.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == (3 * i)) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgs8hop6.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffrycjyy.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj70ye26_.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> i = i * i - i + 1);\n\
    \        long triples = Arrays.stream(a).filter(i -> i < n && i < n && i < n).count();\n\
    \        return triples;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh_dqayg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        ans\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rah_bxu.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++){\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++){\n            for(int j = i + 1; j < a.size(); j++){\n  \
    \              for(int k = j + 1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgolkz7gu.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i + 1; j < a.size(); j++){\n      \
    \          for(int k = j + 1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0){\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nud4w3m.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long tripleCount = 0;\n        for(int i = 1;\
    \ i < n; i++) {\n            for(int j = i; j < n; j++) {\n                for(int\
    \ k = j; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n  \
    \                      tripleCount++;\n                    }\n               \
    \ }\n            }\n        }\n        return tripleCount;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp97dp39.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] == 3) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd57eabvb.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    long\
    \ triple = a.get(i) + a.get(j) + a.get(k);\n                    if(triple % 3\
    \ == 0) {\n                        max = Math.max(max, triple);\n            \
    \        }\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6y79lhu.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a[i] + a[j] + a[k] == 3) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6jcbfsu7.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>(n);\n        for(int i = 1; i < n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl4n0gf69.java:20: error: no suitable constructor found for ArrayList(long)\n\
    \        ArrayList<Integer> a = new ArrayList<Integer>(n);\n                 \
    \              ^\n    constructor ArrayList.ArrayList(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from long to int)\n    constructor\
    \ ArrayList.ArrayList(Collection<? extends Integer>) is not applicable\n     \
    \ (argument mismatch; long cannot be converted to Collection<? extends Integer>)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbb14a3ui.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6k4jww2.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboxvjq_v.java:39)\n"
  stdout: ''
  timestamp: 1659797986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_3mq_ln.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, i);\n                        max = Math.max(max, j);\n     \
    \                   max = Math.max(max, k);\n                    }\n         \
    \       }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1v9148c.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == (3 * i) + 3 * j + 3 * k) {\n      \
    \                  max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0fdp8_n.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffrycjyy.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        sum\
    \ += a.get(i);\n                        sum += a.get(j);\n                   \
    \     sum += a.get(k);\n                    }\n                }\n           \
    \ }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcp19j6l9.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++){\n      \
    \      a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++){\n            for(int j = i + 1; j < a.size(); j++){\n\
    \                for(int k = j + 1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo391_zp.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvqgcprg.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long ans = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        ans++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgg32ugvk.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrxqnpte.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long triple = 0;\n        long triple2 = 0;\n\
    \        long triple3 = 0;\n        long triple4 = 0;\n        long triple5 =\
    \ 0;\n        long triple6 = 0;\n        long triple7 = 0;\n        long triple8\
    \ = 0;\n        long triple9 = 0;\n        long triple10 = 0;\n        long triple11\
    \ = 0;\n        long triple12 = 0;\n        long triple13 = 0;\n        long triple14\
    \ = 0;\n        long triple15 = 0;\n        long triple16 = 0;\n        long triple17\
    \ = 0;\n        long triple18 = 0;\n        long triple19 = 0;\n        long triple20\
    \ = 0;\n        long triple21 = 0;\n        long triple22 = 0;\n        long triple23\
    \ = 0;\n        long triple24 = 0;\n        long triple25 = 0;\n        long triple26\
    \ = 0;\n        long triple27 = 0;\n        long triple28 = 0;\n        long triple29\
    \ = 0;\n        long triple30 = 0;\n        long triple31 = 0;\n        long triple32\
    \ = 0;\n        long triple33 = 0;\n        long triple34 = 0;\n        long triple35\
    \ = 0;\n        long triple36 = 0;\n        long triple37 = 0;\n        long triple38\
    \ = 0;\n        long triple39 = 0;\n        long triple40 = 0;\n        long triple41\
    \ = 0;\n        long triple42 = 0;\n        long triple43 = 0;\n        long triple44\
    \ = 0;\n        long triple45 = 0;\n        long triple46 = 0;\n        long triple47\
    \ = 0;\n        long triple48 = 0;\n        long triple49 = 0;\n        long triple50\
    \ = 0;\n        long triple51 = 0;\n        long triple52 = 0;\n        long triple53\
    \ = 0;\n        long triple54 = 0;\n        long triple55 = 0;\n        long triple56\
    \ = 0;\n        long triple57 = 0;\n        long triple58 = 0;\n        long triple59\
    \ = 0;\n        long triple60 = 0;\n        long triple61 = 0;\n        long triple62\
    \ = 0;\n        long triple63 = 0;\n        long triple64 = 0;\n        long triple65\
    \ = 0;\n        long triple66 = 0;\n        long triple67 = 0;\n        long triple68\
    \ = 0;\n        long triple69 = 0;\n        long triple70 = 0;\n        long triple71\
    \ = 0;\n        long triple72 = 0;\n        long triple73 = 0;\n        long triple74\
    \ = 0;\n        long triple75 = 0;\n        long triple76 = 0;\n        long triple77\
    \ = 0;\n        long triple78 = 0;\n        long triple79 = 0;\n        long triple80\
    \ = 0;\n        long triple81 = 0;\n        long triple82 = 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxhrxg7z.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvqgcprg.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        for(int i = 1; i < n;\
    \ i++){\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n    \
    \            for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3){\n                        sum = sum + a.get(i);\n\
    \                        sum = sum + a.get(j);\n                        sum =\
    \ sum + a.get(k);\n                    }\n                }\n            }\n \
    \       }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabs4rb_c.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i)){\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp80m4w0mq.java:37)\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triples = 0;\n        long sum = 0;\n        for(int i = 0; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3) {\n\
    \                        triples += 1;\n                        sum += a[i];\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3g3ycq1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>(n);\n        a.add(1);\n        for(int i = 1; i < n; i++)\
    \ {\n            for(int j = i+1; j < n; j++) {\n                for(int k = j+1;\
    \ k < n; k++) {\n                    if(a.get(i) + a.get(j) + a.get(k) % 3 ==\
    \ 0) {\n                        return 1l;\n                    }\n          \
    \      }\n            }\n        }\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm_r2ll.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        List<Integer> a = new ArrayList<>(n);\n                          ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i; j < n; j++) {\n                for(int k = j; k < n; k++) {\n       \
    \             if(a[i] + a[j] + a[k] == 3) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrxqnpte.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797988
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktk5ir_8.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797989
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max, a.get(i)\
    \ + a.get(j) + a.get(k));\n                    }\n                }\n        \
    \    }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9sim3vnd.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            a.add(i * i - i + 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659797984
