language: java
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long max = 0;\n        long sum = 0;\n        for(int i = 0; i < a.length;\
    \ i++) {\n            sum += a[i];\n            if(sum % 3 == 0) {\n         \
    \       max = Math.max(max, sum);\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23qlwhwg.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long ans = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            sum += a[i];\n            if (sum % 3 == 0) {\n             \
    \   ans += 1;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxh_48rz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[n];\n        Arrays.fill(a, 1);\n        Arrays.sort(a);\n  \
    \      long triple = 0;\n        long tripleCount = 0;\n        long tripleMax\
    \ = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = i; j < n;\
    \ j++) {\n                for(int k = j; k < n; k++) {\n                    if(a[i]\
    \ + a[j] + a[k] == 3) {\n                        tripleCount++;\n            \
    \            if(triple < a[i]) {\n                            triple = a[i];\n\
    \                        }\n                        if(triple < a[j]) {\n    \
    \                        triple = a[j];\n                        }\n         \
    \               if(triple < a[k]) {\n                            triple = a[k];\n\
    \                        }\n                        tripleMax = triple;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ tripleCount;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5r08vr1.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long a[] = new long[n];\n                        \
    \    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long sum = 0;\n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n            sum += i;\n   \
    \     }\n        long max = 0;\n        for(int i = 0; i < a.size(); i++) {\n\
    \            for(int j = i + 1; j < a.size(); j++) {\n                for(int\
    \ k = j + 1; k < a.size(); k++) {\n                    if(sum == (3 * sum)) {\n\
    \                        if(max < a.get(i) + a.get(j) + a.get(k)) {\n        \
    \                    max = a.get(i) + a.get(j) + a.get(k);\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        return max;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzbqy9qy.java:23: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n        \
    \    a.add(i * i - i + 1);\n        }\n        long triples = 0;\n        for(int\
    \ i = 1; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpycz5y9ei.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n       \
    \     sum += i;\n        }\n        for(int i = 0; i < a.size(); i++) {\n    \
    \        for(int j = i + 1; j < a.size(); j++) {\n                for(int k =\
    \ j + 1; k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ == sum) {\n                        if(a.get(i) * a.get(j) * a.get(k) % 3 ==\
    \ 0) {\n                            max = Math.max(max, a.get(i) * a.get(j) *\
    \ a.get(k));\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mlnk_55.java:24: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        return a.stream().filter(i -> i < a.size()\
    \ && i < a.size() && i < a.size()).count();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxopf3qt.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        long max = 0;\n        for(int i = 1;\
    \ i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++)\
    \ {\n                for(int k = j+1; k < a.size(); k++) {\n                 \
    \   if(a.get(i) + a.get(j) + a.get(k) == 3) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4esppq5.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ i);\n                        max = Math.max(max, j);\n                     \
    \   max = Math.max(max, k);\n                    }\n                }\n      \
    \      }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ct7kdbw.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++){\n            for(int j = i+1; j < a.size(); j++){\n        \
    \        for(int k = j+1; k < a.size(); k++){\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == (3 * i) + (3 * j) + (3 * k)){\n                   \
    \     max = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                 \
    \   }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps239nir9.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        a.add(1l);\n        a.add(3l);\n       \
    \ a.add(7l);\n        a.add(13l);\n        a.add(21l);\n        long ans = 0;\n\
    \        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++)\
    \ {\n                for(int k = 1; k < n; k++) {\n                    if(i +\
    \ j + k == a.get(k)) {\n                        ans += 1;\n                  \
    \  }\n                }\n            }\n        }\n        return ans;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9877xadc.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        long sum = 0;\n     \
    \   for(int i = 1; i < n; i++) {\n            a.add(i, i * i - i + 1);\n     \
    \       sum += i;\n        }\n        for(int i = 0; i < n; i++) {\n         \
    \   for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n\
    \                    if(i != j && j != k && k != i) {\n                      \
    \  long tripleSum = sum;\n                        for(int l = 0; l < n; l++) {\n\
    \                            tripleSum -= a[l];\n                        }\n \
    \                       if(tripleSum == 0) continue;\n                       \
    \ if(tripleSum > max) {\n                            max = tripleSum;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqggzu_e.java:24: error: no suitable method found for add(int,int)\n\
    \            a.add(i, i * i - i + 1);\n             ^\n    method List.add(int,Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method AbstractList.add(int,Long) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Long)\n    method ArrayList.add(int,Long) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Long)\n/tmp/tmpnqggzu_e.java:33:\
    \ error: array required, but ArrayList<Long> found\n                         \
    \   tripleSum -= a[l];\n                                          ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i < n;\
    \ i++) {\n            for(int j = i+1; j < n; j++) {\n                for(int\
    \ k = j+1; k < n; k++) {\n                    if(i+j+k == n) {\n             \
    \           a.add(i*i-i+1);\n                        a.add(j*j-i+1);\n       \
    \                 a.add(k*k-j+1);\n                        max = Math.max(max,\
    \ Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtcfdhwf.java:30: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpwtcfdhwf.java:30: error: ')' expected\n    }\n     ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n\
    \    public static void main(String[] args) {\n                      ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public\
    \ static void main(String[] args) {\n                            ^\n/tmp/tmpwtcfdhwf.java:31:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                                   ^\n/tmp/tmpwtcfdhwf.java:31: error: ')'\
    \ expected\n    public static void main(String[] args) {\n                   \
    \                 ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \  ^\n/tmp/tmpwtcfdhwf.java:31: error: ')' expected\n    public static void main(String[]\
    \ args) {\n                                            ^\n/tmp/tmpwtcfdhwf.java:32:\
    \ error: ')' expected\n    assert(getMaxTriples((5l)) == (1l));\n          ^\n\
    /tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n           ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n                        ^\n/tmp/tmpwtcfdhwf.java:32:\
    \ error: ')' expected\n    assert(getMaxTriples((5l)) == (1l));\n            \
    \             ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n                          ^\n/tmp/tmpwtcfdhwf.java:32: error: ')'\
    \ expected\n    assert(getMaxTriples((5l)) == (1l));\n                       \
    \                ^\n/tmp/tmpwtcfdhwf.java:32: error: ')' expected\n    assert(getMaxTriples((5l))\
    \ == (1l));\n                                        ^\n/tmp/"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long max = 0;\n        for(int\
    \ i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++)\
    \ {\n                for(int k = j + 1; k < a.size(); k++) {\n               \
    \     if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max\
    \ = Math.max(max, a.get(i) + a.get(j) + a.get(k));\n                    }\n  \
    \              }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4hldk8m.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvqgcprg.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long max = 0;\n        for(int i = 0; i <\
    \ a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n    \
    \            for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) == 3 * i) {\n                        max = Math.max(max,\
    \ a.get(i) + a.get(j) + a.get(k));\n                    }\n                }\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x3y2ya0.java:22: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long max = 0;\n        for(int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - i + 1);\n        }\n        for(int i = 0;\
    \ i < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n\
    \                for(int k = j + 1; k < a.size(); k++) {\n                   \
    \ if(a.get(i) + a.get(j) + a.get(k) == 3 * i) {\n                        max =\
    \ Math.max(max, i);\n                        max = Math.max(max, j);\n       \
    \                 max = Math.max(max, k);\n                    }\n           \
    \     }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkcceke3w.java:23: error: no suitable method found for add(int)\n\
    \            a.add(i * i - i + 1);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i+1; j < a.size(); j++) {\n    \
    \            for(int k = j+1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result++;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqj0g1_ko.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        long result = 0;\n        for(int i = 0; i\
    \ < a.size(); i++) {\n            for(int j = i + 1; j < a.size(); j++) {\n  \
    \              for(int k = j + 1; k < a.size(); k++) {\n                    if(a.get(i)\
    \ + a.get(j) + a.get(k) % 3 == 0) {\n                        result += 1;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_6gtcdt.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        long temp = 0;\n    \
    \    for(int i = 1; i <= n; i++) {\n            temp = i * i - i + 1;\n      \
    \      a.add(temp);\n            sum += temp;\n        }\n        long max = 0;\n\
    \        for(int i = 0; i < a.size(); i++) {\n            for(int j = i + 1; j\
    \ < a.size(); j++) {\n                for(int k = j + 1; k < a.size(); k++) {\n\
    \                    if(a.get(i) + a.get(j) + a.get(k) == sum) {\n           \
    \             if(max < a.get(i) + a.get(j) + a.get(k)) {\n                   \
    \         max = a.get(i) + a.get(j) + a.get(k);\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1rnzemjz.java:43)\n"
  stdout: ''
