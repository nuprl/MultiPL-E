name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String\
  \ text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', "        String[] words = text.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for (String word : words) {\n            if (first) {\n   \
    \             first = false;\n            } else {\n                sb.append(\"\
    \ \");\n            }\n            sb.append(word);\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        sb.replace(\" \", \"_\");\n        if (sb.length() > 2) {\n\
    \            sb.replace(\" \", \"-\");\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"_\"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean first = true;\n        for (String word\
    \ : words) {\n            if (first) {\n                first = false;\n     \
    \       } else {\n                sb.append(\" \");\n            }\n         \
    \   sb.append(word.replaceAll(\"\\\\s+\", \"-\"));\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");']
stop_tokens:
- "\n    }\n"
