name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String\
  \ text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', "        String[] words = text.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for (String word : words) {\n            if (first) {\n   \
    \             first = false;\n            } else {\n                sb.append(\"\
    \ \");\n            }\n            sb.append(word);\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        sb.replace(\" \", \"_\");\n        if (sb.length() > 2) {\n\
    \            sb.replace(\" \", \"-\");\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"_\"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean first = true;\n        for (String word\
    \ : words) {\n            if (first) {\n                first = false;\n     \
    \       } else {\n                sb.append(\" \");\n            }\n         \
    \   sb.append(word.replaceAll(\"\\\\s+\", \"-\"));\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String word : words) {\n            sb.append(word.replaceAll(\"\
    \\\\s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     StringBuilder sb = new StringBuilder(text);\n        boolean changed = false;\n\
    \        for (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
    \            if (c == ' ') {\n                sb.setCharAt(i, '_');\n        \
    \        changed = true;\n            } else if (c != ' ' && c != '_') {\n   \
    \             sb.setCharAt(i, '_');\n                changed = true;\n       \
    \     }\n        }\n        if (changed) {\n            return sb.toString();\n\
    \        } else {\n            return text;\n        }", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', "        StringBuilder sb = new\
    \ StringBuilder(text);\n        sb.replace(\" \", \"_\");\n        if (sb.length()\
    \ > 2) {\n            sb.replace(\" \", \"-\");\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        boolean isFirst = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(isFirst) {\n                 \
    \   isFirst = false;\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (sb.length() > 0) {\n   \
    \             sb.append(\" \");\n            }\n            sb.append(word);\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
    \ < words.length; i++) {\n            if (words[i].length() > 2) {\n         \
    \       for (int j = 0; j < words[i].length() - 2; j++) {\n                  \
    \  sb.append(\"_\");\n                }\n                sb.append(words[i].substring(words[i].length()\
    \ - 2));\n            } else {\n                sb.append(words[i]);\n       \
    \     }\n            sb.append(\" \");\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        StringBuilder sb = new StringBuilder();\n\
    \        boolean isSpace = false;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n\
    \                isSpace = true;\n            } else if (isSpace) {\n        \
    \        sb.append('_');\n                isSpace = false;\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        int i = 0;\n        while (i < sb.length()) {\n           \
    \ if (sb.charAt(i) == ' ') {\n                i++;\n                while (i <\
    \ sb.length() && sb.charAt(i) == ' ') {\n                    i++;\n          \
    \      }\n                sb.deleteCharAt(i);\n            }\n            i++;\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for(int i = 0; i < words.length; i++) {\n  \
    \          sb.append(words[i]);\n            if((i+1) < words.length && words[i].equals(words[i+1]))\
    \ {\n                sb.append(\" \");\n            }\n            else {\n  \
    \              sb.append(\" _\");\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String word : words) {\n            sb.append(word.replaceAll(\"\
    \\\\s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"-\"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    boolean first = true;\n        for (String word : words) {\n            if\
    \ (first) {\n                first = false;\n            } else {\n          \
    \      sb.append(\" \");\n            }\n            sb.append(word);\n      \
    \  }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean first = true;\n        for (String word\
    \ : words) {\n            if (first) {\n                first = false;\n     \
    \       } else {\n                sb.append(\" \");\n            }\n         \
    \   sb.append(word);\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    boolean first = true;\n        for (String word : words) {\n            if\
    \ (first) {\n                first = false;\n            } else {\n          \
    \      sb.append(\" \");\n            }\n            sb.append(word.replaceAll(\"\
    \\\\s+\", \"_\"));\n        }\n        return sb.toString();", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            sb.append(word).append(\" \"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder();\n        boolean isFirst\
    \ = true;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                if (isFirst)\
    \ {\n                    isFirst = false;\n                } else {\n        \
    \            sb.append('_');\n                }\n            } else {\n      \
    \          sb.append(c);\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder();\n        boolean isSpace\
    \ = false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                isSpace =\
    \ true;\n            } else if (isSpace) {\n                sb.append('_');\n\
    \                isSpace = false;\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean space = false;\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if (c == ' ') {\n                space = true;\n            } else if\
    \ (space) {\n                sb.append('_');\n                space = false;\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            sb.append(word.replaceAll(\"\\\\\
    s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean first = true;\n        for(int i\
    \ = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n     \
    \       if(c == ' ') {\n                if(!first) {\n                    sb.append('_');\n\
    \                }\n                first = false;\n            } else {\n   \
    \             sb.append(c);\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            sb.append(word.replaceAll(\"\\\\\
    s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\"\
    \ \", \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"\
    _\");\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String word : words) {\n            sb.append(word).append(\"\
    \ \");\n        }\n        if (sb.length() > 2) {\n            sb.replace(sb.length()\
    \ - 2, sb.length(), \"\");\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean isConsecutive\
    \ = false;\n        boolean isFirst = true;\n        for(int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if(c == ' ') {\n \
    \               if(!isFirst) {\n                    isConsecutive = true;\n  \
    \              }\n                isFirst = false;\n            } else {\n   \
    \             if(!isConsecutive) {\n                    sb.append(c);\n      \
    \          } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n                isConsecutive = false;\n            }\n  \
    \      }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  "        StringBuilder sb = new StringBuilder();\n        boolean isConsecutive\
    \ = false;\n        boolean isFirst = true;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n\
    \                if (isFirst) {\n                    isFirst = false;\n      \
    \          } else {\n                    isConsecutive = true;\n             \
    \   }\n            } else {\n                if (isConsecutive) {\n          \
    \          sb.append(\"-\");\n                    isConsecutive = false;\n   \
    \             }\n                sb.append(c);\n            }\n        }\n   \
    \     return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        boolean last = false;\n        for(int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if(c == ' ') {\n \
    \               if(first) {\n                    first = false;\n            \
    \    } else {\n                    last = true;\n                }\n         \
    \   } else {\n                if(!first) {\n                    sb.append(c);\n\
    \                }\n                first = false;\n            }\n        }\n\
    \        if(!last) {\n            sb.append(c);\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', "        String[] words = text.split(\" \");\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for (String word : words) {\n            if (first) {\n             \
    \   first = false;\n            } else {\n                sb.append(\" \");\n\
    \            }\n            sb.append(word);\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(first) {\n                   \
    \ first = false;\n                } else {\n                    sb.append(\"-\"\
    );\n                }\n            } else {\n                sb.append(c);\n \
    \           }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (char c : text.toCharArray()) {\n\
    \            if (c == ' ') {\n                if (first) {\n                 \
    \   first = false;\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                sb.append(word);\n                first = false;\n\
    \            } else {\n                sb.append(\" \");\n                sb.append(word);\n\
    \            }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean isFirst = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(!isFirst) {\n                \
    \    sb.append(\"_\");\n                }\n                isFirst = false;\n\
    \            } else {\n                isFirst = true;\n            }\n      \
    \      sb.append(c);\n        }\n        return sb.toString();", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                first = false;\n            } else {\n    \
    \            sb.append(\" \");\n            }\n            sb.append(word);\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            sb.append(word.replaceAll(\"\\\\s+\", \"_\"));\n   \
    \         if (sb.length() > 2) {\n                sb.setCharAt(sb.length() - 1,\
    \ '-');\n            }\n        }\n        return sb.toString();"]
stop_tokens:
- "\n    }\n"
