name: HumanEval_61_correct_bracketing
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
  \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
  \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"\
  ))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n \
  \   // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
  \ correctBracketing(String brackets) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
  ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n   \
  \ assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
  )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
  (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
  )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"\
  ()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        Stack<Character> stack = new Stack<>();\n        for(int i\
    \ = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();",
  "        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                stack.push(c);\n            } else if(c == ')') {\n         \
    \       char top = stack.pop();\n                if(top != '(') {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return stack.isEmpty();", "        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();", "  \
    \      Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                stack.push(c);\n            } else if(c == ')') {\n         \
    \       if(!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else {\n                return false;\n            }\n    \
    \    }\n        return stack.isEmpty();", "        Stack<Character> stack = new\
    \ Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if\
    \ (c == '(') {\n                stack.push(c);\n            } else if (c == ')')\
    \ {\n                if (stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != '(') {\n                    return false;\n                }\n     \
    \       }\n        }\n        return stack.isEmpty();", "        List<String>\
    \ openingBrackets = new ArrayList<>();\n        List<String> closingBrackets =\
    \ new ArrayList<>();\n        for (char c : brackets.toCharArray()) {\n      \
    \      if (c == '(') {\n                openingBrackets.add(c);\n            }\
    \ else if (c == ')') {\n                closingBrackets.add(c);\n            }\n\
    \        }\n        if (openingBrackets.size() != closingBrackets.size()) {\n\
    \            return false;\n        }\n        Iterator<String> openingBracketsIterator\
    \ = openingBrackets.iterator();\n        Iterator<String> closingBracketsIterator\
    \ = closingBrackets.iterator();\n        while (openingBracketsIterator.hasNext()\
    \ && closingBracketsIterator.hasNext()) {\n            String openingBracket =\
    \ openingBracketsIterator.next();\n            String closingBracket = closingBracketsIterator.next();\n\
    \            if (!openingBracket.equals(closingBracket)) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        Stack<Character>\
    \ stack = new Stack<>();\n        boolean result = true;\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  result = false;\n                    break;\n                }\n          \
    \      char top = stack.pop();\n                if (top != '(') {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        boolean result = true;\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ != '(') {\n                result = false;\n            }\n        }\n     \
    \   return result;", "        List<String> openingBrackets = new ArrayList<>();\n\
    \        List<String> closingBrackets = new ArrayList<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ openingBrackets.add(c);\n            } else if (c == ')') {\n              \
    \  closingBrackets.add(c);\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            return false;\n        }\n       \
    \ Set<String> openingBracketsSet = new HashSet<>(openingBrackets);\n        Set<String>\
    \ closingBracketsSet = new HashSet<>(closingBrackets);\n        return openingBracketsSet.containsAll(closingBracketsSet);",
  "        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                stack.push(c);\n            } else if (c == ')') {\n    \
    \            if (stack.isEmpty()) {\n                    return false;\n     \
    \           }\n                char top = stack.pop();\n                if (top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();", "        Stack<Character> stack\
    \ = new Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n   \
    \         char c = brackets.charAt(i);\n            if(c == '(') {\n         \
    \       stack.push(c);\n            } else if(c == ')') {\n                if(!stack.isEmpty()\
    \ && stack.peek() == '(') {\n                    stack.pop();\n              \
    \  } else {\n                    return false;\n                }\n          \
    \  }\n        }\n        return !stack.isEmpty();", "        List<String> openingBrackets\
    \ = new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n\
    \        closingBracketsStack.add(brackets);\n        boolean result = true;\n\
    \        while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.remove(0);\n            String closingBracket = closingBracketsStack.remove(0);\n\
    \            if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \                closingBracketsStack.add(openingBracket);\n            } else\
    \ if (openingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;", "        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[' || c\
    \ == ']') {\n                if(!stack.isEmpty() && stack.peek() == '[') {\n \
    \                   stack.pop();\n                } else {\n                 \
    \   return false;\n                }\n            } else if(c == '{' || c == '}')\
    \ {\n                if(!stack.isEmpty() && stack.peek() == '{') {\n         \
    \           stack.pop();\n                } else {\n                    return\
    \ false;\n                }\n            }\n        }\n        return !stack.isEmpty();",
  "        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray())\
    \ {\n            if (c == '(') {\n                stack.push(c);\n           \
    \ } else if (c == ')') {\n                if (stack.isEmpty()) {\n           \
    \         return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();", "  \
    \      boolean result = true;\n        for(int i = 0; i < brackets.length(); i++)\
    \ {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n  \
    \              if(brackets.charAt(i+1) != '(') {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if(c == ')') {\n                if(brackets.charAt(i-1) != ')') {\n  \
    \                  result = false;\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        boolean result\
    \ = false;\n        List<String> openingBrackets = new ArrayList<>();\n      \
    \  List<String> closingBrackets = new ArrayList<>();\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean inBrackets = false;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c); // add opening\
    \ bracket\n                inBrackets = true;\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(c); // add closing bracket\n        \
    \        inBrackets = false;\n            } else if (inBrackets) {\n         \
    \       sb.append(c); // append character if in brackets\n            }\n    \
    \    }\n        if (openingBrackets.size() != closingBrackets.size()) {\n    \
    \        result = false;\n        } else {\n            result = true;\n     \
    \       for (int i = 0; i < openingBrackets.size(); i++) {\n                if\
    \ (!closingBrackets.contains(openingBrackets.get(i))) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;", "        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();", "        List<String> openingBrackets = new ArrayList<>();\n\
    \        List<String> closingBrackets = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack = new ArrayList<>();\n        List<String> closingBracketsStack\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack2 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack2 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack3 = new ArrayList<>();\n        List<String> closingBracketsStack3\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack4 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack4 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack5 = new ArrayList<>();\n        List<String> closingBracketsStack5\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack6 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack6 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack7 = new ArrayList<>();\n        List<String> closingBracketsStack7\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack8 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack8 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack9 = new ArrayList<>();\n        List<String> closingBracketsStack9\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack10 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack10 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack11 = new ArrayList<>();\n        List<String> closingBracketsStack11\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack12 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack12 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack13 = new ArrayList<>();\n        List<String> closingBracketsStack13\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack14 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack14 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack15 = new ArrayList<>();\n        List<String> closingBracketsStack15\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack16 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack16 = new ArrayList<>();\n        List<String>\
    \ openingBracketsStack17 = new ArrayList<>();\n        List<String> closingBracketsStack17\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack18 = new ArrayList<>();\n\
    \        List<String> closingBracketsStack18 = new ArrayList<>();\n        List<String>\
    \ openingBracket", "        List<String> openingBrackets = new ArrayList<>();\n\
    \        List<String> closingBrackets = new ArrayList<>();\n        for (char\
    \ c : brackets.toCharArray()) {\n            if (c == '(') {\n               \
    \ openingBrackets.add(c);\n            } else if (c == ')') {\n              \
    \  closingBrackets.add(c);\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            return false;\n        }\n       \
    \ Iterator<String> openingBracketsIterator = openingBrackets.iterator();\n   \
    \     Iterator<String> closingBracketsIterator = closingBrackets.iterator();\n\
    \        while (openingBracketsIterator.hasNext() && closingBracketsIterator.hasNext())\
    \ {\n            String openingBracket = openingBracketsIterator.next();\n   \
    \         String closingBracket = closingBracketsIterator.next();\n          \
    \  if (openingBracket.equals(closingBracket)) {\n                openingBracketsIterator.remove();\n\
    \                closingBracketsIterator.remove();\n            }\n        }\n\
    \        return openingBrackets.isEmpty() && closingBrackets.isEmpty();", "  \
    \      List<String> openingBrackets = new ArrayList<>();\n        List<String>\
    \ closingBrackets = new ArrayList<>();\n        List<String> openingBracketsStack\
    \ = new ArrayList<>();\n        List<String> closingBracketsStack = new ArrayList<>();\n\
    \        boolean bracketsAreCorrect = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openingBrackets.add(\"(\");\n                openingBracketsStack.add(\"\
    (\");\n            } else if (c == ')') {\n                closingBrackets.add(\"\
    )\");\n                closingBracketsStack.add(\")\");\n            } else if\
    \ (c == '[') {\n                openingBrackets.add(\"[\");\n                openingBracketsStack.add(\"\
    [\");\n            } else if (c == ']') {\n                closingBrackets.add(\"\
    ]\");\n                closingBracketsStack.add(\"]\");\n            } else if\
    \ (c == '{') {\n                openingBrackets.add(\"{\");\n                openingBracketsStack.add(\"\
    {\");\n            } else if (c == '}') {\n                closingBrackets.add(\"\
    }\");\n                closingBracketsStack.add(\"}\");\n            }\n     \
    \   }\n        while (!openingBracketsStack.isEmpty()) {\n            String openingBracket\
    \ = openingBracketsStack.remove(0);\n            String closingBracket = closingBracketsStack.remove(0);\n\
    \            if (openingBracket.equals(closingBracket)) {\n                bracketsAreCorrect\
    \ = false;\n            }\n        }\n        return bracketsAreCorrect;"]
stop_tokens:
- "\n    }\n"
