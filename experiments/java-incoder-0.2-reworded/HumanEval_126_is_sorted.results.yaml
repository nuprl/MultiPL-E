language: java
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        for\
    \ (long i : lst) {\n            if (i == last) return true;\n            last\
    \ = i;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjw6q12t.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = lst.get(0);\n        for\
    \ (long cur : lst) {\n            if (cur < prev) {\n                return false;\n\
    \            }\n            prev = cur;\n        }\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmp494ovvwh.java:30)\n\tat Problem.main(tmp494ovvwh.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = 0;\n        long curr =\
    \ lst.get(0);\n        boolean isSorted = true;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst.get(i) == curr) {\n\
    \                if (prev != curr) {\n                    isSorted = false;\n\
    \                    break;\n                }\n            }\n            prev\
    \ = curr;\n            curr = lst.get(i);\n        }\n        return isSorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpc9m7etjb.java:31)\n\tat Problem.main(tmpc9m7etjb.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long first = lst.get(0);\n        long\
    \ last = lst.get(lst.size()-1);\n        long mid = lst.get(lst.size()/2);\n \
    \       boolean isSorted = true;\n        for(int i = 1; i < lst.size(); i++)\
    \ {\n            if(lst.get(i) > mid) {\n                isSorted = false;\n \
    \               break;\n            }\n        }\n        if(isSorted) {\n   \
    \         if(first > last) {\n                return false;\n            }\n \
    \       }\n        return isSorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zufgrpl.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        boolean\
    \ isSorted = true;\n        for (long current : lst) {\n            if (current\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = current;\n        }\n        return isSorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmp213f_9ld.java:30)\n\tat Problem.main(tmp213f_9ld.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : lst) {\n            if(!set.contains(i))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            set.add(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzvyrnygw.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        long\
    \ curr = lst.get(1);\n        boolean isSorted = true;\n        for (int i = 2;\
    \ i < lst.size(); i++) {\n            if (lst.get(i) > last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            else\
    \ if (lst.get(i) < curr) {\n                isSorted = false;\n              \
    \  break;\n            }\n            last = lst.get(i);\n            curr = lst.get(i);\n\
    \        }\n        return isSorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 1\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpa91zm0tj.java:31)\n\tat Problem.main(tmpa91zm0tj.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean isSorted = true;\n        Set<Long>\
    \ set = new HashSet<Long>(lst);\n        Long last = lst.get(0);\n        for\
    \ (Long i : lst) {\n            if (set.contains(i)) {\n                isSorted\
    \ = false;\n                break;\n            }\n            if (i.compareTo(last)\
    \ > 0) {\n                isSorted = false;\n                break;\n        \
    \    }\n            last = i;\n        }\n        return isSorted;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3hlxieo.java:47)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = lst.get(0);\n        for\
    \ (long i : lst) {\n            if (i > prev) {\n                return false;\n\
    \            }\n            prev = i;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsg2o2eq.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) return true;\n\
    \        long first = lst.get(0);\n        long last = lst.get(lst.size() - 1);\n\
    \        boolean isSorted = true;\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            if (lst.get(i) < first) isSorted = false;\n            if (lst.get(i)\
    \ > last) isSorted = false;\n        }\n        return isSorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28b8lfbz.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for(Long num : lst) {\n            set.add(num);\n\
    \        }\n        for(Long num : set) {\n            result = result && (lst.indexOf(num)\
    \ == lst.lastIndexOf(num));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdy2p_5pd.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        Set<Long> set = new HashSet<>();\n\
    \        for(Long num : lst) {\n            set.add(num);\n        }\n       \
    \ for(Long num : set) {\n            if(!lst.contains(num)) {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypniau1c.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        long\
    \ curr = lst.get(1);\n        boolean isSorted = true;\n        for (int i = 2;\
    \ i < lst.size(); i++) {\n            if (lst.get(i) > curr) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst.get(i)\
    \ == last) {\n                isSorted = false;\n                break;\n    \
    \        }\n            last = curr;\n            curr = lst.get(i);\n       \
    \ }\n        return isSorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 1\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpu99dm2gq.java:31)\n\tat Problem.main(tmpu99dm2gq.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        long\
    \ prev = 0;\n        long current = lst.get(0);\n        for (long next : lst)\
    \ {\n            if (prev > current) {\n                result = false;\n    \
    \            break;\n            }\n            prev = current;\n            current\
    \ = next;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmplsphnsoh.java:32)\n\tat Problem.main(tmplsphnsoh.java:50)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() > 1) {\n           \
    \ Set<Long> set = new HashSet<>();\n            for (Long i : lst) {\n       \
    \         if (!set.contains(i)) {\n                    set.add(i);\n         \
    \       }\n            }\n            return !set.equals(lst);\n        } else\
    \ {\n            return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuh39gjro.java:45)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long i : lst) {\n            if (!set.contains(i))\
    \ {\n                set.add(i);\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4ms7ykn.java:45)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = 0;\n        for (long current\
    \ : lst) {\n            if (current < prev) {\n                return false;\n\
    \            }\n            prev = current;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaq1dphif.java:49)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        if\
    \ (lst.size() == 1) {\n            Long first = lst.get(0);\n            Long\
    \ last = lst.get(lst.size() - 1);\n            if (first == last) {\n        \
    \        result = false;\n            }\n        }\n        else if (lst.size()\
    \ > 1) {\n            Set<Long> set = new HashSet<>();\n            for (Long\
    \ i : lst) {\n                if (!set.contains(i)) {\n                    set.add(i);\n\
    \                }\n            }\n            if (set.size() == lst.size()) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv2wp_v39.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        long\
    \ curr = lst.get(1);\n        boolean flag = true;\n        for(int i = 2; i <\
    \ lst.size(); i++) {\n            if(lst.get(i) > last) {\n                flag\
    \ = false;\n                break;\n            }\n            last = curr;\n\
    \            curr = lst.get(i);\n        }\n        return flag;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 1\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpu99epamu.java:31)\n\tat Problem.main(tmpu99epamu.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of numbers, return whether or\
    \ not they are sorted\n    // in ascending order. If array list has more than\
    \ 1 duplicate of the same\n    // number, return false. Assume no negative numbers\
    \ and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : lst) {\n            if(!set.contains(i))\
    \ {\n                set.add(i);\n            } else {\n                result\
    \ = false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8f2gw7.java:44)\n"
  stdout: ''
