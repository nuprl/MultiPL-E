name: HumanEval_92_any_int
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that takes 3 numbers.\n    // Returns\
  \ true if one of the numbers is equal to the sum of the other two, and all numbers\
  \ are integers.\n    // Returns false in any other cases.\n    // Examples\n   \
  \ // >>> anyInt((float)5l, (float)2l, (float)7l)\n    // (true)\n    // >>> anyInt((float)3l,\
  \ (float)2l, (float)2l)\n    // (false)\n    // >>> anyInt((float)3l, (float)-2l,\
  \ (float)1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), (float)2l)\n   \
  \ // (false)\n    public static boolean anyInt(float x, float y, float z) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(anyInt((float)2l,\
  \ (float)3l, (float)1l) == (true));\n    assert(anyInt((2.5f), (float)2l, (float)3l)\
  \ == (false));\n    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));\n    assert(anyInt((float)2l,\
  \ (float)6l, (float)2l) == (false));\n    assert(anyInt((float)4l, (float)2l, (float)2l)\
  \ == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt((float)-4l,\
  \ (float)6l, (float)2l) == (true));\n    assert(anyInt((float)2l, (float)1l, (float)1l)\
  \ == (true));\n    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));\n\
  \    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));\n    }\n\n}\n"
completions: ['        return ((x + y + z) == (x + y + z));', '        return ((x
    + y + z) == (x + y + z));', '        return ((x + y + z) == (x + y + z));', " \
    \       float sum = x + y + z;\n        if (Float.isNaN(sum) || Float.isInfinite(sum))\
    \ {\n            return false;\n        }\n        if (sum == Float.POSITIVE_INFINITY)\
    \ {\n            return true;\n        }\n        if (sum == Float.NEGATIVE_INFINITY)\
    \ {\n            return true;\n        }\n        if (sum == Float.NaN) {\n  \
    \          return true;\n        }\n        if (sum % 1 == 0) {\n            return\
    \ true;\n        }\n        return false;", '        return ((x == (float)x +
    y) && (y == (float)y + z) && (z == (float)z + x));', "        float sum = x +\
    \ y + z;\n        if (Float.isNaN(sum)) {\n            return false;\n       \
    \ }\n        if (Float.isInfinite(sum)) {\n            return false;\n       \
    \ }\n        if (sum == 0) {\n            return false;\n        }\n        if\
    \ (sum < 0) {\n            return false;\n        }\n        if (sum > 0) {\n\
    \            return true;\n        }\n        double d = Math.sqrt(sum);\n   \
    \     if (d < 1) {\n            return true;\n        }\n        return false;",
  '        return (x == (float)x + y && y == (float)y + z && z == (float)z);', " \
    \       float sum = x + y + z;\n        if (sum == (int) sum) {\n            return\
    \ true;\n        }\n        return false;", "        float sum = (float) x + y;\n\
    \        if (sum == z) {\n            return true;\n        }\n        return\
    \ false;", '        return ((x + y + z) == (x + y + z));', "        float sum\
    \ = x + y + z;\n        return ((sum == x) || (sum == y) || (sum == z));", '        return
    (x == y || x == z || y == z);', "        float sum = x + y + z;\n        return\
    \ sum == (int) sum;", '        return (x == y || x == z || y == z);', "      \
    \  float sum = (x + y + z);\n        return ((sum == x) || (sum == y) || (sum\
    \ == z));", '        return (x == y || x == z || y == z);', "        float sum\
    \ = (float) x + y + z;\n        return sum == (float) x || sum == (float) y ||\
    \ sum == (float) z;", "        float sum = x + y + z;\n        if (sum == (float)sum)\
    \ {\n            return true;\n        }\n        return false;", "        float\
    \ sum = x + y + z;\n        return sum == (float) Math.sqrt(x * x + y * y + z\
    \ * z);", '        return ((x + y + z) == (x + y + z));']
stop_tokens:
- "\n    }\n"
