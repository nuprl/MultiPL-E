name: HumanEval_58_common
language: js
prompt: "//Return sorted unique common elements for two lists.\nfunction common(l1,\
  \ l2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
  \ 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2,\
  \ 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    var l3 = [];\n    for(var i = 0; i < l1.length; i++){\n       \
    \ if(l2.indexOf(l1[i]) != -1){\n            l3.push(l1[i]);\n        }\n    }\n\
    \    return unique(l3);\n}\n", "    return new Set([...l1].filter(x => l2.has(x)));\n\
    }\n", "  return [...(new Set(l1.filter(e => l2.includes(e)).sort()))];\n}\n",
  "  //helper function to sort uniques\n  function sortUnique(array) {\n    return\
    \ array.filter(function(item, pos) {\n      return array.indexOf(item) == pos;\n\
    \    })\n  }\n  //create new list of common items\n  let commonList = l1.filter(x\
    \ => l2.includes(x));\n  //use previous helper function to sort uniques\n  commonList\
    \ = sortUnique(commonList);\n  return commonList;\n}\n", "  var c1 = intersection(l1,\
    \ l2), c2 = intersection(l2, l1);\n  return Union(c1, c2);\n}\n", "\tvar l3 =\
    \ [];\n\tl1.sort();\n\tl2.sort();\n\tfor(var i = 0; i < l1.length; i++){\n\t\t\
    if(l2.indexOf(l1[i]) > -1 && l3.indexOf(l1[i]) == -1){\n\t\t\tl3.push(l1[i]);\n\
    \t\t}\n\t}\n\treturn l3;\n}\n", "\treturn uniq(intersection(l1, l2)).sort();\n\
    }\n", "\tvar l3 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(l2.indexOf(l1[i])\
    \ > -1 && l3.indexOf(l1[i]) == -1){\n\t\t\tl3.push(l1[i]);\n\t\t}\n\t}\n\treturn\
    \ l3;\n}", "  return sorted(intersect(l1, l2));\n}\n", "    var x = [...new Set(l1)];\n\
    \    var y = [...new Set(l2)];\n    var list = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        for(var j = 0; j < y.length; j++){\n            if(x[i] == y[j]){\n\
    \                list.push(x[i]);\n            }\n        }\n    }\n    return\
    \ list;\n}\n", "    return [...new Set(l1)].filter(e => l2.includes(e)).sort((a,\
    \ b) => a - b);\n}\n", "    //code\n    var newArr = [];\n    for(var i = 0; i\
    \ < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n          \
    \  if(l1[i] === l2[j]){\n                newArr.push(l1[i]);\n            }\n\
    \        }\n    }\n    var set = new Set(newArr);\n    var newArr = Array.from(set);\n\
    \    newArr.sort();\n    return newArr;\n}", "\treturn Array.from(new Set(l1.filter(x\
    \ => l2.includes(x)))).sort((a, b) => a - b);\n}\n", "    var l3 = [],\n     \
    \   is_val = true;\n    if(l1.length == 0 || l2.length == 0){\n        return\
    \ [];\n    }\n    for(var i = 0; i < l1.length; i++){\n        is_val = true;\n\
    \        for(var j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n\
    \                for(var k = 0; k < l3.length; k++){\n                    if(l3[k]\
    \ === l1[i]){\n                        is_val = false;\n                     \
    \   break;\n                    }\n                }\n                if(is_val){\n\
    \                    l3.push(l1[i]);\n                }\n            }\n     \
    \   }\n    }\n    return l3;\n}\n", "  return _.intersection(l1, l2).sort(function(a,\
    \ b){return a - b;});\n}\n", "  let common = [];\n  l1.forEach(function(element1){\n\
    \    l2.forEach(function(element2){\n      if(element1 == element2){\n       \
    \ common.push(element1);\n      }\n    });\n  });\n  return common.sort(function(a,\
    \ b){return a-b});\n}\n", "  var ret = [];\n  var s1 = l1.slice(0).sort();\n \
    \ var s2 = l2.slice(0).sort();\n  for(var i = 0, j = 0; i < s1.length; i++){\n\
    \    if(s1[i] === s2[j]){\n      ret.push(s1[i]);\n      j++;\n    }else if(s1[i]\
    \ > s2[j]){\n      j++;\n      i--;\n    }\n  }\n  return ret;\n}\n", "    l2.sort();\n\
    \    l1.sort();\n    return unique(l1.filter(function(val){\n        return val\
    \ <= l2[l2.length-1] && l2.indexOf(val) >= 0;\n    }));\n}\n", "  var output =\
    \ [];\n  var l1_sorted = l1.sort();\n  var l2_sorted = l2.sort();\n  var i = 0;\n\
    \  var j = 0;\n  while(i < l1_sorted.length && j < l2_sorted.length){\n    if(l1_sorted[i]\
    \ == l2_sorted[j]){\n      output.push(l1_sorted[i]);\n      i++;\n      j++;\n\
    \    }\n    else if(l1_sorted[i] < l2_sorted[j])\n      i++;\n    else\n     \
    \ j++;\n  }\n  return output;\n}\n", "    var s = {};\n    for(var i = 0; i <\
    \ l1.length; i++){\n        s[l1[i]] = 0;\n    }\n    for(var i = 0; i < l2.length;\
    \ i++){\n        if(s[l2[i]] !== undefined){\n            s[l2[i]] += 1;\n   \
    \     }\n    }\n    return Object.keys(s).sort();\n}\n", "    var set=new Set();\n\
    \    for(var i=0;i<l1.length;i++){\n        for(var j=0;j<l2.length;j++){\n  \
    \          if(l1[i]==l2[j]){\n                set.add(l1[i]);\n            }\n\
    \        }\n    }\n    return set.asList();\n}\n", "  var s = new Set(l1);\n \
    \ return [...new Set(l2.filter(x => s.has(x)))].sort((a, b) => a - b);\n}\n",
  "  var l = [];\n  l1.forEach(function(e){\n    l2.forEach(function(e2){\n      if(e\
    \ == e2 && l.indexOf(e) < 0)\n        l.push(e);\n    });\n  });\n  return l.sort();\n\
    }\n", "    return common1(common1(l1, l2), common1(l2, l1));\n}", "\tl1 = _.sortBy(l1,\
    \ _.identity);\n\tl2 = _.sortBy(l2, _.identity);\n\treturn _.intersection(l1,\
    \ l2);\n}\n", "  return [...new Set(l1)].filter(e => new Set(l2).has(e));\n}\n",
  "  return l1.filter(function(n) {return l2.indexOf(n) !== -1; }).sort(function(a,\
    \ b){return a-b;});\n}\n", "  var uniques = [],\n      l1_arr = l1.split(' '),\n\
    \      l2_arr = l2.split(' ');\n  for(var i = 0; i < l1_arr.length; i++){\n  \
    \  if(l2_arr.indexOf(l1_arr[i]) > -1){\n      uniques.push(l1_arr[i]);\n    }\n\
    \  }\n  return uniques.sort().join(' ');\n}", "\treturn l1.filter(a => l2.includes(a));\n\
    }\n", "\t//Common elements between l1 and l2.\n\tvar com = new Set(l1.filter(function(e){\n\
    \t\treturn l2.indexOf(e) != -1;\n\t}));\n\t//sorted unique\n\treturn Array.from(com).sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n}\n", "    return l1.filter(function(n) {\n \
    \       return l2.indexOf(n) !== -1;\n    }).sort(function(a, b) {\n        return\
    \ a - b;\n    });\n}\n", "\tlet c = [];\n\tlet i = 0;\n\tlet j = 0;\n\tl1.sort();\n\
    \tl2.sort();\n\twhile(i < l1.length && j < l2.length){\n\t\tif(l1[i] < l2[j]){\n\
    \t\t\ti++;\n\t\t}\n\t\telse if(l1[i] > l2[j]){\n\t\t\tj++;\n\t\t}\n\t\telse{\n\
    \t\t\tif(c.length == 0 || c[c.length - 1] != l1[i]){\n\t\t\t\tc.push(l1[i]);\n\
    \t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn c;\n}\n", "    return l1.filter(l2.has.bind(l2));\n\
    }\n", "  var res = [], s = new Set(l2);\n  for(var i=0; i<l1.length; i++){\n \
    \   if(s.has(l1[i])){\n      res.push(l1[i]);\n      s.delete(l1[i]);\n    }\n\
    \  }\n  return res;\n}\n", "  let l3 = [];\n  let c = concat(l1, l2);\n  l3 =\
    \ c.filter(function(item, index){\n    return c.indexOf(item) == index;\n  });\n\
    \  return l3.sort();\n}\n", "  var lc = [];\n  var i1 = 0;\n  var i2 = 0;\n  while(i1\
    \ < l1.length && i2 < l2.length){\n    if(l1[i1] == l2[i2]){\n      lc.push(l1[i1]);\n\
    \      i1 += 1;\n      i2 += 1;\n    }\n    else if(l1[i1] < l2[i2]){\n      i1\
    \ += 1;\n    }\n    else{\n      i2 += 1;\n    }\n  }\n  return lc;\n}\n\n", " \
    \   var c = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j =\
    \ 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                c.push(l1[i]);\n\
    \            }\n        }\n    }\n    return c.filter(onlyUnique);\n}\n", "\t\
    //If both lists are empty\n\tif(l1.length === 0 && l2.length === 0){\n\t\treturn\
    \ [];\n\t}\n\t//If only one list is empty\n\tif(l1.length === 0 || l2.length ===\
    \ 0){\n\t\treturn [];\n\t}\n\treturn _.union(l1, l2);\n}", "\treturn $.grep(l1,\
    \ function(v){\n\t\treturn $.inArray(v, l2) != -1;\n\t});\n}\n", "    return _.uniq(sort(l1.concat(l2)));\n\
    }\n", "    var result = [];\n    for(var i=0; i<l1.length; i++){\n        for(var\
    \ j=0; j<l2.length; j++){\n            if(l1[i] == l2[j]){\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result.sort();\n}\n", "  var sorted1\
    \ = l1.sort(function(a, b){return a-b});\n  var sorted2 = l2.sort(function(a,\
    \ b){return a-b});\n  var uniq1 = uniq(sorted1);\n  var uniq2 = uniq(sorted2);\n\
    \  var len1 = uniq1.length;\n  var len2 = uniq2.length;\n  var com = [];\n  for(var\
    \ i = 0; i < len1; i++){\n    for(var j = 0; j < len2; j++){\n      if(uniq1[i]\
    \ === uniq2[j]){\n        com.push(uniq1[i]);\n      }\n    }\n  }\n  return com;\n\
    }\n", "    return _.uniq(l1.filter(function(n) {\n        return l2.indexOf(n)\
    \ != -1\n    }));\n}\n", "    let result = []\n    let s1 = new Set(l1)\n    let\
    \ s2 = new Set(l2)\n    for(let i of s1){\n        if(s2.has(i)){\n          \
    \  result.push(i)\n        }\n    }\n    return result.sort((a,b) => a - b)\n\
    }\n", "  return l1.filter(function(n) {\n    return l2.indexOf(n) !== -1;\n  }).sort(function(a,\
    \ b) {\n    return a - b;\n  });\n}\n", "  return _.sortBy(_.uniq(_.intersection(l1,\
    \ l2)), function(num){ return -num });\n}\n", "    if (l1.length == 0) {\n\treturn\
    \ [];\n    }\n    else if (l2.length == 0) {\n\treturn [];\n    }\n    else {\n\
    \tvar fst = l1[0];\n\tvar rest1 = l1.slice(1);\n\tvar rest2 = l2.slice(1);\n\t\
    if (fst < l2[0]) {\n\t    return common(rest1, l2);\n\t}\n\telse if (fst > l2[0])\
    \ {\n\t    return common(l1, rest2);\n\t}\n\telse {\n\t    return [fst].concat(common(rest1,\
    \ rest2));\n\t}\n    }\n}\n", "\tvar list=[];\n\tvar l2_temp=[];\n\tvar i=0;\n\
    \t\n\twhile(i<l2.length){\n\t\tl2_temp.push(l2[i]);\n\t\ti++;\n\t}\n\t\n\ti=0;\n\
    \twhile(i<l1.length){\n\t\tvar j=0;\n\t\twhile(j<l2_temp.length){\n\t\t\tif(l1[i]===l2_temp[j]){\n\
    \t\t\t\tlist.push(l1[i]);\n\t\t\t\tl2_temp.splice(j,1);\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tlist.sort(function(a,b){return a-b;});\n\
    \treturn list;\n}\n", "  return unique(l1.filter(x => l2.includes(x)));\n}\n",
  "  if(l1.length === 0 || l2.length === 0) return [];\n  var temp = [];\n  var result\
    \ = [];\n  if(l1.length > l2.length){\n    for(var i = 0; i < l1.length; i++){\n\
    \      for(var j = 0; j < l2.length; j++){\n        if(l1[i] === l2[j]) temp.push(l1[i]);\n\
    \      }\n    }\n  }else{\n    for(var i = 0; i < l2.length; i++){\n      for(var\
    \ j = 0; j < l1.length; j++){\n        if(l2[i] === l1[j]) temp.push(l2[i]);\n\
    \      }\n    }\n  }\n  temp.sort();\n  var current = temp[0];\n  result.push(current);\n\
    \  for(var i = 1; i < temp.length; i++){\n    if(temp[i] !== current){\n     \
    \ current = temp[i];\n      result.push(current);\n    }\n  }\n  return result;\n\
    }", "    var m1 = l1.slice().sort().reverse();\n    var m2 = l2.slice().sort().reverse();\n\
    \    var result = [];\n    for(var i=0; i<m1.length; i++){\n        for(var j=0;\
    \ j<m2.length; j++){\n            if(m1[i] === m2[j]){\n                result.push(m1[i]);\n\
    \                m2.splice(j, 1);\n                break;\n            }\n   \
    \     }\n    }\n    return result;\n}\n", "  var commonElements = new Set();\n\
    \  for(var i = 0; i < l1.length; i++){\n    for(var j = 0; j < l2.length; j++){\n\
    \      if(l1[i] === l2[j]){\n        commonElements.add(l1[i]);\n      }\n   \
    \ }\n  }\n  return Array.from(commonElements).sort();\n}\n", "\tvar x = l1.filter(function(val){\n\
    \t\treturn l2.indexOf(val) != -1;\n\t});\n\treturn unique(x);\n}\n", "\tvar s\
    \ = {};\n\tvar a = [];\n\tl1.forEach(function(item){\n\t\ts[item] = 1;\n\t});\n\
    \tl2.forEach(function(item){\n\t\tif(s[item] === 1){\n\t\t\ta.push(item);\n\t\t\
    }\n\t});\n\treturn a.sort();\n}\n", "  return _.sortBy(_.uniq(_.intersection(l1,\
    \ l2)));\n}\n", "    return l1.filter(element => l2.includes(element)).sort().filter((item,\
    \ index, self) => index === self.indexOf(item));\n}\n", "    l1.sort();\n    l2.sort();\n\
    \    var i = 0;\n    var j = 0;\n    var result = [];\n    while(i < l1.length\
    \ && j < l2.length){\n        if(l1[i] == l2[j]){\n            result.push(l1[i]);\n\
    \            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n\
    \            i++;\n        }\n        else{\n            j++;\n        }\n   \
    \ }\n    return result;\n}\n", "\tl1.sort(compareInt);\n\tl2.sort(compareInt);\n\
    \tvar sList = [];\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < l1.length && j < l2.length){\n\
    \t\tif(l1[i] == l2[j]){\n\t\t\tsList.push(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t\
    }else if(l1[i] < l2[j]){\n\t\t\ti++;\n\t\t}else{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ sList;\n}\n", "  var common = [];\n  var d = {};\n  for(var i = 0; i < l1.length;\
    \ i++){\n    d[l1[i]] = l1[i];\n  }\n  for(var i = 0; i < l2.length; i++){\n \
    \   if(d[l2[i]] !== undefined){\n      common.push(l2[i]);\n    }\n  }\n  return\
    \ common;\n}\n\n", "  var result = []\n  for(var i = 0; i < l1.length; i++){\n\
    \    if(l2.indexOf(l1[i]) > -1 && result.indexOf(l1[i]) == -1){\n      result.push(l1[i])\n\
    \    }\n  }\n  return result.sort()\n}\n", "\treturn _.intersection(l1, l2).sort();\n\
    }\n", "\treturn l1.filter(function(v){return l2.indexOf(v) !== -1});\n}\n", "\t\
    var l1= l1.sort(function(a,b){return a-b});\n\tvar l2= l2.sort(function(a,b){return\
    \ a-b});\n\tvar l3=[];\n\tvar i=0;\n\tvar j=0;\n\twhile (i<l1.length && j<l2.length){\n\
    \t\tif (l1[i]==l2[j]){\n\t\t\tl3.push(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\
    \t\telse if (l1[i]<l2[j]){\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tj++;\n\t\t}\n\t\
    }\n\treturn l3;\n}", "  //creates a sorted unique list of l1 and l2\n  function\
    \ unique(l1, l2){\n    return l1.filter(function(i){\n      return l2.indexOf(i)\
    \ >= 0;\n    });\n  }\n  //create a sorted list of l1 and l2\n  let l1u = l1.sort(function(a,\
    \ b){return a-b});\n  let l2u = l2.sort(function(a, b){return a-b});\n  //create\
    \ a sorted unique list of l1 and l2\n  let l1l2 = unique(l1u, l2u);\n  //creates\
    \ a sorted unique list of l2 and l1\n  let l2l1 = unique(l2u, l1u);\n  //returns\
    \ the sorted unique list of l1 and l2\n  return l1l2.sort(function(a, b){return\
    \ a-b});\n}", "    let t1 = {};\n    let t2 = {};\n    let d = {};\n    l1.forEach(a\
    \ => t1[a] = true);\n    l2.forEach(a => t2[a] = true);\n    l1.forEach(a => {\n\
    \        if(t2[a]){\n            d[a] = true;\n        }\n    });\n    return\
    \ Object.keys(d).sort();\n}\n", "    return l1.filter(function(n) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function(a, b) {\n        return a - b;\n\
    \    });\n}\n", "\tvar result = [];\n\tvar length = Math.min(l1.length, l2.length);\n\
    \tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\twhile(e < length){\n\t\tif(l1[c] <\
    \ l2[d]){\n\t\t\tc++;\n\t\t}else if(l1[c] > l2[d]){\n\t\t\td++;\n\t\t}else{\n\t\
    \t\tresult[e++] = l1[c++];\n\t\t\td++;\n\t\t}\n\t}\n\treturn result;\n}\n", "\t\
    let c = l1.filter(element => l2.includes(element));\n\treturn Array.from(new Set(c));\n\
    }\n", "\tvar commonElements = [];\n\tfor(i = 0; i < l1.length; i++){\n\t\tfor(j\
    \ = 0; j < l2.length; j++){\n\t\t\tif(l1[i] == l2[j]){\n\t\t\t\tcommonElements.push(l1[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn commonElements.sort(function(a, b){return a-b});\n\
    }\n", "    var l3 = l1.filter(function(n) {\n        return l2.indexOf(n) != -1;\n\
    \    });\n    return l3.filter(function(elem, pos) {\n        return l3.indexOf(elem)\
    \ == pos;\n    });\n}\n\n", "  var a = [];\n  for(var i = 0; i < l1.length; i++)\
    \ {\n    if(l2.indexOf(l1[i]) != -1 && a.indexOf(l1[i]) < 0) {\n      a.push(l1[i]);\n\
    \    }\n  }\n  return a.sort();\n}\n", "    var i, j, k,\n        m = [],\n  \
    \      n = l1.length;\n    for(i = 0; i < n; i++){\n        if(l2.indexOf(l1[i])\
    \ != -1){\n            m.push(l1[i]);\n        }\n    }\n    n = m.length;\n \
    \   for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n           \
    \ if(m[i] == m[j]){\n                for(k = j; k < n; k++){\n               \
    \     m[k] = m[k + 1];\n                }\n                n--;\n            \
    \    j--;\n            }\n        }\n    }\n    return m;\n}\n\n", "\t//Split\
    \ the comma separated string into a list\n\tvar tempL1 = l1.split(\",\");\n\t\
    var tempL2 = l2.split(\",\");\n\tvar size = tempL1.length > tempL2.length ? tempL1.length\
    \ : tempL2.length;\n\tvar commonElements = [];\n\t//Compare each element of the\
    \ lists and store the common elements in a new list.\n\tfor(var i = 0; i < size;\
    \ i++){\n\t\tfor(var j = 0; j < size; j++){\n\t\t\tif(tempL1[i] == tempL2[j]){\n\
    \t\t\t\tcommonElements.push(tempL1[i]);\n\t\t\t}\n\t\t}\n\t}\n\t//Unique the list\
    \ and then sort it.\n\tuniqueList = commonElements.filter(function(elem, pos)\
    \ {\n    \treturn commonElements.indexOf(elem) == pos;\n\t});\n\tuniqueList.sort();\n\
    \t//Return the sorted unique list of common elements.\n\treturn uniqueList;\n}",
  "  let obj = {};\n  let res = [];\n  for(let i = 0; i < l1.length; i++){\n    if(!obj[l1[i]]){\n\
    \      obj[l1[i]] = 1;\n    }\n  }\n  for(let i = 0; i < l2.length; i++){\n  \
    \  if(obj[l2[i]]){\n      res.push(l2[i]);\n      obj[l2[i]] = 0;\n    }\n  }\n\
    \  return res.sort();\n}", "  return sortedUnique(l1.filter(v => l2.includes(v)));\n\
    }\n", "\treturn l1.filter(function(value){\n\t\treturn l2.indexOf(value) != -1;\n\
    \t}).sort(function(a, b){\n\t\treturn a - b;\n\t});\n}\n", "    var d1 = dedup(l1);\n\
    \    var d2 = dedup(l2);\n    var result = [];\n    while(d1.length > 0 && d2.length\
    \ > 0){\n        if(d1[0] < d2[0]){\n            d1.shift();\n        }else if(d1[0]\
    \ > d2[0]){\n            d2.shift();\n        }else{\n            result.push(d1.shift());\n\
    \            d2.shift();\n        }\n    }\n    return result;\n}\n", "    var\
    \ result = []\n    l1.forEach(function(e){\n        if(l2.indexOf(e) != -1){\n\
    \            result.push(e)\n        }\n    })\n    return result.sort()\n}\n",
  "  return Array.from(new Set(l1)).filter(x => l2.includes(x));\n}\n", "    var l\
    \ = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] == l2[j]){\n                l.push(l1[i]);\n   \
    \         }\n        }\n    }\n    return unique(l);\n}\n", "    if(l1.length\
    \ == 0 || l2.length == 0) return [];\n    return l1.filter(v => l2.includes(v)).filter((v,\
    \ i, a) => a.indexOf(v) === i).sort();\n}\n", "    let obj = {};\n    let res\
    \ = [];\n    for(let i = 0; i < l1.length; i++){\n        if(obj[l1[i]]) obj[l1[i]]++;\n\
    \        else obj[l1[i]] = 1;\n    }\n    for(let i = 0; i < l2.length; i++){\n\
    \        if(obj[l2[i]]) obj[l2[i]]++;\n        else obj[l2[i]] = 1;\n    }\n \
    \   for(let key in obj){\n        if(obj[key] === 2) res.push(key);\n    }\n \
    \   return res.sort((a, b) => a - b);\n}\n", "    return new Set([...l1].filter(x\
    \ => l2.has(x)));\n}\n", "  return l1.filter(function(n) {\n    return l2.indexOf(n)\
    \ !== -1;\n  }).sort(function(a, b) {\n    return a - b;\n  });\n}\n", "    return\
    \ l1.filter(value => -1 !== l2.indexOf(value));\n}\n", "  var list = [];\n  for(var\
    \ i = 0; i < l1.length; i++){\n    for(var j = 0; j < l2.length; j++){\n     \
    \ if(l1[i] === l2[j]){\n        list.push(l1[i]);\n      }\n    }\n  }\n  return\
    \ list.sort().filter(function(item, pos, ary) {\n    return !pos || item != ary[pos\
    \ - 1];\n  })\n}\n", "    l1.sort();\n    l2.sort();\n    var r = [];\n    while(l1.length\
    \ && l2.length){\n        if(l1[0] < l2[0]){\n            l1.shift();\n      \
    \  }\n        else if(l1[0] > l2[0]){\n            l2.shift();\n        }\n  \
    \      else{\n            r.push(l1.shift());\n            l2.shift();\n     \
    \   }\n    }\n    return r;\n}\n", "    var result = [];\n    var sorted1 = l1.sort();\n\
    \    var sorted2 = l2.sort();\n    var total = l1.length + l2.length;\n    var\
    \ index1 = 0;\n    var index2 = 0;\n    for(var i = 0; i < total; i++){\n    \
    \    var val1 = sorted1[index1];\n        var val2 = sorted2[index2];\n      \
    \  if(index1 < sorted1.length && val1 < val2){\n            index1++;\n      \
    \  }\n        else if(index2 < sorted2.length && val2 < val1){\n            index2++;\n\
    \        }\n        else if(index1 < sorted1.length && index2 < sorted2.length){\n\
    \            result.push(val1);\n            index1++;\n            index2++;\n\
    \        }\n        else{\n            break;\n        }\n    }\n    return result;\n\
    }\n", "    let n1 = l1.length;\n    let n2 = l2.length;\n    let l3 = [];\n  \
    \  if(n1 == 0 || n2 == 0){\n        return l3;\n    }\n    let i = 0;\n    let\
    \ j = 0;\n    let count = 0;\n    let prev = null;\n    while(i < n1 && j < n2){\n\
    \        if(l1[i] == l2[j]){\n            if(prev == null || l1[i] != prev){\n\
    \                l3[count] = l1[i];\n                count++;\n              \
    \  prev = l1[i];\n            }\n            i++;\n            j++;\n        }\n\
    \        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return l3;\n}\n", "    var ret = [];\n\
    \    for(var i=0; i<l1.length; i++){\n        for(var j=0; j<l2.length; j++){\n\
    \            if(l1[i] == l2[j]){\n                ret.push(l1[i]);\n         \
    \       break;\n            }\n        }\n    }\n    return ret.sort().unique();\n\
    }\n", "\treturn sorted(l1).filter(function(el){\n\t\treturn sorted(l2).indexOf(el)\
    \ >= 0;\n\t});\n}\n", "\treturn _.uniq(l1.concat(l2)).sort();\n}\n", "    return\
    \ l1.filter(i => l2.includes(i)).sort().filter((i,j,l) => i!=l[j-1]);\n}", "\t\
    return uniq(l1.filter(x => l2.includes(x)));\n}\n", "    return _.sortBy(_.uniq(_.intersection(l1,\
    \ l2)));\n}\n", "\tvar common = new List();\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i\
    \ < l1.length && j < l2.length){\n\t\tif(l1[i] == l2[j]){\n\t\t\tif(common.length\
    \ == 0 || common[common.length - 1] != l1[i]){\n\t\t\t\tcommon.push(l1[i]);\n\t\
    \t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(l1[i] < l2[j]){\n\t\t\ti++;\n\
    \t\t}\n\t\telse{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn common;\n}\n", "    var len\
    \ = Math.min(l1.length, l2.length);\n    var rs = new Array(len);\n    var pos\
    \ = 0;\n    var i = 0;\n    while(i < len){\n        var num = l1[i];\n      \
    \  if(l2.indexOf(num) >= 0){\n            rs[pos++] = num;\n        }\n      \
    \  i++;\n    }\n    return rs.slice(0, pos);\n}\n\nmodule.exports = {\n    add:add,\n\
    \    sub:sub,\n    mul:mul,\n    div:div,\n    common:common\n};", "\tvar r =\
    \ [];\n\tvar l = l1.concat(l2);\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l.lastIndexOf(l[i])\
    \ != i && r.indexOf(l[i]) == -1){\n\t\t\tr.push(l[i]);\n\t\t}\n\t}\n\treturn r;\n\
    }\n", "    //From l1 and l2, find the common elements, sort and return them in\
    \ an array.\n    //Using dot notation to reach the element inside an object.\n\
    \    var l3 = l1.filter(item => l2.indexOf(item) !== -1).sort((a, b) => a - b);\n\
    \    return l3;\n}\n", "  return _.sortBy(_.union(_.intersection(l1, l2)), function(item){\n\
    \    return -item;\n  });\n}\n", "  //TODO\n\n  var common_elements = new Set();\n\
    \n  for(let i = 0; i < l1.length; i++){\n    for(let j = 0; j < l2.length; j++){\n\
    \      if(l1[i] == l2[j]){\n        common_elements.add(l1[i]);\n      }\n   \
    \ }\n  }\n\n  return [...common_elements].sort();\n}\n", "    var l3 = [];\n \
    \   for(var i = 0; i < l1.length; i++){\n        if(l2.indexOf(l1[i]) !== -1){\n\
    \            l3.push(l1[i]);\n        }\n    }\n    return l3.filter(function(item,\
    \ pos) {\n        return l3.indexOf(item) == pos;\n    }).sort();\n}\n", "  if(l1.length\
    \ === 0 || l2.length === 0)\n    return [];\n  return l1.filter(function(n){\n\
    \    return l2.indexOf(n) !== -1;\n  }).sort(function(a, b){\n    return a - b;\n\
    \  });\n}\n", "  return l1.concat(l2).sort().filter(function(i, pos, a){\n   \
    \ return a.indexOf(i) == pos;\n  });\n}\n", "  var l = [];\n  for(var i = 0; i\
    \ < l1.length; i++){\n    for(var j = 0; j < l2.length; j++){\n      if(l1[i]\
    \ == l2[j]){\n        l.push(l1[i]);\n      }\n    }\n  }\n  return l.sort(function(a,\
    \ b){return a - b});\n}\n", "  return l1.filter(function(x){return l2.indexOf(x)\
    \ > -1}).sort(function(a,b){return a - b}).filter(function(x,i,self){return self.indexOf(x)\
    \ === i})\n}\n", "    return [...new Set(l1)].filter(e => [...new Set(l2)].includes(e));\n\
    }\n", "    let uniqueL1 = unique(l1);\n    let uniqueL2 = unique(l2);\n    let\
    \ results = [];\n    for(let i = 0; i < uniqueL1.length; i++){\n        if(uniqueL2.includes(uniqueL1[i])){\n\
    \            results.push(uniqueL1[i]);\n        }\n    }\n    return results;\n\
    }\n", "\tvar result = [];\n\tvar i = 0;\n\tvar j = 0;\n\twhile (i < l1.length\
    \ && j < l2.length){\n\t\tif (l1[i] < l2[j]){\n\t\t\ti += 1;\n\t\t} else if (l1[i]\
    \ > l2[j]){\n\t\t\tj += 1;\n\t\t} else {\n\t\t\tresult.push(l1[i]);\n\t\t\ti +=\
    \ 1;\n\t\t\tj += 1;\n\t\t}\n\t}\n\treturn result;\n}\n", "    var result = [];\n\
    \    l1.forEach(function(item){\n        var exists = l2.indexOf(item);\n    \
    \    if(exists >= 0 && result.indexOf(item) < 0){\n            result.push(item);\n\
    \        }\n    });\n    return result;\n}\n", "\tvar l1 = l1.sort(function(a,\
    \ b){return a-b});\n\tvar l2 = l2.sort(function(a, b){return a-b});\n\tvar l3\
    \ = l1.filter(function(n) {\n\t\treturn l2.indexOf(n) !== -1;\n\t});\n\tl3 = [...new\
    \ Set(l3)];\n\treturn l3;\n}", "\tvar l = [];\n\tfor(var i = 0; i < l1.length;\
    \ i++){\n\t\tif(l2.indexOf(l1[i]) > -1){\n\t\t\tl.push(l1[i]);\n\t\t}\n\t}\n\t\
    return l.unique();\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a,\
    \ b) => a - b);\n}\n", "\tl1 = uniq(l1);\n\tl2 = uniq(l2);\n\tvar common = [];\n\
    \tfor(var i=0; i<l1.length; i++){\n\t\tfor(var j=0; j<l2.length; j++){\n\t\t\t\
    if(l1[i] == l2[j]){\n\t\t\t\tcommon.push(l1[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ common;\n}\n", "\tvar ret = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\t\
    if(l2.indexOf(l1[i]) >= 0 && ret.indexOf(l1[i]) < 0){\n\t\t\tret.push(l1[i]);\n\
    \t\t}\n\t}\n\treturn ret;\n}\n", "\tvar unique = [];\n\tfor(var i = 0; i < l1.length;\
    \ i++){\n\t\tif(l2.indexOf(l1[i]) > -1){\n\t\t\tunique.push(l1[i]);\n\t\t}\n\t\
    }\n\treturn unique.sort();\n}\n", "\treturn sortUnique(l1.filter(a => l2.includes(a)));\n\
    }\n", "\treturn _.uniq(l1.concat(l2)).sort();\n}\n", "    var set = new Set(l1);\n\
    \    var common = [];\n    for(var i=0; i<l2.length; i++){\n        if(set.has(l2[i])){\n\
    \            common.push(l2[i]);\n        }\n    }\n    return common.sort();\n\
    }\n", "\tvar common = [];\n\tvar l1 = unique(l1);\n\tvar l2 = unique(l2);\n\t\
    var len = l1.length > l2.length ? l1.length : l2.length;\n\tfor(var i = 0; i <\
    \ len; i++){\n\t\tif(l1[i] == l2[i]){\n\t\t\tcommon.push(l1[i]);\n\t\t}\n\t}\n\
    \treturn common;\n}\n", "\tl1 = sort(unique(l1));\n\tl2 = sort(unique(l2));\n\t\
    var res = [];\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < l1.length && j < l2.length){\n\
    \t\tif(l1[i] == l2[j]){\n\t\t\tres.push(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t\
    }else if(l1[i] < l2[j]){\n\t\t\ti++;\n\t\t}else{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "\treturn uniq(l1.concat(l2).sort());\n}\n", "  let set = new Set();\n\
    \  for(let i = 0; i < l1.length; i++){\n    if(l2.includes(l1[i])){\n      set.add(l1[i]);\n\
    \    }\n  }\n  return Array.from(set);\n}\n", "    return unique(l1.concat(l2).sort());\n\
    }\n", "    return l1.filter(function(e){\n        return l2.indexOf(e) >= 0;\n\
    \    });\n}", "  var result = [];\n  for(var i = 0; i < l1.length; i++){\n   \
    \ for(var j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        result.push(l1[i]);\n\
    \      }\n    }\n  }\n  return result.sort().filter(function(item, pos, ary) {\n\
    \      return !pos || item != ary[pos - 1];\n  })\n}", "    var result = [];\n\
    \    l1.forEach(function(i) {\n        if(l2.indexOf(i) != -1) {\n           \
    \ result.push(i);\n        }\n    });\n    return result.sort(function(a, b) {\n\
    \        return a - b;\n    });\n}\n", "  var l3 = [];\n  for(var i = 0; i < l1.length;\
    \ i++){\n    for(var j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n\
    \        l3.push(l1[i]);\n      }\n    }\n  }\n  var l4 = l3.filter(function(elem,\
    \ pos) {\n    return l3.indexOf(elem) == pos;\n  });\n  return l4.sort();\n}\n",
  "    var common = [];\n    var x;\n    for(var i = 0; i < l1.length; i++){\n   \
    \     for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n \
    \               common.push(l1[i]);\n            }\n        }\n    }\n    //return\
    \ unique sorted elements\n    common.sort();\n    common = common.filter(function(elem,\
    \ pos) {\n    return common.indexOf(elem) == pos;\n});\n    return common;\n}",
  "  return l1.filter(function(val){\n    return l2.indexOf(val) >= 0;\n  }).sort().filter(function(val,\
    \ i, l){\n    return i == 0 || val != l[i-1];\n  });\n}\n", "    var result =\
    \ [];\n    for(var i=0; i<l1.length; i++){\n        if(l2.indexOf(l1[i]) > -1\
    \ && result.indexOf(l1[i]) === -1){\n            result.push(l1[i]);\n       \
    \ }\n    }\n    return result.sort();\n}\n", "\tvar cmn = [];\n\t\n\tfor(var i\
    \ = 0; i < l1.length; i++){\n\t\tvar ind = l2.indexOf(l1[i]);\n\t\tif(ind != -1){\n\
    \t\t\tcmn.push(l1[i]);\n\t\t\tl2.splice(ind, 1);\n\t\t}\n\t}\n\t\n\treturn cmn;\n\
    }\n", "    var result = [];\n    var l1 = l1.slice().sort();\n    var l2 = l2.slice().sort();\n\
    \    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] == l2[j]){\n                if(result.indexOf(l1[i])\
    \ == -1){\n                    result.push(l1[i]);\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}\n", "\treturn intersection(l1,\
    \ l2).sort();\n}\n", "    var out = l1.filter(function(val){\n        return l2.indexOf(val)\
    \ >= 0;\n    });\n    return out.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n", "\treturn dedup(sort(l1.concat(l2)));\n}\n", "    return l1.filter(function(elem)\
    \ {\n        return l2.indexOf(elem) > -1;\n    }).sort(function(a, b) {\n   \
    \     return a - b;\n    });\n}\n", "    let merged = merge(l1, l2);\n    //We\
    \ need to remove duplicates of the common elements;\n    return merged.filter((value,\
    \ index, self) => {\n        return self.indexOf(value) === index;\n    });\n\
    }\n", "\tvar l3 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(l2.indexOf(l1[i])\
    \ != -1){\n\t\t\tl3.push(l1[i]);\n\t\t}\n\t}\n\treturn unique(l3).sort();\n}\n",
  "\treturn _.uniq(l1.concat(l2)).sort();\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b).filter((item, pos, ary) => !pos || item != ary[pos - 1]);\n}\n",
  "    return _.uniq(l1.concat(l2)).sort();\n}\n", "\treturn unique(sort(l1)).filter(function(e){\n\
    \t\treturn unique(sort(l2)).indexOf(e) != -1;\n\t});\n}\n", "    //Use of a set\
    \ to get rid of duplicates.\n    return [...new Set(l1.filter(e => l2.includes(e)))];\n\
    }\n", "\tvar res = [];\n\tif(l1.length > l2.length){\n\t\tvar tmp = l1;\n\t\t\
    l1 = l2;\n\t\tl2 = tmp;\n\t}\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < l1.length\
    \ && j < l2.length){\n\t\tif(l1[i] < l2[j]){\n\t\t\ti++;\n\t\t}\n\t\telse if(l1[i]\
    \ > l2[j]){\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\tres.push(l1[i]);\n\t\t\ti++;\n\
    \t\t\tj++;\n\t\t}\n\t}\n\treturn res;\n}", "\treturn Array.from(new Set(l1.filter(e\
    \ => l2.includes(e)))).sort((a, b) => {\n\t\treturn a.localeCompare(b);\n\t});\n\
    }\n", "  var l3 = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j =\
    \ 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        l3.push(l1[i]);\n\
    \      }\n    }\n  }\n  l3.sort();\n  return l3;\n}\n", "    return l1.filter(function(n)\
    \ {\n        return l2.indexOf(n) !== -1;\n    }).sort(function(a, b) {\n    \
    \    return a - b;\n    });\n}\n", "\treturn unique(l1).filter(x => unique(l2).includes(x));\n\
    }\n", "\tvar b = l1.sort(), c = l2.sort(), d = [];\n\tfor(var i = 0; i < b.length;\
    \ i++){\n\t\tif(b[i] == c[i]) d.push(b[i]);\n\t}\n\treturn d;\n}\n", "\treturn\
    \ _.union(_.intersection(l1, l2));\n}", "    var dict ={};\n    var commonList\
    \ = [];\n    for(var i=0; i<l1.length; i++){\n        dict[l1[i]] = 1;\n    }\n\
    \    for(var i=0; i<l2.length; i++){\n        if(dict[l2[i]] === 1){\n       \
    \     commonList.push(l2[i]);\n            dict[l2[i]] = 0;\n        }\n    }\n\
    \    return commonList.sort();\n}\n", "    var sortedL1 = l1.sort(function(a,\
    \ b){return a-b});\n    var sortedL2 = l2.sort(function(a, b){return a-b});\n\
    \    var curr1 = 0;\n    var curr2 = 0;\n    var common = [];\n    while (curr1\
    \ < sortedL1.length && curr2 < sortedL2.length){\n        if (sortedL1[curr1]\
    \ < sortedL2[curr2]){\n            curr1++;\n        }\n        else if (sortedL1[curr1]\
    \ > sortedL2[curr2]){\n            curr2++;\n        }\n        else{\n      \
    \      if (common.length === 0 || common[common.length-1] !== sortedL1[curr1]){\n\
    \                common.push(sortedL1[curr1]);\n            }\n            curr1++;\n\
    \            curr2++;\n        }\n    }\n    return common;\n}\n\nmodule.exports\
    \ = {\n    'filterMap': filterMap,\n    'common': common\n};", "  return l1.filter(function(n)\
    \ {\n    return l2.indexOf(n) !== -1;\n  }).sort(function(a, b) {\n    return\
    \ a - b;\n  });\n}\n", "  var l = l1.filter(function(n) {\n    return l2.indexOf(n)\
    \ !== -1;\n  });\n  return l.sort(function(a, b){return a-b}).filter(function(elem,\
    \ pos, arr) {\n    return arr.indexOf(elem) == pos;\n  });\n}", "    return Array.from(new\
    \ Set(l1.filter(value => l2.includes(value))));\n}\n", "    var s = [];\n    for(var\
    \ i = 0; i < l1.length; i++){\n        if(l2.indexOf(l1[i]) >= 0){\n         \
    \   s.push(l1[i]);\n        }\n    }\n    return unique(s).sort();\n}\n", "\t\
    return l1.filter(val => l2.includes(val)).sort().filter((item, i, arr) => !i ||\
    \ item !== arr[i-1]);\n}\n", "  var sorted1 = l1.sort();\n  var sorted2 = l2.sort();\n\
    \  var l3 = [];\n  var a = 0;\n  var b = 0;\n  while (a < sorted1.length && b\
    \ < sorted2.length){\n    if (sorted1[a] === sorted2[b]){\n      l3.push(sorted1[a]);\n\
    \      a++;\n      b++;\n    } else if (sorted1[a] < sorted2[b]){\n      a++;\n\
    \    } else {\n      b++;\n    }\n  }\n  return l3;\n}", "  return l1.filter(x\
    \ => l2.includes(x)).sort();\n}\n", "\treturn _.union(_.intersection(l1, l2));\n\
    }\n", "\treturn(unique(l1.concat(l2)));\n}", "  return _.intersection(l1, l2);\n\
    }\n", "    var result = new Set();\n    l1.forEach(function(item){\n        if(l2.includes(item)){\n\
    \            result.add(item);\n        }\n    });\n    return Array.from(result).sort();\n\
    }\n", "    l1 = sort(l1);\n    l2 = sort(l2);\n    var i = 0;\n    var j = 0;\n\
    \    var result = [];\n    while(i < l1.length && j < l2.length){\n        if(l1[i]\
    \ == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n\
    \        }else if(l1[i] < l2[j]){\n            i++;\n        }else{\n        \
    \    j++;\n        }\n    }\n    return result;\n}\n", "  return l1.filter(function(value){\n\
    \    return l2.indexOf(value) != -1\n  }).sort().filter(function(value, index,\
    \ list){\n    return list.indexOf(value) == index\n  })\n}\n", "  var i = 0, j\
    \ = 0, k = 0, result = [], temp = [];\n  while(i < l1.length && j < l2.length){\n\
    \    if(l1[i] < l2[j]){\n      i++;\n    }\n    else if(l1[i] > l2[j]){\n    \
    \  j++;\n    }\n    else{\n      if(temp.indexOf(l1[i]) === -1){\n        temp.push(l1[i]);\n\
    \        result[k++] = l1[i];\n      }\n      i++;\n      j++;\n    }\n  }\n \
    \ return result;\n}\n", "\t//order the two lists\n\tl1 = qsort(l1);\n\tl2 = qsort(l2);\n\
    \t//console.log(l1);\n\t//console.log(l2);\n\t\n\t//Find common elements.\n\t\
    var len1 = l1.length;\n\tvar len2 = l2.length;\n\tvar i = 0;\n\tvar j = 0;\n\t\
    var common = [];\n\twhile (i < len1 && j < len2){\n\t\tif (l1[i] == l2[j]){\n\t\
    \t\tcommon.push(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else if (l1[i] < l2[j]){\n\
    \t\t\ti++;\n\t\t} else if (l1[i] > l2[j]){\n\t\t\tj++;\n\t\t}\n\t}\n\treturn common;\n\
    }\n", "  if (l1.length == 0 || l2.length == 0) return []\n  var output = [];\n\
    \  var pos1 = 0, pos2 = 0;\n  while (pos1 < l1.length && pos2 < l2.length){\n\
    \    var comp = compare(l1[pos1], l2[pos2]);\n    if (comp === 0){\n      output.push(l1[pos1]);\n\
    \      pos1++;\n      pos2++;\n    } else if (comp < 0){\n      pos1++;\n    }\
    \ else {\n      pos2++;\n    }\n  }\n  return output;\n}\n", "  var unique = unique(l1);\n\
    \  var common = [];\n  for(var i = 0; i < unique.length; i++){\n    for(var j\
    \ = 0; j < l2.length; j++){\n      if(unique[i] === l2[j]){\n        common.push(unique[i]);\n\
    \      }\n    }\n  }\n  return common;\n}\n", "\treturn unique(sort(l1.concat(l2)));\n\
    }\n", "  return l1.concat(l2).filter(function(item, pos, self) {\n    return self.indexOf(item)\
    \ == pos;\n  }).sort(function(a, b){\n    return a-b;\n  });\n}", "  var l3 =\
    \ [];\n  for(var i=0; i<l1.length; i++){\n    if(l2.indexOf(l1[i]) != -1 && l3.indexOf(l1[i])\
    \ == -1){\n      l3.push(l1[i]);\n    }\n  }\n  return l3.sort();\n}\n", "  return\
    \ l1.filter(function(num){\n    return l2.indexOf(num) !== -1;\n  }).sort(function(a,\
    \ b){\n    return a - b;\n  });\n}\n", "\tvar a1 = l1.split(\",\");\n\tvar a2\
    \ = l2.split(\",\");\n\tvar a3 = a1.concat(a2);\n\tvar a4 = a3.sort();\n\tvar\
    \ a5 = [];\n\tvar a6 = [];\n\tfor (var i = 0; i < a4.length; i++) {\n\t\tif (a4[i]\
    \ !== a4[i + 1] && a4[i] !== a4[i - 1]) {\n\t\t\ta5.push(a4[i]);\n\t\t}\n\t}\n\
    \ta5.sort(function(a, b){return a-b});\n\tfor (var j = 0; j < a5.length; j++)\
    \ {\n\t\ta6.push(parseInt(a5[j]));\n\t}\n\treturn a6;\n}\n", "    let temp1 =\
    \ [...l1];\n    let temp2 = [...l2];\n    let result = temp1.filter(v => temp2.includes(v));\n\
    \    return [...new Set(result)];\n}\n", "    return _.sortBy(_.uniq(_.intersection(l1,\
    \ l2)));\n}\n", "  //Code here.\n}\n", "    var l = [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n    return l.sort((a, b) => a - b);\n}\n", "  var ret\
    \ = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = 0; j < l2.length;\
    \ j++){\n      if(l1[i] === l2[j]){\n        ret.push(l1[i]);\n      }\n    }\n\
    \  }\n  return _.uniq(ret).sort();\n}\n", "    var set = new Set(l1.concat(l2));\n\
    \    return Array.from(set).sort(function(a, b){\n        return a - b;\n    });\n\
    }", "  let l = [];\n  for(let i = 0; i < l1.length; i++){\n    for(let j = 0;\
    \ j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        l.push(l1[i]);\n \
    \     }\n    }\n  }\n  return l.sort((a, b) => a - b);\n}", "  let common_list\
    \ = []\n  for(let i = 0; i < l1.length; i++){\n    if(l2.includes(l1[i]) && !common_list.includes(l1[i])){\n\
    \      common_list.push(l1[i])\n    }\n  }\n  return common_list.sort()\n}\n",
  "    return unique(l1.filter(x => l2.includes(x)));\n}\n", "  return l1.filter(function(item){\n\
    \    return l2.indexOf(item) >= 0;\n  }).sort().filter(function(item, index, a){\n\
    \    return a.indexOf(item) === index;\n  });\n}\n", "\treturn (l1.concat(l2)).sort().filter(function(value,\
    \ index, arr){\n\t\treturn (value == arr[index+1] && value != arr[index-1]);\n\
    \t});\n}\n", "    var count1 = count(l1);\n    var count2 = count(l2);\n    var\
    \ common = [];\n    for(var k in count1){\n        if(count2[k]){\n          \
    \  common.push(parseInt(k));\n        }\n    }\n    return common.sort(function(a,\
    \ b){return a-b});\n}", "    let i = 0;\n    let j = 0;\n    let l3 = [];\n  \
    \  while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n    \
    \        l3.push(l1[i]);\n            i++;\n            j++;\n        }\n    \
    \    else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n   \
    \         j++;\n        }\n    }\n    return l3;\n}\n", "    var ret = [];\n \
    \   for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] == l2[j]){\n                ret.push(l1[i]);\n \
    \           }\n        }\n    }\n    ret.sort();\n    var uRet = [];\n    for(var\
    \ i = 0; i < ret.length; i++){\n        if(ret[i] != ret[i-1]){\n            uRet.push(ret[i]);\n\
    \        }\n    }\n    return uRet;\n}\n", "  return unique(unique(l1).filter(value\
    \ => unique(l2).includes(value)));\n}\n", "  return _.sortBy(_.uniq(_.intersection(l1,\
    \ l2)));\n}\n", "    if(isEmpty(l1) || isEmpty(l2))\n        return null;\n  \
    \  var l3 = [];\n    var c1 = 0;\n    var c2 = 0;\n    while(c1 < l1.length &&\
    \ c2 < l2.length){\n        if(l1[c1] === l2[c2]){\n            l3.push(l1[c1]);\n\
    \            c1++;\n            c2++;\n        }\n        else if(l1[c1] < l2[c2])\n\
    \            c1++;\n        else\n            c2++;\n    }\n    return l3;\n}\n",
  "  var lookup = {};\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n\
    \    lookup[l1[i]] = 1;\n  }\n  for(var i = 0; i < l2.length; i++){\n    if(lookup[l2[i]]\
    \ === 1){\n      result.push(l2[i]);\n      lookup[l2[i]] = 2;\n    }\n  }\n \
    \ return result.sort(function(a, b){return a - b;});\n}\n", "  return sortedUnique(l1.filter(e\
    \ => l2.includes(e)));\n}\n", "\tl1 = l1.sort();\n\tl2 = l2.sort();\n\tvar i =\
    \ 0;\n\tvar j = 0;\n\tvar result = [];\n\tvar prev;\n\twhile (i < l1.length &&\
    \ j < l2.length){\n\t\tif (l1[i] == l2[j]){\n\t\t\tif (prev != l1[i]){\n\t\t\t\
    \tresult.push(l1[i]);\n\t\t\t\tprev = l1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\
    \t\t} else if (l1[i] < l2[j]){\n\t\t\ti++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "  return l1.filter(v => l2.includes(v)).sort((a, b)\
    \ => a - b);\n}\n", "    var temp = [];\n    for(var i = 0; i < l1.length; i++){\n\
    \        if(l2.indexOf(l1[i]) > -1 && temp.indexOf(l1[i]) == -1){\n          \
    \  temp.push(l1[i]);\n        }\n    }\n    return temp.sort();\n}\n", "  var\
    \ map = {};\n  var res = [];\n  if (l1 === null || l2 === null) {\n    return\
    \ res;\n  }\n  var curr1 = l1;\n  var curr2 = l2;\n  while (curr1 !== null) {\n\
    \    map[curr1.data] = curr1.data;\n    curr1 = curr1.next;\n  }\n  while (curr2\
    \ !== null) {\n    if (map[curr2.data] !== undefined) {\n      res.push(curr2.data);\n\
    \    }\n    curr2 = curr2.next;\n  }\n  return res.sort();\n}\n", "  return _.uniq(sort(l1,\
    \ l2));\n}", "    return l1.filter(l => l2.includes(l)).sort((a, b) => a - b);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
