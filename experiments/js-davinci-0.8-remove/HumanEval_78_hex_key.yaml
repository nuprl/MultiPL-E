name: HumanEval_78_hex_key
language: js
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\nfunction hex_key(num){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
  1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
  2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
  112233445566778899AABBCCDDEEFF00\"),12);\n  assert.deepEqual(candidate([]),0);\n\
  }\n\ntest();"
completions: ["  let key = {\n    \"A\": 10,\n    \"B\": 11,\n    \"C\": 12,\n   \
    \ \"D\": 13,\n    \"E\": 14,\n    \"F\": 15\n  }\n  if(key[num]){\n    return\
    \ key[num]\n  }\n  return Number(num)\n}\n", "    if(num <= 9) return num;\n \
    \   switch(num){\n        case 10: return 'A';\n        case 11: return 'B';\n\
    \        case 12: return 'C';\n        case 13: return 'D';\n        case 14:\
    \ return 'E';\n        case 15: return 'F';\n    }\n}", "    if(num == 'A' ||\
    \ num == 'B' || num == 'D' || num == 'F'){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}", "    let hex_dic = {\n        \"0\": 0,\n \
    \       \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n \
    \       \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n \
    \       \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n\
    \        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    if(num\
    \ in hex_dic){\n        return hex_dic[num]\n    }\n    else{\n        return\
    \ NaN\n    }\n}", "    return num >= 10 ? (num - 10 + 'A').charCodeAt(0) : num;\n\
    }\n", "    let key = {\n        0: 0,\n        1: 1,\n        2: 2,\n        3:\
    \ 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n\
    \        9: 9,\n        A: 10,\n        B: 11,\n        C: 12,\n        D: 13,\n\
    \        E: 14,\n        F: 15\n    }\n    return key[num]\n}", "    var nums\
    \ = {\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n        \"D\"\
    :13,\n        \"E\":14,\n        \"F\":15\n    }\n    if(nums[num]){\n       \
    \ return nums[num]\n    }\n    return Number(num)\n}", "  var obj={'2':2,'3':3,'5':5,'7':7,'B':11,'D':13};\n\
    \  return obj[num];\n}", "    let result = 0;\n    switch(num){\n        case\
    \ 'A':\n        case 'B':\n        case 'D':\n        case 'E':\n        case\
    \ 'F':\n            result = 1;\n            break;\n        default:\n      \
    \      result = 0;\n    }\n    return result;\n}\n", "    var hex_number = num.toString(16);\n\
    \    hex_number = hex_number.toUpperCase();\n    return hex_number;\n}\n", "\t\
    return \"0123456789ABCDEF\".indexOf(num)\n}", "  let hex = {\n    '0': 0,\n  \
    \  '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n\
    \    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n    'C': 12,\n\
    \    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hex[num]\n}", "    let\
    \ arr = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n \
    \   let arr2 = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        for(let j = 0; j < arr.length; j++){\n            if(num[i] ===\
    \ arr[j]){\n                for(let k = 0; k < arr2.length; k++){\n          \
    \          if(arr2[k] === j){\n                        count++;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return count;\n\
    }", "    switch(num){\n        case 10:\n            return 'A';\n        case\
    \ 11:\n            return 'B';\n        case 12:\n            return 'C';\n  \
    \      case 13:\n            return 'D';\n        case 14:\n            return\
    \ 'E';\n        case 15:\n            return 'F';\n        default:\n        \
    \    return num;\n    }\n}\n", "    return num.toString(16).toUpperCase()\n}",
  "\treturn {\n\t\t0:0,\n\t\t1:1,\n\t\t2:2,\n\t\t3:3,\n\t\t4:4,\n\t\t5:5,\n\t\t6:6,\n\
    \t\t7:7,\n\t\t8:8,\n\t\t9:9,\n\t\t'A':10,\n\t\t'B':11,\n\t\t'C':12,\n\t\t'D':13,\n\
    \t\t'E':14,\n\t\t'F':15\n\t}[num];\n}\n", "    switch(num){\n        case \"0\"\
    : return 0;\n        case \"1\": return 1;\n        case \"2\": return 2;\n  \
    \      case \"3\": return 3;\n        case \"4\": return 4;\n        case \"5\"\
    : return 5;\n        case \"6\": return 6;\n        case \"7\": return 7;\n  \
    \      case \"8\": return 8;\n        case \"9\": return 9;\n        case \"A\"\
    : return 10;\n        case \"B\": return 11;\n        case \"C\": return 12;\n\
    \        case \"D\": return 13;\n        case \"E\": return 14;\n        case\
    \ \"F\": return 15;\n    }\n}", "  var arr=num.split('');\n  var hex=[0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \  var hex_key=[];\n  var i=0;\n  while(i<arr.length){\n    var j=0;\n    while(j<hex.length){\n\
    \      if(arr[i]==hex[j]){\n        hex_key.push(j);\n      }\n      j++;\n  \
    \  }\n    i++;\n  }\n  return hex_key;\n}", "  return (num.toUpperCase() === 'A'\
    \ || num.toUpperCase() === 'B' || num.toUpperCase() === 'D' || num.toUpperCase()\
    \ === 'E' || num.toUpperCase() === 'F') ? true : false;\n}", "  let result = 0;\n\
    \  const arr = {\n    '0': false,\n    '1': false,\n    '2': true,\n    '3': true,\n\
    \    '4': false,\n    '5': true,\n    '6': false,\n    '7': true,\n    '8': false,\n\
    \    '9': false,\n    'A': false,\n    'B': true,\n    'C': false,\n    'D': true,\n\
    \    'E': false,\n    'F': false\n  }\n  for(let i = 0; i < num.length; i++){\n\
    \    result += arr[num[i]] ? 1 : 0;\n  }\n  return result;\n}", "    if(num>9){\n\
    \        if(num == 10){\n            return 'A';\n        }\n        if(num ==\
    \ 11){\n            return 'B';\n        }\n        if(num == 12){\n         \
    \   return 'C';\n        }\n        if(num == 13){\n            return 'D';\n\
    \        }\n        if(num == 14){\n            return 'E';\n        }\n     \
    \   if(num == 15){\n            return 'F';\n        }\n    }\n    return num;\n\
    }\n", "    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\
    \    let newarr = [];\n    let key = [];\n    let keystr = \"\";\n    let str1\
    \ = \"0123456789ABCDEF\";\n    let str2 = \"\";\n    for(let i = 0; i < str1.length;\
    \ i++){\n        if(num.includes(str1[i])){\n            str2 = str2 + str1[i];\n\
    \        }\n    }\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i]\
    \ === \"A\"){\n            newarr.push(10);\n        }else if(str2[i] === \"B\"\
    ){\n            newarr.push(11);\n        }else if(str2[i] === \"C\"){\n     \
    \       newarr.push(12);\n        }else if(str2[i] === \"D\"){\n            newarr.push(13);\n\
    \        }else if(str2[i] === \"E\"){\n            newarr.push(14);\n        }else\
    \ if(str2[i] === \"F\"){\n            newarr.push(15);\n        }else{\n     \
    \       newarr.push(Number(str2[i]));\n        }\n    }\n    for(let i = 0; i\
    \ < newarr.length; i++){\n        if(newarr[i] === 1){\n            key.push(1);\n\
    \        }else if(newarr[i] === 2){\n            key.push(2);\n        }else if(newarr[i]\
    \ === 3){\n            key.push(3);\n        }else if(newarr[i] === 5){\n    \
    \        key.push(5);\n        }else if(newarr[i] === 7){\n            key.push(7);\n\
    \        }else if(newarr[i] === 11){\n            key.push(11);\n        }else\
    \ if(newarr[i] === 13){\n            key.push(13);\n        }else{\n         \
    \   key.push(0);", "  return \"0123456789ABCDEF\".indexOf(num);\n}", "    if(num\
    \ >= 0 && num <= 9){\n        return num;\n    }else if(num >=10 && num <=15){\n\
    \        return String.fromCharCode(num + 55);\n    }\n}", "    return {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    }\n", "    let hex = '0123456789ABCDEF'\n    if(hex.indexOf(num) == -1){\n   \
    \     return 0\n    }else{\n        return hex.indexOf(num)\n    }\n}", "    let\
    \ hex = {\n        \"2\": true,\n        \"3\": true,\n        \"5\": true,\n\
    \        \"7\": true,\n        \"B\": true,\n        \"D\": true\n    }\n    let\
    \ count = 0;\n    num.split(\"\").forEach(n => {\n        if(hex[n]){\n      \
    \      count++;\n        }\n    })\n    return count;\n}", "  return !(num==1||num==0)&&(num==2||num==3||num==5||num==7||num==11||num==13||num==17||num==19||num==23||num==29||num==31||num==37||num==41||num==43||num==47||num==53||num==59||num==61||num==67||num==71||num==73||num==79||num==83||num==89||num==97);\n\
    }\n", "    var hex_prime = {\n        \"2\":true,\n        \"3\":true,\n     \
    \   \"5\":true,\n        \"7\":true,\n        \"B\":true,\n        \"D\":true\n\
    \    }\n    var count = 0;\n    var prime_list = [];\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex_prime[num[i]]){\n            count++\n            prime_list.push(num[i])\n\
    \        }\n    }\n    return [count, prime_list]\n}\n", "    return '0123456789ABCDEF'.indexOf(num);\n\
    }", "    let numToStr = num.toString();\n    let result = 0;\n    if(num<10) return\
    \ 0;\n    else{\n        for(let i=2; i<=numToStr/2; i++){\n            if(numToStr%i==0)\
    \ return 0;\n        }\n        return 1;\n    }\n}", "    switch(num) {\n   \
    \   case 10:\n        return 'A';\n      case 11:\n        return 'B';\n     \
    \ case 12:\n        return 'C';\n      case 13:\n        return 'D';\n      case\
    \ 14:\n        return 'E';\n      case 15:\n        return 'F';\n      default:\n\
    \        return num.toString();\n    }\n}\n", "    let obj = {\n        '0':0,\n\
    \        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n        '5':5,\n\
    \        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n        'A':10,\n\
    \        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n        'F':15\n\
    \    }\n    return obj[num]\n}\n", "    return ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'].indexOf(num);\n\
    }\n", "    var hex_arr = [2,3,5,7,11,13];\n    var counter = 0;\n    var result\
    \ = 0;\n    var arr_num = num.split('');\n    for(var i = 0; i < arr_num.length;\
    \ i++){\n        if(arr_num[i] == \"A\"){\n            counter++;\n        }\n\
    \        if(arr_num[i] == \"B\"){\n            counter++;\n        }\n       \
    \ if(arr_num[i] == \"C\"){\n            counter++;\n        }\n        if(arr_num[i]\
    \ == \"D\"){\n            counter++;\n        }\n        if(arr_num[i] == \"E\"\
    ){\n            counter++;\n        }\n        if(arr_num[i] == \"F\"){\n    \
    \        counter++;\n        }\n    }\n    for(var j = 0; j < counter; j++){\n\
    \        if(arr_num[j] == \"A\"){\n            result = result + hex_arr[0];\n\
    \        }\n        if(arr_num[j] == \"B\"){\n            result = result + hex_arr[1];\n\
    \        }\n        if(arr_num[j] == \"C\"){\n            result = result + hex_arr[2];\n\
    \        }\n        if(arr_num[j] == \"D\"){\n            result = result + hex_arr[3];\n\
    \        }\n        if(arr_num[j] == \"E\"){\n            result = result + hex_arr[4];\n\
    \        }\n        if(arr_num[j] == \"F\"){\n            result = result + hex_arr[5];\n\
    \        }\n    }\n    return result;\n}", "  return \"0123456789ABCDEF\".indexOf(num)\n\
    }", "\tswitch(num){\n\t\tcase 'A':\n\t\t\treturn 10;\n\t\tcase 'B':\n\t\t\treturn\
    \ 11;\n\t\tcase 'C':\n\t\t\treturn 12;\n\t\tcase 'D':\n\t\t\treturn 13;\n\t\t\
    case 'E':\n\t\t\treturn 14;\n\t\tcase 'F':\n\t\t\treturn 15;\n\t\tdefault:\n\t\
    \t\treturn parseInt(num);\n\t}\n}", "  let arr = '0123456789ABCDEF'.split('')\n\
    \  let dict = {}\n  for(let i = 0; i < arr.length; i++){\n    dict[arr[i]] = i\n\
    \  }\n  return dict[num]\n}\n", "    let key = [\n    '0', '1', '2', '3', '4',\
    \ '5', '6', '7',\n    '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n    ];\n    return\
    \ key.indexOf(num);\n}\n", "    if(num < 10){\n        return num;\n    }\n  \
    \  else if(num == 10){\n        return 'A';\n    }\n    else if(num == 11){\n\
    \        return 'B';\n    }\n    else if(num == 12){\n        return 'C';\n  \
    \  }\n    else if(num == 13){\n        return 'D';\n    }\n    else if(num ==\
    \ 14){\n        return 'E';\n    }\n    else if(num == 15){\n        return 'F';\n\
    \    }\n    else{\n        return 'bad input'\n    }\n}", "    var keys={\n  \
    \      '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    return keys[num];\n}", "    let a=parseInt(num,16);\n\
    \    let b=a.toString(16);\n    let c=0;\n    for(let i=0;i<b.length;i++){\n \
    \       if(b[i]=='2'||b[i]=='3'||b[i]=='5'||b[i]=='7'||b[i]=='b'||b[i]=='d'){\n\
    \            c++;\n        }\n    }\n    return c;\n}", "  return {0: 0, 1: 1,\
    \ 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, \"A\": 10, \"B\": 11, \"C\"\
    : 12, \"D\": 13, \"E\": 14, \"F\": 15}[num]\n}\n", "    const hex_number = {\n\
    \      A: 10,\n      B: 11,\n      C: 12,\n      D: 13,\n      E: 14,\n      F:\
    \ 15\n    }\n    if(hex_number[num]) return hex_number[num]\n    return num\n\
    \  }\n  \n  function hex_prime(hex_num){\n    return hex_num.split('').map(num\
    \ => hex_key(num)).filter(num => \n        (num !== 1) && (num !== 0) && (num\
    \ !== 4) && \n        (num !== 6) && (num !== 8) && (num !== 9) && (num !== 10)\
    \ && \n        (num !== 12) && (num !== 14) && (num !== 15)\n    ).length\n  }\n\
    \  console.log(hex_prime(\"AA\"))//2\n  console.log(hex_prime(\"AABBCCDDEE\"))//8\n\
    \  console.log(hex_prime(\"\"))//0\n  console.log(hex_prime(\"ABCDEF\"))//4\n\
    \  console.log(hex_prime(\"BABABABABABABABABABABABABABABABABABABABABABABABAB\"\
    ))//22\n  \n  \n  \n  \n  // Write a method that takes an array of numbers. \n\
    \  // If a pair of numbers in the array sums to zero, \n  // return the positions\
    \ of those two numbers. If no pair of numbers sums to zero, return `null`.\n \
    \ // Time complexity: O(n^2)\n  function twoSum(nums){\n    let output = null\n\
    \    for(let i = 0; i < nums.length; i++){\n      for(let j = i + 1; j < nums.length;\
    \ j++){\n        if(nums[i] + nums[j] === 0){\n          output = [i, j]\n   \
    \     }\n      }\n    }\n    return output\n  }\n  console.log(twoSum([1, 3, 5,\
    \ -3]))//[1, 3]\n  console.log(twoSum([1, 3, 5]))//null\n  \n  \n  ", "  return\
    \ parseInt(num, 16);\n}\n", "    switch(num){\n        case 'A':\n           \
    \ return 10;\n        case 'B':\n            return 11;\n        case 'C':\n \
    \           return 12;\n        case 'D':\n            return 13;\n        case\
    \ 'E':\n            return 14;\n        case 'F':\n            return 15;\n  \
    \      default:\n            return num;\n    }\n}\n", "  var primeHex = ['2','3','5','7','B','D'];\n\
    \  var count = 0;\n  var arr = num.split('');\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(primeHex.indexOf(arr[i]) > -1){\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "    switch(num){\n        case 'A':\n            return\
    \ 10;\n        case 'B':\n            return 11;\n        case 'C':\n        \
    \    return 12;\n        case 'D':\n            return 13;\n        case 'E':\n\
    \            return 14;\n        case 'F':\n            return 15;\n        default:\n\
    \            return Number(num);\n    }\n}", "    let obj = {\n        'A': 10,\n\
    \        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n    \
    \    'F': 15\n    }\n    let res = 0;\n    for(let i = 0; i < num.length; i++){\n\
    \        if(obj[num[i]]) res += obj[num[i]];\n        else res += parseInt(num[i]);\n\
    \    }\n    return res;\n}\n", "    switch(num){\n        case 'A': return 10;\n\
    \        case 'B': return 11;\n        case 'C': return 12;\n        case 'D':\
    \ return 13;\n        case 'E': return 14;\n        case 'F': return 15;\n   \
    \     default: return parseInt(num);\n    }\n}", "    var z = \"\";\n    var num\
    \ = num.toUpperCase();\n    var length = num.length;\n    var arr = [];\n    for(var\
    \ i = 0; i < length; i++){\n        var ix = i;\n        if(num[i] == \"A\" ||\
    \ num[i] == \"B\" || num[i] == \"C\" || num[i] == \"D\" || num[i] == \"E\" ||\
    \ num[i] == \"F\"){\n            ix = num[i].charCodeAt(0) - 55;\n        }\n\
    \        z += ix;\n    }\n    z = parseInt(z);\n    for(var i = 2; i < z; i++){\n\
    \        if(z % i == 0){\n            arr.push(i);\n        }\n    }\n    if(arr.length\
    \ == 0){\n        return 1;\n    }\n    else{\n        return 0;\n    }\n}\n",
  "  let key = { \n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n  \
    \  \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n   \
    \ \"9\": 9,\n    \"A\": 10,\n    \"B\": 11,\n    \"C\": 12,\n    \"D\": 13,\n\
    \    \"E\": 14,\n    \"F\": 15,\n  }\n  return key[num]\n}\n", "    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    return hex[num]\n}\n", "    var n = num.toUpperCase();\n    switch(n){\n\
    \      case 'A': return 10;\n      case 'B': return 11;\n      case 'C': return\
    \ 12;\n      case 'D': return 13;\n      case 'E': return 14;\n      case 'F':\
    \ return 15;\n      default: return parseInt(n);\n    }\n  }\n  function is_prime(num){\n\
    \    if(num < 2) return false;\n    for(var i = 2; i < num; i++){\n      if(num\
    \ % i === 0) return false;\n    }\n    return true;\n  }\n  function is_hex_prime(num){\n\
    \    return num === 'A' || num === 'B' || num === 'D';\n  }\n  function hexPrime(num){\n\
    \    var count = 0;\n    for(var i = 0; i < num.length; i++){\n      var a = hex_key(num[i]);\n\
    \      if(is_prime(a) || is_hex_prime(num[i])) count++;\n    }\n    return count;\n\
    \  }\n  //   hexPrime(\"\") == 0;\n  //   hexPrime(\"B1C9D\") == 3;\n  //   hexPrime(\"\
    0123456789ABCDEF\") == 8;\n  //   hexPrime(\"\") == 0;\n  //   hexPrime(\"B1C9D\"\
    ) == 3;\n  //   hexPrime(\"0123456789ABCDEF\") == 8;\n  //   hexPrime(\"012F1D7B\"\
    ) == 5;\n  //   hexPrime(\"FFFFFFF\") == 1;\n  //   hexPrime(\"8F47FF\") == 2;\n\
    \  //   hexPrime(\"C8AC2C\") == 3;\n  //   hexPrime(\"4E4C37\") == 3;\n  //  \
    \ hexPrime(\"08D3F9\") == 2;\n  //   hexPrime(\"E8CCA0\") == 2;\n  //   hexPrime(\"\
    3464D9\") == 3;\n  //   hexPrime(\"E86D22\") == 4;\n  //   hexPrime(\"B1C9D\"\
    ) == 3;\n  //", "    var hex_digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \    var prime_hex_digits = [2,3,5,7,'B','D'];\n    var hex_num = [];\n    for(var\
    \ i = 0; i < num.length; i++){\n        hex_num.push(num[i]);\n    }\n    var\
    \ prime_nums = 0;\n    for(var j = 0; j < hex_num.length; j++){\n        for(var\
    \ k = 0; k < prime_hex_digits.length; k++){\n            if(hex_num[j] === prime_hex_digits[k]){\n\
    \                prime_nums += 1;\n            }\n        }\n    }\n    return\
    \ prime_nums;\n}", "    switch(num){\n        case 'A':\n            return 10;\n\
    \        case 'B':\n            return 11;\n        case 'C':\n            return\
    \ 12;\n        case 'D':\n            return 13;\n        case 'E':\n        \
    \    return 14;\n        case 'F':\n            return 15;\n        default:\n\
    \            return num;\n    }\n}", "  if (num === '2' || num === '3' || num\
    \ === '5' || num === '7' || num === 'B' || num === 'D'){\n    return true;\n \
    \ } else {\n    return false;\n  }\n}\n", "    switch(num){\n        case \"A\"\
    : return 10;\n        case \"B\": return 11;\n        case \"C\": return 12;\n\
    \        case \"D\": return 13;\n        case \"E\": return 14;\n        case\
    \ \"F\": return 15;\n        default: return num;\n    }\n}", "var hex_nums =\
    \ [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\nvar primes = [2,3,5,7,11,13,17];\n\
    var hex_primes = [];\nvar total = 0;\n\nfor(var i = 0; i < primes.length; i++){\n\
    \    for(var j = 0; j < hex_nums.length; j++){\n        if(primes[i] === hex_nums[j]){\n\
    \            hex_primes.push(hex_nums[j]);\n        }\n    }\n}\nfor(var k = 0;\
    \ k < num.length; k++){\n    for(var l = 0; l < hex_primes.length; l++){\n   \
    \     if(num[k] === hex_primes[l]){\n            total += 1;\n        }\n    }\n\
    }\n\nreturn total;\n}\n", "    return num.toString(16).split('').map(a=>parseInt(a,16))\n\
    }", "  if(num === \"A\" || num === \"B\" || num === \"D\" || num === \"C\" ||\
    \ num === \"E\" || num === \"F\"){\n    return num;\n  }\n  else{\n    return\
    \ parseInt(num);\n  }\n}\n", "let hex = {\n    \"0\": 0,\n    \"1\": 1,\n    \"\
    2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\"\
    : 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"A\": 10,\n    \"B\": 11,\n    \"C\"\
    : 12,\n    \"D\": 13,\n    \"E\": 14,\n    \"F\": 15\n}\nreturn hex[num]\n}",
  "    switch(num) {\n      case 'A':\n        return 10;\n      case 'B':\n     \
    \   return 11;\n      case 'C':\n        return 12;\n      case 'D':\n       \
    \ return 13;\n      case 'E':\n        return 14;\n      case 'F':\n        return\
    \ 15;\n      default:\n        return parseInt(num);\n    }\n}", "    return parseInt(num,\
    \ 16);\n}\n", "    const hex = {\n        \"A\": 10,\n        \"B\": 11,\n   \
    \     \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let sum = 0;\n    num.split(\"\").forEach(el => {\n        if(hex[el]){\n\
    \            sum += hex[el];\n        } else {\n            sum += Number(el);\n\
    \        }\n    })\n    return sum;\n}", "\tlet hex ={\n\t\t'0':'0',\n\t\t'1':'1',\n\
    \t\t'2':'2',\n\t\t'3':'3',\n\t\t'4':'4',\n\t\t'5':'5',\n\t\t'6':'6',\n\t\t'7':'7',\n\
    \t\t'8':'8',\n\t\t'9':'9',\n\t\t'A':'10',\n\t\t'B':'11',\n\t\t'C':'12',\n\t\t\
    'D':'13',\n\t\t'E':'14',\n\t\t'F':'15'\n\t}\n\treturn hex[num]\n}\n", "    switch(num){\n\
    \        case '2':\n        case '3':\n        case '5':\n        case '7':\n\
    \        case 'B':\n        case 'D':\n            return 1;\n        default:\n\
    \            return 0;\n    }\n}\n", "  var i = 0;\n  var arr = [];\n  while(i\
    \ < num){\n    arr.push(i)\n    i++\n  }\n  return arr;\n}", "    let arr = num.split('');\n\
    \    let result = [];\n    let counter = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        switch(arr[i]){\n            case '2':\n            case '3':\n\
    \            case '5':\n            case '7':\n            case 'B':\n       \
    \     case 'D':\n                result.push(arr[i]);\n        }\n    }\n    for(let\
    \ i = 0; i < result.length; i++){\n        if(result[i] == result[i+1]){\n   \
    \         counter++;\n        }\n    }\n    return counter;\n}", "    let sum\
    \ = 0;\n    for(let i=0; i<num.length; i++){\n        if(num[i]==='2' || num[i]==='3'\
    \ || num[i]==='5' || num[i]==='7' || num[i]==='B' || num[i]==='D'){\n        \
    \    sum +=1;\n        }\n    }\n    return sum;\n}", "\tswitch(num){\n\t\tcase\
    \ \"0\":\n\t\t\treturn 0;\n\t\tcase \"1\":\n\t\t\treturn 1;\n\t\tcase \"2\":\n\
    \t\t\treturn 2;\n\t\tcase \"3\":\n\t\t\treturn 3;\n\t\tcase \"4\":\n\t\t\treturn\
    \ 4;\n\t\tcase \"5\":\n\t\t\treturn 5;\n\t\tcase \"6\":\n\t\t\treturn 6;\n\t\t\
    case \"7\":\n\t\t\treturn 7;\n\t\tcase \"8\":\n\t\t\treturn 8;\n\t\tcase \"9\"\
    :\n\t\t\treturn 9;\n\t\tcase \"A\":\n\t\t\treturn 10;\n\t\tcase \"B\":\n\t\t\t\
    return 11;\n\t\tcase \"C\":\n\t\t\treturn 12;\n\t\tcase \"D\":\n\t\t\treturn 13;\n\
    \t\tcase \"E\":\n\t\t\treturn 14;\n\t\tcase \"F\":\n\t\t\treturn 15;\n\t}\n}\n",
  "    if(num === 0) return 0;\n    if(num === 1) return 1;\n    if(num === 2) return\
    \ 2;\n    if(num === 3) return 3;\n    if(num === 4) return 4;\n    if(num ===\
    \ 5) return 5;\n    if(num === 6) return 6;\n    if(num === 7) return 7;\n   \
    \ if(num === 8) return 8;\n    if(num === 9) return 9;\n    if(num === 'A') return\
    \ 10;\n    if(num === 'B') return 11;\n    if(num === 'C') return 12;\n    if(num\
    \ === 'D') return 13;\n    if(num === 'E') return 14;\n    if(num === 'F') return\
    \ 15;\n    return false;\n}\n", "    var hex = {\n        0:0,\n        1:1,\n\
    \        2:2,\n        3:3,\n        4:4,\n        5:5,\n        6:6,\n      \
    \  7:7,\n        8:8,\n        9:9,\n        A:10,\n        B:11,\n        C:12,\n\
    \        D:13,\n        E:14,\n        F:15\n    }\n    return hex[num]\n}", " \
    \   let hex = {\n        '2':2,\n        '3':3,\n        '5':5,\n        '7':7,\n\
    \        'B':11,\n        'D':13\n    }\n    return hex[num]\n}\n", "    var hex_digits\
    \ = {\n        \"0\":0,\n        \"1\":1,\n        \"2\":2,\n        \"3\":3,\n\
    \        \"4\":4,\n        \"5\":5,\n        \"6\":6,\n        \"7\":7,\n    \
    \    \"8\":8,\n        \"9\":9,\n        \"A\":10,\n        \"B\":11,\n      \
    \  \"C\":12,\n        \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n\
    \    return hex_digits[num];\n}\n", "    let hexDigits = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"];\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\
    \ 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\
    \ 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\
    \ 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\
    \ 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\
    \ 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821,\
    \ 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\
    \ 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    let count = 0;\n   \
    \ for(let i = 0; i < num.length; i++){\n        if(primes.includes(", "    let\
    \ dict = {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n \
    \       '4':4,\n        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n\
    \        '9':9,\n        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n\
    \        'E':14,\n        'F':15\n    }\n    return dict[num]\n}\n", "\tvar output\
    \ = 0;\n\tswitch(num){\n\t\tcase 'A': \n\t\t\toutput = 10;\n\t\t\tbreak;\n\t\t\
    case 'B': \n\t\t\toutput = 11;\n\t\t\tbreak;\n\t\tcase 'C': \n\t\t\toutput = 12;\n\
    \t\t\tbreak;\n\t\tcase 'D': \n\t\t\toutput = 13;\n\t\t\tbreak;\n\t\tcase 'E':\
    \ \n\t\t\toutput = 14;\n\t\t\tbreak;\n\t\tcase 'F': \n\t\t\toutput = 15;\n\t\t\
    \tbreak;\n\t\tdefault:\n\t\t\toutput = parseInt(num);\n\t}\n\treturn output;\n\
    }", "    var arr = '0123456789ABCDEF'.split('');\n    var hex = new RegExp('^[0-9a-fA-F]+$');\n\
    \    if(hex.test(num)){\n    var new_arr = arr.splice(0,16);\n    } else {\n \
    \       return 'It is not a hexadecimal number';\n    }\n    var arr_num = num.split('');\n\
    \    var count = 0;\n    var flag = true;\n    for(var i = 0; i < arr_num.length;\
    \ i++){\n        for(var j = 2; j < arr_num[i]; j++){\n            if(arr_num[i]\
    \ % j == 0){\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if(flag){\n            count++;\n        }\n      \
    \  flag = true;\n    }\n    return count;\n}", "  var arr = [\"A\",\"B\",\"C\"\
    ,\"D\",\"E\",\"F\"];\n  var check = false;\n  if(parseInt(num) || num === \"0\"\
    ){\n    return true;\n  }\n  else{\n    for(var i = 0; i < arr.length; i++){\n\
    \      if(num === arr[i]){\n        check = true;\n      }\n    }\n    return\
    \ check;\n  }\n}\n", "  var obj = {\n    'A': 10,\n    'B': 11,\n    'C': 12,\n\
    \    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  var hexNum = obj[num]\n  return\
    \ hexNum\n}", "    let hex = {\n        10: \"A\",\n        11: \"B\",\n     \
    \   12: \"C\",\n        13: \"D\",\n        14: \"E\",\n        15: \"F\"\n  \
    \  }\n    if(num < 10){\n        return num;\n    }else{\n        return hex[num];\n\
    \    }\n}", "  if(num >= 'A' && num <= 'F'){\n    if(num === 'A') return 10;\n\
    \    if(num === 'B') return 11;\n    if(num === 'C') return 12;\n    if(num ===\
    \ 'D') return 13;\n    if(num === 'E') return 14;\n    if(num === 'F') return\
    \ 15;\n  }\n  else{\n    return parseInt(num);\n  }\n}\n", "    let hex_num =\
    \ {\n        'A': '10',\n        'B': '11',\n        'C': '12',\n        'D':\
    \ '13',\n        'E': '14',\n        'F': '15'\n    }\n    let hex = parseInt(hex_num[num])\n\
    \    return hex\n}", "    let key = {\n        '0': 0,\n        '1': 1,\n    \
    \    '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    return key[num]\n}\n", "    const hex = {\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    return hex[num]\n}\n", "    let\
    \ hexKeys = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n  \
    \      \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    return hexKeys[num]\n\
    }\n", "    var primes = [2,3,5,7,11,13];\n    var dict = {'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \    var sum = 0;\n    for(var i = 0; i < num.length; i++){\n        if(primes.includes(parseInt(num[i],16))\
    \ || primes.includes(dict[num[i]])){\n            sum++;\n        }\n    }\n \
    \   return sum;\n}", "    num = num.toString(16);\n    switch(num) {\n       \
    \ case '2':\n        case '3':\n        case '5':\n        case '7':\n       \
    \ case 'b':\n        case 'd':\n            return true;\n        default:\n \
    \           return false;\n    }\n}", "    switch(num){\n        case \"A\":\n\
    \            return 10;\n        case \"B\":\n            return 11;\n       \
    \ case \"C\":\n            return 12;\n        case \"D\":\n            return\
    \ 13;\n        case \"E\":\n            return 14;\n        case \"F\":\n    \
    \        return 15;\n        default:\n            return parseInt(num);\n   \
    \ }\n}\n", "\tif(num === 0){\n\t\treturn 0;\n\t}\n\treturn num === 10 ? \"A\"\
    \ : num === 11 ? \"B\" : num === 12 ? \"C\" : num === 13 ? \"D\" : num === 14\
    \ ? \"E\" : num === 15 ? \"F\" : undefined;\n}\n", "  const hex_number = {\n \
    \   '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n\
    \    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n\
    \    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hex_number[num]\n\
    }", "  var num = num.toUpperCase()\n  var answer = 0\n  for(var i = 0; i < num.length;\
    \ i++){\n    if(num[i] == \"2\" || num[i] == \"3\" || num[i] == \"5\" || num[i]\
    \ == \"7\" || num[i] == \"B\" || num[i] == \"D\"){\n      answer++\n    }\n  }\n\
    \  return answer\n}\n", "\tlet arr = [10,11,12,13,14,15]\n\tlet letters = [\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n\treturn arr.includes(num) ? letters[num-10]\
    \ : num\n}", "var hex = {\n    '0':0,\n    '1':1,\n    '2':2,\n    '3':3,\n  \
    \  '4':4,\n    '5':5,\n    '6':6,\n    '7':7,\n    '8':8,\n    '9':9,\n    'A':10,\n\
    \    'B':11,\n    'C':12,\n    'D':13,\n    'E':14,\n    'F':15\n  }\n  var number\
    \ = 0;\n  var hex_key = 0;\n  var x;\n  var n = num.length;\n  for(var i = 0;\
    \ i < n; i++){\n    x = hex[num[i]];\n    number += x * Math.pow(16,(n-i-1));\n\
    \  }\n  return number;\n}\n", "    return {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }[num]\n}\n", "    switch(num){\n      case 'A':return 10;\n \
    \     case 'B':return 11;\n      case 'C':return 12;\n      case 'D':return 13;\n\
    \      case 'E':return 14;\n      case 'F':return 15;\n      default: return num\n\
    \    }\n}", "\tswitch(num){\n\t\tcase 'A':\n\t\tcase 'B':\n\t\tcase 'D':\n\t\t\
    case 'E':\n\t\t\treturn true;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn false;\n\
    \t}\n}\n", "    switch(num){\n        case 'A':\n            return 10;\n    \
    \    case 'B':\n            return 11;\n        case 'C':\n            return\
    \ 12;\n        case 'D':\n            return 13;\n        case 'E':\n        \
    \    return 14;\n        case 'F':\n            return 15;\n        default:\n\
    \            return parseInt(num, 16);\n    }\n}", "    if(num == 2 || num ==\
    \ 3 || num == 5 || num == 7 || num == 11 || num == 13)\n        return true;\n\
    \    return false;\n}", "  const hex = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \  const primes = ['2','3','5','7','B','D'];\n  return primes.includes(hex[num]);\n\
    }\n", "    let key = {\n        '0':0,\n        '1':1,\n        '2':2,\n     \
    \   '3':3,\n        '4':4,\n        '5':5,\n        '6':6,\n        '7':7,\n \
    \       '8':8,\n        '9':9,\n        'A':10,\n        'B':11,\n        'C':12,\n\
    \        'D':13,\n        'E':14,\n        'F':15\n    }\n    return key[num]\n\
    }", "  var hexDeci = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n\
    \    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n\
    \    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n  }\n  return hexDeci[num];\n\
    }\n", "  var hex = num.toString(16).toUpperCase().split('');\n  var primes = 0;\n\
    \  var results = [2,3,5,7,11,13];\n  for(var i = 0; i < hex.length; i++){\n  \
    \  if(results.indexOf(parseInt(hex[i],16)) != -1){\n      primes++;\n    }\n \
    \ }\n  return primes;\n}\n", "    switch(num){\n        case '0':\n        case\
    \ '1':\n        case '2':\n        case '3':\n        case '4':\n        case\
    \ '5':\n        case '6':\n        case '7':\n        case '8':\n        case\
    \ '9':\n            return num;\n        case 'A':\n            return 10;\n \
    \       case 'B':\n            return 11;\n        case 'C':\n            return\
    \ 12;\n        case 'D':\n            return 13;\n        case 'E':\n        \
    \    return 14;\n        case 'F':\n            return 15;\n    }\n}\n", "   \
    \ switch(num){\n        case '0':\n        case '1':\n        case '2':\n    \
    \    case '3':\n        case '4':\n        case '5':\n        case '6':\n    \
    \    case '7':\n        case '8':\n        case '9':\n            return parseInt(num);\n\
    \        case 'A':\n            return 10;\n        case 'B':\n            return\
    \ 11;\n        case 'C':\n            return 12;\n        case 'D':\n        \
    \    return 13;\n        case 'E':\n            return 14;\n        case 'F':\n\
    \            return 15;\n    }\n}", "    return num.toString(16);\n}", "    if(num===\"\
    0\"){\n        return 1;\n    }\n    if(num===\"1\"){\n        return 0;\n   \
    \ }\n    if(num===\"2\"){\n        return 1;\n    }\n    if(num===\"3\"){\n  \
    \      return 1;\n    }\n    if(num===\"4\"){\n        return 0;\n    }\n    if(num===\"\
    5\"){\n        return 1;\n    }\n    if(num===\"6\"){\n        return 0;\n   \
    \ }\n    if(num===\"7\"){\n        return 1;\n    }\n    if(num===\"8\"){\n  \
    \      return 0;\n    }\n    if(num===\"9\"){\n        return 0;\n    }\n    if(num===\"\
    A\"){\n        return 0;\n    }\n    if(num===\"B\"){\n        return 1;\n   \
    \ }\n    if(num===\"C\"){\n        return 0;\n    }\n    if(num===\"D\"){\n  \
    \      return 1;\n    }\n    if(num===\"E\"){\n        return 0;\n    }\n    if(num===\"\
    F\"){\n        return 0;\n    }\n}", "\tswitch(num){\n\t\tcase \"A\": return 10;\n\
    \t\tcase \"B\": return 11;\n\t\tcase \"C\": return 12;\n\t\tcase \"D\": return\
    \ 13;\n\t\tcase \"E\": return 14;\n\t\tcase \"F\": return 15;\n\t\tdefault: return\
    \ parseInt(num);\n\t}\n}\n", "  let arr = ['A','B','C','D','E','F'];\n  if(arr.includes(num)){\n\
    \    return arr.indexOf(num) + 10;\n  }else{\n    return parseInt(num);\n  }\n\
    }", "    const hex = ['A','B','C','D','E','F'];\n    let hx = hex.indexOf(num)\
    \ + 10;\n    return hx;\n}\n", "    switch(num){\n      case '2':\n      case\
    \ '3':\n      case '5':\n      case '7':\n      case 'B':\n      case 'D':\n \
    \       return true;\n      default:\n        return false;\n    }\n  }\n  function\
    \ hex_check(str){\n    if(str === '')\n      return 0;\n    return str.split('').filter(hex_key).length;\n\
    \  }\n  console.log(hex_check(\"2A7B\"));//\u279E 2\n  console.log(hex_check(\"\
    \"));//\u279E 0\n  console.log(hex_check(\"657473\"));//\u279E 0\n  console.log(hex_check(\"\
    12B3DA\"));//\u279E 3", "    if(num === 'A' || num === 'B' || num === 'D' || num\
    \ === 'C' || num === 'E' || num === 'F'){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}", "    return num.toString(16).toUpperCase();\n\
    }", "    let key = [\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\
    \        'A', 'B', 'C', 'D', 'E', 'F'\n    ];\n    let value = [\n        0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15\n    ];\n    let hex\
    \ = new Map(key.map((x, i) => [x, value[i]]));\n    return hex.get(num);\n}",
  "    let primes = [2,3,5,7,11,13,17];\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    for(let i = 0; i < primes.length; i++){\n        if(num === primes[i]){\n\
    \            return hex[primes[i]];\n        }\n    }\n}\n", "    var arr = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    var index = arr.indexOf(num);\n    return index;\n}", "  var hex_dict = {\n\
    \    \"0\":0,\n    \"1\":1,\n    \"2\":2,\n    \"3\":3,\n    \"4\":4,\n    \"\
    5\":5,\n    \"6\":6,\n    \"7\":7,\n    \"8\":8,\n    \"9\":9,\n    \"A\":10,\n\
    \    \"B\":11,\n    \"C\":12,\n    \"D\":13,\n    \"E\":14,\n    \"F\":15\n  }\n\
    \  return hex_dict[num]\n}", "    switch(num){\n        case \"A\":\n        \
    \    return 10;\n        case \"B\":\n            return 11;\n        case \"\
    C\":\n            return 12;\n        case \"D\":\n            return 13;\n  \
    \      case \"E\":\n            return 14;\n        case \"F\":\n            return\
    \ 15;\n        default:\n            return parseInt(num);\n    }\n}", "  switch(num){\n\
    \    case 'A':\n      return 10;\n    case 'B':\n      return 11;\n    case 'C':\n\
    \      return 12;\n    case 'D':\n      return 13;\n    case 'E':\n      return\
    \ 14;\n    case 'F':\n      return 15;\n    default:\n      return parseInt(num);\n\
    \  }\n}\n", "    let key = {\n        0: 0,\n        1: 1,\n        2: 2,\n  \
    \      3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n   \
    \     8: 8,\n        9: 9,\n        A: 10,\n        B: 11,\n        C: 12,\n \
    \       D: 13,\n        E: 14,\n        F: 15\n    }\n    return key[num]\n}\n",
  "    let key = {\n        A: 10,\n        B: 11,\n        C: 12,\n        D: 13,\n\
    \        E: 14,\n        F: 15\n    }\n    if(typeof num === 'string'){\n    \
    \    return key[num]\n    }\n    return num\n}\n", "\tlet hex = \"0123456789ABCDEF\"\
    ;\n\tlet prime = [1,1,1,0,1,0,1,0,0,0,1,1,0,1,0,1];\n\tlet arr = num.split(\"\"\
    );\n\tlet count = 0;\n\tfor(let i=0; i<arr.length; i++){\n\t\tlet index = hex.indexOf(arr[i]);\n\
    \t\tif(prime[index] === 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
  "    switch(num){\n        case \"A\":\n            return 10;\n        case \"\
    B\":\n            return 11;\n        case \"C\":\n            return 12;\n  \
    \      case \"D\":\n            return 13;\n        case \"E\":\n            return\
    \ 14;\n        case \"F\":\n            return 15;\n        default:\n       \
    \     return parseInt(num);\n    }\n}", "  return num.replace('A','10').replace('B','11').replace('C','12').replace('D','13').replace('E','14').replace('F','15');\n\
    }", "    let hex = {\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5,\
    \ \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"\
    D\": 13, \"E\": 14, \"F\": 15}\n    return hex[num]\n}\n", "    let numValue =\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    return numValue[num];\n}", "  switch(num){\n    case 'A': return 10;\n  \
    \  case 'B': return 11;\n    case 'C': return 12;\n    case 'D': return 13;\n\
    \    case 'E': return 14;\n    case 'F': return 15;\n    default: return parseInt(num);\n\
    \  }\n}\n", "  \n  var primes = {\n      '2':true,\n      '3':true,\n      '5':true,\n\
    \      '7':true,\n      'B':true,\n      'D':true\n  }\n  \n  var ctr = 0;\n \
    \ \n  for(var i = 0; i < num.length; i++){\n    if(primes[num[i]]){\n      ctr++;\n\
    \    }\n  }\n  \n  return ctr;\n}\n", "  var alpha = {\"A\": 10, \"B\": 11, \"\
    C\": 12, \"D\": 13, \"E\": 14, \"F\": 15};\n  var nums = \"123456789ABCDEF\";\n\
    \  if(alpha[num]) {\n    return alpha[num];\n  }\n  return parseInt(num);\n}\n",
  "    const keys = {'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n    return keys[num]\n\
    }", "    var obj = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n\
    \    var newNum = []\n    for(var i = 0; i < num.length; i++){\n        newNum.push(obj[num[i]])\n\
    \    }\n    return newNum\n}", "    let hex_arr = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \    return hex_arr.indexOf(num);\n}\n", "  var key = [2,3,5,7,11,13];\n  return\
    \ key.indexOf(num)!==-1;\n}", "  var key = {\n    \"0\": true,\n    \"1\": true,\n\
    \    \"2\": true,\n    \"3\": true,\n    \"4\": true,\n    \"5\": true,\n    \"\
    6\": true,\n    \"7\": true,\n    \"8\": true,\n    \"9\": true,\n    \"A\": true,\n\
    \    \"B\": true,\n    \"C\": true,\n    \"D\": true,\n    \"E\": true,\n    \"\
    F\": true\n  }\n  return key[num];\n}\n", "  return {\n    'A': 10,\n    'B':\
    \ 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }[num] || num\n\
    }", "  var hex_dict = {0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n\
    \  return hex_dict[num]\n}", "    var mappy = {\n        0 : 1,\n        1 : 1,\n\
    \        2 : 2,\n        3 : 3,\n        4 : 1,\n        5 : 5,\n        6 : 1,\n\
    \        7 : 7,\n        8 : 1,\n        9 : 1,\n        'A' : 11,\n        'B'\
    \ : 11,\n        'C' : 1,\n        'D' : 13,\n        'E' : 1,\n        'F' :\
    \ 1\n    }\n    return mappy[num]\n}\n", "    var arr = [];\n    for(var i = 0;\
    \ i < 16; i++){\n        if(i < 10){\n            arr.push(i);\n        }else{\n\
    \            arr.push(String.fromCharCode(i + 55));\n        }\n    }\n    if(typeof\
    \ num == \"string\"){\n        return arr.indexOf(num);\n    }else{\n        return\
    \ arr[num];\n    }\n}", "  switch(num){\n    case \"A\":\n      return 10;\n \
    \   case \"B\":\n      return 11;\n    case \"C\":\n      return 12;\n    case\
    \ \"D\":\n      return 13;\n    case \"E\":\n      return 14;\n    case \"F\"\
    :\n      return 15;\n    default:\n      return parseInt(num);\n  }\n}\n", " \
    \   var digits = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n\
    \        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n\
    \        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n\
    \        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n\
    \        \"F\": 15\n    }\n    return digits[num];\n}\n", "\tvar hex = {\n\t\t\
    \"0\": 0,\n\t\t\"1\": 1,\n\t\t\"2\": 2,\n\t\t\"3\": 3,\n\t\t\"4\": 4,\n\t\t\"\
    5\": 5,\n\t\t\"6\": 6,\n\t\t\"7\": 7,\n\t\t\"8\": 8,\n\t\t\"9\": 9,\n\t\t\"A\"\
    : 10,\n\t\t\"B\": 11,\n\t\t\"C\": 12,\n\t\t\"D\": 13,\n\t\t\"E\": 14,\n\t\t\"\
    F\": 15\n\t}\n\treturn hex[num]\n}", "    let key = {\n        0: true,\n    \
    \    1: true,\n        2: true,\n        3: true,\n        4: true,\n        5:\
    \ true,\n        6: true,\n        7: true,\n        8: true,\n        9: true,\n\
    \        'A': true,\n        'B': true,\n        'C': true,\n        'D': true,\n\
    \        'E': true,\n        'F': true\n    }\n    return key[num]\n}", "\tvar\
    \ key = '0123456789ABCDEF';\n\tvar arr = [];\n\tfor(var i = 0; i<key.length; i++){\n\
    \t\tarr.push(key[i]);\n\t}\n\tvar index = arr.indexOf(num);\n\treturn index;\n\
    }\n", "    if(num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num\
    \ == 13){\n        return true;\n    }\n    return false;\n}\n", "\tlet key =\
    \ {\n\t\t'A': 10,\n\t\t'B': 11,\n\t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t\
    'F': 15\n\t}\n\treturn key[num]\n}\n", "    let num_list = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \    return num_list.indexOf(num);\n}", "    var hexList = [0,1,2,3,4,5,6,7,8,9,\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var primes = [2,3,5,7,11,13];\n    var\
    \ counter = 0;\n    for(var i = 0; i < hexList.length; i++){\n        if(primes.includes(hexList[i])){\n\
    \            counter++;\n        }\n    }\n    return counter;\n}\n", "    let\
    \ primes = [2,3,5,7,11,13,17];\n    let key = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \    return primes.includes(key[num]);\n}", "    if(num===\"A\"){\n        return\
    \ 10;\n    }else if(num===\"B\"){\n        return 11;\n    }else if(num===\"C\"\
    ){\n        return 12;\n    }else if(num===\"D\"){\n        return 13;\n    }else\
    \ if(num===\"E\"){\n        return 14;\n    }else if(num===\"F\"){\n        return\
    \ 15;\n    }else{\n        return num;\n    }\n}\n", "    if(num==\"A\"||num==\"\
    B\"||num==\"C\"||num==\"D\"||num==\"E\"||num==\"F\"){\n        return num;\n \
    \   }\n    return \"\";\n}", "  var hex = {\n      '0': true,\n      '1': true,\n\
    \      '2': true,\n      '3': true,\n      '4': true,\n      '5': true,\n    \
    \  '6': true,\n      '7': true,\n      '8': true,\n      '9': true,\n      'A':\
    \ true,\n      'B': true,\n      'C': true,\n      'D': true,\n      'E': true,\n\
    \      'F': true\n  }\n  return hex[num];\n}\n", "    var key = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n\
    \    return key[num]\n}\n", "  let arr = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n  return arr.indexOf(num);\n\
    }\n", "    let res = 0;\n    for(let i = 0; i < num.length; i++){\n        if(num[i]\
    \ == 1 || num[i] == 0){\n            continue;\n        }\n        res++;\n  \
    \  }\n    return res;\n}", "    let keys = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let values = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n    let hex_map =\
    \ new Map(keys.map((x, i) => [x, values[i]]));\n    return hex_map.get(num);\n\
    }", "  const h = {\n    0:2,1:3,2:5,3:7,4:11,5:13,6:17,7:19,8:23,9:29,\n    A:31,B:37,C:41,D:43,E:47,F:53\n\
    \  }\n  return h[num]\n}", "    return num\n        .split('')\n        .map(x\
    \ => {\n            switch(x) {\n                case 'A': return 10;\n      \
    \          case 'B': return 11;\n                case 'C': return 12;\n      \
    \          case 'D': return 13;\n                case 'E': return 14;\n      \
    \          case 'F': return 15;\n                default: return x;\n        \
    \    }\n        })\n        .map(x => parseInt(x, 10))\n        .filter(x => (x\
    \ === 2 || x === 3 || x === 5 || x === 7 || x === 11 || x === 13))\n        .length;\n\
    }", "    let key = {\n        'A':10,\n        'B':11,\n        'C':12,\n    \
    \    'D':13,\n        'E':14,\n        'F':15\n    }\n    if(key[num]) return\
    \ key[num]\n    else return Number(num)\n}\n", "    let arr = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \    let num1 = +num;\n    let res = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(num1 == arr[i]){\n            res = i;\n        }\n    }\n    return\
    \ res;\n}\n", "    var hex = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \    for(var i = 0; i < hex.length; i++){\n        if(num === hex[i]){\n     \
    \       return i;\n        }\n    }\n}\n", "\tlet obj = {10:\"A\", 11:\"B\", 12:\"\
    C\", 13:\"D\", 14:\"E\", 15:\"F\"};\n\treturn obj[num];\n}\n", "  if (num ===\
    \ 2 || num === 3 || num === 5 || num === 7 || num === 11 || num === 13) return\
    \ true;\n  return false;\n}\n", "    return ( num >= 'A' && num <= 'F' || num\
    \ >= 'a' && num <= 'f')\n}", "    switch(num){\n        case 'A':\n          \
    \  return 10;\n        case 'B':\n            return 11;\n        case 'C':\n\
    \            return 12;\n        case 'D':\n            return 13;\n        case\
    \ 'E':\n            return 14;\n        case 'F':\n            return 15;\n  \
    \      default:\n            return Number(num);\n    }\n}", "    var key = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \    return key[num];\n}\n", "    const hexPrimes = [2,3,5,7,11,13];\n    return\
    \ hexPrimes.includes(num);\n}", "\tvar hex_key = {\n\t\t'0':0,\n\t\t'1':1,\n\t\
    \t'2':2,\n\t\t'3':3,\n\t\t'4':4,\n\t\t'5':5,\n\t\t'6':6,\n\t\t'7':7,\n\t\t'8':8,\n\
    \t\t'9':9,\n\t\t'A':10,\n\t\t'B':11,\n\t\t'C':12,\n\t\t'D':13,\n\t\t'E':14,\n\t\
    \t'F':15\n\t}\n\treturn hex_key[num];\n}", "    let hexKey = {\n        'A': 10,\n\
    \        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n    \
    \    'F': 15\n    }\n    return hexKey[num]\n}", "  num = num.toUpperCase();\n\
    \  if (num === 'A'){return 10;}\n  if (num === 'B'){return 11;}\n  if (num ===\
    \ 'C'){return 12;}\n  if (num === 'D'){return 13;}\n  if (num === 'E'){return\
    \ 14;}\n  if (num === 'F'){return 15;}\n  return Number(num);\n}", "  let hash\
    \ = {\n    '0':0,\n    '1':1,\n    '2':2,\n    '3':3,\n    '4':4,\n    '5':5,\n\
    \    '6':6,\n    '7':7,\n    '8':8,\n    '9':9,\n    'A':10,\n    'B':11,\n  \
    \  'C':12,\n    'D':13,\n    'E':14,\n    'F':15\n  }\n  return hash[num]\n}",
  "\tvar key = {'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n\treturn key[num]\n}\n",
  "  switch(num){\n    case 'A':\n      return 10;\n    case 'B':\n      return 11;\n\
    \    case 'C':\n      return 12;\n    case 'D':\n      return 13;\n    case 'E':\n\
    \      return 14;\n    case 'F':\n      return 15;\n    default:\n      return\
    \ parseInt(num);\n  }\n}", "    let num1 = num.toString().split('')\n    let newArr\
    \ = []\n    for(let i = 0; i < num1.length; i++){\n        if(num1[i] === '0'\
    \ || num1[i] === '1' || num1[i] === '2' || num1[i] === '3' || num1[i] === '4'\
    \ || num1[i] === '5' || num1[i] === '6' || num1[i] === '7' || num1[i] === '8'\
    \ || num1[i] === '9' || num1[i] === 'A' || num1[i] === 'B' || num1[i] === 'C'\
    \ || num1[i] === 'D' || num1[i] === 'E' || num1[i] === 'F'){\n            newArr.push(num1[i])\n\
    \        }\n    }\n    return newArr\n}", "\tvar holder = 0;\n\tif(num === 'A'\
    \ || num === 'B' || num === 'D' || num === '3' || num === '5' || num === '7'){\n\
    \t\tholder = 1;\n\t}\n\treturn holder;\n}", "    const hex = {\n        '0':0,\n\
    \        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n        '5':5,\n\
    \        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n        'A':10,\n\
    \        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n        'F':15\n\
    \    }\n    return hex[num]\n}", "\tvar keys ={\n\t\t'A':10,\n\t\t'B':11,\n\t\t\
    'C':12,\n\t\t'D':13,\n\t\t'E':14,\n\t\t'F':15\n\t}\n\treturn keys[num]\n}\n",
  "    if(parseInt(num, 16) % 2 === 0){\n        return true;\n    } else if(parseInt(num,\
    \ 16) % 3 === 0){\n        return true;\n    } else if(parseInt(num, 16) % 5 ===\
    \ 0){\n        return true;\n    } else if(parseInt(num, 16) % 7 === 0){\n   \
    \     return true;\n    } else if(parseInt(num, 16) % 11 === 0){\n        return\
    \ true;\n    } else if(parseInt(num, 16) % 13 === 0){\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    const key = {\n      0:0,\n\
    \      1:1,\n      2:2,\n      3:3,\n      4:4,\n      5:5,\n      6:6,\n    \
    \  7:7,\n      8:8,\n      9:9,\n      A:10,\n      B:11,\n      C:12,\n     \
    \ D:13,\n      E:14,\n      F:15\n    }\n    let arr = num.split('');\n    let\
    \ sum = 0;\n    for(let i = 0; i < arr.length; i++){\n      sum += key[arr[i]];\n\
    \    }\n    return sum;\n  }\n  \n  function hex_to_dec(num){\n    const key =\
    \ {\n      0:0,\n      1:1,\n      2:2,\n      3:3,\n      4:4,\n      5:5,\n\
    \      6:6,\n      7:7,\n      8:8,\n      9:9,\n      A:10,\n      B:11,\n  \
    \    C:12,\n      D:13,\n      E:14,\n      F:15\n    }\n    let arr = num.split('');\n\
    \    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n      sum += key[arr[i]]\
    \ * (16 ** (arr.length - 1 - i));\n    }\n    return sum;\n  }\n  \n  function\
    \ dec_to_hex(num){\n    const key = {\n      0:0,\n      1:1,\n      2:2,\n  \
    \    3:3,\n      4:4,\n      5:5,\n      6:6,\n      7:7,\n      8:8,\n      9:9,\n\
    \      10:'A',\n      11:'B',\n      12:'C',\n      13:'D',\n      14:'E',\n \
    \     15:'F'\n    }\n    let newNum = '';\n    while(num > 0){\n      newNum =\
    \ key[num % 16] + newNum;\n      num = Math.floor(num / 16);\n   ", "    const\
    \ hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D':\
    \ 13,\n        'E': 14,\n        'F': 15\n    }\n    return hex[num] || parseInt(num)\n\
    }", "  switch(num){\n    case 'A':\n      return 10;\n    case 'B':\n      return\
    \ 11;\n    case 'C':\n      return 12;\n    case 'D':\n      return 13;\n    case\
    \ 'E':\n      return 14;\n    case 'F':\n      return 15;\n    default:\n    \
    \  return Number(num);\n  }\n}\n", "    let answer = {'2':2, '3':3, '5':5, '7':7,\
    \ 'B':11, 'D':13}\n    return answer[num]\n}", "    switch(num){\n        case\
    \ 0: return 0;\n        case 1: return 0;\n        case 2: return 1;\n       \
    \ case 3: return 1;\n        case 4: return 0;\n        case 5: return 1;\n  \
    \      case 6: return 0;\n        case 7: return 1;\n        case 8: return 0;\n\
    \        case 9: return 0;\n        case 10: return 0;\n        case 11: return\
    \ 1;\n        case 12: return 0;\n        case 13: return 1;\n        case 14:\
    \ return 0;\n        case 15: return 0;\n    }\n}", "  var specialHex = {'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \  return specialHex[num] || Number(num);\n}", "  var hex = {\n    'A': '10',\n\
    \    'B': '11',\n    'C': '12',\n    'D': '13',\n    'E': '14',\n    'F': '15'\n\
    \  }\n  if(hex[num]) return hex[num];\n  return num;\n}", "\tvar hex = \"0123456789ABCDEF\"\
    \n\tvar map = {}\n\tfor(var i = 0; i < hex.length; i++){\n\t\tmap[hex[i]] = i\n\
    \t}\n\treturn map[num]\n}\n", "    let hexCode = {\n        '0':0,\n        '1':1,\n\
    \        '2':2,\n        '3':3,\n        '4':4,\n        '5':5,\n        '6':6,\n\
    \        '7':7,\n        '8':8,\n        '9':9,\n        'A':10,\n        'B':11,\n\
    \        'C':12,\n        'D':13,\n        'E':14,\n        'F':15\n    }\n  \
    \  return hexCode[num];\n}\n", "    if(num==\"A\"||num==\"B\"||num==\"C\"||num==\"\
    D\"||num==\"E\"||num==\"F\"){\n        return (parseInt(num,16));\n    }else{\n\
    \        return parseInt(num);\n    }\n}", "\tvar key = {\n\t\t0:0,\n\t\t1:1,\n\
    \t\t2:2,\n\t\t3:3,\n\t\t4:4,\n\t\t5:5,\n\t\t6:6,\n\t\t7:7,\n\t\t8:8,\n\t\t9:9,\n\
    \t\tA:10,\n\t\tB:11,\n\t\tC:12,\n\t\tD:13,\n\t\tE:14,\n\t\tF:15\n\t}\n\treturn\
    \ key[num];\n}", "    switch(num){\n        case 'A': return 10;\n        case\
    \ 'B': return 11;\n        case 'C': return 12;\n        case 'D': return 13;\n\
    \        case 'E': return 14;\n        case 'F': return 15;\n        default:\
    \ return parseInt(num);\n    }\n}", "    var hex=[\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var\
    \ dec=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n    var hash={};\n    for(var\
    \ i=0;i<hex.length;i++){\n        hash[hex[i]]=dec[i];\n    }\n    return hash[num];\n\
    }", "    let letters = {'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n    return\
    \ letters[num] || parseInt(num);\n}", "\tif(num == 0) return 0;\n\tlet i = 0;\n\
    \twhile(num != 1){\n\t\ti++;\n\t\tnum = Math.floor(num/16);\n\t}\n\treturn i;\n\
    }", "    var dict = {\n        '2': 2,\n        '3': 3,\n        '5': 5,\n   \
    \     '7': 7,\n        'B': 11,\n        'D': 13\n    }\n    return dict[num];\n\
    }\n", "    let dict = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9:\
    \ 9, \n                A: 10, B: 11, C: 12, D: 13, E: 14, F: 15}\n    return dict[num]\n\
    }", "  let hex=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \  return hex.indexOf(num);\n}\n", "   const hex = {\n      'A': 10,\n      'B':\
    \ 11,\n      'C': 12,\n      'D': 13,\n      'E': 14,\n      'F': 15\n   }\n \
    \  return num in hex ? hex[num] : num\n}\n", "   var a,b,num;\n   var new_num='';\n\
    \   var arr=[];\n   var arr1=[];\n   var sum=0;\n   a=num.toString(16);\n   b=a.toUpperCase();\n\
    \   //console.log(b);\n   for(var i=0;i<b.length;i++){\n   \tarr.push(b[i]);\n\
    \   }\n   for(var j=0;j<arr.length;j++){\n   \tswitch(arr[j]){\n   \t\tcase 'A':\n\
    \   \t\t\tnew_num+='10';\n   \t\t\tbreak;\n   \t\tcase 'B':\n   \t\t\tnew_num+='11';\n\
    \   \t\t\tbreak;\n   \t\tcase 'C':\n   \t\t\tnew_num+='12';\n   \t\t\tbreak;\n\
    \   \t\tcase 'D':\n   \t\t\tnew_num+='13';\n   \t\t\tbreak;\n   \t\tcase 'E':\n\
    \   \t\t\tnew_num+='14';\n   \t\t\tbreak;\n   \t\tcase 'F':\n   \t\t\tnew_num+='15';\n\
    \   \t\t\tbreak;\n   \t\tdefault:\n   \t\t\tnew_num+=arr[j];\n   \t\t\tbreak;\n\
    \   \t}\n   }\n   for(var k=0;k<new_num.length;k++){\n   \tarr1.push(new_num[k]);\n\
    \   }\n   //console.log(arr1);\n   for(var p=0;p<arr1.length;p++){\n   \tsum+=parseInt(arr1[p]);\n\
    \   }\n   //console.log(sum);\n   return sum;\n}", "    if(num<10){\n        return\
    \ num\n    }\n    if(num=='A'){\n        return 10\n    }\n    if(num=='B'){\n\
    \        return 11\n    }\n    if(num=='C'){\n        return 12\n    }\n    if(num=='D'){\n\
    \        return 13\n    }\n    if(num=='E'){\n        return 14\n    }\n    if(num=='F'){\n\
    \        return 15\n    }\n    return 0\n}", "    return num.toString(16).split('').map(\
    \ (c) => (parseInt(c, 16) > 9 ? parseInt(c, 16) + 7 : parseInt(c, 16)) )\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
