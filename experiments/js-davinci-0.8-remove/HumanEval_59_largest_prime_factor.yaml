name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  function largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    //No need to traverse every whole number. You only need to traverse\
    \ until the square root.\n    for(var i = Math.floor(Math.sqrt(n)); i >= 2; i--){\n\
    \        if(n % i === 0 && is_prime(i)){\n            return i;\n        }\n \
    \   }\n}\n\nlargest_prime_factor(600851475143);", "    //Determine the first prime\
    \ less than or equal to sqrt(n)\n    var max = Math.floor(Math.sqrt(n));\n   \
    \ var count = 0;\n    var i = 2;\n    while(i <= max){\n        if(is_prime(i)){\n\
    \            count = i;\n        }\n        i++;\n    }\n    //return count;\n\
    \    return largest_factor(n, count);\n}\n", "  var i = 2;\n  var flag = true;\n\
    \  while(flag){\n    if(n%i==0){\n      n = n/i;\n    }\n    else{\n      i =\
    \ i+1;\n    }\n    if(n==1){\n      flag = false;\n    }\n  }\n  return i;\n}",
  "\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\t\
    else{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n", "\tvar i = 2, max_prime = 2;\n\
    \twhile(i*i <= n){\n\t\tif(n % i == 0){\n\t\t\tn /= i;\n\t\t\tmax_prime = i;\n\
    \t\t}else{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(n > max_prime){\n\t\tmax_prime = n;\n\
    \t}\n\treturn max_prime;\n}", "\tvar largest = 1;\n\twhile(n % 2 == 0){\n\t\t\
    largest = 2;\n\t\tn /= 2;\n\t}\n\tfor(var i = 3; i <= Math.sqrt(n); i += 2){\n\
    \t\twhile(n % i == 0){\n\t\t\tlargest = i;\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif(n\
    \ > 2){\n\t\tlargest = n;\n\t}\n\treturn largest;\n}\n", "    //var primeFactors\
    \ = [];\n    var counter = 2;\n    while(n !== 1){\n        if(n % counter ===\
    \ 0){\n            n = n / counter;\n        }\n        else{\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\n", "\tvar factors = [];\n\tfor(var\
    \ i = 2; i <= n; i++){\n\t\tif(n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /=\
    \ i;\n\t\t\ti = 1;\n\t\t}\n\t}\n\treturn factors[factors.length - 1];\n}\n", " \
    \   if(n == 1) return null;\n    var prime_factors = [];\n    var current_prime\
    \ = 2;\n    while(n > 1){\n        if(n % current_prime == 0){\n            prime_factors.push(current_prime);\n\
    \            n /= current_prime;\n        } else {\n            current_prime\
    \ = next_prime(current_prime);\n        }\n    }\n    return Math.max.apply(null,\
    \ prime_factors);\n}\n", "  var i = 2;\n  var factors = [];\n  while(n > 1){\n\
    \    if(n % i === 0){\n      factors.push(i);\n      n = n / i;\n    } else {\n\
    \      i += 1;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\nlargest_prime_factor(13195);\n\
    largest_prime_factor(600851475143);", "\tfor(let i = 2; i < n; i++){\n\t\tif(is_prime(i)\
    \ && n % i == 0){\n\t\t\tn = n / i;\n\t\t}\n\t}\n\treturn n;\n}\n", "    for(var\
    \ i = Math.floor(Math.sqrt(n)); i > 1; i--){\n        if(is_prime(i) && n % i\
    \ == 0){\n            return i;\n        }\n    }\n}\n", "  var i = Math.floor(Math.sqrt(n));\n\
    \  while(i > 0){\n    if(n % i === 0 && is_prime(i)){\n      return i;\n    }\n\
    \    i--;\n  }\n}\n", "    //Start i at n / 2, since all factors of n are less\
    \ than n / 2.\n    for(let i = n / 2; i > 1; i--){\n        //Check if i is prime.\n\
    \        if(is_prime(i)){\n            //Check if i is a factor of n.\n      \
    \      if(n % i === 0){\n                //If so, return i.\n                return\
    \ i;\n            }\n        }\n    }\n}\n", "    if(n <= 1){\n        return\
    \ NaN;\n    }\n    var div = 2;\n    while(n % div !== 0){\n        div++;\n \
    \   }\n    if(n === div){\n        return NaN;\n    }\n    return largest_prime_factor(n\
    \ / div);\n}", "\tvar i = 2;\n\tvar max = 0;\n\twhile(i <= n){\n\t\tif(n % i ==\
    \ 0){\n\t\t\tif(largest_prime_factor(i) == i){\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t\
    \tn = n / i;\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\n", "  var factors = [];\n\
    \  var primes = [];\n  var prime = 2;\n  var largest_prime = 0;\n  //The loop\
    \ below finds all the factors of n\n  while(n != 1){\n    while(n % prime == 0){\n\
    \      factors.push(prime);\n      n = n / prime;\n    }\n    prime++;\n  }\n\
    \  //The loop below finds the largest prime\n  for(var i = 0; i < factors.length;\
    \ i++){\n    var check = true;\n    for(var j = 2; j < factors[i]; j++){\n   \
    \   if(factors[i] % j == 0){\n        check = false;\n      }\n    }\n    if(check){\n\
    \      largest_prime = factors[i];\n    }\n  }\n  return largest_prime;\n}\n",
  "  var factors = [];\n  findFactors(n, 1, factors);\n  return factors[factors.length\
    \ - 1];\n}\n", "  var i = 2;\n  while(i <= n){\n    if(n % i == 0){\n      n /=\
    \ i;\n    }\n    else{\n      i++;\n    }\n  }\n  return i;\n}\n", "  let i =\
    \ 2;\n  let largest = 0;\n  while(n !== 1){\n    if(n % i === 0){\n      largest\
    \ = i;\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return largest;\n\
    }\n\n\n", "  var L = [];\n  var prime_factors = [];\n  var factors = prime_factors_of(n);\n\
    \  var prime_factors = [];\n  //Find factors of n, then find the largest prime\
    \ factor.\n  for(var i = 0; i < factors.length; i++){\n    if(is_prime(factors[i])){\n\
    \      prime_factors.push(factors[i]);\n    }\n  }\n  return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "  var number = n;\n  var largestFactor = 1;\n  var i = 2;\n  while(i\
    \ <= number){\n    if(number % i == 0){\n      number = number / i;\n      largestFactor\
    \ = i;\n    }\n    else{\n      i++;\n    }\n  }\n  return largestFactor;\n}\n",
  "\tvar prime=false;\n\tvar prime_factor=2;\n\tvar largest_factor=2;\n\t\n\twhile(n>1){\n\
    \t\twhile(n%prime_factor==0){\n\t\t\tn=n/prime_factor;\n\t\t\tlargest_factor=prime_factor;\n\
    \t\t}\n\t\tprime_factor=next_prime(prime_factor);\n\t}\n\treturn largest_factor;\n\
    }\n", "\tif(n % 2 == 0){\n\t\tn = n / 2;\n\t}\n\tvar factor = 3;\n\twhile(n >\
    \ 1){\n\t\tif(n % factor == 0){\n\t\t\tn = n / factor;\n\t\t}\n\t\telse{\n\t\t\
    \tfactor += 2;\n\t\t}\n\t}\n\treturn factor;\n}\n", "    //Variable to store the\
    \ largest prime factor of n\n    var largest_prime_factor;\n    //Prime factors\
    \ of n will be placed in this array\n    var factors = [];\n    //Variable to\
    \ store the current prime factor being considered\n    var curr_prime_factor;\n\
    \    //This will be used to calculate the prime factors of n\n    var i = 2;\n\
    \    //Loop through the number line until n is reduced to 1\n    while(n > 1){\n\
    \        if(n % i == 0){\n            //Calculate the prime factors of n and store\
    \ them in the array\n            while(n % i == 0){\n                n = n / i;\n\
    \                curr_prime_factor = i;\n                factors.push(curr_prime_factor);\n\
    \            }\n        }\n        //Increment i and test for the next prime number\n\
    \        i++;\n    }\n    //Loop through the array of prime factors to find the\
    \ largest one\n    for(var j = 0; j < factors.length; j++){\n        if(factors[j]\
    \ > largest_prime_factor || largest_prime_factor == undefined){\n            largest_prime_factor\
    \ = factors[j];\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \   //Start with the largest possible factor\n    var factor = Math.floor(Math.sqrt(n));\n\
    \    //Remove any factors\n    while(n % factor != 0){\n        factor--;\n  \
    \  }\n    //If not a prime, check if the factor is prime.\n    if(is_prime(factor)){\n\
    \        return factor;\n    }\n    //If the factor is not prime, then the largest\
    \ prime factor is the largest prime factor of the factor.\n    return largest_prime_factor(factor);\n\
    }\n", "\tvar i = 2;\n\tvar prime_factor = i;\n\tvar remainder = n;\n\twhile(i\
    \ <= remainder){\n\t\tif(remainder % i == 0){\n\t\t\tremainder = remainder / i;\n\
    \t\t\tprime_factor = i;\n\t\t}\n\t\telse{\n\t\t\ti = i + 1;\n\t\t}\n\t}\n\treturn\
    \ prime_factor;\n}\n", "  var i = 2;\n  while(i < n){\n    if(n % i == 0){\n \
    \     n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return n;\n}\n",
  "\t//Find all factors of n.\n\tvar factors = [];\n\tvar i = 0;\n\tfor(var divisor\
    \ = 2; divisor <= n/2; divisor++){\n\t\tif(n % divisor == 0){\n\t\t\tfactors[i]\
    \ = divisor;\n\t\t\ti++;\n\t\t}\n\t}\n\t//Find the largest prime factor of n.\n\
    \tvar largest_prime = 0;\n\tfor(var j = 0; j < factors.length; j++){\n\t\tif(is_prime(factors[j])\
    \ && factors[j] > largest_prime){\n\t\t\tlargest_prime = factors[j];\n\t\t}\n\t\
    }\n\treturn largest_prime;\n}\n", "\tvar i = 2;\n\tvar factors = [];\n\twhile(i\
    \ <= n){\n\t\tif(n % i == 0){\n\t\t\tn = n / i;\n\t\t\tfactors.push(i);\n\t\t\
    }\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tvar largest_factor = factors[0];\n\tfor(var\
    \ i = 1; i < factors.length; i++){\n\t\tif(factors[i] > largest_factor){\n\t\t\
    \tlargest_factor = factors[i];\n\t\t}\n\t}\n\treturn largest_factor;\n}\n", " \
    \   if(n < 1 || is_prime(n)){\n        return \"Invalid input\";\n    }\n    let\
    \ num = n;\n    let count = 2;\n    let prime_factors = [];\n    while(num > 1){\n\
    \        if(num % count === 0){\n            prime_factors.push(count);\n    \
    \        num = num / count;\n        }\n        else{\n            count++;\n\
    \        }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n",
  "    let max = 0;\n    for(let i = 0; i < n; i++){\n        if(n % i === 0){\n \
    \           let isPrime = true;\n            for(let j = 2; j < i; j++){\n   \
    \             if(i % j === 0){\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if(isPrime\
    \ && i > max){\n                max = i;\n            }\n        }\n    }\n  \
    \  return max;\n}\n", "\t//Continually divide by prime numbers that are factors\n\
    \t//until it can't be divided by anything.\n\tvar div = 2;\n\twhile(n > 1){\n\t\
    \twhile(n % div === 0){\n\t\t\tn /= div;\n\t\t}\n\t\tdiv++;\n\t}\n\treturn div\
    \ - 1;\n}\n", "  if(n == 2){\n    return 2;\n  }\n  if(n%2 == 0){\n    n = n/2;\n\
    \  }\n  var i = 3;\n  while(n > 1){\n    if(n%i == 0){\n      n = n/i;\n    }\n\
    \    else{\n      i = i + 2;\n    }\n  }\n  return i;\n}\n\nvar start = new Date().getTime();",
  "\t//loop through 2..sqrt(n)\n\tfor(var i = 2; i <= Math.floor(Math.sqrt(n)); i++){\n\
    \t\t//while n is evenly divisible by i, divide n by i.\n\t\twhile(n % i == 0){\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\t//the largest prime factor of n is the remaining\
    \ value of n.\n\treturn n;\n}\n", "  //1.\n  var i = 2;\n  //2.\n  while(i <=\
    \ n){\n    //3.\n    if(n % i == 0){\n      //4.\n      n = n / i;\n    }else{\n\
    \      //5.\n      i++;\n    }\n  }\n  //6.\n  return i;\n}\n\nlargest_prime_factor(600851475143);\n",
  "\tvar i = 1;\n\tvar result = 0;\n\twhile(i < n){\n\t\tif(is_prime(i) && n % i ==\
    \ 0){\n\t\t\tresult = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n", "\tfor(var\
    \ i = 2; i < n; i++){\n\t\tif(is_prime(i) && n % i == 0){\n\t\t\treturn i;\n\t\
    \t}\n\t}\n}\n", "    let p = n\n    //Eliminate all instances of 2, 3, and 5 as\
    \ factors of n.\n    while(p % 2 == 0){\n        p /= 2\n    }\n    while(p %\
    \ 3 == 0){\n        p /= 3\n    }\n    while(p % 5 == 0){\n        p /= 5\n  \
    \  }\n    //Return the first odd number to be divisible into n.\n    for(let i\
    \ = 7; i <= Math.sqrt(n); i += 2){\n        while(p % i == 0){\n            p\
    \ /= i\n        }\n    }\n    return p\n}\n", "  for(let i = 2; i <= n; i++){\n\
    \    if(is_prime(i) && n % i == 0){\n      return i;\n    }\n  }\n}\n", "  var\
    \ largest_prime_factor = 1;\n  for(i = 2; i <= n; i++){\n    if(is_prime(i) &&\
    \ (n % i == 0)){\n      largest_prime_factor = i;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n", "  var largest;\n  var i = 2;\n  while(n > 1){\n    if(n % i == 0){\n  \
    \    largest = i;\n      n = n / i;\n    }\n    else{\n      i += 1;\n    }\n\
    \  }\n  return largest;\n}", "  var prime=2;\n  var factors=[];\n  var largest=0;\n\
    \  while(n>1){\n    while(n%prime==0){\n      factors.push(prime);\n      n/=prime;\n\
    \    }\n    prime++;\n  }\n  for(var i=0;i<factors.length;i++){\n    if(factors[i]>largest){\n\
    \      largest=factors[i];\n    }\n  }\n  return largest;\n}\n", "    var prime\
    \ = n;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0 && is_prime(i)){\n\
    \            prime = i;\n        }\n    }\n    return prime;\n}\n", "    let i\
    \ = 2;\n    while(i <= n){\n        if(n % i == 0){\n            n /= i;\n   \
    \     }\n        else{\n            i++;\n        }\n    }\n    return i;\n}\n",
  "\tfor(let i = 1; i < n; i++){\n\t\tif(n % i === 0 && i !== 1){\n\t\t\tn = n / i;\n\
    \t\t\tlargest_prime_factor(n);\n\t\t}\n\t}\n\treturn n;\n}", "\tif(n == 1)\n\t\
    \treturn 1;\n\tfor(var i = Math.floor(Math.sqrt(n)); i > 1; i--){\n\t\tif(n %\
    \ i == 0){\n\t\t\tif(is_prime(i))\n\t\t\t\treturn i;\n\t\t}\n\t}\n}\n", "\t//your\
    \ code here\n}\n", "    let i = 2;\n    let result = 0;\n    while(i < n){\n \
    \       if(n % i === 0){\n            result = i;\n            n = n / i;\n  \
    \      }\n        else{\n            i++;\n        }\n    }\n    return result;\n\
    }\n", "    var primes = [];\n    var sqrt = Math.sqrt(n);\n    for(var i = 2;\
    \ i <= sqrt; i++){\n        if(is_prime(i)){\n            primes.push(i);\n  \
    \      }\n    }\n    for(var i = primes.length - 1; i >= 0; i--){\n        if(n\
    \ % primes[i] === 0){\n            return primes[i];\n        }\n    }\n}\n",
  "  let i = 2;\n  let factor = 1;\n  let maxFactor = 1;\n  while(i <= n){\n    if(n\
    \ % i == 0){\n      n = n / i;\n      maxFactor = i;\n    }\n    else{\n     \
    \ i++;\n    }\n  }\n  return maxFactor;\n}\n", "\tvar max = 1;\n\n\tfor(var i\
    \ = 2; i <= n; i++){\n\t\twhile(n % i == 0){\n\t\t\tmax = i;\n\t\t\tn = n / i;\n\
    \t\t}\n\t}\n\n\treturn max;\n}\n", "    let i = Math.ceil(Math.sqrt(n));\n   \
    \ while(!is_prime(i)){\n        i--;\n    }\n    return i;\n}", "  var i = 2;\n\
    \  while(i < n){\n    if(n % i == 0){\n      n = n / i;\n    }\n    else {\n \
    \     i = i + 1;\n    }\n  }\n  return n;\n}\n", "\tvar max_factor = 0;\n\tfor(var\
    \ i = 2; i <= n; i++){\n\t\tif(n % i == 0){\n\t\t\tif(is_prime(i)){\n\t\t\t\t\
    max_factor = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_factor;\n}\n", "\t//get all\
    \ factors by factorizing n\n\tvar factors = factorize(n);\n\t//sort factors so\
    \ largest factor will be at the end\n\tfactors.sort(function(a,b){\n\t\treturn\
    \ a-b;\n\t});\n\t//return the largest factor\n\treturn factors[factors.length-1];\n\
    }\n", "    let prime = 2;\n    while(n != 1){\n        if(n % prime == 0){\n \
    \           n /= prime;\n        }else{\n            prime++;\n        }\n   \
    \ }\n    return prime;\n}\n", "  for(var i = Math.floor(Math.sqrt(n)); i > 1;\
    \ i--){\n    if(is_prime(i) && n % i === 0){\n      return i;\n    }\n  }\n}\n",
  "  let largest = 2;\n\n  for(let i = 3; i <= n; i++){\n    if(n % i === 0 && is_prime(i)){\n\
    \      largest = i;\n    }\n  }\n\n  return largest;\n}\n", "    var i = 2, max\
    \ = 1;\n    while(i < n){\n        if(n % i === 0) { max = i; n /= i; }\n    \
    \    else i++;\n    }\n    return n > 1 ? n : max;\n}\n", "  var i = 1;\n  var\
    \ max = 1;\n  while(i <= n){\n    if(n % i == 0){\n      n = n / i;\n      max\
    \ = i;\n    }\n    i++;\n  }\n  return max;\n}\n", "  //find the next prime number\
    \ after the largest prime number that is smaller than the square root of n\n \
    \ var ceiling = Math.ceil(Math.sqrt(n));\n  var nextPrime = getNextPrime(2);\n\
    \n  while(nextPrime <= ceiling){\n    if(n % nextPrime === 0){\n      n = n /\
    \ nextPrime;\n      ceiling = Math.ceil(Math.sqrt(n));\n    }\n    nextPrime =\
    \ getNextPrime(nextPrime);\n  }\n  return n;\n}\n", "  var i = 2;\n  var num =\
    \ n;\n  while(num > 1){\n    if(num % i === 0){\n      num = num / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return i;\n}\n", "\tvar factors = [];\n\tvar max_factor\
    \ = Math.floor(Math.sqrt(n));\n\tvar i;\n\tfor(i = 2; i <= max_factor; i++){\n\
    \t\tif(n % i === 0){\n\t\t\tfactors.push(i);\n\t\t\tfactors.push(n / i);\n\t\t\
    }\n\t}\n\tvar largest_prime = 1;\n\tfor(i = 0; i < factors.length; i++){\n\t\t\
    if(is_prime(factors[i]) && factors[i] > largest_prime){\n\t\t\tlargest_prime =\
    \ factors[i];\n\t\t}\n\t}\n\treturn largest_prime;\n}", "  let prime_factor =\
    \ [];\n  let d = 2;\n  let p = n;\n  while(p >= d * d){\n    if(p % d == 0){\n\
    \      prime_factor.push(d);\n      p = p / d;\n    }else{\n      d++;\n    }\n\
    \  }\n  prime_factor.push(p);\n  return prime_factor[prime_factor.length - 1];\n\
    }\n", "\tvar i = 2;\n\twhile(i <= n){\n\t\tif(n % i == 0){\n\t\t\tn /= i;\n\t\t\
    }\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n", "    var i = n-1;\n \
    \   while(i > 1){\n        if(n % i == 0 && is_prime(i)){\n            return\
    \ i;\n        }\n        i--;\n    }\n}\n", "    //Your code here\n}\n", "   \
    \ var factors = [],\n        i;\n    for(i = 2; i <= n; i++){\n        while(n\
    \ % i === 0){\n            factors.push(i);\n            n /= i;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "  for(var i = 2; i <=\
    \ n; i++){\n    if(is_prime(i) && n % i == 0){\n      return i;\n    }\n  }\n\
    }\n", "\tvar factors = [];\n\tvar f = 2;\n\twhile(f <= n){\n\t\tif(n % f == 0){\n\
    \t\t\tfactors.push(f);\n\t\t\tn = n / f;\n\t\t}\n\t\telse{\n\t\t\tf++;\n\t\t}\n\
    \t}\n\tvar largest = factors[0];\n\tfor(var i = 1; i < factors.length; i++){\n\
    \t\tif(factors[i] > largest){\n\t\t\tlargest = factors[i];\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\n", "  let max = 0;\n  let i = 2;\n  while(i <= n){\n    if(n %\
    \ i == 0 && is_prime(i)){\n      max = i;\n      n = n / i;\n    }\n    else\n\
    \      i++;\n  }\n  return max;\n}\n", "\tif(is_prime(n)){\n\t\treturn n;\n\t\
    }\n\tvar j = 2;\n\tvar i = 2;\n\tfor(i = 2; i < n; i++){\n\t\tif(is_prime(i)){\n\
    \t\t\tif(n % i == 0){\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn j;\n}\n\n",
  "\tvar i = 2;\n\twhile(i < n){\n\t\tif(is_prime(i) && n % i == 0){\n\t\t\treturn\
    \ i;\n\t\t}else{\n\t\t\ti++;\n\t\t}\n\t}\n}\n", "\tvar n_factors = factors(n);\n\
    \tvar n_primes = filter_out_composites(n_factors);\n\treturn Math.max.apply(null,\
    \ n_primes);\n}\n", "  var max = Math.sqrt(n);\n  for(var i = 2; i <= max; i++){\n\
    \    if(n % i === 0){\n      var factor = n / i;\n      if(is_prime(factor)) return\
    \ factor;\n    }\n  }\n  return \"something weird happened\";\n}\n", "\tvar factors\
    \ = prime_factors(n);\n\treturn factors[factors.length - 1];\n}\n", "  var i =\
    \ 2;\n  while(n > 1){\n    if(n % i == 0){\n      n = n / i;\n    }else{\n   \
    \   i++;\n    }\n  }\n  return i;\n}\n", "\tvar prime_factors = prime_factors_of(n);\n\
    \treturn prime_factors[prime_factors.length - 1];\n}\n\n", "    //We only need\
    \ to check up to the sqrt of n, since factors above the sqrt will have a corresponding\
    \ factor below the sqrt.\n    var i = 2;\n    while(i <= Math.sqrt(n)){\n    \
    \    if(n % i == 0){\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return n;\n}\n\nvar n = 600851475143;", "    //Will hold\
    \ all prime factors.\n    var result = 0;\n    //Loop through possible factors\
    \ of n.\n    for(var i = 2; i < n; i++){\n        //If the current number is a\
    \ factor, factor it out and assign it to a variable.\n        if(n % i === 0){\n\
    \            var factor = i;\n            //Loop through all possible factors\
    \ of the number assigned to the variable.\n            for(var j = 2; j < factor;\
    \ j++){\n                //If the current number is a factor, break out of the\
    \ loop and go back to looping through all possible factors of n.\n           \
    \     if(factor % j === 0){\n                    break;\n                }\n \
    \               //If the current number is not a factor, assign it to result if\
    \ it is greater than result.\n                else if(j === factor - 1){\n   \
    \                 result = result > factor ? result : factor;\n              \
    \  }\n            }\n        }\n    }\n    return result;\n}\n", "    //Implement\n\
    \    var divisor = 2;\n    var largest = 1;\n    while(n > 2){\n        if(n %\
    \ divisor == 0){\n            largest = divisor;\n            n = n / divisor;\n\
    \        }\n        else{\n            divisor++;\n        }\n    }\n    return\
    \ largest;\n}", "    var factors = prime_factors(n);\n    var largest_prime =\
    \ factors[factors.length - 1];\n    return largest_prime;\n}\n", "  let i = 2;\n\
    \  while(i <= n){\n    if(n % i == 0){\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "    let i = 2;\n    while(n > 1){\n        if(n\
    \ % i == 0){\n            n /= i;\n        }\n        else{\n            i++;\n\
    \        }\n    }\n    return i;\n}", "    // Start a loop with the lowest prime\
    \ factor\n    for (let i = 2; i <= n; i++){\n        // Check if i is prime\n\
    \        if (is_prime(i)){\n            // Check if n is divisible by i\n    \
    \        if (n % i === 0){\n                // If so, set n to n/i\n         \
    \       n = n / i;\n            }\n        }\n    }\n    //Return i\n    return\
    \ i;\n}\n", "  // Start the factor test at 2, we don't want to divide by 0.\n\
    \  let factor = 2;\n  // Start the largest prime at 1, we want it to be larger\
    \ than this.\n  let largest = 1;\n  // We want to test as few times as possible,\
    \ so we'll update the max\n  // factor on each iteration by dividing the largest\
    \ factor by the remaining\n  // number.\n  while(n > 1){\n    if(n % factor ===\
    \ 0){\n      // If the number is divisible by our current factor, it must be a\
    \ prime\n      // factor, so we update our largest prime.\n      largest = factor;\n\
    \      // Divide our remaining number so that we don't get stuck.\n      n /=\
    \ factor;\n    }\n    // Increment the factor.\n    factor += 1;\n  }\n  return\
    \ largest;\n}\n", "  return 0;\n}", "  for(var divisor = Math.floor(Math.sqrt(n));\
    \ ; divisor--){\n    if(n % divisor === 0 && is_prime(divisor)) return divisor;\n\
    \  }\n}\n", "    var large_factor = -1;\n    var half = Math.ceil(n/2);\n    for(var\
    \ i = 3; i < half; i+=2){\n        if(n % i == 0){\n            if(is_prime(i)){\n\
    \                large_factor = i;\n            }\n        }\n    }\n    return\
    \ large_factor;\n}\n", "    var i = 2;\n    while(i < n){\n        while(n % i\
    \ == 0){\n            n = n / i;\n        }\n        i++;\n    }\n    return n;\n\
    }\n", "  //start from the smallest prime number and go up until you find a factor\n\
    \  //that is also prime\n  var i = 2;\n  while(i < n){\n    if(n % i === 0){\n\
    \      var factor = n / i;\n      if(is_prime(factor)){\n        return factor;\n\
    \      }\n    }\n    i++;\n  }\n}\n", "    var factors = prime_factors(n);\n \
    \   return factors[factors.length - 1];\n}\n", "\t//Initialize a variable to hold\
    \ the divisor used\n\tvar divisor = 2;\n\t//Initialize a variable to hold the\
    \ max prime factor\n\tvar max_prime_factor = 0;\n\t//Loop while n is greater than\
    \ 1\n\twhile(n > 1){\n\t\t//If n is divisible by divisor\n\t\tif(n % divisor ==\
    \ 0){\n\t\t\t//Set max prime factor to divisor\n\t\t\tmax_prime_factor = divisor;\n\
    \t\t\t//Reduce n by the divisor\n\t\t\tn /= divisor;\n\t\t}\n\t\t//Increment divisor\n\
    \t\telse divisor++;\n\t}\n\t//Return the max prime factor\n\treturn max_prime_factor;\n\
    }\n", "    var largest = 0;\n    var divisor = 2;\n    while(n != 1){\n      \
    \  while(n % divisor == 0){\n            largest = divisor;\n            n /=\
    \ divisor;\n        }\n        divisor++;\n    }\n    return largest;\n}\n", " \
    \ for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      var factor = n / i;\n\
    \      if(is_prime(factor)){\n        return factor;\n      }\n    }\n  }\n}\n",
  "    if(n < 1 || is_prime(n)){\n        return undefined;\n    }\n\n    for(var\
    \ i = n - 1; i > 1; i--){\n        if(n % i === 0 && is_prime(i)){\n         \
    \   return i;\n        }\n    }\n}\n", "  var largest = 0;\n  for(var i = 2; i\
    \ < n; i++){\n    if(n % i === 0){\n      var prime = true;\n      for(var j =\
    \ 2; j < i; j++){\n        if(i % j === 0){\n          prime = false;\n      \
    \  }\n      }\n      if(prime && i > largest){\n        largest = i;\n      }\n\
    \    }\n  }\n  return largest;\n}\n", "\t//Find the first number x such that x\
    \ divides n and is prime. \n\t//Update n by dividing out all factors of x.\n\t\
    //Repeat until n is prime.\n\t//This is a greedy algorithm that is correct because\
    \ all future \n\t//factors of n are smaller than x.\n\t\n\twhile (true){\n\t\t\
    let p = smallest_prime_factor(n);\n\t\tif (p < n)\n\t\t\tn /= p;\n\t\telse\n\t\
    \t\treturn n;\n\t}\n}\n\n", "  //base case\n  if(is_prime(n)) return n;\n  //guess:\
    \ the largest prime factor is smaller than n\n  return largest_prime_factor(largest_prime_factor_no_larger_than(n));\n\
    }\n", "  var i = 2;\n\n  while(i <= n){\n    if(n % i == 0){\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n\n  return i;\n}\n", "    let i = 2;\n\
    \    while(i<=n){\n        if(n%i == 0){\n            n/=i;\n        }else{\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "  var factor = 2;\n\
    \  while(factor < n){\n    if(n % factor == 0){\n      n = n / factor;\n    }\n\
    \    else{\n      factor += 1;\n    }\n  }\n  return factor;\n}\n", "\t//We need\
    \ to check if a number is prime by trial division.\n\t//To do this efficiently,\
    \ we have to start at the largest possible factor\n\t//and work our way down.\n\
    \t//Assume we can start at floor(sqrt(n)) and work down. Why is this a good assumption?\n\
    \t//Because if n is non-prime, then at least one of its divisors is at most floor(sqrt(n)).\n\
    \t//Now let's try it.\n\tconsole.log(\"largest_prime_factor(\" + n + \")\");\n\
    \tfor(var i = Math.floor(Math.sqrt(n)); i > 0; i--){\n\t\tif(n % i == 0){\n\t\t\
    \t//i is a factor of n.\n\t\t\tif(is_prime(i)){\n\t\t\t\treturn i;\n\t\t\t}\n\t\
    \t}\n\t}\n\tthrow \"Not possible!\";\n}\n", "  let factors = get_factors(n);\n\
    \  //Return the last prime factor in the list\n  return factors[factors.length\
    \ - 1];\n}\n", "  var factors = factorize(n);\n  return factors[factors.length\
    \ - 1];\n}\n", "\tvar max = 0;\n\tfor(var i = 2; i <= n; i++){\n\t\tif(n % i ==\
    \ 0){\n\t\t\tvar isPrime = true;\n\t\t\tfor(var j = 2; j < i; j++){\n\t\t\t\t\
    if(i % j == 0){\n\t\t\t\t\tisPrime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tif(isPrime){\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n\
    }", "  for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      if(is_prime(n/i)){\n\
    \        return n/i;\n      }\n    }\n  }\n}\n", "\tlet i = 2;\n\twhile(i < n){\n\
    \t\tif(n % i == 0) return largest_prime_factor(n/i);\n\t\ti++;\n\t}\n\treturn\
    \ n;\n}\n", "\tvar sieve = sieve_of_eratosthenes(n);\n\tvar max_prime = 2;\n\t\
    var i = 2;\n\twhile(i <= n){\n\t\tif(sieve[i] && n % i == 0){\n\t\t\tmax_prime\
    \ = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn max_prime;\n}\n\n", "  //Make an array\
    \ of prime numbers, starting with 2.\n  var primes = [2];\n  //For each number\
    \ up to n, check if prime, then add to array if so.\n  for(var i = 3; i <= n;\
    \ i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  //Check if\
    \ n is prime. If so, it's largest prime factor.\n  if(is_prime(n)){\n    return\
    \ n;\n  } else {\n    //If not, find prime factors of n and return largest.\n\
    \    var p_factors = prime_factors(n);\n    return p_factors[p_factors.length\
    \ - 1];\n  }\n}", "\tvar prime_factors = [];\n\tfor(var i = 2; i < n; i++){\n\t\
    \tif(is_prime(i) && n % i == 0){\n\t\t\tprime_factors.push(i);\n\t\t}\n\t}\n\t\
    return prime_factors[prime_factors.length - 1];\n}\n", "  //If a number is divisible\
    \ by any number greater than its square root, then it must be divisible by a number\
    \ less than its square root.\n  //i.e. we don't need to check every number from\
    \ 1 to n to see if it is a prime factor, we only need to check from 1 to the square\
    \ root of n.\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    //If the number is\
    \ divisible by i, then i is a prime factor of n.\n    if(n % i === 0){\n     \
    \ return largest_prime_factor(n / i);\n    }\n  }\n  //If no number was found\
    \ to be a prime factor, then we assume that n is a prime number.\n  return n;\n\
    }\n", "    var prime_factors = [];\n    var primes = sieve(n);\n    var i = 0;\n\
    \    while(n !== 1){\n        while(n % primes[i] === 0){\n            prime_factors.push(primes[i]);\n\
    \            n /= primes[i];\n        }\n        i++;\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "  let sqrt = Math.sqrt(n);\n  for(let i = 2; i <= sqrt; i++){\n\
    \    if(n % i === 0){\n      n /= i;\n      i--;\n    }\n  }\n  return n;\n}\n",
  "\tvar largest_prime_factor = 1;\n\n\t//While n is divisible by 2, 2 is the largest\
    \ prime factor.\n\twhile(n % 2 == 0){\n\t\tlargest_prime_factor = 2;\n\t\tn =\
    \ n / 2;\n\t}\n\n\t//Starting with 3, test odd numbers up to the square root of\
    \ n to see if they are factors.\n\tfor(var factor = 3; factor <= Math.sqrt(n);\
    \ factor += 2){\n\t\twhile(n % factor == 0){\n\t\t\tlargest_prime_factor = factor;\n\
    \t\t\tn = n / factor;\n\t\t}\n\t}\n\n\t//If n is larger than the largest prime\
    \ factor, n is the largest prime factor.\n\tif(n > largest_prime_factor){\n\t\t\
    largest_prime_factor = n;\n\t}\n\n\treturn largest_prime_factor;\n}\n", "\tvar\
    \ factors = prime_factors(n);\n\treturn factors[factors.length - 1];\n}\n", "\t\
    var max = Math.floor(Math.sqrt(n));\n\t\n\tfor(var i = max; i > 1; i--){\n\t\t\
    if(is_prime(i) && n % i == 0){\n\t\t\treturn i;\n\t\t}\n\t}\n}\n", "\tvar primes\
    \ = [];\n\n\tfor(var i = 2; i <= n/2; i++){\n\t\twhile(n % i === 0){\n\t\t\tn\
    \ = n / i;\n\t\t\tprimes.push(i);\n\t\t}\n\t}\n\n\treturn primes[primes.length\
    \ - 1];\n}\n", "  let primes = prime_factors(n);\n  return primes[primes.length\
    \ - 1];\n}\n\n", "\tvar factors = [];\n\tfor(var i = 2; i <= n; i++){\n\t\tif(n\
    \ % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\t\
    return factors[factors.length - 1];\n}\n", "\t//Implement this!\n\tlet i = 2;\n\
    \twhile (i * i <= n) {\n\t\tif (n % i) ++i;\n\t\telse n /= i;\n\t}\n\treturn n;\n\
    }\n\n", "\tvar primes = prime_sieve(n),\n\t\tmax = 0;\n\tfor(var i = primes.length-1;\
    \ i >= 0; i--){\n\t\tif(n % primes[i] === 0){\n\t\t\tmax = primes[i];\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar largest_factor = 1;\n\tfor(var\
    \ i = 2; i <= n; i++){\n\t\tif(n % i == 0){\n\t\t\tlargest_factor = i;\n\t\t\t\
    n /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn largest_factor;\n}\n", "\tvar factor\
    \ = n-1;\n\twhile (factor > 0){\n\t\tif (is_prime(factor) && n % factor == 0){\n\
    \t\t\treturn factor;\n\t\t}\n\t\tfactor--;\n\t}\n}\n", "\tif(!is_prime(n)){\n\t\
    \tvar lpf = 1;\n\t\tfor(var i = 2; i < n; i++){\n\t\t\tif(n % i == 0 && is_prime(i)){\n\
    \t\t\t\tlpf = i;\n\t\t\t}\n\t\t}\n\t\treturn lpf;\n\t}\n\telse{\n\t\treturn n;\n\
    \t}\n}\n", "  var factors = [];\n  while(n%2===0){\n    factors.push(2);\n   \
    \ n/=2;\n  }\n  for(var i=3; i<=Math.sqrt(n); i+=2){\n    while(n%i === 0){\n\
    \      factors.push(i);\n      n /= i;\n    }\n  }\n  if(n>2){\n    factors.push(n);\n\
    \  }\n  var lpf = Math.max.apply(null, factors);\n  return lpf;\n}\n", "\tvar\
    \ start = 2;\n\twhile(start <= n){\n\t\tif(n % start == 0){\n\t\t\tn = n / start;\n\
    \t\t}else{\n\t\t\tstart++;\n\t\t}\n\t}\n\treturn start;\n}", "\t//We'll start\
    \ with divisor 2 and increment it by 1 until we reach the square root of n.\n\t\
    var divisor = 2;\n\twhile(divisor <= Math.sqrt(n)){\n\t\t//If n is divisible by\
    \ divisor, we know that it's prime factorization contains divisor.\n\t\tif(n %\
    \ divisor == 0){\n\t\t\t//We can divide n by divisor to get another factor.\n\t\
    \t\tvar n = n / divisor;\n\t\t\t//Check if this new factor is also prime.\n\t\t\
    \tif(is_prime(n)){\n\t\t\t\t//If it is, it must be the largest prime factor.\n\
    \t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t\t//If not, we'll increment divisor.\n\t\t\
    divisor++;\n\t}\n}\n", "\tvar f = 1;\n\twhile(n > f){\n\t\tf++;\n\t\tif(n % f\
    \ == 0){\n\t\t\tn /= f;\n\t\t\tf = 1;\n\t\t}\n\t}\n\treturn f;\n}\n", "    var\
    \ i = 2;\n    var array = [];\n    while(i < n) {\n        if(n % i === 0) {\n\
    \            array.push(i);\n            n = n / i;\n        }\n        i++;\n\
    \    }\n    array.push(n);\n    return Math.max.apply(null, array);\n}\n", " \
    \ var factor = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n /= factor;\n\
    \    }\n    else{\n      factor++;\n    }\n  }\n  return factor;\n}\n", "    var\
    \ max = Math.sqrt(n);\n    for(var i = max; i > 1; i--){\n        if(n % i ==\
    \ 0 && is_prime(i)) return i;\n    }\n}\n", "    var a = []\n    var prime = 2;\n\
    \    while(prime < n){\n        if(n % prime == 0){\n            a.push(prime);\n\
    \            n = n / prime;\n        }\n        else{\n            prime = next_prime(prime);\n\
    \        }\n    }\n    return a[a.length - 1];\n}\n", "    var largest_prime_factor\
    \ = 2;\n    var i = 2;\n    while(n > 1){\n        if(n % i == 0){\n         \
    \   n /= i;\n            largest_prime_factor = i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \   //Find largest prime factor.\n    let i = 2;\n    let max_prime = 1;\n   \
    \ while(i <= n){\n        if(n % i == 0){\n            max_prime = i;\n      \
    \      n = n / i;\n        } else{\n            i++;\n        }\n    }\n    return\
    \ max_prime;\n}\n", "\t\n\t//First, create an array of all numbers between 2 and\
    \ n.\n\tvar nums = [];\n\tvar i;\n\tfor(i = 2; i <= n; i++){\n\t\tnums.push(i);\n\
    \t}\n\t\n\t//Then, eliminate multiples of the first number in the array from the\
    \ list\n\t//and keep doing so until the list is empty.\n\tvar num;\n\twhile(nums.length\
    \ > 0){\n\t\tnum = nums.shift();\n\t\t\n\t\tnums = nums.filter(function(val){\n\
    \t\t\treturn val % num != 0;\n\t\t});\n\t}\n\t\n\treturn num;\n}", "\tif(is_prime(n)){\n\
    \t\treturn n;\n\t}\n\t//Find all of the factors of n and get the largest prime\
    \ one.\n\tvar factors = get_factors(n);\n\tvar largest_prime = 0;\n\tfor(var i\
    \ = 0; i < factors.length; i++){\n\t\tif(is_prime(factors[i]) && factors[i] >\
    \ largest_prime){\n\t\t\tlargest_prime = factors[i];\n\t\t}\n\t}\n\treturn largest_prime;\n\
    }\n", "\tif(n == 1)\n\t\treturn 1;\n\tif(n == 2)\n\t\treturn 2;\n\tvar divisor\
    \ = 3;\n\tvar factors = [];\n\twhile(divisor < Math.sqrt(n)){\n\t\tif(n % divisor\
    \ == 0){\n\t\t\tfactors.push(divisor);\n\t\t\tfactors.push(n / divisor);\n\t\t\
    }\n\t\tdivisor += 2;\n\t}\n\tfactors.sort(function(a, b){return b - a;});\n\t\
    for(var i = 0; i < factors.length; i++){\n\t\tif(is_prime(factors[i]))\n\t\t\t\
    return factors[i];\n\t}\n}\n", "    let maxPrime = -1;\n    while(n % 2 === 0){\n\
    \        maxPrime = 2;\n        n = n / 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n);\
    \ i+=2){\n        while(n % i === 0){\n            maxPrime = i;\n           \
    \ n = n / i;\n        }\n    }\n    if(n > 2){\n        maxPrime = n;\n    }\n\
    \    return maxPrime;\n}\n", "  var i=1;\n  var primeFactors = [];\n  var max\
    \ = Math.sqrt(n);\n  while(n>1){\n    if(n%i==0){\n      primeFactors.push(i);\n\
    \      n = n/i;\n    }else{\n      i++;\n    }\n  }\n  return Math.max.apply(null,\
    \ primeFactors);\n}\n", "  //Start a counter at n-1.\n  var counter = n-1;\n \
    \ //Iterate down from n-1 to 2.\n  while(counter > 1){\n    //If n is divisible\
    \ by the counter.\n    if(n % counter === 0){\n      //If the counter is prime.\n\
    \      if(is_prime(counter)){\n        //Return the counter.\n        return counter;\n\
    \      }\n    }\n    //Decrement the counter.\n    counter--;\n  }\n}\n", "  \
    \  let i = 2;\n    while(n > 1){\n        if(n % i == 0){\n            n /= i;\n\
    \        }else{\n            i += 1;\n        }\n    }\n    return i;\n}\n", " \
    \ var largestPrime = 0;\n  while(n%2 == 0){\n    largestPrime = 2;\n    n = n/2;\n\
    \  }\n  for(var i = 3; i < Math.sqrt(n); i = i+2){\n    while(n%i == 0){\n   \
    \   largestPrime = i;\n      n = n/i;\n    }\n  }\n  if(n > 2){\n    largestPrime\
    \ = n;\n  }\n  return largestPrime;\n}", "    var primes = euler_sieve(n);\n \
    \   for(var i = primes.length - 1; i >= 0; i--){\n        if(n % primes[i] ==\
    \ 0){\n            return primes[i];\n        }\n    }\n}\n", "  let factors =\
    \ prime_factors(n);\n  return factors[factors.length - 1];\n}\n", "  // find factors\
    \ of n, take the largest\n  // find if factors of n are prime, take the largest\n\
    \  // if they are all prime, return last one\n  var factors = [];\n  var prime\
    \ = [];\n  var largest = null;\n  for (var i = 1; i <= n; i++){\n    if (n % i\
    \ === 0){\n      factors.push(i);\n    }\n  }\n  for (var j = 0; j < factors.length;\
    \ j++){\n    if (is_prime(factors[j])){\n      prime.push(factors[j]);\n    }\n\
    \  }\n  if (prime.length === 0){\n    return n;\n  }\n  for (var k = 0; k < prime.length;\
    \ k++){\n    if (largest === null || prime[k] > largest){\n      largest = prime[k];\n\
    \    }\n  }\n  return largest;\n}\n", "    var arr=[];\n    for(var i=1;i<n/2;i++){\n\
    \        if(n%i==0){\n            if(prime(i)){\n                arr.push(i);\n\
    \            }\n        }\n    }\n    return Math.max.apply(null,arr);\n}", " \
    \   var factors = prime_factors(n);\n    return factors[factors.length - 1];\n\
    }\n", "\tvar limit = Math.sqrt(n);\n\tvar i = 2;\n\twhile(n > 1){\n\t\twhile(n\
    \ % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i-1;\n}\n", "\tvar\
    \ factor = 2;\n\tvar max = 1;\n\twhile(n > 1){\n\t\tif(n % factor == 0){\n\t\t\
    \tmax = factor;\n\t\t\tn = n / factor;\n\t\t\twhile(n % factor == 0){\n\t\t\t\t\
    n = n / factor;\n\t\t\t}\n\t\t}\n\t\tfactor = factor + 1;\n\t}\n\treturn max;\n\
    }\n", "  var i = 2;\n  while(i < n){\n    if(n % i == 0){\n      n = n / i;\n\
    \    }\n    else{\n      i++;\n    }\n  }\n  return n;\n}\n", "    let i = 2;\n\
    \    while(i <= n){\n        if(n % i == 0){\n            n /= i;\n        }else{\n\
    \            i++;\n        }\n    }\n    return i;\n}", "    var result = 0;\n\
    \    for(var i = 2; i < n; i++){\n        if(is_prime(i) && n % i == 0){\n   \
    \         result = i;\n        }\n    }\n    return result;\n}\n", "\tvar i =\
    \ 2;\n\twhile(i < n){\n\t\tif(n % i == 0){\n\t\t\treturn largest_prime_factor(n/i);\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\n", "  var i = 2;\n  var limit = Math.sqrt(n);\n\
    \  while(i < limit){\n    if(n % i === 0){\n      n /= i;\n      limit = Math.sqrt(n);\n\
    \    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "\tvar k = Math.floor(Math.sqrt(n));\n\
    \tvar largest = 0;\n\t\n\twhile(k > 1){\n\t\tif(n % k == 0){\n\t\t\tlargest =\
    \ k;\n\t\t\tbreak;\n\t\t}\n\t\tk--;\n\t}\n\treturn largest;\n}\n", "\tvar maxPrimeFactor\
    \ = 1;\n\tvar num = n;\n\tvar k = 2;\n\twhile(k*k <= num){\n\t\tif(num % k ==\
    \ 0){\n\t\t\tmaxPrimeFactor = k;\n\t\t\tnum = num/k;\n\t\t}else{\n\t\t\tk++;\n\
    \t\t}\n\t}\n\tif(num > maxPrimeFactor){\n\t\tmaxPrimeFactor = num;\n\t}\n\treturn\
    \ maxPrimeFactor;\n}\n", "\tvar f = 2, max = 1;\n\twhile(f*f <= n){\n\t\tif(n\
    \ % f == 0){\n\t\t\tmax = f;\n\t\t\twhile(n % f == 0){\n\t\t\t\tn /= f;\n\t\t\t\
    }\n\t\t}\n\t\tf += 1;\n\t}\n\tif(n > 1){\n\t\tmax = n;\n\t}\n\treturn max;\n}\n",
  "\tvar count = 2, max = 0;\n\twhile(count * count <= n){\n\t\tif(n % count == 0){\n\
    \t\t\twhile(n % count == 0){\n\t\t\t\tn /= count;\n\t\t\t}\n\t\t\tmax = count;\n\
    \t\t}\n\t\tcount++;\n\t}\n\tif(n > 1){\n\t\tmax = n;\n\t}\n\treturn max;\n}\n",
  "  var i = 2;\n  while(i <= n){\n    if(n % i == 0){\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return i;\n}\n", "    if(is_prime(n)){\n      \
    \  return n;\n    }else{\n        var i = 2;\n        while(n%i !== 0){\n    \
    \        i++;\n        }\n        return largest_prime_factor(n/i);\n    }\n}\n",
  "\tfor(var i = n - 1; i > 1; i--){\n\t\tif(is_prime(i) && n % i == 0){\n\t\t\treturn\
    \ i;\n\t\t}\n\t}\n}\n", "    let curr_prime = 1;\n    let prime_factors = [];\n\
    \    while(n > 1){\n        curr_prime = smallest_prime_factor(n);\n        prime_factors.push(curr_prime);\n\
    \        n = n / curr_prime;\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "\tvar largest = 1;\n\n\tfor(var i = 2; i <= n; i++){\n\t\twhile(n\
    \ % i == 0){\n\t\t\tlargest = i;\n\t\t\tn /= i;\n\t\t}\n\t}\n\n\treturn largest;\n\
    }\n", "    for(var i = 2; i <= n; i++){\n        if(is_prime(i) && n % i == 0){\n\
    \            // return i;\n            return largest_prime_factor(n / i);\n \
    \       }\n    }\n}\n", "    var prime;\n    var i = 2;\n    while(n > 1){\n \
    \       if(n % i == 0){\n            prime = i;\n            n = n / i;\n    \
    \        while(n % i == 0){\n                n = n / i;\n            }\n     \
    \   }\n        i++;\n    }\n    return prime;\n}\n", "\tlet factor = 2;\n\twhile(factor*factor\
    \ <= n){\n\t\tif(n%factor==0){\n\t\t\tn/=factor;\n\t\t}\n\t\telse{\n\t\t\tfactor++;\n\
    \t\t}\n\t}\n\treturn n;\n}\n", "\tfor(var i = Math.floor(Math.sqrt(n)); i >= 2;\
    \ i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t}\n}\n",
  "\n}\n", "\tvar res = 0;\n\tvar i = 2;\n\tvar sqrt_n = Math.floor(Math.sqrt(n));\n\
    \twhile(i <= sqrt_n){\n\t\tif(n % i == 0){\n\t\t\tres = i;\n\t\t\tn /= i;\n\t\t\
    \tsqrt_n = Math.floor(Math.sqrt(n));\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t\
    }\n\tif(n > res){\n\t\tres = n;\n\t}\n\treturn res;\n}\n", "    if(n === 1){return\
    \ n;}\n    var factors = [];\n    for(var i = 2; i < n; i++){\n        if(n %\
    \ i === 0){\n            factors.push(i);\n        }\n    }\n    var largestFactor\
    \ = 0;\n    for(var j = 0; j < factors.length; j++){\n        if(is_prime(factors[j])){\n\
    \            largestFactor = factors[j];\n        }\n    }\n    return largestFactor;\n\
    }\n", "    //Write your code here\n    let largestPrime = 0;\n    // let initialNumber\
    \ = n;\n    while(n > 1){\n        let i = 2;\n        while(i <= n){\n      \
    \      if(n % i === 0){\n                largestPrime = i;\n                n\
    \ = n / i;\n                break;\n            }\n            i++;\n        }\n\
    \    }\n    return largestPrime;\n}\n", "    let a = 2;\n    while (a <= n){\n\
    \        if (n % a == 0){\n            n /= a;\n        } else {\n           \
    \ a += 1;\n        }\n    }\n    return a;\n}\n", "  for(var i = 2; i < n; i++){\n\
    \    if(n % i === 0){\n      n = n / i;\n      i = 1;\n    }\n  }\n  return n;\n\
    }\n", "  var prime = 2;\n  while(prime <= n){\n    if(n % prime == 0){\n     \
    \ n = n / prime;\n    }\n    else {\n      prime += 1;\n    }\n  }\n  return prime;\n\
    }\n", "  var i = 2;\n  while(i <= n){\n    if(n % i == 0){\n      n /= i;\n  \
    \  } else {\n      i++;\n    }\n  }\n  return i;\n}", "  var i = 2;\n  while(i\
    \ <= n){\n    if(n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n \
    \   }\n  }\n  return i;\n}\n", "\tvar j = 0;\n\tvar i = 2;\n\twhile(i <= n){\n\
    \t\tif(n % i == 0){\n\t\t\tn = n / i;\n\t\t\tj = i;\n\t\t}else{\n\t\t\ti++;\n\t\
    \t}\n\t}\n\treturn j;\n}", "\tvar factors = prime_factors(n);\n\treturn Math.max.apply(null,\
    \ factors);\n}\n", "    var i = 2;\n    while(i <= n){\n        if(n % i == 0){\n\
    \            n /= i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "  var factors = []\n  var result = 0\n  while(n\
    \ % 2 == 0){\n    n = n/2\n    factors.push(2)\n  }\n  for(var i = 3; i <= Math.sqrt(n);\
    \ i+=2){\n    while(n % i == 0){\n      n = n/i\n      factors.push(i)\n    }\n\
    \  }\n  if(n > 2){\n    factors.push(n)\n  }\n  return factors.pop()\n}\n", " \
    \ var result = 0;\n  for(var i = 2; i <= n; i++){\n    if(is_prime(i) && n % i\
    \ === 0){\n      result = i;\n    }\n  }\n  return result;\n}\n", "  var i = 2;\n\
    \  while(n > 1){\n    if(n % i == 0){\n      n = n / i;\n    }\n    else{\n  \
    \    i++;\n    }\n  }\n  return i;\n}\n", "\tvar i = 2;\n\tvar factors = [];\n\
    \t\n\twhile(n > 1){\n\t\tif(n % i == 0){\n\t\t\tn = n / i;\n\t\t\tfactors.push(i);\n\
    \t\t}\n\t\ti++;\n\t}\n\t\n\treturn factors[factors.length - 1];\n}\n", "\tvar\
    \ primes = [];\n\tfor(var i = 2; i <= n; i++){\n\t\tif(is_prime(i)){\n\t\t\tprimes.push(i);\n\
    \t\t}\n\t}\n\tfor(var i = primes.length - 1; i >= 0; i--){\n\t\tif(n % primes[i]\
    \ == 0){\n\t\t\treturn primes[i];\n\t\t}\n\t}\n}\n", "    let factor = 2;\n  \
    \  while(n > 1){\n        if(n % factor == 0){\n            n /= factor;\n   \
    \     }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n\
    \n", "\tvar factors = [];\n\tvar primelist = [];\n\tvar i = 2;\n\twhile(n != 1){\n\
    \t\twhile(n % i == 0){\n\t\t\tn /= i;\n\t\t\tfactors.push(i);\n\t\t}\n\t\ti++;\n\
    \t}\n\tfactors.forEach(function(x){\n\t\tif(is_prime(x)){\n\t\t\tprimelist.push(x);\n\
    \t\t}\n\t});\n\treturn primelist[primelist.length - 1];\n}\n", "    //Start with\
    \ the least divisor of n, which is 2.\n    var divisor = 2;\n    while(n > 1){\n\
    \        //If n is not divisible by divisor, increment divisor by 1.\n       \
    \ if(n % divisor !== 0){\n            divisor += 1;\n        }else{\n        \
    \    //If n is divisible by divisor, divide n by divisor.\n            n /= divisor;\n\
    \        }\n    }\n    //At this point, n should be 1. The largest prime factor\
    \ is divisor.\n    return divisor;\n}\n", "    var i = 2;\n    while(i*i <= n){\n\
    \        if(n % i === 0){\n            n = n / i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return n;\n}\n", "  //TODO: implement this!\n\
    }\n", "\tvar factors = prime_factors(n);\n\treturn factors[factors.length - 1];\n\
    }\n", "  var i = 2;\n  while(i < n){\n    if(n % i == 0){\n      return largest_prime_factor(n/i);\n\
    \    }\n    i++;\n  }\n  return n;\n}\n", "    let prime_factors = [];\n    let\
    \ max = 1;\n    for(let i = 2; i <= n; i++){\n        if(n % i == 0 && is_prime(i)){\n\
    \            prime_factors.push(i);\n            n /= i;\n            i = 1;\n\
    \        }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n",
  "    var i = 2,\n        factors = [];\n    while(n > 1){\n        if(n % i == 0){\n\
    \            factors.push(i);\n            n /= i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }", "  var prime = n;\n  var factor = 2;\n  while(prime != factor){\n    while(prime\
    \ % factor === 0){\n      prime = prime / factor;\n    }\n    factor++;\n  }\n\
    \  return prime;\n}\n", "\tvar largest = 1;\n\t\n\t//Start by dividing n by 2\
    \ as many times as possible.\n\tfor(var i = 2; i <= n; i++){\n\t\twhile(n % i\
    \ == 0){\n\t\t\tlargest = i;\n\t\t\tn /= i;\n\t\t}\n\t}\n\t\n\treturn largest;\n\
    }\n", "  var max = 1;\n  var num = n;\n  var div = 2;\n  while(div*div <= num){\n\
    \    if(num%div === 0){\n      num = num/div;\n      max = div;\n    }else{\n\
    \      div++;\n    }\n  }\n  if(num > max){\n    max = num;\n  }\n  return max;\n\
    }\n", "\t\tlet result = null;\n\t\tfor(let i = Math.floor(Math.sqrt(n)); i >=\
    \ 2; i--){\n\t\t\t\tif(n % i === 0 && is_prime(i)){\n\t\t\t\t\t\tresult = i;\n\
    \t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\treturn result;\n}\n", "    var i = 2;\n\
    \    while(i <= n){\n        if(n % i == 0){\n            n /= i;\n        }\n\
    \        else{\n            i++;\n        }\n    }\n    return i;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
