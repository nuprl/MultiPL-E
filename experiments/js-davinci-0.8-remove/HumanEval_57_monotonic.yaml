name: HumanEval_57_monotonic
language: js
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  function monotonic(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
  \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
  \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  var i = 1;\n  var len = l.length;\n  var dec = true;\n  var inc =\
    \ true;\n  for(; i < len; i++){\n    if(l[i] < l[i-1]) dec = false;\n    if(l[i]\
    \ > l[i-1]) inc = false;\n  }\n  return (dec || inc);\n}", "\tif(l.length > 0){\n\
    \t\tlet i = 1\n\t\tlet ascending = l[i] > l[i-1] ? true : false\n\t\twhile(i <\
    \ l.length && (l[i] > l[i-1] == ascending)){\n\t\t\ti++\n\t\t}\n\t\treturn i ==\
    \ l.length\n\t}\n\treturn true\n}\n", "   var c;\n   var i;\n   c = l[0];\n  \
    \ for(i=1;i<l.length;i++){\n      if(c==l[i])\n         c = l[i];\n      else\
    \ if(c>l[i]){\n         if(c==l[i]+1)\n            c = l[i];\n         else\n\
    \            return false;\n      }\n      else if(c<l[i]){\n         if(c==l[i]-1)\n\
    \            c = l[i];\n         else\n            return false;\n      }\n  \
    \ }\n   return true;\n}\n", "    //return (l.sort() == l)||(l.sort().reverse()\
    \ == l);\n    if (l.length<=1) return true;\n    return \n        l[0] < l[1]\
    \ ?\n            l.every((el,i)=>i==0 || el>=l[i-1])\n        :\n            l.every((el,i)=>i==0\
    \ || el<=l[i-1]);\n}\n", "  if(l.length==0) return true;\n  var inc=l[0]<l[1];\n\
    \  for(var i=1;i<l.length-1;i++){\n    if(inc && l[i]>l[i+1]) return false;\n\
    \    if(!inc && l[i]<l[i+1]) return false;\n  }\n  return true;\n}\n", "  return\
    \ isIncreasing(l) || isDecreasing(l);\n}\n", "\t//Return True is list elements\
    \ are monotonically increasing\n\tif(l[0] < l[1]){\n\t\tfor(i=0; i<l.length-1;\
    \ i++){\n\t\t\tif(l[i] < l[i+1]){\n\t\t\t\tmono = true;\n\t\t\t}else{\n\t\t\t\t\
    mono = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//Return True is list elements\
    \ are monotonically decreasing\n\t}else if(l[0] > l[1]){\n\t\tfor(i=0; i<l.length-1;\
    \ i++){\n\t\t\tif(l[i] > l[i+1]){\n\t\t\t\tmono = true;\n\t\t\t}else{\n\t\t\t\t\
    mono = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn mono;\n}\n", "\t\
    var increasing = true;\n\tvar decreasing = true;\n\tfor(var i = 0; i < l.length\
    \ - 1; i++){\n\t\tif(l[i] < l[i+1]) decreasing = false;\n\t\tif(l[i] > l[i+1])\
    \ increasing = false;\n\t}\n\treturn increasing || decreasing;\n}\n", "\tvar a\
    \ = l[0];\n\tvar b = l[1];\n\tvar ret = true;\n\tvar i;\n\tfor(i = 2; i < l.length;\
    \ i++){\n\t\tif(a < b){\n\t\t\tif(b < l[i]){\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}else if(a > b){\n\t\t\tif(b > l[i]){\n\t\t\t\tret = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}else{\n\t\t\tret = false;\n\t\t\tbreak;\n\t\t}\n\t\t\
    a = b;\n\t\tb = l[i];\n\t}\n\treturn ret;\n}\n", "    if(l.length <= 1){\n   \
    \     return true;\n    }\n    var a = l[0];\n    var b = l[1];\n    var inc =\
    \ (a < b);\n    for(var i = 2; i < l.length; i++){\n        if(inc){\n       \
    \     if(b <= l[i]){\n                b = l[i];\n            }else{\n        \
    \        return false;\n            }\n        }else{\n            if(b >= l[i]){\n\
    \                b = l[i];\n            }else{\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "    if(l.length <=\
    \ 1){\n        return true;\n    }\n    if(l[0] > l[1]){\n        for(var i =\
    \ 0; i < l.length - 1; i++){\n            if(l[i] < l[i+1]){\n               \
    \ return false;\n            }\n        }\n    }\n    else{\n        for(var i\
    \ = 0; i < l.length - 1; i++){\n            if(l[i] > l[i+1]){\n             \
    \   return false;\n            }\n        }\n    }\n    return true;\n}\n", " \
    \   var out=[]\n    for(var i=0;i<l.length-1;i++){\n        var aux=l[i+1]-l[i]\n\
    \        if(aux>0){\n            out.push(true)\n        }\n        else if(aux<0){\n\
    \            out.push(false)\n        }\n        else{\n            out.push(true)\n\
    \        }\n    }\n    for(var j=0;j<out.length-1;j++){\n        if(out[j]!=out[j+1]){\n\
    \            return false\n        }\n    }\n    return true\n}\n", "  return\
    \ monotonic(l.init()) && monotonic(l.tail())\n    && (l.init().isEmpty()\n\t||\
    \ l.init().last() <= l.head());\n}\n", "  if(l.length > 1){\n    for(var i = 0;\
    \ i < l.length-1; i++){\n      if(l[i] > l[i+1]){\n        return monotonic_increasing(l);\n\
    \      }else if(l[i] < l[i+1]){\n        return monotonic_decreasing(l);\n   \
    \   }\n    }\n  }\n  return true;\n}\n", "    var a = l.slice();\n    a.sort(function(a,b){return\
    \ a-b});\n    return l.toString()==a.toString() || l.toString()==a.reverse().toString();\n\
    }", "    let up=0,down=0;\n    for(let i=0;i<l.length-1;i++){\n        if(l[i]>l[i+1]){down++;}\n\
    \        else if(l[i]<l[i+1]){up++;}\n    }\n    return up==0||down==0?true:false;\n\
    }\n", "  var isMon = true;\n  var i = 0;\n  var inc = undefined;\n  while(isMon\
    \ && i < l.length - 1){\n    if(i === 0){\n      inc = l[i+1] - l[i] > 0;\n  \
    \  }\n    else if(l[i+1] - l[i] > 0 !== inc){\n      isMon = false;\n    }\n \
    \   i++;\n  }\n  return isMon;\n}\n\n\n", "    if(l.length <= 2){return true;}\n\
    \    var previous = l[0];\n    var increasing = (l[1] - l[0]) > 0;\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(increasing && l[i] < previous){return\
    \ false;}\n        if(!increasing && l[i] > previous){return false;}\n       \
    \ previous = l[i];\n    }\n    return true;\n}\n", "  if(l.length < 1){return\
    \ false;}\n  function helper(list, increasing){\n    if(list.length < 2){return\
    \ true;}\n    if(increasing){\n      if(list[0] < list[1]){\n        return helper(list.slice(1),\
    \ increasing);\n      }else{\n        return false;\n      }\n    }else{\n   \
    \   if(list[0] > list[1]){\n        return helper(list.slice(1), increasing);\n\
    \      }else{\n        return false;\n      }\n    }\n  }\n  return helper(l,\
    \ true) || helper(l, false);\n}\n", "  return l.every((v,i,a)=>i===0||(a[i-1]<=v&&a[i-1]<=a[i+1]||a[i-1]>=v&&a[i-1]>=a[i+1]))\n\
    }", "    if(Array.isArray(l)){\n        var inc = true;\n        var dec = true;\n\
    \        for(i=0;i<l.length-1;i++){\n            if(l[i]>l[i+1]){\n          \
    \      inc = false;\n            }\n            if(l[i]<l[i+1]){\n           \
    \     dec = false;\n            }\n        }\n        if(inc==true || dec==true){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    else{\n        console.log(\"Not a valid list\");\n   \
    \ }\n}\n", "    let p = l[0];\n    let d = Math.sign(l[1] - l[0]);\n    for(let\
    \ i = 1; i < l.length; i++){\n        if(Math.sign(l[i] - p) != d){\n        \
    \    return false;\n        }\n        p = l[i];\n    }\n    return true;\n}\n",
  "    return list_is_monotonic(l, (a, b) => a <= b)\n        || list_is_monotonic(l,\
    \ (a, b) => a >= b);\n}\n", "    if(l[0] > l[1]){\n        for(var i = 1; i <\
    \ l.length; i++){\n            if(l[i] >= l[i-1]){\n                return false;\n\
    \            }\n        }\n    }\n    else if(l[0] < l[1]){\n        for(var i\
    \ = 1; i < l.length; i++){\n            if(l[i] <= l[i-1]){\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}", "    let i=0;\n\
    \    let result=true;\n    while(i<(l.length-1)){\n        if(l[i]>l[i+1]){\n\
    \            while(i<(l.length-1)){\n                if(l[i]<l[i+1]){\n      \
    \              result=false;\n                    break;\n                }\n\
    \                i++;\n            }\n        }\n        else if(l[i]<l[i+1]){\n\
    \            while(i<(l.length-1)){\n                if(l[i]>l[i+1]){\n      \
    \              result=false;\n                    break;\n                }\n\
    \                i++;\n            }\n        }\n        else{\n            result=false;\n\
    \            break;\n        }\n    }\n    return result;\n}\n", "    return increasing(l)\
    \ || decreasing(l);\n}\n", "    var is_monotonic = true;\n    var current = l[0];\n\
    \    var increasing = (l[1] >= l[0]);\n    for(var i = 1; i < l.length; i++){\n\
    \        if(increasing){\n            if(l[i] < current){\n                is_monotonic\
    \ = false;\n                break;\n            }\n        }else{\n          \
    \  if(l[i] > current){\n                is_monotonic = false;\n              \
    \  break;\n            }\n        }\n        current = l[i];\n    }\n    return\
    \ is_monotonic;\n}\n", "\tvar inc = 0;\n\tvar dec = 0;\n\tfor(var i = 0; i < l.length-1;\
    \ i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc++;\n\t\t}else if(l[i] < l[i+1]){\n\t\
    \t\tdec++;\n\t\t}\n\t}\n\treturn inc == 0 || dec == 0;\n}\n", "    var dec = true;\n\
    \    var inc = true;\n    for(var i = 0; i < l.length-1; i++){\n        if(l[i]\
    \ < l[i+1]){\n            dec = false;\n        }\n        if(l[i] > l[i+1]){\n\
    \            inc = false;\n        }\n    }\n    return dec || inc;\n}\n", " \
    \   return monotonic_inc(l) || monotonic_dec(l);\n}\n", "\tvar increasing = increasing(l);\n\
    \tvar decreasing = decreasing(l);\n\treturn increasing || decreasing;\n}\n", " \
    \ return increasing(l) || decreasing(l);\n}\n\n", "\tmonotonic=false;\n\tif (l.length\
    \ == 1){\n\t\tmonotonic=true;\n\t}\n\telse{\n\t\tif (l[1] >= l[0]){\n\t\t\tfor\
    \ (i=1; i<l.length; i++){\n\t\t\t\tif (l[i]<l[i-1]){\n\t\t\t\t\tmonotonic=false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmonotonic=true;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor (i=1; i<l.length; i++){\n\t\t\t\tif (l[i]>l[i-1]){\n\
    \t\t\t\t\tmonotonic=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\
    \t\tmonotonic=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn monotonic;\n}\n\n",
  "    return (l.length <= 1 || (l[0] <= l[1] && monotonic(l.slice(1))) || (l[0] >=\
    \ l[1] && monotonic(l.slice(1))));\n}\n", "  var inc = true;\n  var dec = true;\n\
    \  var i = 0;\n  var length = l.length;\n  while(i < length - 1){\n    if(l[i]\
    \ > l[i+1]){\n      inc = false;\n    }\n    if(l[i] < l[i+1]){\n      dec = false;\n\
    \    }\n    i++;\n  }\n  return inc || dec;\n}\n\n", "  if(l.length == 0){\n \
    \   return true;\n  }\n  var direction = 1;\n  if(l[0] < l[1]){\n    direction\
    \ = 1;\n  }\n  else if(l[0] > l[1]){\n    direction = -1;\n  }\n  for(var i =\
    \ 1; i < l.length; i++){\n    if(l[i] == l[i-1]){\n      continue;\n    }\n  \
    \  if(direction == 1 && l[i] < l[i-1]){\n      return false;\n    }\n    if(direction\
    \ == -1 && l[i] > l[i-1]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "\t\n\tvar c=0;\n\tvar isMono=false;\n\tfor(var i=0;i<l.length-1;i++){\n\
    \t\tif(l[i]<l[i+1])\n\t\t\tc+=1;\n\t\telse if(l[i]>l[i+1])\n\t\t\tc-=1;\n\t}\n\
    \tif(c==(l.length-1)||c==-(l.length-1))\n\t\tisMono=true;\n\t\t\n\treturn isMono;\n\
    }\n", "  var up = monotonicUp(l);\n  var down = monotonicDown(l);\n  return (up\
    \ || down);\n}\n", "\tvar inc=true;\n\tvar dec=true;\n\tfor(var i=0;i<l.length-1;i++){\n\
    \t\tif(l[i]>l[i+1]){\n\t\t\tinc=false;\n\t\t}\n\t\tif(l[i]<l[i+1]){\n\t\t\tdec=false;\n\
    \t\t}\n\t}\n\treturn inc||dec;\n}\n", "    var a=l[0];\n    var b=l[1];\n    var\
    \ arr=[];\n    var temp=[];\n    if(a<b){\n        for(var i=1;i<l.length;i++){\n\
    \            temp.push(l[i-1]<l[i]);\n        }\n    }\n    else{\n        for(var\
    \ i=1;i<l.length;i++){\n            temp.push(l[i-1]>l[i]);\n        }\n    }\n\
    \    var res=temp.every(function(el){\n        return el===true;\n    });\n  \
    \  if(res==true){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "  let dec = true;\n  let inc = true;\n  for(let i = 0; i < l.length\
    \ - 1; i++){\n    if(l[i] < l[i+1])\n      dec = false;\n    if(l[i] > l[i+1])\n\
    \      inc = false;\n  }\n  return dec || inc;\n}\n", "  var i = 0;\n  var prev\
    \ = l[i];\n  var inc = null;\n  var dec = null;\n  while(i < l.length){\n    if(prev\
    \ < l[i]){\n      if(dec){\n        return false;\n      }\n      inc = true;\n\
    \    }\n    else if(prev > l[i]){\n      if(inc){\n        return false;\n   \
    \   }\n      dec = true;\n    }\n    prev = l[i];\n    i += 1;\n  }\n  return\
    \ true;\n}\n", "    let incr = true;\n    let decr = true;\n    for(let i = 0;\
    \ i < l.length-1; i++){\n        if(l[i] > l[i+1])\n            incr = false;\n\
    \        if(l[i] < l[i+1])\n            decr = false;\n    }\n    return incr\
    \ || decr;\n}\n", "    var a = l[0];\n    var isIncreasing = true;\n    var isDecreasing\
    \ = true;\n    for(var i = 1; i < l.length; i++){\n        if(l[i] < a){\n   \
    \         isIncreasing = false;\n        }else if(l[i] > a){\n            isDecreasing\
    \ = false;\n        }\n        a = l[i];\n    }\n    return isIncreasing || isDecreasing;\n\
    }\n", "    //check if the list is empty\n    if(l.length === 0){\n        return\
    \ true;\n    }\n\n    //for the case that all elements in the list are the same\n\
    \    if(l.length === 1){\n        return true;\n    }\n\n    //for the case that\
    \ the list has 2 elements\n    if(l.length === 2){\n        if(l[0]>l[1]){\n \
    \           return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n\n    //check the first 2 elements in the list\n    if(l[0]>l[1]){\n\
    \        for(let i = 1; i<l.length; i++){\n            if(l[i]>l[i-1]){\n    \
    \            return false;\n            }\n        }\n    }\n    else{\n     \
    \   for(let i = 1; i<l.length; i++){\n            if(l[i]<l[i-1]){\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}\n",
  "    if(l.length<2){\n        return true;\n    }\n    if(l[0]>l[1]){\n        for(let\
    \ i=1;i<l.length;i++){\n            if(l[i]>=l[i-1]){\n                return\
    \ false;\n            }\n        }\n    }else{\n        for(let i=1;i<l.length;i++){\n\
    \            if(l[i]<=l[i-1]){\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "  var dif = 0;\n  for(var i = 1; i\
    \ < l.length; i++){\n    if(l[i] > l[i-1]) dif = 1;\n    else if(l[i] < l[i-1])\
    \ dif = -1;\n    else dif = 0;\n  }\n  return dif;\n}\n", "    if(l.length<2){\n\
    \        return true;\n    }else{\n        var d1 = l[1]-l[0];\n        var d2\
    \ = 0;\n        for(var i=2;i<l.length;i++){\n            d2 = l[i]-l[i-1];\n\
    \            if(Math.sign(d1)!=Math.sign(d2)){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n", "  if(l.length <=\
    \ 2){\n    return true;\n  }\n  var inc = l[0] <= l[1];\n  for(var i = 1; i <\
    \ l.length; i++){\n    if(inc && l[i] < l[i-1]){\n      return false;\n    }\n\
    \    if(!inc && l[i] > l[i-1]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "\tif(l.length < 2){\n\t\treturn true;\n\t}\n\tif(l[0] > l[1]){\n\t\treturn\
    \ monotonically_decreasing(l);\n\t}\n\telse{\n\t\treturn monotonically_increasing(l);\n\
    \t}\n}\n", "    return monotonic_increasing(l) || monotonic_decreasing(l);\n}\n",
  "  var isMonotonicIncreasing = true;\n  var isMonotonicDecreasing = true;\n  for(var\
    \ i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      isMonotonicDecreasing\
    \ = false;\n    }\n    if(l[i] > l[i+1]){\n      isMonotonicIncreasing = false;\n\
    \    }\n  }\n  return isMonotonicIncreasing || isMonotonicDecreasing;\n}\n", " \
    \   let decreasing = true;\n    let increasing = true;\n    for(let i = 0; i <\
    \ l.length - 1; i++){\n        if(l[i] < l[i + 1]) decreasing = false;\n     \
    \   if(l[i] > l[i + 1]) increasing = false;\n    }\n    return decreasing || increasing;\n\
    }\n", "  var incr = true;\n  var decr = true;\n  for(var i = 0; i < l.length-1;\
    \ i++){\n    if(l[i] > l[i+1]) incr = false;\n    if(l[i] < l[i+1]) decr = false;\n\
    \  }\n  return incr || decr;\n}\n", "  return l.every((x,i)=>i==0 || Math.sign(x-l[i-1])\
    \ == Math.sign(l[0]-l[l.length-1]))\n}\n", "  return l.map((x, i) => i != 0 ?\
    \ x-l[i-1] : 0).every(v => v == 0 || v == 1 || v == -1);\n}", "    var inc = (l[0]\
    \ <= l[1]);\n    var i;\n    for(i = 0; i < l.length - 1; i++){\n        if(l[i]\
    \ <= l[i+1] != inc){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "\tif(l.length < 2){return true;}\n\tvar m = (l[1] - l[0]) > 0;\n\
    \tfor(var i = 1; i < l.length; i++){\n\t\tif((l[i] - l[i-1]) > 0 !== m){return\
    \ false;}\n\t}\n\treturn true;\n}\n", "\tvar incr = true;\n\tvar decr = true;\n\
    \tvar i = 1;\n\twhile (i < l.length && (incr || decr)){\n\t\tif (l[i] - l[i-1]\
    \ < 0){\n\t\t\tincr = false;\n\t\t}\n\t\tif (l[i] - l[i-1] > 0){\n\t\t\tdecr =\
    \ false;\n\t\t}\n\t\ti++;\n\t}\n\treturn incr || decr;\n}\n", "\tvar ascending\
    \ = false;\n\tvar descending = false;\n\tfor(var i = 0; i < l.length - 1; i++){\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tascending = true;\n\t\t}\n\t\tif(l[i] > l[i+1]){\n\
    \t\t\tdescending = true;\n\t\t}\n\t}\n\treturn (ascending && !descending) || (!ascending\
    \ && descending);\n}\n", "  var inc = increasing(l);\n  var dec = decreasing(l);\n\
    \  return inc || dec;\n}\n", "    var a = true;\n    var b = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            a =\
    \ false;\n        }else if(l[i] < l[i+1]){\n            b = false;\n        }\n\
    \    }\n    return a || b;\n}\n", "    let i=1;\n    while(i<l.length){\n    \
    \    if(l[i]<l[i-1]){\n            return false;\n        }\n        i++;\n  \
    \  }\n    return true;\n}", "  if(l.length === 0){return false;}\n  if(l.length\
    \ === 1){return true;}\n  if(l.length === 2){return l[0] > l[1] || l[0] < l[1];}\n\
    \  var isInc = l[0] < l[1];\n  for(var i = 2; i < l.length; i++){\n    if(isInc\
    \ && l[i] < l[i-1]){return false;}\n    if(!isInc && l[i] > l[i-1]){return false;}\n\
    \  }\n  return true;\n}\n", "    var inc = true;\n    var dec = true;\n    for(var\
    \ i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n            dec\
    \ = false;\n        }else if(l[i] > l[i+1]){\n            inc = false;\n     \
    \   }\n    }\n    return inc || dec;\n}\n", "    var inc = true;\n    var dec\
    \ = true;\n    for(var i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n\
    \            inc = false;\n        }\n        if(l[i] < l[i+1]){\n           \
    \ dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "    if(l.length==0)\
    \ return false;\n    var inc = 0;\n    var last = l[0];\n    for(var i=1;i<l.length;i++){\n\
    \        if(l[i]>last){\n            if(inc==-1) return false;\n            inc\
    \ = 1;\n        }else if(l[i]<last){\n            if(inc==1) return false;\n \
    \           inc = -1;\n        }\n        last = l[i];\n    }\n    return true;\n\
    }\n", "\treturn strictlyMonotonic(l) || sloppilyMonotonic(l);\n}\n", "    if(l.length\
    \ <= 2){\n        return true;\n    }\n    if(l[0] < l[1]){\n        for(var i\
    \ = 1; i < l.length; i++){\n            if(l[i-1] > l[i]){\n                return\
    \ false;\n            }\n        }\n    }else{\n        for(var i = 1; i < l.length;\
    \ i++){\n            if(l[i-1] < l[i]){\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\n", "  var inc = true;\n  var\
    \ dec = true;\n  for(i=0;i<l.length-1;i++){\n    if(l[i]>l[i+1]){\n      inc =\
    \ false;\n    }\n    if(l[i]<l[i+1]){\n      dec = false;\n    }\n  }\n  return\
    \ inc || dec;\n}\n", "  let n = l.length\n  if(l[0] <= l[n-1]){\n    for(let i\
    \ = 0; i < n-1; i++){\n      if(l[i] > l[i+1]){\n        return false\n      }\n\
    \    }\n  }\n  else{\n    for(let i = 0; i < n-1; i++){\n      if(l[i] < l[i+1]){\n\
    \        return false\n      }\n    }\n  }\n  return true\n}\n", "    var m =\
    \ false;\n    for(i=0;i<l.length-1;i++){\n        if(l[i]<l[i+1]){\n         \
    \   if(m=='i')\n                m = false;\n            else\n               \
    \ m = 'i';\n        }\n        else if(l[i]>l[i+1]){\n            if(m=='d')\n\
    \                m = false;\n            else\n                m = 'd';\n    \
    \    }\n        else{\n            m = false;\n        }\n    }\n    return m;\n\
    }", "\tif(l.length == 0)\n\t\treturn false;\n\t\n\tvar a = l[0];\n\tvar b = l[1];\n\
    \tvar monotonic = Math.sign(b - a);\n\tfor(var i = 1; i < l.length; i++){\n\t\t\
    a = l[i - 1];\n\t\tb = l[i];\n\t\tvar s = Math.sign(b - a);\n\t\tif(s != monotonic\
    \ && s != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n", "\tvar x = monotonic.bind(l)(0);\n\
    \tif(x === 1) {\n\t\treturn true;\n\t} else if(x === -1) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n\tfunction monotonic(x){\n\t\tif(this.length\
    \ > x+1) {\n\t\t\tif(this[x] < this[x+1]) {\n\t\t\t\treturn monotonic.bind(this)(x+1);\n\
    \t\t\t} else if(this[x] > this[x+1]) {\n\t\t\t\treturn -1 * monotonic.bind(this)(x+1);\n\
    \t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 1;\n\t\t\
    }\n\t}\n}\n", "\tvar\tl=l,\n\t\ti,j;\n\tif(l.length<3){\n\t\treturn true;\n\t\
    }\n\tfor(i=0;i<l.length-1;i++){\n\t\tif(l[i]!=l[i+1]){\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif(i==l.length-1){\n\t\treturn true;\n\t}\n\tfor(j=i+1;j<l.length-1;j++){\n\
    \t\tif(l[j]==l[j+1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(l[i]<l[i+1]){\n\t\
    \tfor(j=i+1;j<l.length-1;j++){\n\t\t\tif(l[j]>l[j+1]){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}else{\n\t\tfor(j=i+1;j<l.length-1;j++){\n\t\t\tif(l[j]<l[j+1]){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "\tvar ascending\
    \ = true;\n\tvar descending = true;\n\tfor(var i = 0; i < l.length - 1; i++){\n\
    \t\tif(l[i] < l[i+1]){\n\t\t\tdescending = false;\n\t\t}else if(l[i] > l[i+1]){\n\
    \t\t\tascending = false;\n\t\t}\n\t}\n\treturn ascending || descending;\n}", " \
    \   if(ascending(l) || descending(l)){\n        return true;\n    }\n    return\
    \ false;\n}\n", "    var g=true,s=true;\n    for(var i=0;i<l.length-1;i++){\n\
    \        if(l[i]>l[i+1]){\n            g=false;\n        }\n        if(l[i]<l[i+1]){\n\
    \            s=false;\n        }\n    }\n    return s||g;\n}", "  return increasing(l)\
    \ || decreasing(l);\n}\n", "\tvar asc = true, dec = true;\n\tfor(var i = 0; i\
    \ < l.length-1; i++){\n\t\tif(l[i] > l[i+1])\n\t\t\tasc = false;\n\t\tif(l[i]\
    \ < l[i+1])\n\t\t\tdec = false;\n\t}\n\treturn (asc || dec);\n}\n", "  return\
    \ checkInc(l) || checkDec(l);\n}\n", "\tvar increasing = true;\n\tvar decreasing\
    \ = true;\n\tif(l.length <= 1){\n\t\treturn true;\n\t}\n\tfor(var i = 0; i < l.length\
    \ - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(l[i]\
    \ < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n\
    }\n", "    var flag = true;\n    var first = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > first){\n            if(flag == false){\n         \
    \       return false;\n            }\n        }\n        else if(l[i] < first){\n\
    \            if(flag == true){\n                flag = false;\n            }\n\
    \        }\n        first = l[i];\n    }\n    return true;\n}\n\n", "   if(l.length\
    \ <= 1)\n      return true;\n   var dir = (l[1] > l[0]) ? 1 : -1;\n   for(var\
    \ i = 2; i < l.length; i++){\n      if(l[i]*dir < l[i-1]*dir)\n         return\
    \ false;\n   }\n   return true;\n}\n", "  return monotonicIncreasing(l) || monotonicDecreasing(l);\n\
    }\n", "  if(l.length == 0){\n    return false;\n  }\n  if(l.length == 1){\n  \
    \  return true;\n  }\n  var flag = true;\n  var i = 0;\n  while(flag && i < l.length\
    \ - 1){\n    if(l[i] < l[i+1]){\n      flag = false;\n    }\n    i++;\n  }\n \
    \ if(flag){\n    return true;\n  }\n  flag = true;\n  i = 0;\n  while(flag &&\
    \ i < l.length - 1){\n    if(l[i] > l[i+1]){\n      flag = false;\n    }\n   \
    \ i++;\n  }\n  if(flag){\n    return true;\n  }\n  return false;\n}", "    var\
    \ i = 0,\n        inc = 0,\n        dec = 0;\n    while(i < l.length - 1){\n \
    \       if(l[i] < l[i+1]){\n            inc += 1;\n        }\n        else if(l[i]\
    \ > l[i+1]){\n            dec += 1;\n        }\n        i += 1;\n    }\n    if(inc\
    \ === l.length - 1 || dec === l.length - 1){\n        return true;\n    }\n  \
    \  else{\n        return false;\n    }\n}\n", "\t//Initialize a counter for both\
    \ increasing and decreasing.\n\tvar increasing = 0;\n\tvar decreasing = 0;\n\t\
    \n\t//Loop through the elements and use the rules of monotonicity to\n\t//determine\
    \ how to increase the counters.\n\tfor(var i = 0; i < l.length - 1; i++){\n\t\t\
    if(l[i] <= l[i+1]){\n\t\t\tincreasing++;\n\t\t}else if(l[i] >= l[i+1]){\n\t\t\t\
    decreasing++;\n\t\t}\n\t}\n\t\n\t//Finally, return true if the counters have the\
    \ same value.\n\tif(increasing == decreasing){\n\t\treturn true;\n\t}else{\n\t\
    \treturn false;\n\t}\n}\n", "    var count = l.length;\n    if(count < 3){\n \
    \       return true;\n    }\n    var increasing = false;\n    var decreasing =\
    \ false;\n    var max;\n    var min;\n    if(l[0] < l[1]){\n        increasing\
    \ = true;\n        max = l[1];\n        min = l[0];\n    }\n    else if(l[0] >\
    \ l[1]){\n        decreasing = true;\n        max = l[0];\n        min = l[1];\n\
    \    }\n    else{\n        return false;\n    }\n    var i = 1;\n    while(i <\
    \ count){\n        if(increasing){\n            if(l[i] > max){\n            \
    \    max = l[i];\n            }\n            else if(l[i] < max){\n          \
    \      decreasing = true;\n                increasing = false;\n             \
    \   min = l[i];\n            }\n            else{\n                return false;\n\
    \            }\n        }\n        else if(decreasing){\n            if(l[i] <\
    \ min){\n                min = l[i];\n            }\n            else if(l[i]\
    \ > min){\n                increasing = true;\n                decreasing = false;\n\
    \                max = l[i];\n            }\n            else{\n             \
    \   return false;\n            }\n        }\n        i++;\n    }\n    return true;\n\
    }\n", "    let inc = true;\n    let dec = true;\n    for(let i = 0; i < l.length-1;\
    \ i++){\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n   \
    \     if(l[i] > l[i+1]){\n            inc = false;\n        }\n    }\n    return\
    \ inc || dec;\n}\n", "    var increasing = true;\n    var decreasing = true;\n\
    \    for(var i = 0; i < l.length-1; i++){\n        if(l[i] > l[i+1]){\n      \
    \      increasing = false;\n        }\n        if(l[i] < l[i+1]){\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    if(l.length<=1){\n        return true;\n    }\n    var inc=l[0]<l[1];\n\
    \    for(var i=1;i<l.length-1;i++){\n        if(inc&&l[i]>l[i+1]){\n         \
    \   return false;\n        }\n        if(!inc&&l[i]<l[i+1]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nvar l=[1,2,3,4,5];\nvar l2=[1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,",
  "  let i = 0;\n  let j = 0;\n  for(i = 0; i < l.length; i++){\n    for(j = 0; j\
    \ < l.length; j++){\n      if(l[i] < l[j]){\n        break;\n      }\n    }\n\
    \    if(j === l.length - 1){\n      return true;\n    }\n  }\n  for(i = 0; i <\
    \ l.length; i++){\n    for(j = 0; j < l.length; j++){\n      if(l[i] > l[j]){\n\
    \        break;\n      }\n    }\n    if(j === l.length - 1){\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "    if(l.length === 0) return true;\n   \
    \ var first = l[0];\n    var inc = true;\n    var dec = true;\n    var prev =\
    \ first;\n    var current;\n    for(var i = 1; i < l.length; i++){\n        current\
    \ = l[i];\n        if(prev <= current){\n            inc = false;\n        }\n\
    \        if(prev >= current){\n            dec = false;\n        }\n        prev\
    \ = current;\n    }\n    return (inc || dec);\n}\n", "  var d;\n  if(!(d = monotonic_direction(l))){\n\
    \    return false;\n  }\n  var last = l[0];\n  for(var i = 1; i < l.length; i++){\n\
    \    if(d < 0 && l[i] < last || d > 0 && l[i] > last){\n      return false;\n\
    \    }\n    last = l[i];\n  }\n  return true;\n}\n", "    var dec = true;\n  \
    \  var inc = true;\n    var i = 0;\n    while(i<l.length-1){\n        if(l[i]>l[i+1]){\n\
    \            inc = false;\n        }\n        if(l[i]<l[i+1]){\n            dec\
    \ = false;\n        }\n        i += 1;\n    }\n    return dec || inc;\n}\n", " \
    \ if(l.length===0 || l.length===1)\n    return true;\n  var flag=false;\n  var\
    \ flag1=false;\n  for(var i=0;i<l.length-1;i++){\n    if(l[i]>l[i+1])\n      flag=true;\n\
    \    if(l[i]<l[i+1])\n      flag1=true;\n  }\n  if(flag && flag1)\n    return\
    \ false;\n  return true;\n}\n", "\tif(typeof l !== 'object') return false;\n\t\
    var ascending = true;\n\tvar descending = true;\n\tfor(var i = 0; i < l.length\
    \ - 1; i++){\n\t\tif(l[i] < l[i+1]) descending = false;\n\t\tif(l[i] > l[i+1])\
    \ ascending = false;\n\t}\n\treturn ascending || descending;\n}\n", "  var isAscending\
    \ = true;\n  var isDescending = true;\n  for(var i = 0; i < l.length - 1; i++){\n\
    \    if(l[i] > l[i+1]){\n      isAscending = false;\n    }\n    if(l[i] < l[i+1]){\n\
    \      isDescending = false;\n    }\n  }\n  return isAscending || isDescending;\n\
    }\n", "    if(l.length === 0){\n        return true;\n    }\n    var diff = l[0]\
    \ - l[1];\n    for(var i = 0; i < l.length - 1; i++){\n        if(Math.sign(l[i]\
    \ - l[i+1]) !== Math.sign(diff)){\n            return false;\n        }\n    }\n\
    \    return true;\n}", "  var i;\n  for(i=0;i<l.length-1;i++){\n    if(l[i]>l[i+1]){\n\
    \      break;\n    }\n  }\n  if(i!=l.length-1){\n    for(i=0;i<l.length-1;i++){\n\
    \      if(l[i]<l[i+1]){\n        break;\n      }\n    }\n  }\n  if(i==l.length-1){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "  var direction\
    \ = increasing(l);\n  if(direction == -1){\n    return false;\n  }\n  for(var\
    \ i = 0; i < l.length-1; i++){\n    if(direction == 1){\n      if(l[i] > l[i+1]){\n\
    \        return false;\n      }\n    }\n    else{\n      if(l[i] < l[i+1]){\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "    var delta\
    \ = l[1] - l[0]\n    for(var i = 2; i < l.length; i++){\n        var prev_delta\
    \ = delta\n        delta = l[i] - l[i-1]\n        if (delta == 0 || delta / prev_delta\
    \ != 1){\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if(l.length <= 1){\n        return false;\n    }\n    var increasing = true;\n\
    \    var decreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n    \
    \    if(l[i] > l[i+1]){\n            increasing = false;\n        }else if(l[i]\
    \ < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "\tconst d = l.length - 1;\n\tfor(let i = 0; i < d; i++){\n\
    \t\tif(l[i] > l[i+1]) return false;\n\t}\n\treturn true;\n}\n", "  var decreasing\
    \ = l[0] >= l[1]\n  var increasing = l[0] <= l[1]\n  for(var i = 1; i < l.length;\
    \ i++){\n    if(increasing){\n      if(l[i] < l[i-1]){\n        return false\n\
    \      }\n    }\n    if(decreasing){\n      if(l[i] > l[i-1]){\n        return\
    \ false\n      }\n    }\n  }\n  return true\n}", "    var increasing = 1;\n  \
    \  var decreasing = 1;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i]\
    \ > l[i+1]){\n            increasing = 0;\n        }\n        if(l[i] < l[i+1]){\n\
    \            decreasing = 0;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length-1;\
    \ i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n    if(l[i] < l[i+1]){\n\
    \      dec = false;\n    }\n  }\n  return (inc || dec);\n}\n\n", "    return (allNonDecreasing(l))\
    \ || (allNonIncreasing(l));\n}\n", "  let decreasing = true;\n  let increasing\
    \ = true;\n  if(l.length < 2){\n    return false;\n  }\n  for(let i = 0; i < l.length-1;\
    \ i++){\n    if(l[i] > l[i+1]){\n      increasing = false;\n    }\n    if(l[i]\
    \ < l[i+1]){\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    }\n", "  if(l.length <= 1){\n    return true;\n  }\n  var inc = l[0] < l[1];\n\
    \  for(var i = 1; i < l.length - 1; i++){\n    var inc2 = l[i] < l[i+1];\n   \
    \ if(inc2 != inc){\n      return false;\n    }\n  }\n  return true;\n}\n", "\t\
    var sorted = l.slice().sort(function(a,b){return a-b});\n\tvar isIncreasing =\
    \ false;\n\tvar isDecreasing = false;\n\tif(l.toString() === sorted.toString()){\n\
    \t\tisIncreasing = true;\n\t}\n\tif(l.toString() === sorted.reverse().toString()){\n\
    \t\tisDecreasing = true;\n\t}\n\treturn isIncreasing || isDecreasing;\n}\n", " \
    \   if(l.length == 1) return true;\n    return l.reduce((acc, curr, index) =>\
    \ {\n        if(index == 0) return acc;\n        else{\n            if(acc ==\
    \ 0) {\n                if(curr > l[index-1]) return -1;\n                else\
    \ if(curr < l[index-1]) return 1;\n                else return 0;\n          \
    \  }\n            else if(acc == -1){\n                if(curr > l[index-1]) return\
    \ -1;\n                else return 0;\n            }\n            else if(acc\
    \ == 1){\n                if(curr < l[index-1]) return 1;\n                else\
    \ return 0;\n            }\n        }\n    }, 0)\n}\n", "\tvar i = 0;\n\tif(l.length\
    \ == 0){\n\t\treturn true;\n\t}\n\twhile(i < l.length-1){\n\t\tif(l[i] == l[i+1]){\n\
    \t\t\ti = i+1;\n\t\t}\n\t\telse if(l[i] < l[i+1]){\n\t\t\twhile(i < l.length-1){\n\
    \t\t\t\tif(l[i] < l[i+1]){\n\t\t\t\t\ti = i+1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\
    \t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i]\
    \ > l[i+1]){\n\t\t\twhile(i < l.length-1){\n\t\t\t\tif(l[i] > l[i+1]){\n\t\t\t\
    \t\ti = i+1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "  var inc = 0;\n \
    \ var dec = 0;\n  for(var i = 0; i < l.length-1; i++){\n    if(l[i] < l[i+1]){\n\
    \      inc++;\n    }\n    else if(l[i] > l[i+1]){\n      dec++;\n    }\n  }\n\
    \  if(inc == l.length-1 || dec == l.length-1){\n    return true;\n  }\n  else\
    \ {\n    return false;\n  }\n}\n", "  let increasing = true;\n  let decreasing\
    \ = true;\n  for(let i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n\
    \      increasing = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing =\
    \ false;\n    }\n  }\n  return increasing || decreasing;\n}\n\nmodule.exports\
    \ = monotonic;", "\treturn l.every(function(v,i,a){return v>=a[0]}) || l.every(function(v,i,a){return\
    \ v<=a[0]});\n}", "\tvar up = true, down = true;\n\tfor(var i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i] < l[i-1]){\n\t\t\tup = false;\n\t\t}\n\t\tif(l[i] > l[i-1]){\n\
    \t\t\tdown = false;\n\t\t}\n\t}\n\treturn up || down;\n}\n", "    var v = l[0];\n\
    \    var inc = v<l[1];\n    for(var i=1; i<l.length; i++){\n        if(inc &&\
    \ l[i]<v)return false;\n        if(!inc && l[i]>v)return false;\n        v = l[i];\n\
    \    }\n    return true;\n}\n", "\tif(l.length < 2){return true}\n\tfunction cmp(a,b){return\
    \ a-b};\n\tvar c = l.sort(cmp)\n\tvar b = c.slice()\n\tc.reverse()\n\treturn (c\
    \ == l) || (b == l)\n}\n", "  let isMonotonic = true;\n  let isIncreasing = l[0]\
    \ <= l[1];\n  for(let i = 1; i < l.length; i++){\n    if(isIncreasing){\n    \
    \  if(l[i-1] > l[i]){\n        isMonotonic = false;\n        break;\n      }\n\
    \    } else {\n      if(l[i-1] < l[i]){\n        isMonotonic = false;\n      \
    \  break;\n      }\n    }\n  }\n  return isMonotonic;\n}\n", "  // console.log(l);\n\
    \  // console.log(l.length);\n  if(l.length < 2){\n    return true;\n  }\n  if(l[1]\
    \ > l[0]){\n    l.shift();\n    return monotonic(l);\n  }\n  else if(l[1] < l[0]){\n\
    \    l.shift();\n    return monotonic(l);\n  }\n  else{\n    return false;\n \
    \ }\n}\n", "\tif(l.length < 3){\n\t\treturn true;\n\t}\n\tlet fl = firstList(l);\n\
    \tlet sl = secondList(l);\n\tlet inc = compare(fl, sl);\n\tif(inc === 0){\n\t\t\
    return monotonic(sl);\n\t}\n\treturn inc !== false;\n}\n", "    let incr = true;\n\
    \    let decr = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i]\
    \ > l[i+1]){\n            incr = false;\n        }\n        if(l[i] < l[i+1]){\n\
    \            decr = false;\n        }\n    }\n    return incr || decr;\n}\n",
  "\tif(l.length <= 2){\n\t\treturn true;\n\t}\n\treturn cmp(l.slice(0, l.length -\
    \ 1), l.slice(1, l.length));\n}\n", "  var asc = true;\n  var desc = true;\n \
    \ for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      desc =\
    \ false;\n    }else if(l[i] > l[i+1]){\n      asc = false;\n    }\n  }\n  return\
    \ (asc || desc);\n}\n", "  if(l.length <= 2){\n    return true;\n  }\n  let n\
    \ = 1;\n  while(l[n] == l[n-1]){\n    n++;\n  }\n  if(l[n] > l[n-1]){\n    for(let\
    \ i = n+1; i < l.length; i++){\n      if(l[i] < l[i-1]){\n        return false;\n\
    \      }\n    }\n  }\n  else{\n    for(let i = n+1; i < l.length; i++){\n    \
    \  if(l[i] > l[i-1]){\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  if(l.length <= 2){\n    return true;\n  }\n  if(l[0] < l[1]){\n    for(let\
    \ i = 1; i < l.length; i++){\n      if(l[i] < l[i-1]){\n        return false;\n\
    \      }\n    }\n  }\n  else if(l[0] > l[1]){\n    for(let i = 1; i < l.length;\
    \ i++){\n      if(l[i] > l[i-1]){\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "\tlet c = l[0] < l[1] ? 0 : 1;\n\tfor(let i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i-1] < l[i] && c === 1){\n\t\t\treturn false;\n\t\t}else if(l[i-1]\
    \ > l[i] && c === 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "\tif(l.length <= 1){return true;}\n\tvar firstEl = l[0];\n\tvar direction = l[1]\
    \ - firstEl;\n\tif(direction != 1 && direction != -1){return false;}\n\tfor(var\
    \ i = 2; i < l.length; i++){\n\t\tif(direction == 1 && l[i] < l[i-1]){return false;}\n\
    \t\tif(direction == -1 && l[i] > l[i-1]){return false;}\n\t}\n\treturn true;\n\
    }\n", "    var up = false;\n    var down = false;\n    for(var i = 0; i < l.length\
    \ - 1; i++){\n        if(l[i] < l[i+1]){\n            up = true;\n        }\n\
    \        if(l[i] > l[i+1]){\n            down = true;\n        }\n    }\n    return\
    \ up && down ? false : true;\n}\n", "\tvar increase = false;\n\tvar decrease =\
    \ false;\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\
    \tdecrease = true;\n\t\t}else if(l[i] < l[i+1]){\n\t\t\tincrease = true;\n\t\t\
    }\n\t}\n\treturn (increase || decrease);\n}", "\tif(l.length <= 2){\n\t\treturn\
    \ true;\n\t}\n\tvar increasing = true;\n\tvar decreasing = true;\n\tfor(var i\
    \ = 0; i < l.length - 1; i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tincreasing = false;\n\
    \t\t}\n\t\tif(l[i] < l[i+1]){\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn\
    \ increasing || decreasing;\n}\n", "\t\n\tif(l.length <= 1){\n\t\treturn true;\n\
    \t}\n\t//Check for increasing\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i]\
    \ > l[i+1]){\n\t\t\tbreak;\n\t\t}\n\t}\n\t//Check for decreasing\n\tfor(var i\
    \ = 0; i < l.length-1; i++){\n\t\tif(l[i] < l[i+1]){\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif(i == l.length-1){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\
    }\n", "\tif( !Array.isArray(l) ){\n\t\treturn false;\n\t}\n\t\n\tlet diff = l[1]\
    \ - l[0];\n\tfor(let i = 1; i < l.length - 1; i++){\n\t\tif( diff > 0 && l[i+1]\
    \ - l[i] > 0 || diff < 0 && l[i+1] - l[i] < 0 ){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\n\n", "  if(l.length > 1){\n    return l.slice(1).reduce((p,\
    \ n, i) => {\n      return p && (l[i] < n || l[i] > n);\n    }, true);\n  }\n\
    \  return true;\n}\n", "    return monotonicAscending(l) || monotonicDescending(l);\n\
    }", "   return increasing(l) || decreasing(l);\n}\n", "    var dec=true, inc=true;\n\
    \    for(var i=0; i<l.length-1; i++){\n        if(l[i]>l[i+1]){\n            inc=false;\n\
    \        }\n        if(l[i]<l[i+1]){\n            dec=false;\n        }\n    }\n\
    \    return inc || dec;\n}\n", "\tif(length(l)<=1){\n\t\treturn true;\n\t}else{\n\
    \t\tif(l.head <= l.tail.head){\n\t\t\treturn monotonic(l.tail);\n\t\t}else{\n\t\
    \t\treturn false;\n\t\t}\n\t}\n}\n", "\tif(l.length == 0)\n\t\treturn true;\n\t\
    var diff = l[1] - l[0];\n\tfor(var i = 2; i < l.length; i++){\n\t\tif(diff * (l[i]\
    \ - l[i-1]) < 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n", "    if(l.length\
    \ <= 1){\n        return true;\n    }\n\n    var isIncreasing = l[0] < l[1];\n\
    \    var isDecreasing = l[0] > l[1];\n\n    for(var i = 1; i < l.length; i++){\n\
    \        if(isIncreasing){\n            if(l[i] < l[i-1]){\n                return\
    \ false;\n            }\n        }\n        else if(isDecreasing){\n         \
    \   if(l[i] > l[i-1]){\n                return false;\n            }\n       \
    \ }\n        else{\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n", "    let inc = 0;\n    let dec = 0;\n    for(let i = 0; i < l.length;\
    \ i++){\n        if(l[i] > l[i+1]){\n            inc++;\n        }else if(l[i]\
    \ < l[i+1]){\n            dec++;\n        }\n    }\n    if(inc === 0 || dec ===\
    \ 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", " \
    \ return l.slice(1).every((x,i)=>l[i]>=x) || l.slice(1).every((x,i)=>l[i]<=x);\n\
    }", "\tvar i = 1;\n\tvar aux = l[0];\n\twhile (i<l.length && (l[i]>=aux)){\n\t\
    \taux = l[i];\n\t\ti++;\n\t}\n\tif (i==l.length) return true;\n\tvar j = i+1;\n\
    \twhile (j<l.length && (l[j]<=aux)){\n\t\taux = l[j];\n\t\tj++;\n\t}\n\tif (j==l.length)\
    \ return true;\n\treturn false;\n}\n", "    var m = isDescending(l) || isAscending(l);\n\
    \    return m;\n}", "    return l.every((e,i,a)=>(i==0)?true:(i==1)?e<=a[i-1]:e>=a[i-1])\n\
    }\n", "  return (l.sort() === l || l.sort().reverse() === l)\n}", "  //check if\
    \ monotonically increasing\n  var monoInc = true;\n  var monoDec = true;\n  for(var\
    \ i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      monoInc = false;\n\
    \    }\n    if(l[i] < l[i+1]){\n      monoDec = false;\n    }\n  }\n  if(monoInc\
    \ || monoDec){\n    return true;\n  }\n  return false;\n}\n", "\treturn (monotonic_increasing(l)\
    \ || monotonic_decreasing(l));\n}\n", "\tvar inc = 0;\n\tfor(var i = 0; i < l.length-1;\
    \ i++){\n\t\tif(l[i] > l[i+1]){\n\t\t\tinc += 1;\n\t\t}\n\t\telse if(l[i] < l[i+1]){\n\
    \t\t\tinc -= 1;\n\t\t}\n\t}\n\tif(inc != -1 && inc != 1){\n\t\treturn False;\n\
    \t}\n\telse{\n\t\treturn True;\n\t}\n}\n", "    let list = l.slice();\n    let\
    \ isInc = true;\n    let isDec = true;\n    for(let i = 0; i < list.length - 1;\
    \ i++){\n        if(list[i] > list[i+1]){\n            isInc = false;\n      \
    \  }\n        if(list[i] < list[i+1]){\n            isDec = false;\n        }\n\
    \    }\n    return isInc || isDec;\n}\n", "\tvar first = null;\n\tvar last = null;\n\
    \tfor(var i=0; i<l.length; i++){\n\t\tif(first === null) first = l[i];\n\t\telse\
    \ if(last === null) last = l[i];\n\t\telse{\n\t\t\tif(first > last && last < l[i])\
    \ return false;\n\t\t\tif(first < last && last > l[i]) return false;\n\t\t\tlast\
    \ = l[i];\n\t\t}\n\t}\n\treturn true;\n}\n", "    var direction = Math.sign(l[1]\
    \ - l[0]);\n    var dir_change = 0;\n    var monotonic = true;\n    for(var i\
    \ = 1; i < l.length; i++){\n        var current_direction = Math.sign(l[i] - l[i-1]);\n\
    \        if(current_direction === 0) {\n            continue;\n        }\n   \
    \     if(current_direction !== direction){\n            dir_change++;\n      \
    \      if(dir_change > 1){\n                monotonic = false;\n             \
    \   break;\n            }\n            direction = current_direction;\n      \
    \  }\n    }\n    return monotonic;\n}\n", "  return increasing(l) || decreasing(l);\n\
    }\n", "\tfunction arr(a){\n\t\tvar i;\n\t\tfor(i=0;i<a.length-1;i++){\n\t\t\t\
    if(a[i]>a[i+1]){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif(a[i]<a[i+1]){\n\t\t\t\t\
    return 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tif(arr(l)==0){\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n", "    var increasing = true;\n    var decreasing =\
    \ true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n\
    \            decreasing = false;\n        }else if(l[i] > l[i+1]){\n         \
    \   increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    if(l.length < 3){\n        return true;\n    }\n    var m = monotonic_value(l[0],\
    \ l[1]);\n    for(var i = 1; i < l.length - 1; i++){\n        if(monotonic_value(l[i],\
    \ l[i+1]) != m){\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "\t//Check if list is empty.\n\tif(isEmpty(l)){\n\t\treturn null;\n\t}\n\
    \t//Check if list has 1 element.\n\tif(size(l)==1){\n\t\treturn true;\n\t}\n\t\
    var i=1;\n\tvar n=size(l);\n\tvar type=null;\n\t//Iterate through each element\
    \ to check the monotonicity.\n\twhile(i<n){\n\t\t//Check whether list is increasing\
    \ or decreasing.\n\t\tif(l[i]>l[i-1]){\n\t\t\ttype=1;\n\t\t}\n\t\telse if(l[i]<l[i-1]){\n\
    \t\t\ttype=-1;\n\t\t}\n\t\t//Check whether the list is monotonically increasing\
    \ or decreasing.\n\t\tif(type!=null){\n\t\t\tif(type==1){\n\t\t\t\tif(l[i]<l[i-1]){\n\
    \t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(type==-1){\n\t\t\t\t\
    if(l[i]>l[i-1]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn true;\n}", "    return is_sorted(l) || is_sorted(reverse(l));\n\
    }\n", "  if(l.length <= 1){\n    return true;\n  }\n  var index = 0;\n  while(index\
    \ < l.length-1){\n    if(l[index] > l[index+1]){\n      break;\n    }\n    index++;\n\
    \  }\n  if(index == l.length-1){\n    return true;\n  }\n  index = 0;\n  while(index\
    \ < l.length-1){\n    if(l[index] < l[index+1]){\n      break;\n    }\n    index++;\n\
    \  }\n  if(index == l.length-1){\n    return true;\n  }\n  return false;\n}\n",
  "  var asc=0;\n  var desc=0;\n  for(var i=0;i<l.length-1;i++){\n    if(l[i]<l[i+1]){\n\
    \      asc++;\n    }\n    else if(l[i]>l[i+1]){\n      desc++;\n    }\n  }\n \
    \ if(asc==0||desc==0){\n    return true;\n  }\n  else{\n    return false;\n  }\n\
    }", "  return l.every((v,i,a)=>i==0||a[i-1]<=v) || l.every((v,i,a)=>i==0||a[i-1]>=v);\n\
    }\n", "  //YOUR CODE HERE\n}\n", "\tif(l.length == 0){\n\t\treturn true;\n\t}\n\
    \tlet result = [];\n\tfor(let i = 0; i < l.length-1; i++){\n\t\tresult.push(l[i+1]\
    \ - l[i]);\n\t}\n\tfor(let i = 0; i < result.length; i++){\n\t\tif(result[i] <\
    \ 0){\n\t\t\treturn checkAllMinus(result);\n\t\t}else if(result[i] > 0){\n\t\t\
    \treturn checkAllPlus(result);\n\t\t}\n\t}\n\treturn true;\n}\n", "    var m =\
    \ 1;\n    if(l[0] > l[1]){\n        m = -1;\n    }\n    for(var i = 1; i < l.length\
    \ - 1; i++){\n        if(m == 1 && l[i] > l[i+1]){\n            return false;\n\
    \        }else if(m == -1 && l[i] < l[i+1]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "  var i;\n  var direction = (l[1] - l[0]\
    \ < 0) ? true : false;\n  for(i = 2; i < l.length; i++){\n    if(direction ==\
    \ true){\n      if(l[i] - l[i-1] > 0){\n        return false;\n      }\n    }else{\n\
    \      if(l[i] - l[i-1] < 0){\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    let m = new Map();\n    let temp = '';\n    for(let i=0; i<l.length;\
    \ i++){\n        for(let j=i+1; j<l.length; j++){\n            if(l[i]<l[j]){\n\
    \                temp = 'down';\n            }\n            else if(l[i]>l[j]){\n\
    \                temp = 'up';\n            }\n            else{\n            \
    \    temp = 'stay';\n            }\n            if(!m.has(temp)){\n          \
    \      m.set(temp, 1);\n            }\n            else{\n                m.set(temp,\
    \ m.get(temp)+1);\n            }\n        }\n    }\n    console.log(m);\n    return\
    \ (m.size===1);\n}", "  let fl = false;\n  for(let i = 1; i < l.length; i++){\n\
    \    if(l[i] - l[i-1] < 0){\n      if(fl == true){\n        return false;\n  \
    \    }else{\n        fl = true;\n      }\n    }\n  }\n  return true;\n}\n", " \
    \   var up = false;\n    var down = false;\n    if(l.length>=2){\n        if(l[0]<l[1]){\n\
    \            up = true;\n        }\n        else if(l[0]>l[1]){\n            down\
    \ = true;\n        }\n        for(var i=2;i<l.length;i++){\n            if(up){\n\
    \                if(l[i]<l[i-1]){\n                    return false;\n       \
    \         }\n            }\n            else if(down){\n                if(l[i]>l[i-1]){\n\
    \                    return false;\n                }\n            }\n       \
    \     else{\n                if(l[i]<l[i-1]){\n                    down = true;\n\
    \                }\n                else if(l[i]>l[i-1]){\n                  \
    \  up = true;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    else{\n        return true;\n    }\n}\n", "    var increasing = true;\n\
    \    var decreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n    \
    \    if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i]\
    \ < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "  var increasing = true,\n      decreasing = true;\n\
    \  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]) decreasing =\
    \ false;\n    if(l[i] > l[i+1]) increasing = false;\n  }\n  return increasing\
    \ || decreasing;\n}\n", "  return (l.every((e,i,a)=>i==0||e>=a[i-1])||l.every((e,i,a)=>i==0||e<=a[i-1]));\n\
    }\n", "    function monotonicIncreasing(l){\n        if(l.length <= 2){\n    \
    \        return true;\n        }\n        if(l[0] > l[1]){\n            return\
    \ false;\n        }\n        return monotonicIncreasing(l.slice(1));\n    }\n\
    \    function monotonicDecreasing(l){\n        if(l.length <= 2){\n          \
    \  return true;\n        }\n        if(l[0] < l[1]){\n            return false;\n\
    \        }\n        return monotonicDecreasing(l.slice(1));\n    }\n    return\
    \ monotonicIncreasing(l) || monotonicDecreasing(l);\n}", "    if(l.length < 2){\n\
    \        return true;\n    }\n    var forward = 0;\n    var backwards = 0;\n \
    \   for(var i = 0; i < l.length - 1; i++){\n        if(l[i] == l[i+1]){\n    \
    \        continue;\n        }\n        if(l[i] < l[i+1]){\n            forward++;\n\
    \        }\n        if(l[i] > l[i+1]){\n            backwards++;\n        }\n\
    \    }\n    return (forward == 0 || backwards == 0);\n}", "    if(l.length <=\
    \ 1){return true;}\n    var d = l[1] - l[0];\n    for(var i = 2; i < l.length;\
    \ i++){\n        if(d * (l[i] - l[i-1]) < 0){return false;}\n    }\n    return\
    \ true;\n}\n", "  // first non-equal element\n  let first = l.slice(1).findIndex(a\
    \ => a != l[0]);\n  // if only one element, or all elements are equal\n  if (first\
    \ == -1) return true;\n  // If there is only one non-equal element, its ok if\
    \ the sign is the same\n  if (first == 1) return Math.sign(l[0]) == Math.sign(l[1]);\n\
    \  // Otherwise all elements should have the same sign\n  return l.slice(first).every(a\
    \ => Math.sign(a) == Math.sign(l[first]));\n}", "    let inc = false;\n    let\
    \ dec = false;\n    if(l.length === 0 || l.length === 1){\n        return true;\n\
    \    }\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i+1]){\n\
    \            inc = true;\n        }\n        if(l[i] > l[i+1]){\n            dec\
    \ = true;\n        }\n        if(inc && dec){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "  var t=Math.sign(l[0]-l[1]);\n  for(var\
    \ i=1;i<l.length-1;i++){\n    if(Math.sign(l[i]-l[i+1])!=t){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  var increasing = true;\n  var decreasing\
    \ = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n\
    \      decreasing = false;\n    }\n    if(l[i] > l[i+1]){\n      increasing =\
    \ false;\n    }\n  }\n  return increasing || decreasing;\n}\n", "    var dir =\
    \ l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        var cDir = l[i]\
    \ - l[i-1];\n        if(cDir * dir < 0){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  for(var i = 0; i < l.length-1; i++){\n    if(l[i]\
    \ > l[i+1]){\n      for(var j = 0; j < l.length-1; j++){\n        if(l[j] < l[j+1]){\n\
    \          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
  "  return isIncreasing(l) || isDecreasing(l);\n}\n", "\tvar increasing = true;\n\
    \tvar decreasing = true;\n\tvar index;\n\tfor(index = 0; index < l.length-1; index++){\n\
    \t\tif(l[index]>l[index+1]){\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(l[index]<l[index+1]){\n\
    \t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\n",
  "  //1. Find the slope between first 2 elements\n  var init_slope = l[1] - l[0];\n\
    \  //2. Iterate through the rest of the list\n  for(i=2; i<l.length; i++){\n \
    \   //3. If initial slope is 0, update slope to slope between second and third\
    \ elements\n    if(init_slope == 0){\n      init_slope = l[i] - l[i-1];\n    }\n\
    \    //4. If the initial slope is > 0 and the slope between two adjacent elements\
    \ is < 0 or\n    // vice versa, return False\n    else if((init_slope > 0 && l[i]\
    \ - l[i-1] < 0) || (init_slope < 0 && l[i] - l[i-1] > 0)){\n      return false;\n\
    \    }\n  }\n  //5. Return True if no edge case returns False\n  return true;\n\
    }\n", "    var temp = true;\n    var a = l[0];\n    var b = l[1];\n    if(a <\
    \ b){\n        for(var i = 1; i < l.length; i++){\n            if(a < b){\n  \
    \              temp = true;\n            }\n            else{\n              \
    \  temp = false;\n            }\n            a = b;\n            b = l[i];\n \
    \       }\n    }\n    else{\n        for(var i = 1; i < l.length; i++){\n    \
    \        if(a > b){\n                temp = true;\n            }\n           \
    \ else{\n                temp = false;\n            }\n            a = b;\n  \
    \          b = l[i];\n        }\n    }\n    return temp;\n}\n", "  var isIncreasing\
    \ = false;\n  var isDecreasing = false;\n  var ascending = 0;\n  var descending\
    \ = 0;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] <= l[i+1]){\n  \
    \    ascending++;\n    }\n    if(l[i] >= l[i+1]){\n      descending++;\n    }\n\
    \  }\n  if(ascending == l.length - 1){\n    isIncreasing = true;\n  }\n  if(descending\
    \ == l.length - 1){\n    isDecreasing = true;\n  }\n  return isIncreasing || isDecreasing;\n\
    }\n", "    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length-1;\
    \ i++){\n        if(l[i] > l[i+1]){\n            inc = false;\n        }\n   \
    \     if(l[i] < l[i+1]){\n            dec = false;\n        }\n    }\n    return\
    \ inc || dec;\n}\n", "  var counter = 0;\n  for(var i = 1; i < l.length; i++){\n\
    \    if(l[i] >= l[i-1]){\n      counter += 1;\n    }\n    else if(l[i] <= l[i-1]){\n\
    \      counter -= 1;\n    }\n  }\n  if(counter === 0 || counter === -l.length\
    \ + 1 || counter === l.length - 1){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}\n", "\tvar d=l[1]-l[0];\n\tvar d1;\n\tvar tf=true;\n\tfor(var\
    \ i=2;i<l.length;i++){\n\t\td1=l[i]-l[i-1];\n\t\tif(d1*d<0){\n\t\t\ttf=false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn tf;\n}\n", "    if(l.length<=2){\n        return\
    \ true;\n    }\n    if(l[0]<l[1]){\n        for(var i=0;i<l.length-1;i++){\n \
    \           if(l[i]>l[i+1]){\n                return false;\n            }\n \
    \       }\n    }\n    else{\n        for(var i=0;i<l.length-1;i++){\n        \
    \    if(l[i]<l[i+1]){\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\n", "  //Return value\n  var r = true;\n  //monotonically\
    \ increasing or decreasing\n  var m = true;\n  //No elements\n  if(l.length ==\
    \ 0){\n    r = false;\n  }\n  //Not zero elements\n  else{\n    for(var i = 0;\
    \ i < l.length-1; i++){\n      if(l[i] == l[i+1]){\n        //Do nothing\n   \
    \   }\n      else if(l[i] < l[i+1]){\n        //Do nothing\n      }\n      else\
    \ if(l[i] > l[i+1]){\n        m = false;\n      }\n      else{\n        r = false;\n\
    \      }\n    }\n  }\n  return r;\n}\n", "    if(l.length <= 2){\n        return\
    \ true;\n    }\n    var up = true;\n    var down = true;\n    for(var i = 1; i\
    \ < l.length; i++){\n        if(l[i] > l[i-1]){\n            down = false;\n \
    \       }\n        if(l[i] < l[i-1]){\n            up = false;\n        }\n  \
    \  }\n    return up || down;\n}\n", "\treturn l.every(function(el, i, arr){\n\t\
    \treturn arr[i] === arr[i-1] || arr[i] < arr[i-1] || arr[i] > arr[i-1];\n\t});\n\
    }\n", "    let direction = false;\n    for(let i = 0; i < l.length; i++){\n  \
    \      if(direction && l[i] < l[i-1]){\n            return false;\n        }\n\
    \        if(!direction && l[i] > l[i-1]){\n            direction = true;\n   \
    \     }\n    }\n    return true;\n}\n", "    var direction = 0\n    for(var i\
    \ = 0; i < l.length - 1; i++){\n        var change = l[i] - l[i+1]\n        if(change\
    \ != 0){\n            if(direction == 0){\n                direction = change\n\
    \            }\n            else if(direction/change < 0){\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "  if(l.length\
    \ <= 2){\n    return true;\n  }\n  var direction = l[1] - l[0];\n  for(var i =\
    \ 0; i < l.length - 1; i++){\n    if(direction == 0){\n      direction = l[i +\
    \ 1] - l[i];\n      continue;\n    }\n    if((l[i + 1] - l[i]) / Math.abs(l[i\
    \ + 1] - l[i]) !== direction / Math.abs(direction)){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n", "    if(l.length<=1){\n        return true;\n\
    \    }\n    var inc=false;\n    var dec=false;\n    for(var i=0;i<l.length-1;i++){\n\
    \        if(l[i]<l[i+1]){\n            inc=true;\n        }\n        if(l[i]>l[i+1]){\n\
    \            dec=true;\n        }\n    }\n    return inc||dec;\n}\n", "  var ascending\
    \ = l[0] < l[1];\n  return l.every(function(v,i){\n    if(i === l.length - 1)\
    \ return true;\n    return ascending ? v < l[i+1] : v > l[i+1];\n  });\n}\n",
  "    return l.every((n, i) => i==0 || (l[i-1]<n)==(l[0]<l[1]))\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
