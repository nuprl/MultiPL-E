language: js
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var out = [];\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring) !== -1){\n\
    \            out.push(strings[i]);\n        }\n    }\n    return out;\n}\n\n\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered_strings =\
    \ []\n    for (const str of strings){\n        if (str.indexOf(substring) > -1){\n\
    \            filtered_strings.push(str)\n        }\n    }\n    return filtered_strings\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(value){\n\
    \        return value.indexOf(substring) !== -1;\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(str){return\
    \ str.indexOf(substring) !== -1;});\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(element){\n\
    \        return element.indexOf(substring) != -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(value,\
    \ index, arr){\n\t\treturn value.indexOf(substring) !== -1;\n\t});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_list = strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) > -1;\n\t});\n\treturn filtered_list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(el){\n\
    \        return el.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(element){\n\
    \t\tif(element.toLowerCase().indexOf(substring.toLowerCase()) != -1){\n\t\t\t\
    return true;\n\t\t}\n\t\treturn false;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered = [];\n  \
    \  for(let i=0; i<strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var substring_matches =\
    \ new Array();\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            substring_matches.push(strings[i]);\n        }\n    }\n\
    \    return substring_matches;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var out = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >\
    \ -1){\n            out.push(strings[i]);\n        }\n    }\n    return out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(value){\n\
    \t\treturn value.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_list = []\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) >= 0){\n\t\
    \t\tnew_list.push(strings[i])\n\t\t}\n\t}\n\treturn new_list\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(a){return\
    \ a.indexOf(substring) > -1;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    //filter(function(element){return\
    \ element.contains(substring)})\n    return strings.filter(e => e.includes(substring));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn _.filter(strings,\
    \ function(str){\n\t\treturn str.indexOf(substring) != -1;\n\t});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpryk2cckj.js:3\n\treturn _.filter(strings, function(str){\n\t^\n\
    \nReferenceError: _ is not defined\n    at filter_by_substring (/tmp/tmpryk2cckj.js:3:2)\n\
    \    at test (/tmp/tmpryk2cckj.js:13:20)\n    at Object.<anonymous> (/tmp/tmpryk2cckj.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.includes(substring);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.includes(substring)){\n\t\t\tfiltered.push(string);\n\t\t}\n\t});\n\
    \treturn filtered;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter( function(s){\
    \ return s.indexOf(substring) > -1; } );\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar my_filtered_list = [];\n\
    \tvar found = false;\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tfound = true;\n\t\t\tmy_filtered_list.push(strings[i]);\n\t\t}\n\t}\n\t\
    if(found){\n\t\treturn my_filtered_list;\n\t}\n\telse{\n\t\treturn \"No Match\"\
    ;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'No Match'\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpogw6hmh8.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpogw6hmh8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'No Match',\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = new Array();\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(element){\n\
    \        return element.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(s){\n\
    \t\treturn s.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) !== -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let new_string_list = []\n\
    \    strings.forEach(string => {\n        if(string.includes(substring)){\n  \
    \          new_string_list.push(string)\n        }\n    });\n    return new_string_list\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var arr = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) !=\
    \ -1){\n            arr.push(strings[i]);\n        }\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tnew_list.push(strings[i]);\n\t\t}\n\t}\n\treturn new_list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(\n\
    \        function(string){\n            return string.indexOf(substring) > -1;\n\
    \        }\n    );\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar ret = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(obj){return\
    \ obj.indexOf(substring) != -1;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(n){\n\
    \t\treturn n.toLowerCase().indexOf(substring.toLowerCase()) !== -1;\n\t});\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var subs = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >\
    \ -1){\n            subs.push(strings[i]);\n        }\n    }\n    return subs;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    if (substring === '') {\n\
    \        return strings;\n    } else {\n        var filtered = [];\n        for\
    \ (var i=0; i<strings.length; i++){\n            if (strings[i].indexOf(substring)\
    \ != -1){\n                filtered.push(strings[i]);\n            }\n       \
    \ }\n        return filtered;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var results = [];\n   \
    \ strings.forEach(function(string){\n        if(string.includes(substring)){\n\
    \            results.push(string);\n        }\n    });\n    return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var result = [];\n    $.each(strings,\
    \ function(index, value){\n        if(value.indexOf(substring) !== -1){\n    \
    \        result.push(value);\n        }\n    });\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpw6u3be8l.js:4\n    $.each(strings, function(index, value){\n  \
    \  ^\n\nReferenceError: $ is not defined\n    at filter_by_substring (/tmp/tmpw6u3be8l.js:4:5)\n\
    \    at test (/tmp/tmpw6u3be8l.js:17:20)\n    at Object.<anonymous> (/tmp/tmpw6u3be8l.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(el){\n\
    \        return el.indexOf(substring) > -1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(elem){\n\
    \        return elem.includes(substring);\n    });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var valid = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) !=\
    \ -1){\n            valid.push(strings[i]);\n        }\n    }\n    return valid;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered_strings =\
    \ [];\n    strings.forEach(string => {\n        if(string.indexOf(substring) >\
    \ -1){\n            filtered_strings.push(string);\n        }\n    });\n    return\
    \ filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(s){\n\
    \t\treturn s.includes(substring);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = []\n   \
    \ for (var i = 0; i < strings.length; i++){\n        if (strings[i].includes(substring)){\n\
    \            filtered.push(strings[i])\n        }\n    }\n    return filtered\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var new_strings = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(item){\n\
    \        return item.toLowerCase().indexOf(substring.toLowerCase()) > -1;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_list = [];\n\t$.each(strings,\
    \ function(index, value){\n\t\tif(value.indexOf(substring) != -1){\n\t\t\tnew_list.push(value);\n\
    \t\t}\n\t});\n\treturn new_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4foei7ex.js:4\n\t$.each(strings, function(index, value){\n\t^\n\
    \nReferenceError: $ is not defined\n    at filter_by_substring (/tmp/tmp4foei7ex.js:4:2)\n\
    \    at test (/tmp/tmp4foei7ex.js:17:20)\n    at Object.<anonymous> (/tmp/tmp4foei7ex.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var out = [];\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ != -1){\n            out.push(strings[i]);\n        }\n    }\n    return out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    if(!substring)\n      \
    \  return strings;\n    var filtered_arr = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) != -1)\n            filtered_arr.push(strings[i]);\n\
    \    }\n    return filtered_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\t\n\tvar substring_length\
    \ = substring.length;\n\tvar result = [];\n\t\n\t//Loop through all strings, check\
    \ for ones that contain substring\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tvar curr_string = strings[i];\n\t\t\n\t\tif(curr_string.length >= substring_length){\n\
    \t\t\tvar start_index = curr_string.indexOf(substring);\n\t\t\tif(start_index\
    \ > -1){\n\t\t\t\t//Substring found\n\t\t\t\tresult.push(curr_string);\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_strings = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.toLowerCase().indexOf(substring.toLowerCase()) != -1;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar r = [];\n\tfor(var i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ > -1){\n\t\t\tr.push(strings[i]);\n\t\t}\n\t}\n\treturn r;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar result = []\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tresult.push(strings[i])\n\t\t}\n\t}\n\treturn result\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(el){\n\
    \        return el.indexOf(substring) != -1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar i,j,k, good, bad, arr;\n\
    \tgood = [];\n\tbad = [];\n\tfor(i=0; i<strings.length; i++){\n\t\tarr = [];\n\
    \t\tj = 0;\n\t\tk = 0;\n\t\twhile(k!=-1){\n\t\t\tk = strings[i].indexOf(substring,\
    \ j);\n\t\t\tif(k!=-1){\n\t\t\t\tarr.push(k);\n\t\t\t\tj = k+1;\n\t\t\t}\n\t\t\
    }\n\t\tif(arr.length){\n\t\t\tgood.push(strings[i]);\n\t\t}else{\n\t\t\tbad.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn {good:good, bad:bad};\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  bad: [],\n\
    \  good: []\n}\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmplslw_pdg.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmplslw_pdg.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { good: [],\
    \ bad: [] },\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var ret = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >\
    \ -1){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(value,\
    \ index, Arr){\n        return value.indexOf(substring) > -1;\n    });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  strings.forEach(function(string){\n        if(string.includes(substring)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.toLowerCase().indexOf(substring.toLowerCase()) > -1;\n\t});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_strings = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ !== -1){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn _.filter(strings,\
    \ function(s){\n\t\treturn s.indexOf(substring) > -1;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03adwd6v.js:3\n\treturn _.filter(strings, function(s){\n\t^\n\n\
    ReferenceError: _ is not defined\n    at filter_by_substring (/tmp/tmp03adwd6v.js:3:2)\n\
    \    at test (/tmp/tmp03adwd6v.js:13:20)\n    at Object.<anonymous> (/tmp/tmp03adwd6v.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    filtered = []\n    for\
    \ (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring)\
    \ > -1) {\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(string\
    \ => string.includes(substring));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    //Initialize a new list\
    \ of filtered strings\n    filtered_strings = []\n    //loop through all strings\n\
    \    for (var i = 0; i < strings.length; i++){\n        //Add strings to the new\
    \ list only if they contain the substring\n        if (strings[i].includes(substring)){\n\
    \            filtered_strings.push(strings[i])\n        }\n    }\n    //Return\
    \ the filtered list\n    return filtered_strings\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(item){\n\
    \        return item.indexOf(substring) >= 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    if(strings.length == 0){\n\
    \        return []\n    }\n    var filtered = []\n    strings.forEach(function(s){\n\
    \        if(s.includes(substring)){\n            filtered.push(s)\n        }\n\
    \    })\n    return filtered\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(substring) != -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  strings.forEach(function(string){\n        if(string.indexOf(substring) !=\
    \ -1){\n            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(item){\n\
    \t\treturn item.indexOf(substring) !== -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tfiltered_strings = []\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tfiltered_strings.push(strings[i])\n\t\t}\n\t}\n\treturn filtered_strings\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\t//TODO: should probably check\
    \ if substring is a string\n\tvar filtered = strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) !== -1;\n\t});\n\treturn filtered;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(substring) > -1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var len = strings.length;\n\
    \    var filtered = [];\n    for(var i = 0; i < len; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(word){\n\
    \t\treturn word.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\
    \t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar res = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\
    \t\tres.push(strings[i]);\n\t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(str){return\
    \ str.includes(substring)});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(str){return\
    \ str.indexOf(substring) !== -1;});\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = []\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\
    \t\tfiltered.push(strings[i])\n\t\t}\n\t}\n\treturn filtered\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    filtered = [];\n    for(i=0;\
    \ i<strings.length; i++){\n        if(strings[i].includes(substring)){\n     \
    \       filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(i=0; i<strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = new Array();\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ >= 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return _.filter(strings,\
    \ function(string){\n        return string.indexOf(substring) !== -1;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphg4xf0vs.js:3\n    return _.filter(strings, function(string){\n\
    \    ^\n\nReferenceError: _ is not defined\n    at filter_by_substring (/tmp/tmphg4xf0vs.js:3:5)\n\
    \    at test (/tmp/tmphg4xf0vs.js:13:20)\n    at Object.<anonymous> (/tmp/tmphg4xf0vs.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(str\
    \ => str.includes(substring));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  $.each(strings, function(index, value){\n        if(value.indexOf(substring)\
    \ !== -1){\n            filtered.push(value);\n        }\n    });\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6tyqcuvx.js:4\n    $.each(strings, function(index, value){\n  \
    \  ^\n\nReferenceError: $ is not defined\n    at filter_by_substring (/tmp/tmp6tyqcuvx.js:4:5)\n\
    \    at test (/tmp/tmp6tyqcuvx.js:17:20)\n    at Object.<anonymous> (/tmp/tmp6tyqcuvx.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered_strings =\
    \ [];\n    for(let i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_list = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tfiltered_list.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar strings_filtered = [];\n\
    \t\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ > -1){\n\t\t\tstrings_filtered.push(strings[i]);\n\t\t}\n\t}\n\t\n\treturn strings_filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  strings.forEach(function(str){\n        if(str.indexOf(substring) != -1){\n\
    \            filtered.push(str);\n        }\n    });\n    return filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar results = [];\n\tfor(var\
    \ s=0; s<strings.length; s++){\n\t\tif(strings[s].includes(substring)){\n\t\t\t\
    results.push(strings[s]);\n\t\t}\n\t}\n\treturn results;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var results = [];\n   \
    \ for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            results.push(strings[i]);\n        }\n    }\n    return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = new Array();\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_strings = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().includes(substring.toLowerCase())){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = strings.filter(function(str){\n\
    \        return str.indexOf(substring) > -1;\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = []\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\
    \t\tfiltered.push(strings[i])\n\t\t}\n\t}\n\treturn filtered\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    filtered = []\n    for\
    \ (var i = 0; i < strings.length; i++){\n        if (strings[i].toLowerCase().includes(substring.toLowerCase())){\n\
    \            filtered.push(strings[i])\n        }\n    }\n    return filtered\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_strings = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().includes(substring.toLowerCase())){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(value){\n\
    \t\treturn value.indexOf(substring) != -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var length = strings.length;\n\
    \    var filtered = [];\n    for(var i = 0; i < length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_strings = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().includes(substring.toLowerCase())){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar output = []\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\toutput.push(strings[i])\n\t\t}\n\t}\n\treturn output\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ >= 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return _.filter(strings,\
    \ function(val){ return val.indexOf(substring) > -1; });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp65vy1by6.js:3\n    return _.filter(strings, function(val){ return\
    \ val.indexOf(substring) > -1; });\n    ^\n\nReferenceError: _ is not defined\n\
    \    at filter_by_substring (/tmp/tmp65vy1by6.js:3:5)\n    at test (/tmp/tmp65vy1by6.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmp65vy1by6.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar ret = []\n\tfor(let i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\t\
    \tret.push(strings[i])\n\t\t}\n\t}\n\treturn ret\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var result = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) !=\
    \ -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar output = []\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\toutput.push(strings[i])\n\t\t}\n\t}\n\treturn output\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(substring) != -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var result = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >\
    \ -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar output_strings = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) >=\
    \ 0){\n\t\t\toutput_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn output_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar temp = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ != -1){\n\t\t\ttemp.push(strings[i]);\n\t\t}\n\t}\n\treturn temp;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_strings = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar output = [];\n\t$.each(strings,\
    \ function(i, value){\n\t\tif(value.toLowerCase().indexOf(substring.toLowerCase())\
    \ > -1){\n\t\t\toutput.push(value);\n\t\t}\n\t});\n\treturn output;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptfx7nc4w.js:4\n\t$.each(strings, function(i, value){\n\t^\n\nReferenceError:\
    \ $ is not defined\n    at filter_by_substring (/tmp/tmptfx7nc4w.js:4:2)\n   \
    \ at test (/tmp/tmptfx7nc4w.js:17:20)\n    at Object.<anonymous> (/tmp/tmptfx7nc4w.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered_strings =\
    \ [];\n    for(string of strings){\n        if(string.includes(substring)){\n\
    \            filtered_strings.push(string);\n        }\n    }\n    return filtered_strings;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered_list = new Array();\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ > -1){\n\t\t\tfiltered_list.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var results = [];\n   \
    \ for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            results.push(strings[i]);\n        }\n    }\n    return\
    \ results;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = strings.filter(function(s){\n\
    \t\treturn (s.toLowerCase().indexOf(substring.toLowerCase()) != -1);\n\t});\n\t\
    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    filtered = [];\n    for(i=0;\
    \ i<strings.length; i++){\n        if(strings[i].indexOf(substring) > -1){\n \
    \           filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar results = [];\n\tfor(var\
    \ s in strings){\n\t\tif(strings[s].includes(substring)){\n\t\t\tresults.push(strings[s]);\n\
    \t\t}\n\t}\n\treturn results;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(s){\n\
    \t\treturn s.indexOf(substring) !== -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(string\
    \ => string.indexOf(substring) !== -1);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = strings.filter(function(item)\
    \ {\n        return item.indexOf(substring) != -1;\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar out = [];\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\t\
    \t\tout.push(strings[i]);\n\t\t}\n\t}\n\treturn out;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(element)\
    \ {\n        return element.indexOf(substring) != -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered_list = [];\n\
    \    for(let str of strings){\n        if(str.includes(substring)){\n        \
    \    filtered_list.push(str);\n        }\n    }\n    return filtered_list;\n}\n\
    \n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let len = strings.length;\n\
    \    let filtered = [];\n    for(let i = 0; i < len; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return $.grep(strings,\
    \ function(str){\n        return str.indexOf(substring) != -1;\n    });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3g08963y.js:3\n    return $.grep(strings, function(str){\n    ^\n\
    \nReferenceError: $ is not defined\n    at filter_by_substring (/tmp/tmp3g08963y.js:3:5)\n\
    \    at test (/tmp/tmp3g08963y.js:13:20)\n    at Object.<anonymous> (/tmp/tmp3g08963y.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar ret = new Array();\n\t\
    $.each(strings, function(idx, val){\n\t\tif(val.indexOf(substring) > -1){\n\t\t\
    \tret.push(val);\n\t\t}\n\t});\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1bnk2q87.js:4\n\t$.each(strings, function(idx, val){\n\t^\n\nReferenceError:\
    \ $ is not defined\n    at filter_by_substring (/tmp/tmp1bnk2q87.js:4:2)\n   \
    \ at test (/tmp/tmp1bnk2q87.js:17:20)\n    at Object.<anonymous> (/tmp/tmp1bnk2q87.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(e){\n\
    \        return e.indexOf(substring) !== -1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    let filtered = []\n   \
    \ strings.forEach(s => {\n        if(s.indexOf(substring) != -1){\n          \
    \  filtered.push(s)\n        }\n    })\n    return filtered\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    //create a regular expression\
    \ from the string\n    var regexp = new RegExp(substring);\n    //return an array\
    \ of all the strings that match\n    return strings.filter(string => regexp.test(string));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n\
    \        return str.includes(substring);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(\n\t\
    \t(string) => string.indexOf(substring) > -1\n\t);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\t\n\t//remove any spaces from\
    \ the substring\n\tvar substring = substring.replace(/\\s/g, \"\");\n\t\n\tvar\
    \ filtered_strings = new Array();\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].indexOf(substring) >= 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\t\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\t//Make sure the substring\
    \ is lowercase because we will be too\n\tvar substring = substring.toLowerCase();\n\
    \t\n\tvar filtered_strings = strings.filter(function(s){\n\t\treturn s.toLowerCase().indexOf(substring)\
    \ != -1;\n\t});\n\t\n\treturn filtered_strings;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(string){\n\
    \t\treturn (string.indexOf(substring) !== -1);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 1
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn _.filter(strings,\
    \ function(string){\n\t\treturn string.indexOf(substring) != -1;\n\t});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpc_wzm5v4.js:3\n\treturn _.filter(strings, function(string){\n\t\
    ^\n\nReferenceError: _ is not defined\n    at filter_by_substring (/tmp/tmpc_wzm5v4.js:3:2)\n\
    \    at test (/tmp/tmpc_wzm5v4.js:13:20)\n    at Object.<anonymous> (/tmp/tmpc_wzm5v4.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(i=0;\
    \ i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\
    \t\tnew_list.push(strings[i]);\n\t\t}\n\t}\n\treturn new_list;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(substring) > -1;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(function(x){\n\
    \t\treturn (x.indexOf(substring) > -1);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = []\n   \
    \ for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i])\n        }\n    }\n    return\
    \ filtered\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar strings_filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tstrings_filtered.push(strings[i]);\n\t\t}\n\t}\n\treturn strings_filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(function(element){\n\
    \        return element.indexOf(substring) !== -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filter_strings = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfilter_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filter_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(str\
    \ => str.includes(substring));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var subset = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >\
    \ -1){\n            subset.push(strings[i]);\n        }\n    }\n    return subset;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().indexOf(substring.toLowerCase())\
    \ > -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\tvar filtered = [];\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    return strings.filter(string\
    \ => string.includes(substring));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var retVal = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) !=\
    \ -1){\n            retVal.push(strings[i]);\n        }\n    }\n    return retVal;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n\treturn strings.filter(element\
    \ => element.includes(substring));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  strings.forEach(function(str){\n        if(str.indexOf(substring) > -1){\n\
    \            filtered.push(str);\n        }\n    });\n    return filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var new_list = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            new_list.push(strings[i]);\n        }\n    }\n    return\
    \ new_list;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var output = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) !=\
    \ -1){\n            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821088
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    function filter_by_substring(strings, substring){\n    var filtered = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ > -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821087
