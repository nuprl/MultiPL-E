name: HumanEval_112_reverse_delete
language: js
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return a tuple containing the result string and True/False\
  \ for the check.\n// Example\nfunction reverse_delete(s, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n\
  \  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\"\
  , \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n\
  \  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
  , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
  \", true]);\n}\n\ntest();"
completions: ["    let c_arr = c.split('');\n    c_arr.forEach(el => {\n        s\
    \ = s.replace(el, '');\n    });\n    s = s.replace(/ /g, '');\n    console.log(s);\n\
    \    if (s === s.split('').reverse().join('')){\n        return [s, true];\n \
    \   } else {\n        return [s, false];\n    }\n}\n", "    let res = \"\"\n \
    \   for(let i=0; i<s.length; i++){\n        if(!c.includes(s[i])) res += s[i]\n\
    \    }\n    return [res, res===res.split(\"\").reverse().join(\"\")]\n}", "\t\
    return [s.split('').filter(v => !c.includes(v)).join(''), s.split('').filter(v\
    \ => !c.includes(v)).join('') == s.split('').filter(v => !c.includes(v)).reverse().join('')];\n\
    }\n", "    let reversedString = s.split('').reverse().join('')\n    let string\
    \ = s\n    c.split('').forEach(char => {\n        if(string.includes(char)){\n\
    \            string = string.replace(char, '')\n            reversedString = reversedString.replace(char,\
    \ '')\n        }\n    })\n    return [string, string === reversedString]\n}\n",
  "  var ar = s.split('');\n  var err = c.split('');\n  var newAr = [];\n  var cont\
    \ = true;\n  for(var i = 0; i < ar.length; i++){\n    for(var j = 0; j < err.length;\
    \ j++){\n      if(ar[i] === err[j]){\n        cont = false;\n      }\n    }\n\
    \    if(cont){\n      newAr.push(ar[i]);\n    }\n    cont = true;\n  }\n  var\
    \ reversAr = newAr.slice().reverse();\n  for(var i = 0; i < newAr.length; i++){\n\
    \    if(newAr[i] !== reversAr[i]){\n      return [newAr.join(''), false];\n  \
    \  }\n  }\n  return [newAr.join(''), true];\n}", "    var result = \"\";\n   \
    \ for(var i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) < 0){\n     \
    \       result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n", "    let obj = {};\n    let sArr = s.split('');\n\
    \    for(let i = 0; i < c.length; i++){\n        obj[c[i]] = 0;\n    }\n    sArr\
    \ = sArr.filter(e => !obj[e]);\n    return [sArr.join(''), sArr.join('') === sArr.reverse().join('')];\n\
    }\n", "    for (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n    }\n    return [s, s === s.split('').reverse().join('')];\n}",
  "    let res = s.split('').filter(el => !c.includes(el)).join('');\n    return [res,res\
    \ == res.split('').reverse().join('')];\n}\n", "\tfor(var i = 0; i < c.length;\
    \ i++){\n\t\ts = s.replace(new RegExp(c[i], 'g'), '');\n\t}\n\tvar ss = s.split('').reverse().join('');\n\
    \treturn ([s, s == ss]);\n}", "    let check = true;\n    s = s.split('').filter(el\
    \ => !c.includes(el)).join('');\n    for(let i = 0; i < s.length / 2; i++){\n\
    \        if(s[i] !== s[s.length - 1 - i]){\n            check = false;\n     \
    \       break;\n        }\n    }\n    return [s, check];\n}\n", "    var result\
    \ = '';\n    for (var i = 0; i < s.length; i++) {\n        if(!c.includes(s[i]))\
    \ result += s[i];\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nvar assert = require('assert');\nif (!global.is_checking) {\n    console.log('Example:')\n\
    \    console.log(reverse_delete('abacaba', 'c'))\n\n    // These \"asserts\" are\
    \ used for self-checking and not for an auto-testing\n    assert.deepEqual(reverse_delete('abacaba',\
    \ 'c'), ['ababa', true])\n    assert.deepEqual(reverse_delete('abacaba', 'b'),\
    \ ['aca', false])\n    assert.deepEqual(reverse_delete('abacaba', 'd'), ['abacaba',\
    \ true])\n    console.log(\"Coding complete? Click 'Check' to earn cool rewards!\"\
    );\n}", "    let set = new Set(c.split(''));\n    for(let ch of set){\n      \
    \  s = s.replace(new RegExp(ch, 'g'), '');\n    }\n    return [s, s === s.split('').reverse().join('')];\n\
    }\n", "    let res = [];\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n\
    \            res.push(s[i]);\n        }\n    }\n    let s1 = res.join('');\n \
    \   let s2 = res.reverse().join('');\n    if(s1 === s2){\n        return [s1,\
    \ true];\n    }else{\n        return [s1, false];\n    }\n}\n", "    var str =\
    \ s.split('');\n    var str2 = c.split('');\n    for(var i = 0; i < str.length;\
    \ i++){\n        for(var j = 0; j < str2.length; j++){\n            if(str[i]\
    \ == str2[j]){\n                str.splice(i, 1);\n                i--;\n    \
    \        }\n        }\n    }\n    var str3 = str.join('');\n    var bool = true;\n\
    \    for(var j = 0; j < str3.length; j++){\n        if(str3[j] != str3[str3.length\
    \ - 1 - j]){\n            bool = false;\n        }\n    }\n    return [str3, bool];\n\
    }", "    //your code\n    let bool = true;\n    let i = 0;\n    let j = s.length\
    \ - 1;\n    let k = 0;\n    let word = s.split('');\n    c = c.split('');\n  \
    \  while(i < j){\n        if(c.includes(word[i])){\n            word.splice(i,\
    \ 1);\n            continue;\n        }\n        if(c.includes(word[j])){\n  \
    \          word.splice(j, 1);\n            continue;\n        }\n        if(word[i]\
    \ != word[j]){\n            bool = false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return [word.join(''), bool];\n}", "  return [s.replace(new RegExp(`[${c}]`,\
    \ 'g'), ''), s.replace(new RegExp(`[${c}]`, 'g'), '') === s.replace(new RegExp(`[${c}]`,\
    \ 'g'), '').split('').reverse().join('')];\n}", "    let r= s.split('').filter(v=>!c.includes(v)).join('');\n\
    \    return [r, r==r.split('').reverse().join('')];\n}", "  const res = s.split('').filter(el\
    \ => !c.includes(el)).join('');\n  return [res, res === res.split('').reverse().join('')];\n\
    }", "    let reverse_s = [...s].reverse().join('')\n    let result = []\n    let\
    \ reverse_result = []\n    for(let i = 0; i < s.length; i++){\n        if(c.includes(s[i])){\n\
    \            result.push(s[i])\n            reverse_result.push(reverse_s[i])\n\
    \        }\n    }\n    let result_s = result.join('')\n    let reverse_result_s\
    \ = reverse_result.join('')\n    return [result_s, result_s == reverse_result_s]\n\
    }\n", "    let result = '';\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n   \
    \ }\n    return [result, result === result.split('').reverse().join('')];\n}\n",
  "    let new_str = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            new_str += s[i];\n        }\n    }\n    return [new_str, new_str\
    \ === new_str.split('').reverse().join('')];\n}\n", "  let res = \"\";\n  let\
    \ arr = s.split(\"\");\n  for(let x = 0; x < s.length; x++){\n    if(c.indexOf(s[x])\
    \ == -1){\n      res += s[x];\n    }\n  }\n  console.log(res);\n  if(res == res.split(\"\
    \").reverse().join(\"\")){\n    return [res, true];\n  }\n  else{\n    return\
    \ [res, false];\n  }\n}\n", "    let result = s.split('').filter(e=>!c.includes(e)).join('')\n\
    \    return [result, result === result.split('').reverse().join('')]\n}", "  \
    \  return [s.split('').filter(v => !c.includes(v)).join(''), s.split('').filter(v\
    \ => !c.includes(v)).join('') === s.split('').filter(v => !c.includes(v)).reverse().join('')];\n\
    }\n", "    let res = []\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i])\
    \ === -1){\n            res.push(s[i])\n        }\n    }\n    console.log(res.join('')\
    \ === res.reverse().join(''))\n    return [res.join(''), res.join('') === res.reverse().join('')]\n\
    }", "    const new_s = s.split('').filter(e=>!c.includes(e)).join('');\n    const\
    \ new_s_r = new_s.split('').reverse().join('');\n    return [new_s, new_s_r===new_s];\n\
    }", "  // your code\n  const sChars = s.split('');\n  const strSet = new Set(sChars);\n\
    \  const cChars = c.split('');\n  for (const cChar of cChars) {\n    if (strSet.has(cChar))\
    \ {\n      sChars.splice(sChars.indexOf(cChar), 1);\n    }\n  }\n  s = sChars.join('');\n\
    \  return [s, s === s.split('').reverse().join('')];\n}\n", "    let newS = '';\n\
    \    for (let ch of s) {\n        if (!c.includes(ch)) {\n            newS +=\
    \ ch;\n        }\n    }\n    return [newS, isPalindrome(newS)];\n}", "    var\
    \ splitted = s.split('');\n    splitted.forEach(function(item, index){\n     \
    \   if(c.includes(item)) splitted.splice(index, 1);\n    });\n    var reverse\
    \ = splitted.reverse().join('');\n    var result = (reverse.toString() === splitted.join(''))\
    \ ? [splitted.join(''), true] : [splitted.join(''), false];\n    return result;\n\
    }", "    for (var i = 0; i < c.length; i++) {\n        var index = s.indexOf(c[i]);\n\
    \        while (index != -1) {\n            s = s.slice(0, index) + s.slice(index\
    \ + 1);\n            index = s.indexOf(c[i]);\n        }\n    }\n    s = s.split('').reverse().join('');\n\
    \    return [s, s == s.split('').reverse().join('')];\n}", "    //your code here\n\
    }", "    return s.split('').filter(x => !c.includes(x)).join('') === reverse(s.split('').filter(x\
    \ => !c.includes(x)).join('')) ?\n    [s.split('').filter(x => !c.includes(x)).join(''),\
    \ true] : [s.split('').filter(x => !c.includes(x)).join(''), false]\n}\n", " \
    \   for (var i = 0; i < c.length; i++) {\n        var index = s.indexOf(c[i]);\n\
    \        while (index > -1) {\n            s = s.slice(0, index) + s.slice(index\
    \ + 1);\n            index = s.indexOf(c[i]);\n        }\n    }\n    return [s,\
    \ s == s.split('').reverse().join('')];\n}\n", "  for (let i = 0; i < c.length;\
    \ i++) {\n    let re = new RegExp(c[i], 'g');\n    s = s.replace(re, '');\n  }\n\
    \  let rev = s.split('').reverse().join('');\n  return [s, s === rev]\n}\n", " \
    \ let splited_c = c.split('');\n  let splited_s = s.split('');\n  let result =\
    \ splited_s.filter(el => {\n    for(let i = 0; i < splited_c.length; i++){\n \
    \     if(el !== splited_c[i]){\n        return el;\n      }\n    }\n  });\n  let\
    \ palindrome = true;\n  for(let i = 0; i < result.length; i++){\n    if(result[i]\
    \ !== result[result.length - i - 1]){\n      palindrome = false;\n    }\n  }\n\
    \  return [result.join(''), palindrome];\n}\n", "  let newS = s.split('').filter(e=>\
    \ !c.includes(e)).join('');\n  let rev = newS.split('').reverse().join('');\n\
    \  return [newS, newS === rev]\n}\n", "  var res = s.split('').filter(function(ch){\n\
    \    return c.indexOf(ch) < 0;\n  }).join('');\n  var flag = false;\n  if(res.split('').reverse().join('')\
    \ === res){\n    flag = true;\n  }\n  return [res, flag];\n}", "    s = s.split('').filter(a\
    \ => !c.includes(a)).join('');\n    return s == s.split('').reverse().join('')\
    \ ? [s, true] : [s, false];\n}", "\tfor(let i = 0; i < c.length; i++){\n\t\ts\
    \ = s.replace(new RegExp(c[i], 'g'), '');\n\t}\n\treturn s.length > 0 && s.split('').reverse().join('')\
    \ === s;\n}\n", "    let res = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [res, res.split('').reverse().join('') == res];\n}", "    c.split('').forEach(el\
    \ => {\n        s = s.replace(el, '');\n    });\n    return [s, s === s.split('').reverse().join('')];\n\
    }\n", "  let res = s.split('').filter(x => !c.includes(x)).join('');\n  let result\
    \ = res === res.split('').reverse().join('');\n  return [res, result];\n}", " \
    \   return [s.split('').filter(l => !c.includes(l)).join(''), s.split('').filter(l\
    \ => !c.includes(l)).join('') === s.split('').filter(l => !c.includes(l)).reverse().join('')];\n\
    }", "    return [s.split('').filter(e => !c.includes(e)).join(''),isPalindrome(s.split('').filter(e\
    \ => !c.includes(e)).join(''))]\n}", "    let result = '';\n    for (let i=0;\
    \ i<s.length; i++){\n        if (c.indexOf(s[i])===-1){\n            result+=s[i];\n\
    \        }\n    }\n    return [result,isPalindrome(result)];\n}", "    return\
    \ [s.split('').filter(e => !c.includes(e)).join(''), check_palindrome(s.split('').filter(e\
    \ => !c.includes(e)).join(''))];\n}\n", "  let result = '';\n  for (const el of\
    \ s) {\n    if (!c.includes(el)) {\n      result += el;\n    }\n  }\n  console.log(result)\n\
    \  return [result, result === result.split('').reverse().join('')];\n}", "   \
    \ let res = '';\n    for(let i=0; i<s.length; i++){\n        if(c.indexOf(s[i])\
    \ == -1){\n            res += s[i];\n        }\n    }\n    return [res, res ==\
    \ res.split('').reverse().join('')];\n}\n", "    for (let i = 0; i < c.length;\
    \ i++) {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    let reverse\
    \ = s.split('').reverse().join('');\n    return [s, reverse === s];\n}", "  return\
    \ [s.replace(new RegExp(`[${c}]`, 'g'), ''), s.replace(new RegExp(`[${c}]`, 'g'),\
    \ '') == s.replace(new RegExp(`[${c}]`, 'g'), '').split('').reverse().join('')];\n\
    }", "    const white = c.split('');\n    const word = s.split('');\n    word.forEach(letter\
    \ => {\n        if(white.includes(letter)) {\n            word.splice(word.indexOf(letter),\
    \ 1);\n        }\n    });\n    let result = word.join('');\n    let palindrome\
    \ = result === result.split('').reverse().join('');\n    return [result, palindrome];\n\
    }\n", "    for (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n    }\n    return [(s === s.split('').reverse().join('')) ? true\
    \ : false, s];\n}", "  for (let i = 0; i < c.length; i++) {\n    s = s.replace(new\
    \ RegExp(c[i],\"g\"),\"\");\n  }\n  return [s, s === s.split(\"\").reverse().join(\"\
    \")];\n}", "    var str_1 = '';\n    s.split('').forEach(function(x){\n      \
    \  if(c.indexOf(x) === -1){\n            str_1 += x;\n        }\n    });\n   \
    \ return [str_1, str_1.split('').reverse().join('') === str_1];\n}\n", "    const\
    \ result = s.split('').filter(letter => !c.includes(letter)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}", "    return [s.split('').filter(x\
    \ => !c.includes(x)).join(''), s.split('').filter(x => !c.includes(x)).join('')\
    \ === s.split('').filter(x => !c.includes(x)).reverse().join('')];\n}", "    let\
    \ string = '';\n    for(let i = 0; i < s.length; i++){\n        let counter =\
    \ 0;\n        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n\
    \                counter++;\n            }\n        }\n        if(counter ===\
    \ 0){\n            string += s[i];\n        }\n    }\n    return [string, check_palindrome(string)];\n\
    }", "    let str = \"\";\n    for(let i=0; i<s.length; i++){\n        if(c.indexOf(s[i])\
    \ === -1){\n            str += s[i];\n        }\n    }\n    return str;\n}\n",
  "    var palindromeCheck = false;\n    var stringResult = '';\n    // c = ['1',\
    \ '2', '3', '4'];\n    for (var i = 0; i < s.length; i++) {\n        var characterToCheck\
    \ = s[i];\n        var shouldBeDeleted = false;\n        for (var j = 0; j < c.length;\
    \ j++) {\n            if (characterToCheck === c[j]) {\n                shouldBeDeleted\
    \ = true;\n            }\n        }\n        if (!shouldBeDeleted) {\n       \
    \     stringResult += characterToCheck;\n        }\n    }\n    if (stringResult\
    \ === stringResult.split('').reverse().join('')) {\n        palindromeCheck =\
    \ true;\n    }\n    return [stringResult, palindromeCheck];\n}\n", "  let str\
    \ = s.split('');\n  let char = c.split('');\n  let ret = str.filter(e => char.indexOf(e)\
    \ === -1);\n  let isPalindrome = ret.reverse().join('') === ret.join('');\n  return\
    \ [ret.join(''), isPalindrome];\n}", "    var res = s.split('').filter(x => !c.includes(x)).join('')\n\
    \    return [res, isPalindrome(res)]\n}\n", "\tfor(let e of c){\n\t\tlet re =\
    \ new RegExp(e, 'g');\n\t\ts = s.replace(re, '');\n\t}\n\tlet reverse = s.split('').reverse().join('');\n\
    \treturn [s, s === reverse];\n}", "    let result = '';\n    for (let i = 0; i\
    \ < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result +=\
    \ s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let i = 0; i\
    \ < result.length; i++) {\n        if (result[i] !== result[result.length - 1\
    \ - i]) {\n            isPalindrome = false;\n            break;\n        }\n\
    \    }\n    return [result, isPalindrome];\n}", "    var reg = new RegExp('['\
    \ + c + ']', 'gi');\n    s = s.replace(reg, '');\n    var rev = s.split('').reverse().join('');\n\
    \    return [s, rev === s];\n}\n", "    let r = [...s].filter(e => !c.includes(e)).join('');\n\
    \    return [r, r.split('').reverse().join('') === r];\n}", "    return [s.split('').filter(letter\
    \ => !c.includes(letter)).join(''), s.split('').filter(letter => !c.includes(letter)).join('')\
    \ === s.split('').filter(letter => !c.includes(letter)).reverse().join('')];\n\
    }\n", "    let arr = s.split('');\n    let newArr = [];\n    for(let i = 0; i\
    \ < arr.length; i++){\n        let el = arr[i];\n        if(c.includes(el)){\n\
    \            newArr.push(el);\n        }\n    }\n    for(let j = 0; j < newArr.length;\
    \ j++){\n        let el = newArr[j];\n        arr.splice(arr.indexOf(el), 1);\n\
    \    }\n    console.log(arr)\n    console.log(newArr)\n    return [arr.join(''),\
    \ palindrome(arr.join(''))];\n}\n", "    let sArr = s.split(''),\n        cArr\
    \ = c.split('');\n    for(let i = 0; i < sArr.length; i++){\n        if(cArr.includes(sArr[i])){\n\
    \            sArr.splice(i, 1);\n            i--;\n        }\n    }\n    let sPalindrome\
    \ = sArr.join('');\n    return [sPalindrome, sPalindrome.split('').reverse().join('')\
    \ === sPalindrome];\n}", "    return [s.split('').filter(e => !c.includes(e)).join(''),\
    \ s.split('').filter(e => !c.includes(e)).join('') === s.split('').filter(e =>\
    \ !c.includes(e)).reverse().join('')];\n}", "    let str = s.split('').filter(letter\
    \ => !c.includes(letter)).join('');\n    let bool = str === str.split('').reverse().join('');\n\
    \    return [str, bool];\n}", "    let arr = s.split('');\n    let res = arr.filter(el\
    \ => !c.includes(el));\n    return [res.join(''), res.join('') === res.reverse().join('')];\n\
    }\n", "    let res = s.split('').filter(el => c.indexOf(el) === -1);\n    console.log(res)\n\
    \    if(res.join('') === res.reverse().join('')){\n        return [res.join(''),\
    \ true]\n    }\n    return [res.join(''), false]\n}", "    return [s.split('').filter(a\
    \ => !c.includes(a)).join(''), s.split('').filter(a => !c.includes(a)).join('')\
    \ === s.split('').filter(a => !c.includes(a)).reverse().join('')];\n}\n", "  \
    \  return [s.split('').filter(x => !c.includes(x)).join(''), s.split('').filter(x\
    \ => !c.includes(x)).join('') === s.split('').filter(x => !c.includes(x)).reverse().join('')];\n\
    }", "    return [\n      [s.split('').filter(v => !c.includes(v)).join(''), \n\
    \      s.split('').filter(v => !c.includes(v)).join('') == \n      s.split('').filter(v\
    \ => !c.includes(v)).reverse().join('')]\n    ]\n  }", "    let sArr = s.split('');\n\
    \    for(let i = 0; i < sArr.length; i++){\n        for(let j = 0; j < c.length;\
    \ j++){\n            if(sArr[i] === c[j]){\n                sArr.splice(i, 1);\n\
    \                i--;\n            }\n        }\n    }\n    let isPalindrome =\
    \ false;\n    if(sArr.join('') === sArr.reverse().join('')){\n        isPalindrome\
    \ = true;\n    }\n    return [sArr.join(''), isPalindrome];\n}", "    c.split('').forEach(function(e){\n\
    \        s = s.replace(e,'');\n    });\n    s = s.split('').reverse().join('');\n\
    \    return [s,s==s.split('').reverse().join('')];\n}", "    //your code here\n\
    \    return [s.replace(new RegExp(`[${c}]`, 'g'), ''), s.replace(new RegExp(`[${c}]`,\
    \ 'g'), '') === s.replace(new RegExp(`[${c}]`, 'g'), '').split('').reverse().join('')];\n\
    }", "    let a = s.split('');\n    let b = c.split('');\n    let res = [];\n \
    \   let i = 0;\n    while(i < a.length){\n        if(b.indexOf(a[i]) === -1){\n\
    \            res.push(a[i]);\n        }\n        i++;\n    }\n    let palindrome\
    \ = res.join('');\n    if(palindrome === res.reverse().join('')){\n        return\
    \ [palindrome, true];\n    }\n    return [palindrome, false];\n}\n", "    let\
    \ result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    return [result,\
    \ result === result.split(\"\").reverse().join(\"\")];\n}\n", "    const result\
    \ = s.split('').filter(e => !c.includes(e)).join('');\n    return [result, result\
    \ === result.split('').reverse().join('')];\n}", "    return [s.split('').filter(x\
    \ => c.indexOf(x) == -1).join(''),\n    s.split('').filter(x => c.indexOf(x) ==\
    \ -1).join('') == s.split('').filter(x => c.indexOf(x) == -1).reverse().join('')];\n\
    }", "    let res = s.split('');\n    let check = c.split('');\n    let result\
    \ = \"\";\n    for(let i = 0; i < res.length; i++){\n        for(let j = 0; j\
    \ < check.length; j++){\n            if(res[i] == check[j]){\n               \
    \ res.splice(i, 1);\n                i--;\n            }\n        }\n    }\n \
    \   result = res.join('');\n    let str2 = res.reverse().join('');\n    if(result\
    \ == str2){\n        return [result, true];\n    }\n    else{\n        return\
    \ [result, false];\n    }\n}", "  let reg = new RegExp('[' + c + ']', 'g');\n\
    \  let str = s.replace(reg, '');\n  let reverse = str.split('').reverse().join('');\n\
    \  return [str, str == reverse];\n}", "    var newS = s.split('');\n    for(let\
    \ i=0; i<newS.length; i++){\n        if(c.indexOf(newS[i]) !== -1){\n        \
    \    newS.splice(i, 1);\n            i--;\n        }\n    }\n    if(newS.join('')\
    \ == newS.reverse().join('')) return [newS.join(''), true];\n    else return [newS.join(''),\
    \ false];\n}\n", "    let result = '';\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (c.indexOf(s[i]) == -1) {\n            result += s[i];\n     \
    \   }\n    }\n    return result == result.split('').reverse().join('') ? [result,\
    \ true] : [result, false];\n}\n", "    // your code is here\n    c.split('').forEach(\n\
    \        x => {\n            s = s.replace(x, '');\n        }\n    );\n    console.log(s);\n\
    \    return [s, s.split('').reverse().join('') == s];\n}\n", "    for (let v of\
    \ c) {\n        s = s.replace(new RegExp(v, 'g'), '');\n    }\n    return [s,\
    \ s == s.split('').reverse().join('')];\n}", "    return [s.split('').filter(x\
    \ => !c.includes(x)).join(''), s.split('').filter(x => !c.includes(x)).join('')\
    \ === s.split('').filter(x => !c.includes(x)).reverse().join('')];\n}\n", "  \
    \  let res = '';\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i])\
    \ < 0){\n            res += s[i];\n        }\n    }\n    let check = res.split('').reverse().join('')\
    \ === res;\n    return [res, check];\n}\n", "    let result = s.split('').filter(el\
    \ => !c.includes(el));\n    return [result.join(''), result.join('') === result.reverse().join('')];\n\
    }\n", "    let temp = s;\n    for(let i = 0; i < s.length; i++){\n        for(let\
    \ j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n               \
    \ temp = temp.replace(s[i], '');\n            }\n        }\n    }\n    if(temp\
    \ === temp.split('').reverse().join('')){\n        return [temp, true];\n    }\n\
    \    return [temp, false];\n}", "    //TODO: your code here\n    let c_arr = c.split('');\n\
    \    c_arr.forEach(el => {\n        s = s.replace(el, '');\n    });\n    let result\
    \ = isPalindrome(s);\n    return [s, result];\n}\n", "    var a = s.split('');\n\
    \    var b = c.split('');\n    var d = [];\n    var e = [];\n    var i = 0;\n\
    \    while(i < a.length){\n        if(b.indexOf(a[i]) == -1){\n            d.push(a[i]);\n\
    \        }\n        i += 1;\n    }\n    var e = d.join('');\n    var f = d.reverse().join('');\n\
    \    if(e == f){\n        return [e, true];\n    }else{\n        return [e, false];\n\
    \    }\n}", "    s = s.split('');\n    s = s.filter(i => !c.includes(i));\n  \
    \  s = s.join('');\n    s = s.toLowerCase();\n    if (s.length <= 1) return [s,\
    \ true];\n    if (s[0] === s[s.length - 1]) {\n        s = s.slice(1, s.length\
    \ - 1);\n        return reverse_delete(s, c);\n    } else {\n        return [s,\
    \ false];\n    }\n}\n", "  let arr = c.split('');\n  let res = '';\n  for(let\
    \ i = 0; i < s.length; i++){\n    if(!arr.includes(s[i])){\n      res += s[i];\n\
    \    }\n  }\n  let ss = res.split('').reverse().join('');\n  if(res === ss){\n\
    \    return res + \" True\";\n  }\n  return res + \" False\";\n}", "    let arr\
    \ = s.split('');\n    let newArr = []\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(c.includes(arr[i])){\n            continue;\n        }\n        newArr.push(arr[i])\n\
    \    }\n    let newString = newArr.join('')\n    let palindrome = newString.split('').reverse().join('')\n\
    \    if(newString === palindrome){\n        return [newString, true]\n    } else\
    \ {\n        return [newString, false]\n    }\n}", "  let result = \"\";\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) == -1) {\n      result\
    \ += s[i];\n    }\n  }\n  return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}", "    return [s.split('').filter(el => !c.includes(el)).join(''),[...s].reverse().join('')\
    \ === s];\n}", "    var ss = s.split('');\n    var cc = c.split('');\n    for(var\
    \ i = 0; i < ss.length; i++){\n        for(var j = 0; j < cc.length; j++){\n \
    \           if(ss[i] == cc[j]){\n                ss.splice(i, 1);\n          \
    \      i--;\n                break;\n            }\n        }\n    }\n    var\
    \ result = ss.join('');\n    if(result == result.split('').reverse().join('')){\n\
    \        return [result, true];\n    }\n    return [result, false];\n}", "  return\
    \ [s.replace(new RegExp(`[${c}]`, 'g'), ''), s.replace(new RegExp(`[${c}]`, 'g'),\
    \ '') === s.replace(new RegExp(`[${c}]`, 'g'), '').split('').reverse().join('')];\n\
    }", "    return [s.split('').filter(e => !c.includes(e)).join(''), [...s].reverse().join('')\
    \ == s.split('').filter(e => !c.includes(e)).join('')]\n}\n", "    let reverse\
    \ = (str) => str.split('').reverse().join('');\n    if(s === reverse(s)) return\
    \ [s, true];\n    else return [s, false];\n}\n", "  return [s.replace(new RegExp(`[${c}]`,\
    \ 'g'), ''), palindrome(s.replace(new RegExp(`[${c}]`, 'g'), ''))];\n}\nconst\
    \ palindrome = s => s === s.split('').reverse().join('');", "    let res = '';\n\
    \    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) === -1){\n\
    \            res += s[i];\n        }\n    }\n    return [res, res === res.split('').reverse().join('')];\n\
    }", "    var res = [];\n    for(var i = 0; i < s.length; i++){\n        if(c.indexOf(s[i])\
    \ === -1){\n            res.push(s[i]);\n        }\n    }\n    var result = res.join('');\n\
    \    var check = true;\n    for(var i = 0; i < result.length; i++){\n        if(result[i]\
    \ !== result[result.length - 1 - i]){\n            check = false;\n        }\n\
    \    }\n    return [result, check];\n}\n", "    let arr = s.split('');\n    let\
    \ del = c.split('');\n    let res = []\n    let pal = ''\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(del.indexOf(arr[i]) == -1){\n            res.push(arr[i])\n\
    \        }\n    }\n    for(let i = 0; i < res.length; i++){\n        pal += res[i]\n\
    \    }\n    return [pal, pal == pal.split('').reverse().join('')]\n}", "    let\
    \ check = false;\n    for(let i = 0; i < c.length; i++){\n        if(s.indexOf(c[i])\
    \ > -1){\n            while(s.indexOf(c[i]) > -1){\n                s = s.substring(0,\
    \ s.indexOf(c[i])) + s.substring(s.indexOf(c[i]) + 1, s.length);\n           \
    \ }\n        }\n    }\n    let s_length = s.length;\n    for(let i = 0; i < s_length;\
    \ i++){\n        if(s[i] != s[s_length - 1 - i]){\n            check = false;\n\
    \            break;\n        }\n        else{\n            check = true;\n   \
    \     }\n    }\n    return [s, check];\n}", "  let newStr = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n  console.log(newStr);\n  return [newStr, newStr\
    \ === newStr.split('').reverse().join('')];\n}\n", "    let newStr = [...s].filter(e\
    \ => !c.includes(e)).join('');\n    let rev = [...newStr].reverse().join('');\n\
    \    return [newStr, rev === newStr]\n}", "    var s_deleted = s.split('').filter(function(x){\n\
    \        return !c.includes(x);\n    }).join('');\n    var p = isPalindrome(s_deleted);\n\
    \    return [s_deleted, p];\n}\n", "    let newStr = \"\";\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(c.indexOf(s[i]) == -1){\n            newStr\
    \ += s[i];\n        }\n    }\n    return newStr;\n}\n", "    // your code here\n\
    }", "  let result = \"\";\n  let reverse = \"\";\n  for(let i = 0; i < s.length;\
    \ i++){\n    if(c.indexOf(s[i]) === -1){\n      result += s[i];\n      reverse\
    \ = s[i] + reverse;\n    }\n  }\n  return [result, result === reverse];\n}", " \
    \   return [s.split('').filter(char => !c.includes(char)).join(''), isPalindrome(s.split('').filter(char\
    \ => !c.includes(char)).join(''))]\n}", "    let arr=s.split('');\n    for(let\
    \ i=0;i<c.length;i++){\n        for(let j=0;j<arr.length;j++){\n            if(c[i]===arr[j]){\n\
    \                arr.splice(j,1);\n                j--;\n            }\n     \
    \   }\n    }\n    let reg=/[A-Za-z]/;\n    let arr1=arr.filter(el=>reg.test(el));\n\
    \    console.log(arr1);\n    console.log(arr1.join('')===arr1.reverse().join(''));\n\
    \    return [arr1.join(''),arr1.join('')===arr1.reverse().join('')];\n}", "  \
    \  return [s.split('').filter(e => c.indexOf(e) == -1).join(''),\n           \
    \ s.split('').filter(e => c.indexOf(e) == -1).join('') ==\n            s.split('').filter(e\
    \ => c.indexOf(e) == -1).reverse().join('')];\n}", "    return [s.split('').filter(x\
    \ => !c.includes(x)).join(''),\n        s.split('').filter(x => !c.includes(x)).join('')\
    \ ===\n        s.split('').filter(x => !c.includes(x)).reverse().join('')];\n\
    }\n", "  // Your code here!\n}\n", "    let str = '';\n    for(let i = 0; i <\
    \ s.length; i++){\n        let check = false;\n        for(let j = 0; j < c.length;\
    \ j++){\n            if(s[i] === c[j]){\n                check = true;\n     \
    \           break;\n            }\n        }\n        if(!check){\n          \
    \  str += s[i];\n        }\n    }\n    let check = true;\n    for(let i = 0; i\
    \ < Math.floor(str.length / 2); i++){\n        if(str[i] !== str[str.length -\
    \ 1 - i]){\n            check = false;\n            break;\n        }\n    }\n\
    \    return [str, check];\n}", "    let result = [];\n    for(let i=0; i<s.length;\
    \ i++){\n        if(c.indexOf(s[i]) == -1){\n            result.push(s[i]);\n\
    \        }\n    }\n    return result.join('') == result.reverse().join('');\n}",
  "\treturn [s.split('').filter(v => !c.includes(v)).join(''), [...s].reverse().join('')\
    \ === s.split('').filter(v => !c.includes(v)).join('')];\n}\n", "    let arr =\
    \ s.split('');\n    let cArr = c.split('');\n    for(let i = 0; i < arr.length;\
    \ i++){\n        for(let j = 0; j < cArr.length; j++){\n            if(arr[i]\
    \ === cArr[j]){\n                arr.splice(i, 1);\n                i--;\n   \
    \             break;\n            }\n        }\n    }\n    arr = arr.join('');\n\
    \    let check = true;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ !== arr[arr.length - 1 - i]){\n            check = false;\n            break;\n\
    \        }\n    }\n    let ans = [arr, check];\n    return ans;\n}\n", "    let\
    \ arr = s.split('');\n    c.split('').forEach(v => {\n        arr = arr.filter(e\
    \ => e != v);\n    });\n    return [arr.join(''), arr.join('') == arr.reverse().join('')];\n\
    }", "  let dict = {};\n  let result = '';\n  for(let i = 0; i < c.length; i++){\n\
    \    dict[c[i]] = true;\n  }\n  for(let i = 0; i < s.length; i++){\n    if(!dict[s[i]]){\n\
    \      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n\
    }", "    let res = s.split('').filter(a => c.indexOf(a) === -1).join('')\n   \
    \ return [res, res === res.split('').reverse().join('')]\n}", "    const str =\
    \ s.split('').filter(e => !c.includes(e)).join('')\n    return [str, str === str.split('').reverse().join('')]\n\
    }\n", "    let re = new RegExp(`[${c}]`, 'g');\n    let str = s.replace(re, '');\n\
    \    return str === str.split('').reverse().join('') ? [str, true] : [str, false];\n\
    }\n", "    for (let char of c) {\n        s = s.replace(new RegExp(char, 'g'),\
    \ '');\n    }\n    return [s, check(s)];\n}\n", "    for (let ch of c) {\n   \
    \     s = s.replace(ch, '');\n    }\n    return [s, isPalindrome(s)];\n}", " \
    \   let reg = new RegExp('[' + c + ']', 'g');\n    return [s.replace(reg, ''),\
    \ s.replace(reg, '') === s.replace(reg, '').split('').reverse().join('')];\n}",
  "\tc = c.split('');\n\ts = s.split('');\n\tvar filtered = s.filter(function(el){\n\
    \t\tif(c.indexOf(el) === -1){\n\t\t\treturn el;\n\t\t}\n\t});\n\treturn filtered.join('')\
    \ === filtered.reverse().join('');\n}", "    var r=s.split('').filter(function(el){return\
    \ c.indexOf(el)==-1}).join('');\n    return [r, r==r.split('').reverse().join('')];\n\
    }", "    return [s.split('').filter(v => !c.includes(v)).join(''), s.split('').filter(v\
    \ => !c.includes(v)).join('') === s.split('').filter(v => !c.includes(v)).reverse().join('')];\n\
    }", "    return [s.split('').filter(x => !c.includes(x)).join(''),s.split('').filter(x\
    \ => !c.includes(x)).join('') === s.split('').filter(x => !c.includes(x)).reverse().join('')]\n\
    }", "    let result = s.split('').filter(item => !c.includes(item)).join('');\n\
    \    return [result, result.split('').reverse().join('') === result];\n}", " \
    \   for (var i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), \"\");\n    }\n    if (s.split(\"\").reverse().join(\"\") == s) {\n  \
    \      return [s, true];\n    } else {\n        return [s, false];\n    }\n}",
  "    // good luck\n    let r = '';\n    let d = {};\n    for (let i = 0; i < c.length;\
    \ i++) {\n        d[c[i]] = 1;\n    }\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (!d[s[i]]) {\n            r += s[i];\n        }\n    }\n    return\
    \ [r, r === r.split('').reverse().join('')];\n}", "    let t = s.split('').filter(e\
    \ => !c.includes(e)).join('')\n    return [t, t.split('').reverse().join('') ==\
    \ t]\n}", "  return [s.replace(new RegExp('[' + c + ']', 'g'), ''), s.replace(new\
    \ RegExp('[' + c + ']', 'g'), '') === s.replace(new RegExp('[' + c + ']', 'g'),\
    \ '').split('').reverse().join('')];\n}", "    return [\n        s.split('').filter(e\
    \ => !c.includes(e)).join(''),\n        s.split('').filter(e => !c.includes(e)).join('')\
    \ === s.split('').filter(e => !c.includes(e)).reverse().join('')\n    ]\n}\n",
  "    for (var i=0; i<c.length; i++){\n        s = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    return [s, s===s.split('').reverse().join('')];\n}", "    let\
    \ str = s.split('');\n    let chars = c.split('');\n    for(let i=0; i<str.length;\
    \ i++){\n        for(let j=0; j<chars.length; j++){\n            if(str[i] ===\
    \ chars[j]){\n                str.splice(i, 1);\n                i--;\n      \
    \      }\n        }\n    }\n    let check = true;\n    for(let i=0; i<str.length;\
    \ i++){\n        if(str[i] !== str[str.length-1-i]){\n            check = false;\n\
    \        }\n    }\n    return [str.join(''), check];\n}", "    return [s.split('').filter(x\
    \ => !c.includes(x)).join(''),s.split('').filter(x => !c.includes(x)).join('')\
    \ == s.split('').filter(x => !c.includes(x)).reverse().join('')]\n}", "    for\
    \ (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    return [s, s.split('').reverse().join('') === s];\n}", "  \
    \  var g = s.split('');\n    var g1 = g.filter(x => !c.includes(x));\n    var\
    \ result = g1.join('');\n    var palindrome = g1.reverse().join('');\n    if(result\
    \ === palindrome){\n        return (result,true);\n    }\n    else{\n        return\
    \ (result,false);\n    }\n}\nvar ans = reverse_delete('aacda','a');", "  let arr\
    \ = s.split('');\n  let res = s.split('');\n  c.split('').forEach(v => {\n   \
    \ arr.forEach(el => {\n      if (el === v) {\n        res.splice(res.indexOf(el),\
    \ 1);\n      }\n    });\n  });\n  res = res.join('');\n  let half_res = res.length\
    \ / 2;\n  let flag = true;\n  for (let i = 0; i < half_res; i++) {\n    if (res[i]\
    \ !== res[res.length - i - 1]) {\n      flag = false;\n    }\n  }\n  return [res,\
    \ flag];\n}\n", "    let ans = '';\n    for(let i = 0; i < s.length; i++){\n \
    \       if(c.indexOf(s[i]) == -1){\n            ans = ans + s[i];\n        }\n\
    \    }\n    return [ans, palindrome_check(ans)];\n}\n", "    let regex = new RegExp(`[${c}]`,\
    \ 'g');\n    s = s.replace(regex, '');\n    let s2 = s.split('').reverse().join('');\n\
    \    return [s, s === s2];\n}", "    let set = new Set(c.split(''));\n    let\
    \ new_str = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(!set.has(s[i]))\
    \ new_str += s[i];\n    }\n    return [new_str, is_palindrome(new_str)];\n}",
  "\tfor(let i = 0; i < c.length; i++){\n\t\ts = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n\t}\n\treturn [s, s.split('').reverse().join('') === s];\n}", "    let\
    \ res = s.split('').filter(x => !c.includes(x)).join('');\n    let palindrome\
    \ = res === res.split('').reverse().join('');\n    return [res, palindrome];\n\
    }\n", "    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n    \
    \    if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n\
    \    return [result, palindrome(result)];\n}\n", "  let newStr = s.split('').filter(function(value){\n\
    \    return !c.includes(value);\n  }).join('');\n  let reversedStr = newStr.split('').reverse().join('');\n\
    \  return newStr === reversedStr ? [newStr, true] : [newStr, false];\n}", "  var\
    \ result = s.split('').filter(function(i){\n    return c.indexOf(i) < 0;\n  }).join('');\n\
    \  var check = result.split('').reverse().join('') === result;\n  return [result,\
    \ check];\n}\n", "    var a = s.split('').filter(function(x){return c.indexOf(x)\
    \ == -1}).join('')\n    var bool = (a == a.split('').reverse().join(''))\n   \
    \ return [a, bool]\n}", "    c.split('').forEach(char => {\n        s = s.replace(char,\
    \ '');\n    });\n    return [s, s.split('').reverse().join('') === s];\n}\n",
  "    return [s.split('').filter(el => !c.includes(el)).join(''), s.split('').filter(el\
    \ => !c.includes(el)).join('') === s.split('').filter(el => !c.includes(el)).reverse().join('')];\n\
    }\n", "    c.split('').forEach(char => {\n        s = s.replace(char, '');\n \
    \   });\n    if (s.split('').reverse().join('') === s) return [s, true];\n   \
    \ return [s, false];\n}\n", "\tlet new_s = '';\n\tfor (let i = 0; i < s.length;\
    \ i++) {\n\t\tif (!c.includes(s[i])) {\n\t\t\tnew_s += s[i];\n\t\t}\n\t}\n\treturn\
    \ new_s == new_s.split('').reverse().join('') ? [new_s, true] : [new_s, false];\n\
    }\n", "    var sArray = s.split('');\n    var charArray = c.split('');\n    for(var\
    \ i = 0; i < sArray.length; i++){\n        for(var j = 0; j < charArray.length;\
    \ j++){\n            if(sArray[i] === charArray[j]){\n                sArray.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    var result =\
    \ sArray.join('');\n    var palindrome = (sArray.join('') === sArray.reverse().join(''));\n\
    \    return [result, palindrome];\n}", "  let result = '';\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (!c.includes(s[i])) result += s[i];\n  }\n  return\
    \ [result, result.split('').reverse().join('') === result];\n}\n", "    let res\
    \ = '';\n    for (let v of s)\n        if (!c.includes(v))\n            res +=\
    \ v;\n    let res_rev = res.split('').reverse().join('');\n    let check = (res\
    \ == res_rev);\n    return [res, check];\n}\n", "    let reverse = s.split('').reverse().join('');\n\
    \    let result = s.split('').filter(e => c.indexOf(e) === -1).join('');\n   \
    \ return [result, result === reverse]\n}", "    let reversed_str = s.split('').reverse().join('');\n\
    \    let deleted_str = s.split('').filter(val => !c.includes(val)).join('');\n\
    \    let result = (deleted_str == reversed_str) ? true : false;\n    return [deleted_str,\
    \ result];\n}", "\treturn [\n\t\ts.split('').reduce((acc, v) =>\n\t\t\tc.includes(v)\
    \ ? acc : acc.concat(v), ''),\n\t\ts.split('').reduce((acc, v) =>\n\t\t\tc.includes(v)\
    \ ? acc : acc.concat(v), '')\n\t\t\t.split('').reverse().join('') === s.split('').reduce((acc,\
    \ v) =>\n\t\t\tc.includes(v) ? acc : acc.concat(v), '')\n\t]\n}\n", "  let arr\
    \ = s.split('');\n  let res = [];\n  for(let i = 0; i < arr.length; i++){\n  \
    \  if(c.indexOf(arr[i]) < 0){\n      res.push(arr[i]);\n    }\n  }\n  let str\
    \ = res.join('');\n  let revStr = res.reverse().join('');\n  return [str, str\
    \ === revStr];\n}", "    let str = s.split('');\n    let arr = c.split('');\n\
    \    let is_palindrome = false;\n    for(let letter of arr){\n        str = str.filter(el\
    \ => el !== letter);\n    }\n    is_palindrome = str.join('') === str.reverse().join('');\n\
    \    return [str.join(''), is_palindrome];\n}", "\tlet s2 = s.split('');\n\tlet\
    \ c2 = c.split('');\n\tfor(let i=0; i<s2.length; i++){\n\t\tfor(let j=0; j<c2.length;\
    \ j++){\n\t\t\tif(s2[i] == c2[j]){\n\t\t\t\ts2.splice(i, 1);\n\t\t\t\ti--;\n\t\
    \t\t}\n\t\t}\n\t}\n\tlet str = s2.join('');\n\tlet pal = isPalindrome(str);\n\t\
    return [str, pal];\n}", "  var res = s.split('').filter(x => !c.includes(x)).join('');\n\
    \  var check = res.split('').reverse().join('') == res;\n  return [res, check];\n\
    }", "\tc.split('').forEach(function(n){\n\t\tvar regex = new RegExp(n, 'g');\n\
    \t\ts = s.replace(regex, '');\n\t});\n\t\n\treturn [s, s === s.split('').reverse().join('')];\n\
    }\n", "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])\
    \ == -1) result += s[i];\n  }\n  return result;\n}", "  for (let i = 0; i < c.length;\
    \ i++) {\n    s = s.replace(new RegExp(c[i], 'g'), '');\n  }\n  return [s, s ===\
    \ s.split('').reverse().join('')];\n}\n", "    for (var i = 0; i < c.length; i++)\
    \ {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return [(s\
    \ === s.split('').reverse().join(''))? true : false, s];\n}\n", "    for (let\
    \ i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'), \"\
    \");\n    }\n    return [s, s.split('').reverse().join('') == s];\n}\n", "   \
    \ let answer = s.split('').filter(element => !c.includes(element)).join('')\n\
    \    let t = ''\n    for(let i = answer.length - 1; i >= 0; i--){\n        t +=\
    \ answer[i]\n    }\n    let result = answer === t ? [answer, true] : [answer,\
    \ false]\n    return result\n}", "    var res = \"\";\n    var norm_arr = s.split(\"\
    \");\n    for (var i = 0; i < norm_arr.length; i++) {\n        var match = false;\n\
    \        for (var j = 0; j < c.length; j++) {\n            if (norm_arr[i] ==\
    \ c[j]) {\n                match = true;\n            }\n        }\n        if\
    \ (!match) {\n            res += norm_arr[i];\n        }\n    }\n    return [res,\
    \ res.split(\"\").reverse().join(\"\") == res];\n}", "    let answer = \"\";\n\
    \    for (let i = 0; i < s.length; i++) {\n        let curChar = s[i];\n     \
    \   if (c.indexOf(curChar) == -1) {\n            answer += curChar;\n        }\n\
    \    }\n    let isPalindrome = answer.split(\"\").reverse().join(\"\") == answer;\n\
    \    return [answer, isPalindrome];\n}\n\nlet res = reverse_delete(\"daxxda\"\
    , \"x\");", "    let set = new Set(c);\n    let ss = '';\n    for(let i = 0; i\
    \ < s.length; i++){\n        if(!set.has(s[i])){\n            ss += s[i];\n  \
    \      }\n    }\n    return [ss, ss.split('').reverse().join('') === ss];\n}\n",
  "    const temp = s.split('');\n    const index = [];\n    for(let i = 0; i < c.length;\
    \ i++){\n        for(let j = 0; j < temp.length; j++){\n            if(c[i] ===\
    \ temp[j]){\n                index.push(j);\n            }\n        }\n    }\n\
    \    for(let i = 0; i < index.length; i++){\n        temp.splice(index[i] - i,\
    \ 1);\n    }\n    return [temp.join(''),temp.reverse().join('') === temp.join('')];\n\
    }", "  for (let i = 0; i < c.length; i++) {\n    let re = new RegExp(c[i], 'g');\n\
    \    s = s.replace(re, '');\n  }\n  let res = s.split('').reverse().join('');\n\
    \  return [s, s === res]\n}", "\tvar resultString = \"\";\n\tvar resultBool =\
    \ true;\n\tvar j = 0;\n\tfor(var i = 0; i < s.length; i++){\n\t\tif(s[i] == c[j]){\n\
    \t\t\t\n\t\t}\n\t\telse{\n\t\t\tresultString += s[i];\n\t\t}\n\t}\n\tfor(var i\
    \ = 0; i < resultString.length; i++){\n\t\tif(resultString[i] != resultString[resultString.length\
    \ - i - 1]){\n\t\t\tresultBool = false;\n\t\t}\n\t}\n\tvar result = [];\n\tresult.push(resultString);\n\
    \tresult.push(resultBool);\n\treturn result;\n}\n", "    let j = 0;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) < 0) {\n          \
    \  s = s.slice(0, j) + s[i] + s.slice(j + 1);\n            j++;\n        }\n \
    \   }\n    let k = 1;\n    while (k < j) {\n        if (s[k - 1] === s[j - 1])\
    \ {\n            k++;\n            j--;\n        } else {\n            return\
    \ [s, false];\n        }\n    }\n    return [s, true];\n}", "  let result = s.split('').filter(char\
    \ => c.indexOf(char) === -1).join('');\n  return [result, isPalindrome(result)];\n\
    }\n", "  let s_arr = s.split('');\n  let c_arr = c.split('');\n  for(let i=0;\
    \ i<s_arr.length; i++){\n    if(c_arr.includes(s_arr[i])){\n      s_arr.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  return [s_arr.join(''), s_arr.join('') === s_arr.reverse().join('')];\n\
    }\n", "    let newStr = s.split('').filter( e => c.indexOf(e) === -1).join('')\n\
    \    let palindrome = true\n    for(let i = 0; i < Math.floor(newStr.length /\
    \ 2); i++){\n        if(newStr[i] !== newStr[newStr.length - 1 - i]) palindrome\
    \ = false\n    }\n    return [newStr, palindrome]\n}", "    var string = s;\n\
    \    var arr = c.split('');\n    for(var i = 0; i < arr.length; i++){\n      \
    \  for(var j = 0; j < string.length; j++){\n            if(arr[i] == string[j]){\n\
    \                string = string.replace(string[j], '');\n            }\n    \
    \    }\n    }\n    console.log(string);\n    var str = string.split('').reverse().join('');\n\
    \    if(string === str){\n        return [string, true];\n    }\n    else{\n \
    \       return [string, false];\n    }\n}", "    for (let i = 0; i < c.length;\
    \ i++) {\n        s = s.replace(new RegExp(c[i],\"g\"),\"\");\n    }\n    if (s\
    \ == s.split(\"\").reverse().join(\"\")){\n        return [s, true];\n    }\n\
    \    return [s, false];\n}\n", "    c.split('').forEach(function(i){\n       \
    \ s = s.replace(i,'');\n    });\n    return (s === s.split('').reverse().join(''))\
    \ ? [s, true] : [s, false];\n}", "    s = s.split('').filter(e => !c.includes(e)).join('');\n\
    \    let reverse_s = s.split('').reverse().join('');\n    return [s, s === reverse_s];\n\
    }\n", "    let test = s.split('').filter(x => !c.includes(x));\n    let str =\
    \ test.join('');\n    let rev = str.split('').reverse().join('');\n    return\
    \ [str, str === rev];\n}", "    let res = s.split('').filter(e => !c.includes(e)).join('');\n\
    \    let cnt = 0;\n    for(let i = 0; i < res.length / 2; i++){\n        if(res[i]\
    \ !== res[res.length - 1 - i])cnt++;\n    }\n    return [res, cnt === 0];\n}",
  "\treturn [s.split('').filter(x => !c.includes(x)).join(''), s.split('').filter(x\
    \ => !c.includes(x)).join('') === s.split('').filter(x => !c.includes(x)).reverse().join('')];\n\
    }", "  let res = s.split('').filter(a => !c.includes(a)).join('');\n  return [res,\
    \ res === res.split('').reverse().join('')];\n}\n", "\tlet regex = new RegExp(c,\
    \ 'g');\n\tlet s_replaced = s.replace(regex, '');\n\treturn [s_replaced, isPalindrome(s_replaced)];\n\
    }\n", "  let str = s.split('');\n  for(let i=0; i<str.length; i++){\n    if(c.includes(str[i])){\n\
    \      str.splice(i, 1);\n      i--;\n    }\n  }\n  return [str.join(''), str.join('')===str.reverse().join('')];\n\
    }\n", "  return [s.replace(new RegExp(`[${c}]`, 'g'), ''), s.replace(new RegExp(`[${c}]`,\
    \ 'g'), '') === s.replace(new RegExp(`[${c}]`, 'g'), '').split('').reverse().join('')];\n\
    }", "    c = [...new Set(c)];\n    s = s.split('').filter(el => c.indexOf(el)\
    \ === -1).join('');\n    const answer = s === s.split('').reverse().join('');\n\
    \    return [s, answer];\n}\n", "    let str = '';\n    let word = '';\n    for(let\
    \ i = 0; i < s.length; i++){\n        if(c.includes(s[i])){\n            str +=\
    \ s[i];\n        }\n    }\n    for(let i = 0; i < str.length; i++){\n        word\
    \ += str[str.length - 1 - i];\n    }\n    return [word, word == str]\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
