name: HumanEval_48_is_palindrome
language: js
prompt: "//Checks if given string is a palindrome\nfunction is_palindrome(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
  aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
  zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
  xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
completions: ["\t//Make text lowercase and remove punctuation\n\ttext = text.toLowerCase().replace(/[.,\\\
    /#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\");\n\t//Replace all space characters with empty\
    \ space\n\ttext = text.replace(/\\s{2,}/g,\" \");\n\t//Set text to array of words\n\
    \ttext = text.split(\" \");\n\t//Remove empty words from array\n\ttext = text.filter(function(item)\
    \ {\n\t\treturn item !== \"\";\n\t});\n\t//Join array back to string\n\ttext =\
    \ text.join(\"\");\n\t\n\t//If length of string is odd, remove middle character\
    \ (so length of string is even)\n\tif(text.length % 2 !== 0){\n\t\ttext = text.substring(0,\
    \ (text.length / 2)) + text.substring((text.length / 2) + 1);\n\t}\n\t\n\t//Check\
    \ if text is palindrome\n\tvar mid = Math.ceil(text.length / 2);\n\tvar isPalindrome\
    \ = true;\n\tfor(var i = 0; i < mid; i++){\n\t\tvar leftLetter = text.charAt(i);\n\
    \t\tvar rightLetter = text.charAt(text.length - 1 - i);\n\t\tif(leftLetter !==\
    \ rightLetter){\n\t\t\tisPalindrome = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\
    return isPalindrome;\n}\n", "    var array = text.split(\"\");\n    var rev =\
    \ array.reverse();\n    var palindrome = rev.join(\"\");\n    return (text ===\
    \ palindrome) ? true : false;\n}\n", "  text = text.toLowerCase().replace(/\\\
    s+/g, '');\n  return text == text.split('').reverse().join('');\n}\n", "  var\
    \ text_array = text.split(\"\");\n  var p_array = text_array.reverse();\n  var\
    \ palindrome = p_array.join(\"\");\n  if (palindrome === text){\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  //Prints text in console to make\
    \ sure everything is working\n  console.log(text);\n  //Trims text and converts\
    \ to lowercase\n  let trimmedText = text.trim().toLowerCase();\n  //Splits text\
    \ and reverses it\n  let reversedText = trimmedText.split(\"\").reverse().join(\"\
    \");\n  //If the strings match, it's a palindrome\n  if(trimmedText == reversedText){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "\treturn text.split('').reverse().join('')\
    \ === text;\n}\n", "  text = text.toLowerCase();\n  var left = 0;\n  var right\
    \ = text.length - 1;\n  while(left < right){\n    if(text[left] !== text[right]){\n\
    \      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n\
    }\n", "  return text.split('').reverse().join('') === text;\n}\n", "  var palindrome\
    \ = true;\n  text = text.toLowerCase();\n  text = text.replace(/[^a-zA-Z]+/g,\
    \ '');\n  for(var i = 0; i < text.length/2; i++){\n    if(text[i] != text[text.length\
    \ - 1 - i]){\n      palindrome = false;\n    }\n  }\n  return palindrome;\n}\n",
  "    var text = text.toLowerCase().replace(/[^A-Za-z0-9]+/g, '');\n    var reverse\
    \ = text.split('').reverse().join('');\n    return text == reverse;\n}\n", " \
    \   text = text.toLowerCase();\n    text = text.replace(/\\s/g,'');\n    reverse\
    \ = text.split('').reverse().join('');\n    if(text === reverse){\n        return\
    \ true;\n    }else{\n        return false;\n    }\n}\n", "  // remove special\
    \ characters, spaces and make lowercase\n  var removeChar = text.replace(/[^A-Z0-9]/ig,\
    \ \"\").toLowerCase();\n  // reverse removeChar for comparison\n  var checkPalindrome\
    \ = removeChar.split('').reverse().join('');\n  // Check to see if myString is\
    \ a Palindrome\n  if(removeChar === checkPalindrome){\n    document.write(\"The\
    \ text \" + text + \" is a palindrome\");\n  }else{\n    document.write(\"The\
    \ text \" + text + \" is not a palindrome\");\n  }\n}\n", "    return text ==\
    \ text.split('').reverse().join('');\n}\n", "    let reverse_text = \"\";\n  \
    \  for(let i = 0; i < text.length; i++){\n        reverse_text += text[text.length\
    \ - 1 - i];\n    }\n    return text === reverse_text;\n}\n", "    if(text == reverse_text(text))\n\
    \        return true;\n    else\n        return false;\n}\n", "  return text.toLowerCase()\
    \ == text.toLowerCase().split('').reverse().join('');\n}\n", "\tif(typeof text\
    \ === 'string'){\n\t\ttext = text.toLowerCase();\n\t\tif(text === reverse(text)){\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "  //Make all characters\
    \ lowercase\n  text = text.toLowerCase();\n  //Remove spaces and punctuation\n\
    \  text = text.replace(/\\W|_/g, \"\");\n  //Create an array with the characters\
    \ of the string\n  var array = text.split(\"\");\n  //Reverse the array\n  array\
    \ = array.reverse();\n  //Return true if string is a palindrome\n  if(array.join(\"\
    \") === text){\n    return true;\n  }\n  //Otherwise, return false\n  else{\n\
    \    return false;\n  }\n}\n", "    text = text.replace(/\\W/g, '').toLowerCase();\n\
    \    let newText = text.split('').reverse().join('');\n    if(text === newText){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}\n", "  var\
    \ new_text = remove_special_characters(text);\n  return new_text.toLowerCase()\
    \ === new_text.toLowerCase().split(\"\").reverse().join(\"\");\n}\n", "\tvar n\
    \ = text.length;\n\tvar mid = Math.floor(n/2);\n\tvar i=0;\n\tvar match = true;\n\
    \twhile(i<mid && match){\n\t\tif(text[i] == text[n-i-1]){\n\t\t\ti++;\n\t\t}else{\n\
    \t\t\tmatch = false;\n\t\t}\n\t}\n\treturn match;\n}\n\n", "    text = text.toLowerCase();\n\
    \    return text === text.split('').reverse().join('');\n}\n", "    var reversed\
    \ = text.split('').reverse().join('');\n\n    if(reversed === text){\n       \
    \ return true;\n    }\n    else{\n        return false;\n    }\n}\n", "    text\
    \ = text.toLowerCase();\n    var reversed_text = text.split(\"\").reverse().join(\"\
    \");\n    if(text === reversed_text){\n        return true;\n    }else{\n    \
    \    return false;\n    }\n}\n", "\ttext = text.toLowerCase();\n\ttext = text.replace(/[^a-z0-9]/g,\
    \ '');\n\tvar text_array = text.split('');\n\tvar text_reversed = text_array.reverse();\n\
    \tvar text_reversed_string = text_reversed.join('');\n\tif(text === text_reversed_string){\n\
    \t\tconsole.log(\"\\\"\" + text + \"\\\"\" + \" is a palindrome\");\n\t}\n\telse{\n\
    \t\tconsole.log(\"\\\"\" + text + \"\\\"\" + \" is not a palindrome\");\n\t}\n\
    }\nis_palindrome(\"never odd or even\");\n", "    var reverse = text.split(\"\"\
    ).reverse().join(\"\");\n    return reverse === text;\n}\n", "  if(text.length\
    \ < 2){\n    return true;\n  }else if(text[0] != text[text.length-1]){\n    return\
    \ false;\n  }else{\n    return is_palindrome(text.substring(1,text.length-1));\n\
    \  }\n}\n", "    var text_without_spaces = text.split(\" \").join(\"\");\n   \
    \ var text_reversed = text_without_spaces.split(\"\").reverse().join(\"\");\n\
    \    return text_without_spaces === text_reversed;\n}\n\n", "    var text = text.replace(/[\\\
    W_]/g, '').toLowerCase();\n    var i = 0;\n    var j = text.length - 1;\n    while(i\
    \ < j){\n        if(text[i] != text[j]){\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;\n}\n", "\ttext = text.replace(/[\\\
    W_]/g, '').toLowerCase();\n\tvar reverse = text.split('').reverse().join('');\n\
    \treturn reverse === text;\n}\n", "\tvar char = text.toLowerCase().replace(/[^a-z]/g,'');\n\
    \tvar ch = char.split('');\n\tfor(var i = 0; i < ch.length; i++){\n\t\tif(ch[i]\
    \ != ch[ch.length - i - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    let charArray = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '').split('');\n\
    \    let str = '';\n    for(let i = charArray.length - 1; i >= 0; i--){\n    \
    \    str += charArray[i];\n    }\n    console.log(str);\n    return str === text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,\
    \ '');\n}\n", "    let reversed = text.split('').reverse().join('');\n    if(text.replace(/[\\\
    W_]/g, '').toLowerCase() === reversed.replace(/[\\W_]/g, '').toLowerCase()){\n\
    \        return true;\n    }\n    return false;\n}\n", "  for(var i = 0; i < text.length/2;\
    \ i++){\n    if(text[i] != text[text.length-1-i]){\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    //First, transform text to lowercase\n    text\
    \ = text.toLowerCase();\n    //Next, remove all non-alphanumeric characters\n\
    \    text = text.replace(/[^A-Za-z0-9]+/g, '');\n    //Split string in half and\
    \ compare first and last letter of first half to last and first letter of second\
    \ half\n    for(var i = 0; i < text.length / 2; i++){\n        if(text[i] != text[text.length\
    \ - i - 1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "\tvar stripper = new StringStripper(text);\n\tvar stripped_text = stripper.strip();\n\
    \tvar for_reversal = stripped_text.split(\"\");\n\tvar reversed_text = for_reversal.reverse();\n\
    \tvar joined_text = reversed_text.join(\"\");\n\tif(stripped_text == joined_text){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tif(typeof text\
    \ == \"string\"){\n\t\ttext = text.toLowerCase();\n\t\tvar len = text.length;\n\
    \t\tfor(var i = 0; i < len; i++){\n\t\t\tif(text[i] != text[len - i - 1]){\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n", "    //Removes all non-alphanumeric characters from the text string\n  \
    \  var alphanumeric = text.replace(/[^a-zA-Z0-9]/g, '');\n    var reversed_text\
    \ = alphanumeric.split('').reverse().join('');\n    return (alphanumeric == reversed_text);\n\
    }\n", "    //Checks if input is a string\n    if(typeof text !== 'string'){\n\
    \        return false;\n    }\n    //Replaces unwanted characters\n    text =\
    \ text.replace(/[^a-zA-Z0-9]/g,'');\n    //Converts all characters to lowercase\n\
    \    text = text.toLowerCase();\n    //Reverses string\n    let rtext = text.split('').reverse().join('');\n\
    \    //Checks if strings are identical\n    if(text === rtext){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "\t\n\tlet input\
    \ = text.toLowerCase();\n\tlet reversed = reverse_text(input);\n\tif(input ==\
    \ reversed){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "    var clean_text\
    \ = \"\";\n    var text_length = text.length;\n    var i;\n    for(i = 0; i <\
    \ text_length; i++){\n        var char = text.charAt(i);\n        if(char >= 'a'\
    \ && char <= 'z'){\n            clean_text += char;\n        }\n    }\n    clean_text\
    \ = clean_text.toLowerCase();\n    var clean_text_length = clean_text.length;\n\
    \    for(i = 0; i < clean_text_length; i++){\n        if(clean_text.charAt(i)\
    \ != clean_text.charAt(clean_text_length - 1 - i)){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "\tvar original = text.split(\"\");\n\
    \tvar reversed = text.split(\"\").reverse();\n\treturn original.toString() ===\
    \ reversed.toString();\n}\n", "\ttext = text.replace(/\\s/g, '');\n\t\n\treturn\
    \ (text.toLowerCase() == text.toLowerCase().split('').reverse().join(''));\n}\n",
  "\t\n\t//Strips out white space and all punctuation\n\ttext = text.replace(/[\\\
    W]/g,\"\");\n\t\n\t//If empty string, return true\n\tif(text.length == 0){\n\t\
    \treturn true;\n\t}\n\t\n\t//Compares first and last character\n\tif(text.charAt(0)\
    \ != text.charAt(text.length-1)){\n\t\treturn false;\n\t}\n\t\n\t//If more than\
    \ two characters, calls itself with text minus first and last characters\n\tif(text.length\
    \ > 2){\n\t\treturn is_palindrome(text.substring(1,text.length-1));\n\t}\n\t\n\
    \t//If there are only two characters and they are the same, returns true\n\treturn\
    \ true;\n}\n", "    text = text.toLowerCase();\n    text = text.replace(/[^a-z]/g,\
    \ \"\");\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", " \
    \   return text.split('').reverse().join('') === text;\n}\n", "    text = text.replace(/[\\\
    s\\.\\,\\?]/g, \"\").toLowerCase();\n    return text === text.split(\"\").reverse().join(\"\
    \");\n}\n", "\ttext = text.toLowerCase();\n\tvar reversStr = text.split(\"\").reverse().join(\"\
    \");\n\tif(text == reversStr){\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
  "\tvar text_array = text.toLowerCase().replace(/[^A-Za-z0-9]/g, '').split('');\n\
    \t\n\tvar i = 0;\n\tvar j = text_array.length - 1;\n\twhile(i < j){\n\t\tif(text_array[i]\
    \ != text_array[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\
    return true;\n}\n", "\tvar len = text.length;\n\tfor(var i = 0; i < len/2; i++){\n\
    \t\tif(text[i] != text[len-i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\tvar arr = text.split(\"\");\n\tvar len = arr.length;\n\tvar mid = Math.floor(len/2);\n\
    \tfor(var i = 0; i < mid; i++){\n\t\tif(arr[i] != arr[len-1-i])\n\t\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\n", "    text = text.toLowerCase();\n    let\
    \ arr = text.split(\"\");\n    let filtered = arr.filter(removeSpecialChars).join(\"\
    \");\n    let reversed = filtered.split(\"\").reverse().join(\"\");\n    return\
    \ filtered === reversed;\n}\n", "    let i = 0;\n    let j = text.length - 1;\n\
    \    let result = true;\n    while(result && i <= j){\n        if(text[i] != text[j]){\n\
    \            result = false;\n        }\n        i++;\n        j--;\n    }\n \
    \   return result;\n}\n", "  if(text.toLowerCase() === text.toLowerCase().split('').reverse().join('')){\n\
    \    return true;\n  }\n  return false;\n}\n", "  return text.split('').reverse().join('')\
    \ == text;\n}\n", "  return text.toLowerCase() === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "\t// var check=false;\n\t// var check1=text;\n\t// var text1=text.split(\"\
    \");\n\t// var text2=text1.reverse();\n\t// var check1=text2.join(\"\");\n\t//\
    \ if(check1==text){\n\t// \tcheck=true;\n\t// }\n\t// else{\n\t// \tcheck=false;\n\
    \t// }\n\t// return check;\n\tvar check=false;\n\tvar text1=text.split(\"\");\n\
    \tvar text2=text1.reverse();\n\tvar check1=text2.join(\"\");\n\tif(check1==text){\n\
    \t\tcheck=true;\n\t}\n\telse{\n\t\tcheck=false;\n\t}\n\treturn check;\n}\n", " \
    \ text = text.toLowerCase();\n  text = text.replace(/[^a-z]/g, \"\");\n  var reverse\
    \ = text.split(\"\").reverse().join(\"\");\n  return text === reverse;\n}\n",
  "\tvar i;\n\tvar last;\n\tvar text_arr = text.split(\"\");\n\tlast = text_arr.length-1;\n\
    \tfor(i=0; i<last; i++){\n\t\tif(text_arr[i] != text_arr[last-i]){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\ttext = text.replace(/\\s/g,'');\
    \ //removes whitespace\n\ttext = text.toLowerCase();\n\tvar text_rev = text.split('').reverse().join('');\n\
    \tif(text == text_rev){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\n", "    var formatted_text = text.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n\
    \    var input_length = formatted_text.length;\n    var min = 0;\n    var max\
    \ = input_length - 1;\n    while (min < max) {\n        if (formatted_text[min]\
    \ !== formatted_text[max]) {\n            return false;\n        }\n        min++;\n\
    \        max--;\n    }\n    return true;\n}\n", "  var size=text.length;\n  var\
    \ n=Math.floor(size/2);\n  var a=text.substring(0,n);\n  var b=text.substring(n+size%2,size);\n\
    \  console.log(a+\" \"+b);\n  return a.toLowerCase()===reverse(b).toLowerCase();\n\
    }\n", "    var revText = text.split(\"\").reverse().join(\"\");\n    return text\
    \ == revText;\n}\n", "  var lower = text.toLowerCase();\n  var letters = lower.replace(/[^a-zA-Z]/g,\
    \ \"\");\n  var reverse = letters.split(\"\").reverse().join(\"\");\n  if (letters\
    \ === reverse){\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n",
  "  var text = text.toUpperCase();\n  var i;\n  for(i = 0; i < text.length; i++){\n\
    \    if(text[i] !== text[text.length - (i + 1)]){\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "\tvar n = text.length;\n\tif(n < 2){\n\t\treturn\
    \ true;\n\t}\n\tif(text[0] != text[n-1]){\n\t\treturn false;\n\t}\n\treturn is_palindrome(text.substring(1,n-1));\n\
    }\n", "  //checks length of string\n  if(text.length < 2){\n    return true;\n\
    \  }else{\n    //checks if first and last character are the same\n    if(text[0]\
    \ == text[text.length-1]){\n      //calls function again and cuts off first and\
    \ last character\n      return is_palindrome(text.substring(1,text.length-1));\n\
    \    }else{\n      return false;\n    }\n  }\n}\n", "    //Converts string to\
    \ lowercase\n    text = text.toLowerCase();\n    //Removes anything that is not\
    \ a letter or number\n    text = text.replace(/[^a-zA-Z0-9]/g, \"\");\n    //The\
    \ string to compare\n    var compare = text.split(\"\").reverse().join(\"\");\n\
    \    //Checks if text and compare are equal\n    if(text == compare){\n      \
    \  return true;\n    }\n    else{\n        return false;\n    }\n}\n", "\tvar\
    \ string = text.split(\"\");\n\tvar reversed = [];\n\t//Pushes a reversed array\n\
    \tfor(var i = string.length-1; i >= 0; i--){\n\t\treversed.push(string[i]);\n\t\
    }\n\t//Checks if reversed array is equal to the original array\n\tif(reversed.join(\"\
    \") == string.join(\"\")){\n\t\tconsole.log(\"Yes, \" + text + \" is a palindrome.\"\
    );\n\t}\n\telse{\n\t\tconsole.log(\"No, \" + text + \" is not a palindrome.\"\
    );\n\t}\n}\n", "  if(text.length <= 1){\n    return true;\n  }\n  //Replacing\
    \ spaces, tabs, and line breaks with no text\n  var clean = text.replace(/[\\\
    t\\n ]/g, '');\n  var start = 0;\n  var end = clean.length - 1;\n  //Goes through\
    \ string left to right and right to left\n  //Compares the characters as it goes\n\
    \  while(start < end){\n    if(clean[start] != clean[end]){\n      return false;\n\
    \    }\n    start++;\n    end--;\n  }\n  return true;\n}\n", "\t\n\tvar text =\
    \ document.getElementById(\"palindrome\").value;\n\tvar text1 = text.toLowerCase();\n\
    \tvar reversed_text = text1.split(\"\").reverse().join(\"\");\n\tif(text1 ===\
    \ reversed_text){\n\t\t\n\t\tdocument.getElementById(\"result\").innerHTML = \"\
    The given text is a palindrome.\";\n\t}\n\telse{\n\t\t\n\t\tdocument.getElementById(\"\
    result\").innerHTML = \"The given text is not a palindrome.\";\n\t}\n}", "  var\
    \ letters = text.toLowerCase().split('').filter(function(el){\n    return /[a-z0-9]/.test(el);\n\
    \  });\n  return letters.join('') === letters.reverse().join('');\n}\n", "\tvar\
    \ isPalindrome = false;\n\t//removes spaces, numbers, and punctuation from text\n\
    \ttext = text.replace(/[\\s,.]/g, \"\");\n\t//removes capital letters from text\n\
    \ttext = text.toLowerCase();\n\t//sets isPalindrome to true if text equals itself\
    \ backwards\n\tif(text == text.split(\"\").reverse().join(\"\")){\n\t\tisPalindrome\
    \ = true;\n\t}\n\treturn isPalindrome;\n}\n", "    text = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,'');\n\
    \    var len = text.length;\n    for(var i = 0; i < len/2; i++) {\n        if(text[i]\
    \ !== text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "\treturn text == text.split('').reverse().join('');\n}\n", " \
    \ console.log(\"Checking text \" + text);\n  if(text === \"\"){\n    return true;\n\
    \  }\n  else{\n    if(text[0] === text[text.length - 1]){\n      return is_palindrome(text.substring(1,\
    \ text.length - 1));\n    }\n    else{\n      return false;\n    }\n  }\n}", " \
    \   return text.toLowerCase() === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "    let isP = true;\n    text = text.toLowerCase();\n    let input = text.replace(/[^a-z0-9+]+/gi,\
    \ '');\n    console.log(input);\n    let length = input.length;\n    if(length\
    \ <= 1){\n        return true;\n    }\n    for(let i = 0; i < length; i++){\n\
    \        if(input[i] !== input[length - i - 1]){\n            isP = false;\n \
    \       }\n    }\n    return isP;\n}\n", "    var text = text.toLowerCase();\n\
    \    var text_split = text.split(\"\");\n    var length = text_split.length;\n\
    \    var new_array = [];\n    var i;\n    for(i = 0; i < length; i++){\n     \
    \   new_array.push(text_split.pop());\n    }\n    var new_text = new_array.join(\"\
    \");\n    if(new_text == text){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}\n", "    //Initializes text as lowercase\n    text\
    \ = text.toLowerCase();\n    //Parses string into array\n    let array = text.split(\"\
    \");\n    //Creates an array to hold the final version of the string\n    let\
    \ final = [];\n    //Loops through string array, if the character is a letter\
    \ it is pushed to the final array\n    for(let i = 0; i < array.length; i++){\n\
    \        if(array[i].match(/[a-z]/i)){\n            final.push(array[i]);\n  \
    \      }\n    }\n    //Parses the final array into a string\n    let finalstring\
    \ = final.join(\"\");\n    //Parses the final array into a reversed string\n \
    \   let reversed = final.reverse().join(\"\");\n    //Checks if final string is\
    \ equal to the reversed string\n    if(finalstring == reversed){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    var reversed_text\
    \ = reverse_string(text);\n    if(text === reversed_text){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}", "\tvar first = text.substring(0,\
    \ Math.floor(text.length/2));\n\tvar second = \"\";\n\tif(text.length % 2 == 0){\n\
    \t\tsecond = text.substring(Math.floor(text.length/2), text.length);\n\t}else{\n\
    \t\tsecond = text.substring(Math.floor(text.length/2)+1, text.length);\n\t}\n\t\
    var reversed = second.split(\"\").reverse().join(\"\");\n\tif(first == reversed){\n\
    \t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}", "  if(text.length ===\
    \ 0 || text.length === 1){\n    return true;\n  }\n  if(text[0] !== text[text.length\
    \ - 1]){\n    return false;\n  }\n  return is_palindrome(text.slice(1, text.length\
    \ - 1));\n}\n", "    var plain_text = text.replace(/\\W/g, '').toLowerCase();\
    \ //removes all non-word characters and lower cases the string\n    var reverse_text\
    \ = plain_text.split('').reverse().join(''); //reverses the string\n    if(plain_text\
    \ == reverse_text){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n", "\tvar text=text.toLowerCase();\n\tvar len=text.length;\n\tfor(var\
    \ i=0;i<len/2;i++){\n\t\tif(text[i]!=text[len-i-1]){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "    if(text === text.split('').reverse().join('')){\n\
    \        return true;\n    }\n    return false;\n}\n", "    return text.toLowerCase()\
    \ == text.toLowerCase().split('').reverse().join('');\n}\n", "\tlet backwards\
    \ = '';\n\tfor(i = text.length-1; i >= 0; i--){\n\t\tbackwards += text[i];\n\t\
    }\n\tif(backwards === text){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t\
    }\n}\n", "    if(text == text.split(\"\").reverse().join(\"\")){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    return text == text.split('').reverse().join('');\n\
    }\n", "    text = text.toLowerCase();\n    words = text.split(\" \");\n    //remove\
    \ filler characters and join \n    words = words.join(\"\");\n    return words\
    \ == words.split(\"\").reverse().join(\"\");\n}\n", "    if(text.replace(/[^a-zA-Z0-9]+/g,'').toLowerCase()\
    \ === \n    text.replace(/[^a-zA-Z0-9]+/g,'').toLowerCase().split('').reverse().join('')){\n\
    \        return true;\n    }\n    return false;\n}", "    var isPalindrome = true;\n\
    \    var a = 0;\n    var b = text.length - 1;\n    for(var i = 0; i < text.length\
    \ / 2; i++){\n        if(text[a] != text[b]){\n            isPalindrome = false;\n\
    \            break;\n        }\n        a++;\n        b--;\n    }\n    return\
    \ isPalindrome;\n}\n", "\ttext = preprocess(text);\n\tvar firstHalf;\n\tvar secondHalf;\n\
    \tif(text.length%2 === 0){\n\t\tfirstHalf = text.substring(0,text.length/2);\n\
    \t\tsecondHalf = text.substring(text.length/2,text.length);\n\t}\n\telse{\n\t\t\
    firstHalf = text.substring(0,text.length/2);\n\t\tsecondHalf = text.substring(text.length/2+1,text.length);\n\
    \t}\n\treturn is_palindrome_rec(firstHalf,secondHalf);\n}\n", "\t//text = text.replace(/\\\
    s/g, '');\n\tvar lower = text.toLowerCase();\n\tvar original = lower.split('');\n\
    \tvar reverse = original.slice(0);\n\treverse.reverse();\n\tfor(var i = 0; i <\
    \ original.length; i++){\n\t\tif(original[i] != reverse[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "  var str = text.toString(); //Converts to\
    \ string\n  var reversed_str = \"\";\n  var i = str.length;\n  while(i > 0){\n\
    \    reversed_str += str.substring(i-1, i);\n    i--;\n  }\n  if(str == reversed_str){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "\treturn text\
    \ == text.split('').reverse().join('');\n}\n", "    var reverse = text.split(\"\
    \").reverse().join(\"\");\n    if(text === reverse){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n", "  text = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,\
    \ '');\n  var rev = text.split('').reverse().join('');\n  return rev === text;\n\
    }\n", "    if(text == text.split(\"\").reverse().join(\"\")){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    var i = 0;\n    var last = text.length\
    \ - 1;\n    while(i < last){\n        if(text[i] != text[last]){\n           \
    \ return false;\n        }\n        i++;\n        last--;\n    }\n    return true;\n\
    }\n", "\t//Checks if given string is palindrome or not\n\tvar text = text.toLowerCase();\n\
    \tvar len = text.length;\n\tfor(var i = 0; i < len/2; i++){\n\t\tif(text[i] !==\
    \ text[len - 1 - i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "  text = text.replace(/[^A-Za-z]/g, \"\").toLowerCase();\n  return text === text.split(\"\
    \").reverse().join(\"\");\n}\n", "    var revStr = text.split(\"\").reverse().join(\"\
    \");\n    return revStr == text;\n}\n", "    var text_input = text.replace(/\\\
    s/g,'');\n    var reversed_text = \"\";\n    //Reverse given string\n    for(var\
    \ i = text_input.length - 1; i >= 0; i--){\n        reversed_text += text_input[i];\n\
    \    }\n    //Checks for palindrome\n    if(text_input == reversed_text){\n  \
    \      return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \ var palindrome = true;\n  for(var i = 0; i < text.length/2; i++){\n    if(text[i]\
    \ != text[text.length-1-i]){\n      palindrome = false;\n    }\n  }\n  return\
    \ palindrome;\n}\n", "  text = text.toLowerCase();\n  text = text.replace(/[^A-Za-z0-9]/g,\
    \ '');\n  var reversed = text.split('').reverse().join('');\n  if (text == reversed){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "  var rev = text.split(\"\
    \").reverse().join(\"\");\n  return text === rev;\n}\n\n", "  text = text.replace(/\\\
    W/g, '').toLowerCase();\n  var count = text.length;\n  for(var i = 0; i < count;\
    \ i++){\n    if(text[i] != text[count - i - 1])\n      return false;\n  }\n  return\
    \ true;\n}\n", "  text = text.toLowerCase();\n  var regex = /[^A-Za-z0-9]/g;\n\
    \  text = text.replace(regex, '');\n  if (text.length < 2) return true;\n  var\
    \ i = 0;\n  var j = text.length - 1;\n  while (i < j) {\n    if (text[i] != text[j])\
    \ {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n",
  "\t//Removes extra spaces and converts all letters to lowercase\n\ttext = text.replace(/\\\
    s+/g, '').toLowerCase();\n\t\n\t//Finds the middle index of the string\n\tvar\
    \ mid = Math.floor(text.length/2);\n\t\n\t//Checks if the first half of the string\
    \ equals the second half\n\t//Case 1: A string with an even number of characters\n\
    \tif(text.length % 2 == 0){\n\t\tif(text.substring(0, mid) == text.substring(mid,\
    \ text.length).split(\"\").reverse().join(\"\")){\n\t\t\treturn true;\n\t\t}else{\n\
    \t\t\treturn false;\n\t\t}\n\t//Case 2: A string with an odd number of characters\n\
    \t}else{\n\t\tif(text.substring(0, mid) == text.substring(mid+1, text.length).split(\"\
    \").reverse().join(\"\")){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n}\n", "\tvar palindrome = true;\n\t\n\t//Checks every character of\
    \ the string against its character on the other side of the string\n\tfor(var\
    \ i = 0; i < text.length / 2; i++){\n\t\tif(text[i] != text[text.length - i -\
    \ 1]){\n\t\t\tpalindrome = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn palindrome;\n\
    }\n", "  text = text.toLowerCase();\n  text = text.replace(/[^a-z]/g, \"\");\n\
    \  return text == text.split(\"\").reverse().join(\"\");\n}\n", "  var rev_text\
    \ = text.split(\"\").reverse().join(\"\");\n  if(text == rev_text){\n    return\
    \ true;\n  }\n  else{\n    return false;\n  }\n}", "  text = text.replace(/[^a-zA-Z]/g,\
    \ '').toLowerCase();\n  var rev = text.split('').reverse().join('');\n  return\
    \ text === rev;\n}\n", "\tvar text = text.replace(/[\\W_]/g, '').toLowerCase();\n\
    \treturn text === text.split('').reverse().join('');\n}\n", "   let clean = text.toLowerCase().replace(/[^a-z]/g,\
    \ '');\n   if(clean.length < 2){\n      return false;\n   }\n   for(let left =\
    \ 0, right = clean.length - 1; left < right; left++, right--){\n      if(clean[left]\
    \ !== clean[right]){\n         return false;\n      }\n   }\n   return true;\n\
    }\n", "    if(text == text.split(\"\").reverse().join(\"\"))\n        return true;\n\
    \    else\n        return false;\n}\n", "    // convert to lower case and remove\
    \ all non-alphanumeric characters\n    var text = text.toLowerCase().replace(/[^a-z0-9]+/g,'');\n\
    \    var length = text.length;\n    for (var i = 0; i < Math.floor(length/2);\
    \ i++) {\n        if (text[i] !== text[length - 1 - i]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  var length = text.length;\n\
    \  var middle = Math.floor(length/2);\n  var left = middle - 1;\n  var right =\
    \ (length % 2) ? middle + 1 : middle;\n  while(left >= 0 && right < length &&\
    \ text[left] == text[right]){\n    left--;\n    right++;\n  }\n  return (left\
    \ < 0 || right >= length);\n}\n", "  let str = text.toLowerCase();\n  let str2\
    \ = str.split('').reverse().join('');\n  if(str == str2){\n    return true;\n\
    \  }\n  else{\n    return false;\n  }\n}\n", "    if(text == text.split(\"\").reverse().join(\"\
    \")){\n        return true;\n    }\n    return false;\n}\n", "    //Split given\
    \ string\n    var split_text = text.split(\"\");\n    //Reverse text\n    var\
    \ reverse_text = split_text.reverse();\n    //Join reversed string\n    var reversed_string\
    \ = reverse_text.join(\"\");\n    //Check if text is equal to reversed string\n\
    \    if(text == reversed_string){\n        return true;\n    }else{\n        return\
    \ false;\n    }\n}\n", "    var re = /[\\W_]/g;\n    var lowRegStr = text.toLowerCase().replace(re,\
    \ '');\n    var reverseStr = lowRegStr.split('').reverse().join(''); \n    return\
    \ reverseStr === lowRegStr;\n}", "  var len = text.length;\n  var first = 0;\n\
    \  var last = len - 1;\n  while(last > first){\n    if(text[first] != text[last]){\n\
    \      return false;\n    }\n    first++;\n    last--;\n  }\n  return true;\n\
    }\n", "    let word = remove_spaces(text);\n    return word === word.split('').reverse().join('');\n\
    }", "  var palindrome = true;\n  for(var i = 0; i < text.length / 2; i++){\n \
    \   if(text[i] != text[text.length - i - 1]){\n      palindrome = false;\n   \
    \   break;\n    }\n  }\n  return palindrome;\n}\n", "    var palindrome = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,'');\n\
    \    var text = palindrome.split('').reverse().join('');\n    return palindrome\
    \ === text;\n}\n", "\tlet x = text.split(\"\").reverse().join(\"\");\n\tif(x.toLowerCase()\
    \ === text.toLowerCase()){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "  \
    \  if(text.length < 2){\n        return true;\n    }\n    else{\n        if(text[0]\
    \ == text[text.length-1]){\n            return is_palindrome(text.substring(1,\
    \ text.length-1));\n        }\n        else{\n            return false;\n    \
    \    }\n    }\n}\n", "  var length = text.length;\n  var string = \"\";\n  for(var\
    \ i = length - 1; i >= 0; i--){\n    string += text[i];\n  }\n  if(string == text){\n\
    \    return true;\n  }else{\n    return false;\n  }\n}\n", "\tvar s = text.toLowerCase().replace(/\\\
    s/g, '');\n\tvar revs = s.split('').reverse().join('');\n\treturn (s === revs);\n\
    }\n", "    if(text == text.split(\"\").reverse().join(\"\")){\n        console.log(text\
    \ + \" is a palindrome\");\n    }\n    else{\n        console.log(text + \" is\
    \ not a palindrome\");\n    }\n}\n", "\tvar reverse = text.split(\"\").reverse().join(\"\
    \");\n\tif(text == reverse){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n", "  var reverse = text.split(\"\").reverse().join(\"\");\n  if(text\
    \ === reverse){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "\t\
    //Takes out all non alpha-numeric characters and whitespace\n\ttext = text.replace(/[^a-zA-Z0-9]/g,\
    \ \"\").toLowerCase();\n\t//Reverses string and compares it to itself\n\tif(text\
    \ == text.split(\"\").reverse().join(\"\")){\n\t\treturn true;\n\t}else{\n\t\t\
    return false;\n\t}\n}\n", "  text = text.toLowerCase().replace(/\\s/g, '');\n\
    \  let text_length = text.length;\n  let halfway = Math.floor(text_length / 2);\n\
    \  let reversed_text = \"\";\n  for(let i = text_length - 1; i >= 0; i--){\n \
    \   reversed_text += text[i];\n  }\n  return reversed_text == text;\n}\n", " \
    \   var re = /[\\W_]/g;\n    var lowRegStr = text.toLowerCase().replace(re, '');\n\
    \    var reverseStr = lowRegStr.split('').reverse().join(''); \n    return reverseStr\
    \ === lowRegStr;\n}\n", "    text = text.toLowerCase();\n    if(text.length ==\
    \ 0 || text.length == 1){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    return\
    \ false;\n}\n", "  return text.split('').reverse().join('') === text;\n}\n", "\t\
    if(text.length === 0 || text.length === 1){\n\t\treturn true;\n\t}\n\tif(text[0]\
    \ === text[text.length - 1]){\n\t\treturn is_palindrome(text.slice(1, text.length\
    \ - 1));\n\t}\n\treturn false;\n}\n", "\tfor(var i = 0; i<text.length/2; i++){\n\
    \t\tif(text[i]!=text[text.length-1-i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "  let text_reverse = text.split(\"\").reverse().join(\"\");\n\
    \  if(text.toLowerCase() == text_reverse.toLowerCase()){\n    return true;\n \
    \ }\n  else{\n    return false;\n  }\n}\n", "\tfor(var i = 0; i < text.length/2;\
    \ i++){\n\t\tif(text[i] != text[text.length-1-i])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\n", "    var text = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,'');\n\
    \    var rev_text = text.split('').reverse().join('');\n    if(text == rev_text){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \ var len = text.length;\n  if(len <= 1){\n    return false;\n  }\n  if(text.substring(0,1)\
    \ != text.substring(len-1,len)){\n    return false;\n  }\n  return is_palindrome(text.substring(1,len-1));\n\
    }", "  //remove spaces\n  text = text.split(\" \").join(\"\");\n  //checks if\
    \ text is a palindrome\n  return (text.split(\"\").reverse().join(\"\") === text);\n\
    }\n", "\tvar length = text.length;\n\tfor(var i = 0; i < Math.floor(length/2);\
    \ i++){\n\t\tif(text[i] != text[length-1-i]){\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n", "    let palindrome = text.toLowerCase().replace(/[^a-zA-Z0-9]+/g,'');\n\
    \    const reverse = palindrome.split('').reverse().join('');\n    return palindrome\
    \ === reverse;\n}\n", "    var result = false;\n    var b = text.split(\"\").reverse().join(\"\
    \");\n    if(text == b){\n        result = true;\n    }\n    return result;\n\
    }\n", "    if(text.length <= 1){\n        return true;\n    }\n    if(text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    return false;\n}\n", "  //Converts text to lowercase and removes all\
    \ but letters\n  text = text.toLowerCase().replace(/[^a-z]/g, \"\");\n  //Checks\
    \ if given text is equal to reversed text\n  return text == text.split(\"\").reverse().join(\"\
    \");\n}\n", "    return text == text.split('').reverse().join('');\n}\n", "\t\
    text = text.toLowerCase();\n\tvar textlen = text.length;\n\tvar count = 0;\n\t\
    for(var i = 0; i < textlen; i++){\n\t\tif(text[i] == text[textlen - i - 1]){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\tif(count == textlen){\n\t\treturn true;\n\t}else{\n\
    \t\treturn false;\n\t}\n}\n", "  text = text.toLowerCase().replace(/\\s/g, '');\n\
    \  return text === text.split('').reverse().join('');\n}\n", "  let array_text\
    \ = [...text];\n  let reversed_text = array_text.reverse().join('');\n  return\
    \ text === reversed_text;\n}\n", "    console.log(\"-------------------------------\"\
    )\n    console.log(\"is_palindrome: \" + text);\n    if(typeof text !== \"string\"\
    ) {\n        throw \"Argument is not a string\"\n    }\n    console.log(\"Type\
    \ of argument: \" + typeof text)\n    var length = text.length;\n    var half_length\
    \ = length / 2;\n    for(var i = 0; i < half_length; i++){\n        if(text[i]\
    \ !== text[length - i - 1]){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "\tvar reverse = \"\";\n\tvar length = text.length;\n\t\
    for(var i = 0; i < length; i++){\n\t\treverse += text[length - 1 - i];\n\t}\n\t\
    return reverse == text;\n}\n", "  var re = /[\\W_]/g;\n  var lowRegStr = text.toLowerCase().replace(re,\
    \ '');\n  var reverseStr = lowRegStr.split('').reverse().join(''); \n  return\
    \ reverseStr === lowRegStr;\n}\n", "  var i;\n  var n = text.length;\n  var p\
    \ = Math.floor(n/2);\n  var half = text.substring(0,p);\n  var half_rev = \"\"\
    ;\n  for(i=n-1;i>=p;i--){\n    half_rev = half_rev + text.charAt(i);\n  }\n  if(half==half_rev){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "\ttext = text.replace(/[^\\\
    w]/g, \"\").toLowerCase();\n\treturn text == text.split(\"\").reverse().join(\"\
    \");\n}\n", "    // Replace non-alphanumeric characters with empty strings\n \
    \   var only_chars = text.replace(/[^a-z0-9]/gi,'');\n    // Set all characters\
    \ to lowercase\n    only_chars = only_chars.toLowerCase();\n    // Split string\
    \ into an array of characters\n    var char_array = only_chars.split(\"\");\n\
    \    // Reverse the array of characters\n    var reversed_array = char_array.reverse();\n\
    \    // Join array of characters back into a string\n    var reversed_string =\
    \ reversed_array.join(\"\");\n    //Check if palindrome and return boolean value\n\
    \    return (reversed_string === only_chars);\n}\n", "    if(text.length <= 1){\n\
    \        return true;\n    }\n    if(text[0] != text[text.length-1]){\n      \
    \  return false;\n    }\n    return is_palindrome(text.substring(1, text.length-1));\n\
    }\n", "    text = text.toLowerCase();\n    let reversed = text.split('').reverse().join('');\n\
    \    return text === reversed;\n}\n", "\tvar alpha_only = text.replace(/[^a-zA-Z]/g,\
    \ '').toLowerCase();\n\tvar reversed = alpha_only.split('').reverse().join('');\n\
    \treturn alpha_only === reversed;\n}\n", "    if(text.length == 0){\n        return\
    \ false;\n    }\n    else{\n        var removeSpace = text.replace(/\\s/g, '');\n\
    \        var lowerCase = removeSpace.toLowerCase();\n        var reverseString\
    \ = lowerCase.split('').reverse().join('');\n        if(lowerCase == reverseString){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n}\n\n", "\tlet text_array = text.split(\"\");\n\tlet reverse_array\
    \ = text_array.reverse();\n\tlet reverse_text = reverse_array.join(\"\");\n\t\
    let text_low = text.toLowerCase();\n\tlet reverse_text_low = reverse_text.toLowerCase();\n\
    \t\n\treturn text_low === reverse_text_low;\n}\n\n", "  //Removes whitespace and\
    \ punctuation\n  let clean = text.replace(/[\\W_]/g, '').toLowerCase();\n  //Compares\
    \ clean string to its reverse\n  return clean === clean.split('').reverse().join('');\n\
    }\n", "\ttext = text.toLowerCase();\n\ttext = text.replace(/[^a-z]/g,\"\"); //remove\
    \ everything but letters\n\tvar text_len = text.length;\n\tvar text_reversed =\
    \ \"\";\n\tfor(var i = text_len-1; i>=0; i--){\n\t\ttext_reversed += text[i];\n\
    \t}\n\treturn text_reversed === text;\n}\n", "    return text.replace(/[^A-Za-z0-9]/g,\
    \ '').toLowerCase() ===\n    text.replace(/[^A-Za-z0-9]/g, '').toLowerCase().split('').reverse().join('');\n\
    }", "    //replace all spaces in text with no space\n    text = text.replace(/\
    \ /g, '');\n    //creates two variables that store the length of the text and\
    \ half the length of the text\n    let length = text.length;\n    let half_length\
    \ = Math.floor(length/2);\n    //loops through the half of the text\n    for(let\
    \ i = 0; i< half_length; i++){\n        //makes the text lowercase and stores\
    \ it in a new variable\n        let lower = text.toLowerCase();\n        //checks\
    \ if letter at index i is equal to the letter at index length-i\n        if(lower[i]\
    \ != lower[length-i-1]){\n            //if they are not equal, returns false\n\
    \            return false;\n        }\n    }\n    //if all letters match, returns\
    \ true\n    return true;\n}\n", "\tvar reversed_text = reverse(text);\n\treturn\
    \ text == reversed_text;\n}\n", "    //Remove characters that are not digits or\
    \ letters\n    text = text.replace(/[^0-9a-z]/gi, '');\n    text = text.toLowerCase();\n\
    \n    //Define variables to store the two halves of the text\n    var str1 = \"\
    \";\n    var str2 = \"\";\n\n    //Split the text into two halves\n    if(text.length\
    \ % 2 == 0){\n        str1 = text.substring(0, text.length/2);\n        str2 =\
    \ text.substring(text.length/2, text.length);\n    }\n    else{\n        str1\
    \ = text.substring(0, text.length/2);\n        str2 = text.substring(text.length/2\
    \ + 1, text.length);\n    }\n\n    //Reverse the second half of the text\n   \
    \ str2 = str2.split(\"\").reverse().join(\"\");\n\n    //Check if the reversed\
    \ second half is the same as the first half\n    if(str1 == str2){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}", "  var text = text.replace(/\\\
    s/g, '');\n  var result = text.split('').reverse().join('');\n  return text ===\
    \ result;\n}\n", "    //removes spaces and special characters\n    text = text.replace(/[^A-Za-z0-9]/g,\
    \ '').toLowerCase();\n    if(text.length < 2){\n        return true;\n    }else\
    \ if(text[0] != text[text.length-1]){\n        return false;\n    }else{\n   \
    \     return is_palindrome(text.substring(1, text.length-1));\n    }\n}\n", " \
    \ var reverse = text.split(\"\").reverse().join(\"\");\n  if(text == reverse){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "  var reg = /[^A-Za-z0-9]/g;\n\
    \  text = text.toLowerCase().replace(reg, '');\n  var len = text.length;\n  for(var\
    \ i = 0; i < len/2; i++){\n    if(text[i] !== text[len - 1 - i]){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  let pre = text.replace(/[\\W_]/g,\
    \ \"\").toLowerCase();\n  let rev = pre.split(\"\").reverse().join(\"\");\n  return\
    \ pre === rev;\n}\n", "    //If length of text is 0 or 1 then it is a palindrome\n\
    \    if(text.length === 0 || text.length === 1){\n        return true;\n    }\n\
    \n    //If first and last letter of the string are not equal then it is not a\
    \ palindrome\n    if(text[0] !== text[text.length - 1]){\n        return false;\n\
    \    }\n\n    //Recursively calls the function till the length of the string becomes\
    \ 0 or 1\n    //text.substring(1, text.length - 1) extracts the substring from\
    \ the second character to the second last character\n    return is_palindrome(text.substring(1,\
    \ text.length - 1));\n}\n", "   text = text.replace(/\\W/g, '').toLowerCase();\n\
    \   var rev = text.split('').reverse().join('');\n   return text === rev;\n}\n",
  "\tvar len = text.length;\n\tfor(var i = 0; i < len/2; i++){\n\t\tif(text[i] !=\
    \ text[len-i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  function\
    \ make_lower(string){\n    return string.toLowerCase();\n  }\n  function remove_nonalphanumeric(string){\n\
    \    return string.replace(/[^a-z0-9]/g, \"\");\n  }\n  function normalize(string){\n\
    \    return make_lower(remove_nonalphanumeric(string));\n  }\n  function is_palindrome(string){\n\
    \    return string == string.split(\"\").reverse().join(\"\");\n  }\n  return\
    \ is_palindrome(normalize(text));\n}\n", "    text = text.toLowerCase();\n   \
    \ let reversed = text.split('').reverse().join('');\n    return text === reversed;\n\
    }", "    var text_len = text.length;\n    if(text_len < 2){\n        return true;\n\
    \    }\n    else{\n        var first_letter = text.charAt(0);\n        var last_letter\
    \ = text.charAt(text_len - 1);\n        if(first_letter === last_letter){\n  \
    \          return is_palindrome(text.substring(1, text_len - 1));\n        }\n\
    \        else{\n            return false;\n        }\n    }\n}\n", "\tif(text.length\
    \ === 0){\n\t\treturn true;\n\t}\n\n\ttext = text.toLowerCase();\n\tvar text_rev\
    \ = text.split(\"\").reverse().join(\"\");\n\n\tif(text === text_rev){\n\t\treturn\
    \ true;\n\t}else{\n\t\treturn false;\n\t}\n}\n", "    if(typeof text !== 'string'){\n\
    \        throw 'Argument is not a string';\n    }\n    return text === text.split('').reverse().join('');\n\
    }\n", "  var len = text.length;\n  for(var i = 0; i < Math.floor(len/2); i++){\n\
    \    if(text[i] !== text[len - i - 1]){\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "    var text_array = text.split(\"\");\n    text_array = text_array.filter(function(item)\
    \ {\n        return item.match(/[a-z0-9]/i);\n    });\n    return text_array.toString()\
    \ == text_array.reverse().toString();\n}\n", "  var new_text = \"\";\n  for(var\
    \ i = text.length - 1; i >= 0; i--){\n    new_text += text[i];\n  }\n  if(new_text\
    \ == text){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", " \
    \   return text.replace(/\\W/g, '').toLowerCase() ===\n           text.replace(/\\\
    W/g, '').toLowerCase().split('').reverse().join('');\n}\n", "\tvar new_text =\
    \ \"\";\n\tfor(var i = text.length-1; i >= 0; i--){\n\t\tnew_text += text[i];\n\
    \t}\n\tif(new_text == text){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n\n", "   return text.replace(/[^A-Za-z0-9]/g, '').toLowerCase() ===\n\
    \          text.replace(/[^A-Za-z0-9]/g, '').toLowerCase().split('').reverse().join('');\n\
    }\n", "\ttext = text.toLowerCase();\n\tvar i = 0;\n\tvar j = text.length - 1;\n\
    \twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\
    \t\tj--;\n\t}\n\treturn true;\n}\n", "\tvar result = true;\n\tvar length = text.length;\n\
    \tfor(var i = 0; i < length; i++){\n\t\tif(text[i] != text[length - 1 - i])\n\t\
    \t\tresult = false;\n\t}\n\treturn result;\n}\n", "  return text.split('').reverse().join('')\
    \ === text;\n}\n", "\tif(text.length <= 1){\n\t\treturn true;\n\t}\n\telse{\n\t\
    \tif(text[0] == text[text.length-1]){\n\t\t\treturn is_palindrome(text.substring(1,\
    \ text.length-1));\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n", " \
    \ if(text.length <= 1){\n    return true;\n  }\n  if(text[0] == text[text.length-1]){\n\
    \    return is_palindrome(text.slice(1,text.length-1));\n  }\n  return false;\n\
    }\n", "\tlet left_index = 0;\n\tlet right_index = text.length - 1;\n\twhile(left_index\
    \ < right_index){\n\t\tif(text[left_index] !== text[right_index])\n\t\t\treturn\
    \ false;\n\t\t++left_index;\n\t\t--right_index;\n\t}\n\treturn true;\n}\n", "\t\
    text = text.toLowerCase();\n\tvar length = text.length;\n\tvar front = 0;\n\t\
    var back = length - 1;\n\twhile(front<back){\n\t\twhile(text[front].match(/[\\\
    W_]/)){\n\t\t\tfront++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(text[back].match(/[\\\
    W_]/)){\n\t\t\tback--;\n\t\t\tcontinue;\n\t\t}\n\t\tif(text[front] != text[back]){\n\
    \t\t\treturn false;\n\t\t}\n\t\tfront++;\n\t\tback--;\n\t}\n\treturn true;\n}\n",
  "\tvar returnval = true;\n\tvar compare_array = text.split(\"\");\n\tvar rev_array\
    \ = [];\n\tvar rev_text = \"\";\n\tfor(i=compare_array.length; i>=0; i--){\n\t\
    \trev_array.push(compare_array[i]);\n\t}\n\trev_text = rev_array.join(\"\");\n\
    \tif(rev_text === text){\n\t\treturnval = true;\n\t}\n\telse{\n\t\treturnval =\
    \ false;\n\t}\n\treturn returnval;\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
