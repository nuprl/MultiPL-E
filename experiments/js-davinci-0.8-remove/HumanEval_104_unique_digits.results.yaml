language: js
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //your\
    \ code here\n    var arr = x.filter(function(item){\n      return item.toString().split('').filter(a\
    \ => a % 2 == 0).length === 0\n    })\n    return arr.sort((a,b) => a - b)\n}\n\
    var x = [3,22,109,13,83,5,5];\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var y =\
    \ x.filter(function(digit){\n    return digit < 2;\n  });\n  return y;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmppmjxh4tp.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmppmjxh4tp.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let evenDigit\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(!(x[i] % 2 === 0)){\n\
    \            evenDigit.push(x[i]);\n        }\n    }\n    return evenDigit.sort((a,b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp2oh65hy1.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp2oh65hy1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nvar arr=[];\n\
    var max=0;\nx.forEach(function(item){\n\tvar str=item.toString();\n\tfor(var i=0;i<str.length;i++){\n\
    \t\tif(str[i]%2==0){\n\t\t\tarr.push(item);\n\t\t\tbreak;\n\t\t}\n\t}\n});\nfor(var\
    \ i=0;i<x.length;i++){\n\tif(x[i]>max){\n\t\tmax=x[i];\n\t}\n}\nvar newarr=[];\n\
    var newarr1=[];\nvar count=0;\nfor(var i=0;i<=max;i++){\n\tcount=0;\n\tfor(var\
    \ j=0;j<arr.length;j++){\n\t\tif(i==arr[j]){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count==0){\n\
    \t\tnewarr.push(i);\n\t}\n}\nreturn newarr;\n}\nvar ret = unique_digits([10,2,6,5,6,5,7,5,6,5,3,5,6,5,7,5,6,5,8,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5,7,5,6,5\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsp0t3lxo.js:39\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique_digits\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(num){\n\
    \            return parseInt(num) % 2 !== 0;\n        })) {\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t\t\t\t\n\
    \tvar a = x.map(function(num){\n\t\tvar isUnique = false;\n\t\tvar len = (num+\"\
    \").length;\n\t\tfor(var i = 0; i < len; i++){\n\t\t\tif((num+\"\").charAt(i)%2\
    \ == 0){\n\t\t\t\tisUnique = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ isUnique ? num : -1;\n\t})\n\t.filter(function(num){\n\t\treturn num > 0;\n\t\
    })\n\t.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\treturn a;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpwy9gh_fu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwy9gh_fu.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let numb\
    \ = []\n  for(let i = 0; i < x.length; i++){\n    if(!x[i].toString().match(/[2468]/)){\n\
    \      numb.push(x[i])\n    }\n  }\n  return numb.sort(function(a, b){return a-b})\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpoc84875a.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpoc84875a.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    x.sort();\n\
    \    for(var i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n       \
    \     x.splice(i, 1);\n            i--;\n        }\n    }\n    return x;\n}\n\n\
    var x = [1, 2, 2, 4, 7, 11, 11, 13, 15, 16, 16, 19, 20];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp7nyjv5bh.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7nyjv5bh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ unique(x.reduce((acc,next)=>{\n        return acc+[...next.toString()];\n  \
    \  },[]).filter(x=>x%2!=0).sort((a,b)=>a-b));\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptwjpfv9m.js:6\n    return unique(x.reduce((acc,next)=>{\n    ^\n\
    \nReferenceError: unique is not defined\n    at unique_digits (/tmp/tmptwjpfv9m.js:6:5)\n\
    \    at test (/tmp/tmptwjpfv9m.js:17:20)\n    at Object.<anonymous> (/tmp/tmptwjpfv9m.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var x\
    \ = x.map(function(n) {\n        return n.toString().split('').sort().join('');\n\
    \    });\n  \n    var unique = x.filter(function(item, i, ar){ return ar.indexOf(item)\
    \ === i; });\n  \n    return unique.map(function(n) {\n        return parseInt(n);\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1224,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n   \
    \ at test (/tmp/tmpwexgvncj.js:21:10)\n    at Object.<anonymous> (/tmp/tmpwexgvncj.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1224, 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nvar myArray\
    \ = [1,2,3,4,4,6,7,8,9,10];\n\tfor (var i = 0; i < myArray.length; i++) {\n\t\t\
    if (myArray[i] % 2 == 0) {\n\t\t\tmyArray.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t\
    }\n\tmyArray.sort(function(a, b){return a-b});\n\tconsole.log(myArray);\n\treturn\
    \ myArray;\n}\nunique_digits([1,2,3,4,5,6,7,8,9,10]);\nunique_digits([1,2,3,4,4,6,7,8,9,10]);\n\
    unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,16,18,19,20]);\nunique_digits([10,1,11,12,13,14,15,16,17,18,19,20]);\n\
    unique_digits([100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  7,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at\
    \ test (/tmp/tmp9d02a739.js:27:10)\n    at Object.<anonymous> (/tmp/tmp9d02a739.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 7,\
    \ 9 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 3, 7, 9 ]

    [ 1, 3, 7, 9 ]

    [ 1, 3, 7, 9 ]

    [ 1, 3, 7, 9 ]

    [ 1, 3, 7, 9 ]

    [ 1, 3, 7, 9 ]

    '
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //your\
    \ code here\n    var uniqueArr = []\n    var evenArr = []\n    x.forEach(num =>\
    \ {\n        var numArray = num.toString().split('')\n        var unique = true\n\
    \        var even = false\n        numArray.forEach(digit => {\n            if\
    \ (evenArr.includes(digit)) {\n                even = true\n            }\n  \
    \          if (uniqueArr.includes(digit)) {\n                unique = false\n\
    \            }\n            if (digit % 2 === 0) {\n                evenArr.push(digit)\n\
    \            }\n        })\n        if (unique === true && even === false) {\n\
    \            uniqueArr.push(num)\n        }\n    })\n    return uniqueArr.sort((a,b)\
    \ => a - b)\n}\n\nx = [112, 10, 14, 14, 22, 22, 12, 21, 32, 54, 34, 54, 11, 54]\n\
    \nunique_digits(x)\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  152\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptblc_5pf.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmptblc_5pf.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 152\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar ans\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(!has_even_digit(x[i])){\n\
    \t\t\tans.push(x[i]);\n\t\t}\n\t}\n\treturn ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl1c03nkq.js:8\n\t\tif(!has_even_digit(x[i])){\n\t\t^\n\nReferenceError:\
    \ has_even_digit is not defined\n    at unique_digits (/tmp/tmpl1c03nkq.js:8:3)\n\
    \    at test (/tmp/tmpl1c03nkq.js:20:20)\n    at Object.<anonymous> (/tmp/tmpl1c03nkq.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let arr\
    \ = []\n  for(let i = 0; i < x.length; i++){\n    if(!x[i].toString().includes('2')\
    \ && !x[i].toString().includes('4') && !x[i].toString().includes('6') && !x[i].toString().includes('8')){\n\
    \      arr.push(x[i])\n    }\n  }\n  return arr.sort(function(a, b){return a-b})\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpo78svzyf.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpo78svzyf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  //return\
    \ new array\n  let arr = []\n  //check if there are any even digits in each integer\n\
    \  for(let i = 0; i < x.length; i++){\n    //if true, return the integer\n   \
    \ if(!x[i].toString().includes(\"2\") && !x[i].toString().includes(\"4\") && !x[i].toString().includes(\"\
    6\") && !x[i].toString().includes(\"8\")){\n    arr.push(x[i])\n    }\n  }\n \
    \ //sort array\n  arr.sort(function(a, b){return a-b})\n  return arr\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpk37b1r79.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpk37b1r79.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //return\
    \ [...new Set(x.map(item => [...(item + '')].filter(item => item % 2 !== 0)))].map(item\
    \ => parseInt(item.join('')))\n    return x.filter(item => [...(item + '')].every(item\
    \ => item % 2 !== 0)).sort((a, b) => a - b)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = x.filter(n => !String(n).split('').some(x => x % 2 === 0));\n    return result.sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var newArray\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    var index = x[i].toString().split('');\n\
    \    var check = true;\n    for(var j = 0; j < index.length; j++){\n      if(parseInt(index[j])\
    \ % 2 === 0){\n        check = false;\n      }\n    }\n    if(check){\n      newArray.push(x[i]);\n\
    \    }\n  }\n  return newArray.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    function\
    \ check(y){\n        while(y){\n            var q = y % 10;\n            if(q\
    \ % 2 == 0) return false;\n            y = (y - q) / 10;\n        }\n        return\
    \ true;\n    }\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(check(x[i])) result.push(x[i]);\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpy3z77txs.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy3z77txs.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(x => x.toString().split('').every(y => y % 2 !== 0)).sort((a, b) =>\
    \ a - b);\n}\nunique_digits([121, 12, 2]);\nunique_digits([0, 0, 2, 3, 4, 11,\
    \ 12, 8, 10, 7, 6, 1, 5, 9, 100, 101, 102, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 111,\
    \ 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\
    \ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,\
    \ 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\
    \ 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,\
    \ 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,\
    \ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\
    \ 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\
    \ 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\
    \ 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,\
    \ 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,\
    \ 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,\
    \ 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303,\
    \ 304, 305, 306, 307, 308,\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj11bzjye.js:10\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let digit;\n\
    \    let newArr = [];\n    for(let i = 0; i < x.length; i++){\n        digit =\
    \ x[i].toString().split('');\n        for(let j = 0; j < digit.length; j++){\n\
    \            if(digit[j] % 2 === 0){\n                break;\n            }\n\
    \            if(j === digit.length - 1){\n                newArr.push(digit.join(''));\n\
    \            }\n        }\n    }\n    return newArr.sort((a,b) => a - b);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let uniqueNumbers\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(digitsHasNoEvens(x[i])){\n\
    \            uniqueNumbers.push(x[i]);\n        }\n    }\n    return uniqueNumbers.sort(sortAscending);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpp48gy1ej.js:8\n        if(digitsHasNoEvens(x[i])){\n        ^\n\
    \nReferenceError: digitsHasNoEvens is not defined\n    at unique_digits (/tmp/tmpp48gy1ej.js:8:9)\n\
    \    at test (/tmp/tmpp48gy1ej.js:20:20)\n    at Object.<anonymous> (/tmp/tmpp48gy1ej.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var new_array\
    \ = x.filter(function(i){\n        return i.toString().split('').some(function(d){\n\
    \            return d % 2 === 0;\n        });\n    });\n    return new_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp7jcbawxn.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7jcbawxn.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821513
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let sorted\
    \ = x.filter(el => !(el + '').split('').some(el => el % 2 === 0)).sort((a, b)\
    \ => a - b);\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  \n  let\
    \ result = [];\n  for(let i = 0; i < x.length; i++){\n    let num = x[i];\n  \
    \  let isOdd = false;\n    while(num !== 0){\n      if(num % 2 === 0){\n     \
    \   isOdd = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n\
    \    }\n    if(!isOdd){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var oddArray\
    \ = [];\n  var oddStrings = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().split('').includes('2')\
    \ === false && x[i].toString().split('').includes('4') === false && x[i].toString().split('').includes('6')\
    \ === false && x[i].toString().split('').includes('8') === false){\n      oddArray.push(x[i]);\n\
    \    }\n  }\n  oddArray.sort(function(a, b){return a-b});\n  return oddArray;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpz9x804a_.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpz9x804a_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ newArr = x.map(ele => ele.toString().split('').map(el => Number(el)))\n    const\
    \ combineArr = []\n    for(let i = 0; i < newArr.length; i++){\n        for(let\
    \ j = 0; j < newArr[i].length; j++){\n            combineArr.push(newArr[i][j])\n\
    \        }\n    }\n    const evenArr = combineArr.filter(ele => ele % 2 === 0)\n\
    \    const oddArr = combineArr.filter(ele => ele % 2 !== 0)\n    const sortedArr\
    \ = evenArr.sort((a,b) => a - b)\n    const finalArr = oddArr.sort((a,b) => a\
    \ - b)\n    const doubleArr = [...finalArr, ...sortedArr]\n    const redArr =\
    \ []\n    doubleArr.reduce((acc,cur) => {\n        if(!redArr.includes(cur)){\n\
    \            redArr.push(cur)\n        }\n    }, 0)\n    const finalSortedArr\
    \ = redArr.sort((a,b) => a - b)\n    return finalSortedArr\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n\
    \    at test (/tmp/tmpffnbely5.js:32:10)\n    at Object.<anonymous> (/tmp/tmpffnbely5.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar arr\
    \ = [];\n\tfor(i = 0; i < x.length; i++){\n\t\tvar y = x[i].toString();\n\t\t\
    var z = y.split(\"\");\n\t\tvar count = 0;\n\t\tfor(j = 0; j < z.length; j++){\n\
    \t\t\tif(z[j] % 2 == 0){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\tif(count ==\
    \ 0){\n\t\t\tarr.push(parseInt(y));\n\t\t}\n\t}\n\treturn arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n   let arr\
    \ = []\n   for(let i=0; i<x.length; i++){\n      if(x[i].toString().length ===\
    \ 1){\n         arr.push(x[i])\n      }\n      else{\n         for(let k=0; k<x[i].toString().length;\
    \ k++){\n            if(x[i].toString()[k] % 2 === 0){\n               break\n\
    \            }\n            else if(k === x[i].toString().length-1){\n       \
    \        arr.push(x[i])\n            }\n         }\n      }\n   }\n   arr.sort(function(a,\
    \ b){return a-b})\n   return arr\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar filtered=x.filter(function(num){\n\
    \t\treturn num.toString().split('').every(function(digit){\n\t\t\treturn digit%2!==0;\n\
    \t\t});\n\t});\n\treturn filtered.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique\
    \ = [],\n        item;\n    for(var i = 0; i < x.length; i++){\n        item =\
    \ x[i].toString();\n        for(var j = 0; j < item.length; j++){\n          \
    \  if(item[j] % 2 === 0){\n                break;\n            }\n           \
    \ if(j === item.length - 1){\n                unique.push(parseInt(item));\n \
    \           }\n        }\n    }\n    return unique.sort(function(a, b){return\
    \ a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n      let num = x[i];\n     \
    \ let foundEven = false;\n      while(num > 0){\n        let digit = num % 10;\n\
    \        if(digit % 2 === 0){\n          foundEven = true;\n          break;\n\
    \        }\n        num = Math.floor(num / 10);\n      }\n      if(!foundEven){\n\
    \        arr.push(x[i]);\n      }\n    }\n    arr.sort((a, b) => a - b);\n   \
    \ return arr;\n  }\n  \n  console.log(unique_digits([1, 8, 34, 9]));\n  console.log(unique_digits([2,\
    \ 6, 7, 8, 5, 9, 1]));\n  console.log(unique_digits([123, 66, 7, 8, 9, 101]));\n\
    \  console.log(unique_digits([]));\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 9 ]

    [ 1, 5, 7, 9 ]

    [ 7, 9 ]

    []

    '
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var num\
    \ = x.toString().split('').sort()\n    var arra = []\n    for(var i = 0; i < num.length;\
    \ i++){\n        if(num[i] % 2 != 0){\n            arra.push(num[i])\n       \
    \ }\n    }\n    return arra.join('')\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n',,,111335'\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpf95iuzza.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf95iuzza.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ',,,111335',\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(item){\n\
    \            return item % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    var allNumbers = [0,1,2,3,4,5,6,7,8,9];\n    var oddDigits = [1,3,5,7,9];\n\
    \    // iterate through x\n    for(var i = 0; i < x.length; i++){\n        //\
    \ convert the current number to a string\n        var currNum = x[i].toString();\n\
    \        // turn the current string into an array\n        var currNumArr = currNum.split(\"\
    \");\n        // iterate through the current number\n        for(var j = 0; j\
    \ < currNumArr.length; j++){\n            // check to see if the current number\
    \ is even\n            // if it is, remove it from the array\n            if(allNumbers.indexOf(parseInt(currNumArr[j]))\
    \ % 2 === 0){\n                currNumArr.splice(j, 1);\n            }\n     \
    \   }\n        // join the current number back together\n        // and push it\
    \ to the result array\n        result.push(parseInt(currNumArr.join(\"\")));\n\
    \    }\n    return result.sort(function(a, b){return a-b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  12,\n\
    \  15,\n  33\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at\
    \ test (/tmp/tmp0dzyvbk0.js:34:10)\n    at Object.<anonymous> (/tmp/tmp0dzyvbk0.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 12, 15,\
    \ 33 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  x = x.toString().split('').sort()\n\
    \  return x.filter(function(e, i){\n    return x.indexOf(e) == i\n  })\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ',',\n  '1',\n\
    \  '2',\n  '3',\n  '4',\n  '5'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n\
    \  33\n]\n    at test (/tmp/tmpavfqnual.js:16:10)\n    at Object.<anonymous> (/tmp/tmpavfqnual.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ',', '1',\
    \ '2', '3', '4', '5' ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(x => x%2 != 0);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpnc44mgk2.js:13:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnc44mgk2.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let newArr\
    \ = x.filter(function(a){\n    return a % 2 !== 0;\n  });\n  return newArr.sort(function(a,b){\n\
    \    return a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmps9brut5m.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmps9brut5m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  // For\
    \ example:\n  // x = [321, 421, 342, 234]\n  // result = [321, 234]\n  var result\
    \ = x.filter(num => !num.toString().match(/[02468]/g));\n  return result.sort((a,b)\
    \ => a-b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t// Write\
    \ your code here...\n\tlet no_even_digits = [];\n\tfor (let i = 0; i < x.length;\
    \ i++) {\n\t\tlet new_no = x[i].toString().split('');\n\t\tlet check = 0;\n\t\t\
    for (let j = 0; j < new_no.length; j++) {\n\t\t\tif (new_no[j] % 2 == 0) {\n\t\
    \t\t\tcheck = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (check == 0) {\n\t\t\t\
    no_even_digits.push(x[i]);\n\t\t}\n\t}\n\treturn no_even_digits.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let final\
    \ = []\n    for(let i = 0; i < x.length; i++){\n      let counter = 0\n      let\
    \ temp = x[i].toString().split('')\n      for(let j = 0; j < temp.length; j++){\n\
    \        if(temp[j] % 2 == 0){\n          counter++\n        }\n      }\n    \
    \  if(counter == 0){\n        final.push(x[i])\n      }\n    }\n    return final.sort((a,b)\
    \ => a - b)\n  }\n  console.log(unique_digits([4, 7, 2, 6, 3, 1]))\n  console.log(unique_digits([4,\
    \ 7, 2, 6, 1]))\n  console.log(unique_digits([6, 4, 7, 2, 3, 1]))\n  console.log(unique_digits([6,\
    \ 4, 7, 2, 1]))\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 3, 7 ]

    [ 1, 7 ]

    [ 1, 3, 7 ]

    [ 1, 7 ]

    '
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    if(!x.length)\
    \ return [];\n    let i = 0;\n    let temp = [];\n    while(i < x.length){\n \
    \       if(x[i].toString().split('').every(num => num % 2 !== 0)) temp.push(x[i]);\n\
    \        i++;\n    }\n    return temp.sort((a,b) => a - b);\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar a =\
    \ [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar xString = x[i].toString();\n\
    \t\tfor(var j = 0; j < xString.length; j++){\n\t\t\tvar digit = parseInt(xString[j]);\n\
    \t\t\tif(digit % 2 === 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j === xString.length\
    \ - 1){\n\t\t\t\ta.push(x[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn a.sort(function(a,\
    \ b){return a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var hold\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ > 1){\n            var temp = x[i].toString().split('');\n            for(var\
    \ j = 0; j < temp.length; j++){\n                if(Number(temp[j]) % 2 == 0){\n\
    \                    hold.push(x[i]);\n                    break;\n          \
    \      }\n            }\n        }\n        else{\n            if(x[i] % 2 ==\
    \ 0){\n                hold.push(x[i]);\n            }\n        }\n    }\n   \
    \ for(var i = 0; i < hold.length; i++){\n        for(var j = 0; j < x.length;\
    \ j++){\n            if(hold[i] == x[j]){\n                x.splice(j, 1);\n \
    \           }\n        }\n    }\n    return x;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpw9xbvkg0.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw9xbvkg0.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(a => a % 2 !== 0 && a.toString().split('').find(n => n % 2 == 0) ===\
    \ undefined).sort((a, b) => a - b)\n}\n\nunique_digits([7,3,8,4,6,5])\nunique_digits([4,6,8,7,3,5])\n\
    unique_digits([6,5,7,4,8,3])\nunique_digits([5,7,4,6,3,8])\nunique_digits([7,5,6,4,3,8])\n\
    unique_digits([5,3,4,6,7,8])\nunique_digits([3,5,6,7,8,4])\nunique_digits([5,6,7,8,4,3])\n\
    unique_digits([7,6,8,5,4,3])\nunique_digits([3,4,8,5,6,7])\nunique_digits([8,3,5,6,7,4])\n\
    unique_digits([6,7,5,4,3,8])\nunique_digits([4,6,5,7,8,3])\nunique_digits([6,5,4,7,3,8])\n\
    unique_digits([4,6,7,5,8,3])\nunique_digits([6,7,4,8,5,3])\nunique_digits([4,7,8,6,5,3])\n\
    unique_digits([7,4,8,5,6,3])\nunique_digits([8,4,7,6,5,3])\nunique_digits([8,7,6,5,4,3])\n\
    unique_digits([7,8,5,6,4,3])\nunique_digits([8,5,6,7,4,3])\nunique_digits([5,8,7,6,4,3])\n\
    unique_digits([8,7,6,4,5,3])\nunique_digits([7,8,6,5,4,3])\nunique_digits([6,8,\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplhk4ogbh.js:35\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    \n}\n\
    \nmodule.exports = unique_digits;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpj275l9fz.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj275l9fz.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    // x\
    \ = [12, 32, 44, 99]\n    // output = [99]\n    \n    let sorted_list = x.filter(function(value){\n\
    \        return value.toString().split('').filter(function(value){\n         \
    \   return value % 2 == 0;\n        }).length == 0;\n    }).sort((a,b) => a-b);\n\
    \    return sorted_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ [...new Set(x.toString().split(''))].sort((a,b)=>a-b).join('');\n  }\n  \n \
    \ // Given a list of positive integers x. return a sorted list of all \n  // elements\
    \ that hasn't any even digit.\n  // Note: Returned list should be sorted in increasing\
    \ order.\n  // For example:\n  function isEven(x){\n    return x.toString().split('').every(num=>num%2!==0);\n\
    \  }\n  \n  function unique_digits(lst){\n    return lst.filter(isEven).sort((a,b)=>a-b);\n\
    \  }\n  \n  // Given a string s and an integer k. Return the length of the longest\
    \ \n  // substring in s that contains at most k distinct characters.\n  // For\
    \ example:\n  function length_of_longest_substring(s, k) {\n    let subStr='';\n\
    \    let maxLen=0;\n    for(let i=0;i<s.length;i++){\n      let j=i;\n      while(subStr.includes(s[j])||subStr.length<k){\n\
    \        subStr+=s[j];\n        j++;\n      }\n      maxLen=Math.max(maxLen,subStr.length);\n\
    \      subStr='';\n    }\n    return maxLen;\n  }\n  \n  // Given a string s and\
    \ an integer k. Return the length of the longest \n  // substring in s that contains\
    \ at most k distinct characters.\n  // For example:\n  function length_of_longest_substring(s,\
    \ k) {\n    let subStr='';\n    let maxLen=0;\n    for(let i=0;i<s.length;i++){\n\
    \      let j=i;\n      while(subStr.includes(s[j])||subStr.length<k){\n      \
    \  subStr+=s[j];\n        j++;\n      }\n      maxLen=Math.max(maxLen,subStr.length);\n\
    \      subStr='';\n    }\n    return maxLen;\n  }\n  \n  // Given a list\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar arr\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(x[i].toString().split('').every(function(char){\n\
    \t\t\treturn Number(char) % 2 == 1;\n\t\t})){\n\t\t\tarr.push(x[i]);\n\t\t}\n\t\
    }\n\treturn arr.sort(function(a,b){\n\t\treturn a - b;\n\t});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  const evens\
    \ = [2,4,6,8,0];\n  const odds = [];\n  x.forEach(function(num){\n    num = num.toString().split('');\n\
    \    if(num.filter(function(n){\n      return evens.includes(parseInt(n));\n \
    \   }).length == 0){\n      odds.push(parseInt(num.join('')));\n    }\n  });\n\
    \  return odds.sort(function(a,b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar newArr\
    \ = [];\n\tfor(i=0; i<x.length; i++){\n\t\tvar str = x[i].toString();\n\t\tvar\
    \ count = 0;\n\t\tfor(var j=0; j<str.length; j++){\n\t\t\tif(str[j] % 2 == 0){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\tnewArr.push(x[i]);\n\
    \t\t}\n\t}\n\treturn newArr.sort(function(a,b){return a-b});\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let result\
    \ = [];\n  for(let i = 0; i < x.length; i++){\n    x[i] = x[i].toString().split('');\n\
    \    let temp = 0;\n    for(let j = 0; j < x[i].length; j++){\n      if(x[i][j]\
    \ % 2 === 0){\n        temp = 1;\n      }\n    }\n    if(temp === 0){\n      result.push(x[i].join(''));\n\
    \    }\n  }\n  return result.sort((a,b) => {return a - b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let even\
    \ = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n        if(!((x[i]\
    \ + '').includes('2') || (x[i] + '').includes('4') || (x[i] + '').includes('6')\
    \ || (x[i] + '').includes('8'))){\n            odd.push(x[i]);\n        }\n  \
    \  }\n    odd.sort((a,b) => a - b);\n    return odd;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp8tl35wjs.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8tl35wjs.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let out\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        if(!isEven(x[i])){\n\
    \            out.push(x[i]);\n        }\n    }\n    return out.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvcvlx31v.js:8\n        if(!isEven(x[i])){\n        ^\n\nReferenceError:\
    \ isEven is not defined\n    at unique_digits (/tmp/tmpvcvlx31v.js:8:9)\n    at\
    \ test (/tmp/tmpvcvlx31v.js:20:20)\n    at Object.<anonymous> (/tmp/tmpvcvlx31v.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  function\
    \ isEven(x){\n    return x%2 == 0;\n  }\n  function hasEven(x){\n    var xStr\
    \ = x.toString();\n    var result = xStr.split('').map(e => parseInt(e)).filter(e\
    \ => isEven(e));\n    return result.length > 0;\n  }\n  return x.filter(e => !hasEven(e)).sort((a,b)\
    \ => a-b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  //...\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpq5jwmfte.js:13:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq5jwmfte.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nlet even\
    \ = []\nlet odd = []\nx.map(num => {\n  let digits = num.toString().split('')\n\
    \  let newDigits = digits.map(digit => {\n    if(digit % 2 === 0) even.push(digit)\n\
    \    else if(digit % 2 === 1) odd.push(digit)\n  })\n  return newDigits\n})\n\
    \  return odd.sort()\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '1',\n\
    \  '1',\n  '3',\n  '3',\n  '5'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n\
    \  33\n]\n    at test (/tmp/tmpr19adkxz.js:24:10)\n    at Object.<anonymous> (/tmp/tmpr19adkxz.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '1',\
    \ '1', '3', '3', '5' ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar output\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar y = x[i];\n\t\tif(y.toString().length\
    \ == 1){\n\t\t\tif(y % 2 != 0){\n\t\t\t\toutput.push(y);\n\t\t\t}\n\t\t}\n\t\t\
    else{\n\t\t\tvar spl = y.toString().split(\"\");\n\t\t\tvar count = 0;\n\t\t\t\
    for(var j = 0; j < spl.length; j++){\n\t\t\t\tif(spl[j] % 2 == 0){\n\t\t\t\t\t\
    count++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count == 0){\n\t\t\t\toutput.push(y);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn output.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(num => !num.toString().split('').map(y => parseInt(y)).some(z => z\
    \ % 2 === 0)).sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nvar array\
    \ = [];\nfor(var i = 0; i < x.length; i++){\nif(x[i].toString().split('').every(elem\
    \ => elem % 2 !== 0))\narray.push(x[i]);\n}\nreturn array.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(c => !(''+c).match(/[02468]/g)).sort((a,b) => a-b);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var array\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var bool = true;\n  \
    \      var str = String(x[i]);\n        for(var j = 0; j < str.length; j++){\n\
    \            if(str[j] % 2 === 0){\n                bool = false;\n          \
    \  }\n        }\n        if(bool){\n            array.push(x[i]);\n        }\n\
    \    }\n    return array.sort(function(a, b){return a-b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var i;\n\
    \    var res = [];\n    for(i=0; i<x.length; i++){\n        if(x[i]>9){\n    \
    \        var newArr = x[i].toString().split('');\n            var result = newArr.find(findEven);\n\
    \            if(result === undefined){\n                res.push(x[i]);\n    \
    \        }\n        }\n        else{\n            res.push(x[i]);\n        }\n\
    \    }\n    return res.sort(function(a, b){return a-b});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcw8jyp18.js:11\n            var result = newArr.find(findEven);\n\
    \                                     ^\n\nReferenceError: findEven is not defined\n\
    \    at unique_digits (/tmp/tmpcw8jyp18.js:11:38)\n    at test (/tmp/tmpcw8jyp18.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpcw8jyp18.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //convert\
    \ the given array into string\n    var string = x.toString();\n    //split the\
    \ string to get each element in the array\n    var str = string.split('');\n \
    \   var s = '';\n    //to loop through the array\n    for(var i = 0; i < str.length;\
    \ i++){\n        //to check if the element is even\n        if(str[i] % 2 !==\
    \ 0){\n            //to concatenate the odd numbers and store in a variable\n\
    \            s += str[i];\n        }\n    }\n    //convert the concatenated string\
    \ to array and sort the elements\n    var sorted = s.split('').sort();\n    return\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ',',\n  ',',\n\
    \  ',',\n  '1',\n  '1',\n  '1',\n  '3',\n  '3',\n  '5'\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpg4xrz8_4.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg4xrz8_4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    ',',\
    \ ',', ',',\n    '1', '1', '1',\n    '3', '3', '5'\n  ],\n  expected: [ 1, 15,\
    \ 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(!has_even_digit(x[i])){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,b){\n\
    \        return a-b;\n    });\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp51t0gl05.js:8\n        if(!has_even_digit(x[i])){\n        ^\n\n\
    ReferenceError: has_even_digit is not defined\n    at unique_digits (/tmp/tmp51t0gl05.js:8:9)\n\
    \    at test (/tmp/tmp51t0gl05.js:21:20)\n    at Object.<anonymous> (/tmp/tmp51t0gl05.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ < 2){\n            arr.push(x[i]);\n        }\n        else{\n            for(var\
    \ j = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 == 0){\n                    break;\n                }\n                else\
    \ if(j == x[i].toString().length - 1){\n                    arr.push(x[i]);\n\
    \                }\n            }\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(el => el.toString().split('').every(dig => dig % 2 !== 0)).sort((a,b)\
    \ => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar newArr\
    \ = [];\n\tvar arr = [];\n\tvar count;\n\tfor(var i = 0; i < x.length; i++){\n\
    \t\tcount = 0;\n\t\tarr = x[i].toString().split('');\n\t\tfor(var j = 0; j < arr.length;\
    \ j++){\n\t\t\tif(arr[j] % 2 === 0){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\t\
    if(count === 0){\n\t\t\tnewArr.push(x[i]);\n\t\t}\n\t}\n\treturn newArr.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp_djd2me2.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_djd2me2.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ unique_only_odd = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i]\
    \ % 2 !== 0){\n            unique_only_odd.push(x[i]);\n        }\n    }\n   \
    \ return unique_only_odd.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp58mdv2sq.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp58mdv2sq.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let a\
    \ = x.sort((a,b)=>a-b);\n    return a.filter(e=>!(e.toString().match(/[02468]/g)));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let holder\
    \ = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().length ===\
    \ 1){\n      holder.push(x[i]);\n    } else {\n      for(let j = 0; j < x[i].toString().length;\
    \ j++){\n        if(x[i].toString()[j] % 2 === 0){\n          break;\n       \
    \ } else if(j === x[i].toString().length - 1){\n          holder.push(x[i]);\n\
    \        }\n      }\n    }\n  }\n  return holder.sort((a,b) => a - b);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar uniqueArr\
    \ = []\n\tfor(var i = 0; i < x.length; i++){\n\t\tx[i] = x[i].toString().split('');\n\
    \t\tfor(var j = 0; j < x[i].length; j++){\n\t\t\tif(x[i][j] % 2 === 0){\n\t\t\t\
    \tdelete x[i];\n\t\t\t}\n\t\t}\n\t\tif(x[i] !== undefined){\n\t\t\tuniqueArr.push(parseInt(x[i].join('')));\n\
    \t\t}\n\t}\n\tuniqueArr.sort(function(a,b){return a-b});\n\treturn uniqueArr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcjjamrlb.js:9\n\t\tfor(var j = 0; j < x[i].length; j++){\n\t\t\
    \                        ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at unique_digits (/tmp/tmpcjjamrlb.js:9:27)\n    at test (/tmp/tmpcjjamrlb.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpcjjamrlb.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(n => n.toString().split('').every(i => Number(i) % 2))\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp1gq6m2x_.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1gq6m2x_.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let oddDigits\
    \ = [];\n  let evenDigits = [];\n  let sortedDigits = [];\n  let numberDigits\
    \ = [];\n  for(let i = 0; i < x.length; i++){\n    numberDigits.push(x[i].toString());\n\
    \  }\n  for(let i = 0; i < numberDigits.length; i++){\n    let splitDigits = numberDigits[i].split('');\n\
    \    for(let j = 0; j < splitDigits.length; j++){\n      if(splitDigits[j] % 2\
    \ === 0){\n        evenDigits.push(numberDigits[i]);\n      }\n    }\n  }\n  for(let\
    \ i = 0; i < numberDigits.length; i++){\n    if(evenDigits.indexOf(numberDigits[i])\
    \ === -1){\n      oddDigits.push(numberDigits[i]);\n    }\n  }\n  for(let i =\
    \ 0; i < oddDigits.length; i++){\n    oddDigits[i] = parseInt(oddDigits[i]);\n\
    \  }\n  oddDigits.sort(function(a, b){return a-b});\n  return oddDigits;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var nums\
    \ = [];\n    var str;\n    var contains_even_digit = false;\n    for(var i = 0;\
    \ i < x.length; i++){\n        str = String(x[i]);\n        for(var j = 0; j <\
    \ str.length; j++){\n            if(parseInt(str[j]) % 2 == 0){\n            \
    \    contains_even_digit = true;\n                break;\n            }\n    \
    \    }\n        if(!contains_even_digit){\n            nums.push(x[i]);\n    \
    \    }\n        contains_even_digit = false;\n    }\n    return nums.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var odd_digits_list\
    \ = [];\n    var temp = \"\"\n    for(var i = 0; i < x.length; i++){\n       \
    \ temp = x[i].toString();\n        var odd_digits = true;\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   odd_digits = false;\n            }\n        }\n        if(odd_digits == true){\n\
    \            odd_digits_list.push(x[i]);\n        }\n    }\n    return odd_digits_list.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(function(y){\n    y = y.toString().split('');\n    for(var i = 0; i\
    \ < y.length; i++){\n      if(y[i] % 2 === 0){\n        return false;\n      }\n\
    \    }\n    return true;\n  }).sort(function(a,b){\n    return a - b;\n  });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var a =\
    \ x.map(function(el){\n    var b = el.toString().split('');\n    var result =\
    \ true;\n    for(var i = 0; i < b.length; i++){\n      if(b[i] % 2 === 0){\n \
    \       result = false;\n      }\n    }\n    return result;\n  });\n  return x.filter(function(el,i){\n\
    \    return a[i];\n  }).sort(function(a,b){\n    return a - b;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var sorted\
    \ = x.sort((a,b) => a-b)\n    var oddArr = sorted.filter(integer => {\n      \
    \  return integer.toString().split('').every(num => {\n            return parseInt(num)\
    \ % 2 != 0;\n        })\n    })\n    return oddArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newList\
    \ = [];\n    x.forEach(function(x){\n        if(x.toString().length === 1 && x\
    \ % 2 != 0){\n            newList.push(x);\n        }else if(x.toString().length\
    \ === 2 && (x % 2 != 0) && (x % 10 % 2 != 0)){\n            newList.push(x);\n\
    \        }else if(x.toString().length === 3 && (x % 2 != 0) && (x % 10 % 2 !=\
    \ 0) && (Math.floor(x/10) % 2 != 0)){\n            newList.push(x);\n        }else\
    \ if(x.toString().length === 4 && (x % 2 != 0) && (x % 10 % 2 != 0) && (Math.floor(x/10)\
    \ % 2 != 0) && (Math.floor(x/100) % 2 != 0)){\n            newList.push(x);\n\
    \        }else if(x.toString().length === 5 && (x % 2 != 0) && (x % 10 % 2 !=\
    \ 0) && (Math.floor(x/10) % 2 != 0) && (Math.floor(x/100) % 2 != 0) && (Math.floor(x/1000)\
    \ % 2 != 0)){\n            newList.push(x);\n        }\n    });\n    return newList.sort();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpd_krhpdz.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd_krhpdz.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var odd\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var d = x[i].toString().split('');\n\
    \        var count = 0;\n        for(var j = 0; j < d.length; j++){\n        \
    \    if(d[j] % 2 == 0){\n                count += 1;\n            }\n        }\n\
    \        if(count == 0){\n            odd.push(x[i]);\n        }\n    }\n    return\
    \ odd.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var filterArr\
    \ = x.filter(function(num){\n    var digits = String(num).split('');\n    return\
    \ digits.every(function(digit){\n      return Number(digit) % 2 !== 0;\n    });\n\
    \  });\n  return filterArr.sort(function(a,b){\n    return a - b;\n  });\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    \n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpjg98ji5p.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjg98ji5p.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nvar y = x.filter(function(val){\n\
    var evens = val.toString().split('').filter(function(digit){\n    return parseInt(digit)\
    \ % 2 === 0;\n});\nreturn evens.length === 0;\n});\nreturn y.sort(function(a,b){return\
    \ a-b});\n}\nunique_digits([1,22,44,11]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(e => e.toString().split('').every(e => Number(e) % 2 != 0)).sort((a,b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let newArr\
    \ = [];\n    x.forEach(n => {\n        if(String(n).split('').every(num => num\
    \ % 2 === 1)) {\n            newArr.push(n);\n        }\n    });\n    return newArr.sort((a,b)\
    \ => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ y = x.map(x => x.toString().split('').map(x => parseInt(x)).reduce((a, b) =>\
    \ a + b))\n    const z = []\n    y.forEach(x => {\n        if(x % 2 === 1){\n\
    \            z.push(x)\n        }\n    })\n    const sorted = z.sort(function(a,\
    \ b){return a-b})\n    return sorted\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpokyny3k6.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpokyny3k6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //x =\
    \ [1,2,3,4,5,6,7,8,9]\n    return x.filter(a => a.toString().split('').every(b\
    \ => b % 2 != 0))\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpnqy_9gwf.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqy_9gwf.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(function(a){\n    return a.toString().split('').some(function(b){\n\
    \      return b % 2 == 0;\n    }) === false;\n  });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpheyt0mof.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpheyt0mof.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tlet y =\
    \ [];\n\tfor(let i = 0; i < x.length; i++){\n\t\tif(x[i].toString().indexOf(\"\
    2\") === -1 &&\n\t\t\tx[i].toString().indexOf(\"4\") === -1 &&\n\t\t\tx[i].toString().indexOf(\"\
    6\") === -1 &&\n\t\t\tx[i].toString().indexOf(\"8\") === -1){\n\t\t\ty.push(x[i]);\n\
    \t\t}\n\t}\n\ty.sort(function(a, b){return a-b});\n\treturn y;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpf1a9xv87.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpf1a9xv87.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var odds\
    \ = [];\n    x.map(num => {\n        if(num % 2 !== 0 && !hasEven(num)){\n   \
    \         odds.push(num);\n        }\n    });\n    return odds.sort((a,b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnyhj92yo.js:8\n        if(num % 2 !== 0 && !hasEven(num)){\n  \
    \                 ^\n\nReferenceError: hasEven is not defined\n    at /tmp/tmpnyhj92yo.js:8:20\n\
    \    at Array.map (<anonymous>)\n    at unique_digits (/tmp/tmpnyhj92yo.js:7:7)\n\
    \    at test (/tmp/tmpnyhj92yo.js:20:20)\n    at Object.<anonymous> (/tmp/tmpnyhj92yo.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar evenNum\
    \ = []\n\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(x[i] % 2 === 0){\n\t\t\t\
    evenNum.push(x[i])\n\t\t}\n\t}\n\treturn evenNum\n}\nvar nums = [2,3,5,6,3,6,7,8,9,0,5,6,4,4,4,9]\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpqumsdx9n.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqumsdx9n.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(x[i].toString().split('').every(function(value){\n\
    \t\t\treturn value % 2 === 1;\n\t\t})){\n\t\t\tresult.push(x[i]);\n\t\t}\n\t}\n\
    \treturn result.sort(function(a, b){\n\t\treturn a - b;\n\t});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var str,\
    \ num;\n  var d = [];\n  for(var i = 0; i < x.length; i++){\n    str = x[i].toString();\n\
    \    num = parseInt(str[0]);\n    for(var j = 1; j < str.length; j++){\n     \
    \ if(num % 2 == 0){\n        num = false;\n        break;\n      }\n      num\
    \ = parseInt(str[j]);\n    }\n    if(num !== false){\n      d.push(x[i]);\n  \
    \  }\n  }\n  return d.sort(function(a, b){return a - b});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  152\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmppj2v2jqb.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmppj2v2jqb.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 152\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    // console.log(x.toString().split(''));\n    var array = x.toString().split('');\n\
    \    // console.log(array);\n    // console.log(array.length);\n    for(var i\
    \ = 0; i < array.length; i++){\n        if(array[i] % 2 != 0){\n            result.push(array[i]);\n\
    \        }\n    }\n    console.log(result);\n}\nunique_digits(247)\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp7m0uc2dg.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7m0uc2dg.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ '7' ]\n[\n  '1', '5', ',',\n  '3', '3', ',',\n  '1', ',', '1'\n]\n"
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = []\n    for(let i = 0; i < x.length; i++){\n        // console.log(x[i])\n\
    \        let flag = true\n        while(x[i] > 0){\n            // console.log(x[i])\n\
    \            if((x[i] % 10) % 2 === 0){\n                flag = false\n      \
    \          break\n            }\n            x[i] = Math.floor(x[i] / 10)\n  \
    \      }\n        if(flag === true){\n            result.push(x[i])\n        }\n\
    \    }\n    return result\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpf9nfcnko.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf9nfcnko.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t\n\tvar\
    \ unique_digits_check = x.map(function(x){\n\t\tvar string_num = String(x);\n\t\
    \tfor(var i = 0; i < string_num.length; i++){\n\t\t\tif(string_num[i] % 2 ===\
    \ 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t});\n\t\n\t\
    var answer = x.filter(function(x, index){\n\t\treturn unique_digits_check[index];\n\
    \t});\n\t\n\treturn answer;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpe5olmqlk.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe5olmqlk.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [],\n        z = [],\n        a = 0;\n    for(var i = 0; i < x.length; i++){\n\
    \        y = x[i].toString().split('');\n        z = y.map(Number);\n        for(var\
    \ j = 0; j < z.length; j++){\n            if(z[j] % 2 == 0){\n               \
    \ a++;\n            }\n        }\n        if(a === 0){\n            console.log(x[i]);\n\
    \        }\n        a = 0;\n    }\n}\nunique_digits([1,11,21,31,41,51,61,71,81,91,100]);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpi56izf4q.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi56izf4q.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1

    11

    31

    51

    71

    91

    15

    33

    1

    '
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(function(i){\n    if(i.toString().includes('2') === false && i.toString().includes('4')\
    \ === false && i.toString().includes('6') === false && i.toString().includes('8')\
    \ === false){\n      return i;\n    }\n  }).sort(function(a,b){\n    return a-b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpbn6j98vh.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpbn6j98vh.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nvar new_array=[];\n\
    for(var i=0;i<x.length;i++){\nif(x[i]%2!=0){\nnew_array.push(x[i]);\n}\n}\nreturn\
    \ new_array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpkjxxd6v1.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkjxxd6v1.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var sortedList\
    \ = x.sort(function(a, b){return a-b});\n    console.log(sortedList);\n    var\
    \ arrToRemove = [];\n    for(var i = 0; i < sortedList.length; i++){\n       \
    \ if(sortedList[i].toString().includes(\"2\") || sortedList[i].toString().includes(\"\
    4\") || sortedList[i].toString().includes(\"6\") || sortedList[i].toString().includes(\"\
    8\")){\n            arrToRemove.push(sortedList[i]);\n        }\n    }\n    var\
    \ finalArr = sortedList.filter(function(x){return !arrToRemove.includes(x)});\n\
    \    return finalArr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp5vye8_j_.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5vye8_j_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 15, 33, 1422 ]

    [ 10, 152, 323, 1422 ]

    '
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(num => String(num).split('').every(num => num % 2 !== 0)).sort((a,\
    \ b) => a - b)\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let r\
    \ = []\n    for(i=0;i<x.length;i++){\n        let found = false\n        for(j=0;j<x[i].toString().length;j++){\n\
    \            if(x[i].toString()[j]%2==0){\n                found = true\n    \
    \            break\n            }\n        }\n        if(!found){\n          \
    \  r.push(x[i])\n        }\n    }\n    return r.sort((a,b)=>a-b)\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let total\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let currStr = x[i].toString();\n\
    \        let isUnique = true;\n        for(let j = 0; j < currStr.length; j++){\n\
    \            if(currStr[j] % 2 === 0){\n                isUnique = false;\n  \
    \          }\n        }\n        if(isUnique){\n            total.push(x[i]);\n\
    \        }\n    }\n    return total.sort((a,b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ r = []\n    for(let i = 0; i < x.length; i++){\n        const el = x[i]\n  \
    \      const hasEven = hasEvenDigit(el)\n        if(!hasEven){\n            r.push(el)\n\
    \        }\n    }\n    return r\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbtgdgasd.js:9\n        const hasEven = hasEvenDigit(el)\n     \
    \                   ^\n\nReferenceError: hasEvenDigit is not defined\n    at unique_digits\
    \ (/tmp/tmpbtgdgasd.js:9:25)\n    at test (/tmp/tmpbtgdgasd.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpbtgdgasd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar even_digit_nums\
    \ = [];\n\tvar odd_digit_nums = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\t\
    var current_digit = x[i];\n\t\tif(current_digit % 2 == 0){\n\t\t\teven_digit_nums.push(current_digit);\n\
    \t\t}else{\n\t\t\todd_digit_nums.push(current_digit);\n\t\t}\n\t}\n\treturn odd_digit_nums;\n\
    }\n\nvar sample_list = [31,32,34,53,3,75,43,63,2,4,8,9];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpxuyiqlrx.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxuyiqlrx.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar hasOdd = true;\n\t\tvar\
    \ num = x[i].toString();\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tif(parseInt(num[j])\
    \ % 2 === 0){\n\t\t\t\thasOdd = false;\n\t\t\t}\n\t\t}\n\t\tif(hasOdd){\n\t\t\t\
    result.push(x[i]);\n\t\t}\n\t}\n\treturn result.sort(function(a,b){\n\t\treturn\
    \ a - b;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  // Write\
    \ your code here\n  let arr1 = []\n  for(i of x){\n    if(i.toString().length\
    \ == 1){\n      arr1.push(i)\n    }else{\n      let arr2 = i.toString().split('')\n\
    \      let a = arr2.filter(i => {\n        return i%2 == 0\n      })\n      if(a.length\
    \ == 0){\n        arr1.push(parseInt(arr2.join('')))\n      }\n    }\n  }\n  return\
    \ arr1.sort(function(a, b){return a-b})\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var numbers = x[i].toString().split('').map(Number);\n\
    \        for(var j = 0; j < numbers.length; j++){\n            if(numbers[j] %\
    \ 2 === 0){\n                break;\n            } else if(j === numbers.length\
    \ - 1){\n                result.push(x[i]);\n            }\n        }\n    }\n\
    \    return result.sort(function(a, b){return a - b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(y => y.toString().split('').every(z => parseInt(z) % 2 !== 0)).sort((a,\
    \ b) => a - b);\n}\n\nconst x = [3, 11, 13, 15, 119];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let output\
    \ = []\n    for(let i=0; i<x.length; i++){\n        if(x[i].toString().split('').every(x\
    \ => x%2 != 0)){\n            output.push(x[i])\n        }\n    }\n    return\
    \ output.sort((a,b) => a-b)\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let arr\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let g = x[i].toString();\n\
    \        for(let j = 0; j < g.length; j++){\n            if(g[j] % 2 === 0){\n\
    \                break;\n            }\n            if(j === g.length - 1){\n\
    \                arr.push(x[i]);\n            }\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(function(n){\n      return !(/[02468]/g).test(n);\n    }).sort(function(a,b){\n\
    \      return a - b;\n    });\n  }\n  \n  console.log(unique_digits([5, 4, 7,\
    \ 9, 0, 1, 5, 9, 4, 1, 5, 9, 0, 3, 5, 9]));\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 1, 3, 5, 5,\n  5, 5, 7, 9, 9,\n  9, 9\n]\n"
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let unique\
    \ = [];\n    x.forEach(function(item){\n        item = item.toString();\n    \
    \    let isUnique = true;\n        for(let i = 0; i < item.length; i++){\n   \
    \         if(item[i] % 2 === 0){\n                isUnique = false;\n        \
    \    }\n        }\n        if(isUnique){\n            unique.push(item);\n   \
    \     }\n    });\n    return unique.sort();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '135',\n\
    \  '31'\n]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpe9711afg.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe9711afg.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '135', '31'\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var sort\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().indexOf('2')\
    \ < 0 \n           && x[i].toString().indexOf('4') < 0 \n           && x[i].toString().indexOf('6')\
    \ < 0 \n           && x[i].toString().indexOf('8') < 0){\n            sort.push(x[i]);\n\
    \        }\n    }\n    return sort.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpsf_ztjw3.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpsf_ztjw3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let res\
    \ = x.filter( (v) => {\n        if ( v.toString().includes('0') || v.toString().includes('2')\
    \ ||\n            v.toString().includes('4') || v.toString().includes('6') ||\n\
    \            v.toString().includes('8') ){\n            return false;\n      \
    \  }\n        return true;\n    })\n    res.sort( (a,b) => a-b);\n    return res;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  return\
    \ x.filter(y => !/[24680]/.test(y.toString())).sort((a,b) => a-b);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(y => y.toString().split('').map(a => parseInt(a)).filter(b => b % 2\
    \ != 0).length == y.toString().split('').length).sort((a,b) => a - b);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let arr\
    \ = x.filter(a => a % 2 == 1);\n  return arr.sort((a, b) => a - b);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpt83o_jw6.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpt83o_jw6.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    x.forEach(element => {\n        let isEven = false;\n        while(element\
    \ > 0) {\n            if (element % 2 === 0) {\n                isEven = true;\n\
    \                break;\n            }\n            element = Math.floor(element\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(element);\n\
    \        }\n    });\n    return result.sort((a, b) => a - b);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpax3ch7f4.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpax3ch7f4.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\nlet uniqueDigits\
    \ = [];\nx.forEach(element => {\n    let str = element.toString();\n    let flag\
    \ = true;\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 ===\
    \ 0){\n            flag = false;\n        }\n    }\n    if(flag){\n        uniqueDigits.push(element);\n\
    \    }\n});\nreturn uniqueDigits.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var even_digits\
    \ = [];\n    var sorted_x = x.sort(function(a, b){return a-b});\n    var non_even_digits\
    \ = [];\n    for(var i = 0; i < sorted_x.length; i++){\n        if(String(sorted_x[i]).indexOf('2')\
    \ != -1 || String(sorted_x[i]).indexOf('4') != -1 || String(sorted_x[i]).indexOf('6')\
    \ != -1 || String(sorted_x[i]).indexOf('8') != -1){\n            even_digits.push(sorted_x[i]);\n\
    \        }\n    }\n    for(var j = 0; j < sorted_x.length; j++){\n        if(even_digits.indexOf(sorted_x[j])\
    \ == -1){\n            non_even_digits.push(sorted_x[j]);\n        }\n    }\n\
    \    return non_even_digits;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp2qcdot7g.js:27:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp2qcdot7g.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique\
    \ = x.filter(i => i % 2 != 0);\n    unique.sort(function(a, b){return a-b});\n\
    \    return unique;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp7q0o279p.js:17:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7q0o279p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var arr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes('2')\
    \ || x[i].toString().includes('4')\n            || x[i].toString().includes('6')\
    \ || x[i].toString().includes('8')){\n            continue;\n        }\n     \
    \   else{\n            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpqoodk9ou.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpqoodk9ou.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let result\
    \ = x.filter(i => !i.toString().match(/[24680]/g));\n  result.sort((a,b) => a\
    \ - b);\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    // base\
    \ case is when the array is empty\n    if(x.length == 0){\n        return [];\n\
    \    }\n    // if the first element in the array meets the condition\n    if(!(x[0].toString().includes(\"\
    2\") || x[0].toString().includes(\"4\") ||\n        x[0].toString().includes(\"\
    6\") || x[0].toString().includes(\"8\"))){\n            //recursively call the\
    \ function, slicing the first element\n            return [x[0]].concat(unique_digits(x.slice(1)));\n\
    \        }\n    // if the first element in the array does not meet the condition\n\
    \    else{\n        //recursively call the function, slicing the first element\n\
    \        return unique_digits(x.slice(1));\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpn09kr34k.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn09kr34k.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tfunction\
    \ isEven(i){\n\t\treturn i % 2 === 0;\n\t}\n\tfunction toString(x){\n\t\treturn\
    \ x.toString();\n\t}\n\tfunction split(s){\n\t\treturn s.split('');\n\t}\n\tfunction\
    \ isNotEven(s){\n\t\treturn s.every(isEven) === false;\n\t}\n\tfunction flatten(x){\n\
    \t\treturn x.reduce(function(a,b){\n\t\t\treturn a.concat(b);\n\t\t});\n\t}\n\t\
    function filterIsNotEven(arr){\n\t\treturn arr.filter(isNotEven);\n\t}\n\tfunction\
    \ mapToString(arr){\n\t\treturn arr.map(toString);\n\t}\n\tfunction mapSplit(arr){\n\
    \t\treturn arr.map(split);\n\t}\n\tfunction mapToNumber(arr){\n\t\treturn arr.map(Number);\n\
    \t}\n\tfunction sort(arr){\n\t\treturn arr.sort(function(a,b){\n\t\t\treturn a\
    \ - b;\n\t\t});\n\t}\n\t// write your code here\n\tlet arr = mapToString(x);\n\
    \tlet arr2 = mapSplit(arr);\n\tlet arr3 = filterIsNotEven(arr2);\n\tlet arr4 =\
    \ flatten(arr3);\n\tlet arr5 = mapToNumber(arr4);\n\tlet arr6 = sort(arr5);\n\t\
    return arr6;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  2,\n  2,\n  3,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  15,\n  33\n]\n    at test (/tmp/tmpzd39pi1j.js:54:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzd39pi1j.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 1, 2, 2,\n    3, 3, 4, 5\n  ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ newArr = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(x\
    \ => x % 2 !== 0)){\n            newArr.push(x[i]);\n        }\n    }\n    return\
    \ newArr.sort((a,b) => a - b);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let y\
    \ = x.filter(function(num){\n        let str = num.toString();\n        for(let\
    \ i = 0; i < str.length; i++){\n            if(str[i] % 2 === 0){\n          \
    \      return false;\n            }\n        }\n        return true;\n    })\n\
    \    return y.sort(function(a,b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n//     x\
    \ = [1234, 1235, 1232, 12, 24, 145]\n    return x.filter(el => el.toString().split('').every(e\
    \ => e % 2 !== 0))\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9fn8my7q.js:19\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\treturn\
    \ x.filter(function(e){\n\t\treturn [...e.toString()].map(function(e){return parseInt(e)}).find(function(e){return\
    \ e%2==0})===undefined\n\t}).sort()\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpaekhzg77.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaekhzg77.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    // loop\
    \ over the input array\n    // check if the item is even\n    // if it is even,\
    \ remove it from the list\n    var evens = [];\n    var odds = [];\n    for (var\
    \ i = 0; i < x.length; i++){\n        if (x[i] % 2 === 0){\n            evens.push(x[i]);\n\
    \        } else {\n            odds.push(x[i]);\n        }\n    }\n    return\
    \ odds;\n}\n\nvar list = [111, 222, 333, 444, 555, 666, 777, 888, 999];\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp9kf_dxi8.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9kf_dxi8.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(e=>e.toString().split('').every(e=>e%2===1)).sort((a,b)=>a-b)\n  }\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        if(num.indexOf('2') === -1 && num.indexOf('4') === -1 && num.indexOf('6')\
    \ === -1 && num.indexOf('8') === -1){\n            result.push(num);\n       \
    \ }\n    }\n    return result.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '10'\n]\n\
    \nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpx6tzgro4.js:22:10)\n \
    \   at Object.<anonymous> (/tmp/tmpx6tzgro4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '10' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  // console.log(x)\n\
    \  // var sorted = x.sort(function(a, b){return a-b});\n  // console.log(sorted)\n\
    \  // var evenDigits = [];\n  // var oddDigits = [];\n  // for(var i = 0; i <\
    \ sorted.length; i++){\n  //   if(sorted[i] % 2 === 0){\n  //     evenDigits.push(sorted[i]);\n\
    \  //   } else {\n  //     oddDigits.push(sorted[i]);\n  //   }\n  // }\n  //\
    \ return oddDigits;\n  return x.filter(num =>{\n    let arr = num.toString().split('')\n\
    \    return arr.every(num => num % 2 !== 0)\n  }).sort(function(a, b){return a-b})\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar x =\
    \ [99, 66, 33, 22, 11];\n\tfor (var i = 0; i < x.length; i++) {\n\t\tif (x[i]\
    \ < 11) {\n\t\t\tfor (var j = 0; j < x.length; j++) {\n\t\t\t\tconsole.log(x[j]);\n\
    \t\t\t}\n\t\t}\n\t}\n}\nunique_digits();\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpkzine_kw.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkzine_kw.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    for(let i=0; i<x.length; i++){\n        let digits = x[i].toString().split('');\n\
    \        let unique = true;\n        for(let j=0; j<digits.length; j++){\n   \
    \         if(digits[j]%2==0){\n                unique = false;\n            }\n\
    \        }\n        if(unique){\n            result.push(x[i]);\n        }\n \
    \   }\n    return result.sort((a,b)=>a-b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  \n  //Sort\
    \ the array and call it x\n  var x = x.sort(function(a, b){return a-b});\n  \n\
    \  //Declare array to hold our results\n  var results = [];\n  \n  //Loop through\
    \ x\n  for(var i = 0; i < x.length; i++){\n    \n    //Convert each number to\
    \ a string\n    var str = x[i].toString();\n    \n    //Declare a variable to\
    \ hold a boolean, defaulted to true, to check\n    //for even numbers\n    var\
    \ even = true;\n    \n    //Loop through each number in the array, as a string\n\
    \    for(var j = 0; j < str.length; j++){\n      \n      //Check if each number\
    \ is divisible by 2 and if it is, then set even\n      //to false\n      if(str[j]\
    \ % 2 === 0){\n        even = false;\n      }\n    }\n    \n    //If even is still\
    \ true, then we push that number to our results array\n    if(even){\n      results.push(parseInt(str));\n\
    \    }\n  }\n  \n  //Return the results array\n  return results;\n}\n\nvar x =\
    \ [122, 422, 623, 234, 854, 23, 234, 12, 34, 77, 77, 77, 77, 77, 77, 77, 77, 88,\
    \ 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,\
    \ 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,\
    \ 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,\
    \ 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,\
    \ 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcznhoy9m.js:44\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t\n\t//x\
    \ = Math.abs(x);\n\t//var result = x.toString().split('').sort();\n\t//console.log(result);\n\
    \t//return result;\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var y\
    \ = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\n\t\n\t\n\tvar result = x.toString().split('').sort();\n\t\
    return result;\n\t\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var y\
    \ = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\n\t\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var\
    \ y = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\n\t\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var\
    \ y = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\n\t\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var\
    \ y = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\n\t\n\t\n\t\n\t//var result = [];\n\t//while(x>0){\n\t\t//var\
    \ y = x%10;\n\t\t//result.push(y);\n\t\t//x = Math.floor(x/10);\n\t//}\n\t//result.sort();\n\
    \t//return result;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4k8vbv4k.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var count\
    \ = 0;\n  var index = 0;\n  var index_t = 0;\n  var temp = [];\n  var temp_s =\
    \ [];\n  var total = [];\n  var number = x.toString();\n  while(number.length\
    \ > index){\n    if(number[index] % 2 == 0){\n      temp[index_t] = number[index];\n\
    \      index_t++;\n    }\n    index++;\n  }\n  if(temp.length == 0){\n    return\
    \ x;\n  }\n  else{\n    return;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpxic8kyh6.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxic8kyh6.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n   var b\
    \ = [];\n   for(var i = 0; i < x.length; i++){\n      var n = x[i];\n      var\
    \ t = n.toString();\n      for(var j = 0; j < t.length; j++){\n         if(t[j]\
    \ % 2 == 0){\n            b.push(t);\n         }\n      }\n   }\n   return b;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1422',\n\
    \  '1422',\n  '1422'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n\
    ]\n    at test (/tmp/tmpm60260ch.js:23:10)\n    at Object.<anonymous> (/tmp/tmpm60260ch.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1422',\
    \ '1422', '1422' ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var a=[]\n\
    \    for(var i=0;i<x.length;i++){\n        var is_unique=true\n        var ele=x[i]\n\
    \        while(ele>0){\n            if(ele%2==0){\n                is_unique=false\n\
    \                break\n            }\n            ele=Math.floor(ele/10)\n  \
    \      }\n        if(is_unique){\n            a.push(x[i])\n        }\n    }\n\
    \    return a\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpr5x02dfi.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr5x02dfi.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var y =\
    \ x.filter(function(a){\n    var str = a.toString();\n    for(var i = 0; i < str.length;\
    \ i++){\n      if(str[i]%2===0){\n        return false;\n      }\n    }\n    return\
    \ true;\n  });\n  return y.sort(function(a,b){return a-b;});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var filtered\
    \ = x.filter(function(num){\n      return isOdd(num)\n    })\n    return filtered.sort(function(a,b){\n\
    \      return a-b\n    })\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyqstax1x.js:7\n      return isOdd(num)\n      ^\n\nReferenceError:\
    \ isOdd is not defined\n    at /tmp/tmpyqstax1x.js:7:7\n    at Array.filter (<anonymous>)\n\
    \    at unique_digits (/tmp/tmpyqstax1x.js:6:22)\n    at test (/tmp/tmpyqstax1x.js:19:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyqstax1x.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    for(var\
    \ i = 0; i < x.length; i++){\n        var count = 0;\n        for(var j = 0; j\
    \ < x[i].toString().length; j++){\n            if(x[i].toString()[j] % 2 === 0){\n\
    \                count++\n            }\n        }\n        if(count === 0){\n\
    \            console.log(x[i])\n        }\n    }\n}\n\nunique_digits([10, 30,\
    \ 11, 20, 33, 50, 40, 32, 70, 72])\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpy0gmbj40.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy0gmbj40.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    33

    15

    33

    1

    '
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var numArr\
    \ = x.sort();\n  var noEvenArr = [];\n  var map = {};\n  var mapSet = new Set();\n\
    \  for(let i = 0; i < numArr.length; i++){\n    var even = false;\n    while(numArr[i]\
    \ > 0){\n      var digit = numArr[i] % 10;\n      if(digit % 2 === 0){\n     \
    \   even = true;\n        break;\n      }\n      numArr[i] = Math.floor(numArr[i]\
    \ / 10);\n    }\n    if(!even){\n      if(!map[numArr[i]]){\n        map[numArr[i]]\
    \ = true;\n        noEvenArr.push(numArr[i]);\n      }\n    }\n  }\n  return noEvenArr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmposa1uw1n.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmposa1uw1n.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let output\
    \ = [];\n    for(let i = 0; i < x.length; i++){\n        let allDigitsAreOdd =\
    \ true;\n        for(let j = 0; j < x[i].toString().length; j++){\n          \
    \  if((parseInt(x[i].toString()[j]) % 2) === 0){\n                allDigitsAreOdd\
    \ = false;\n            }\n        }\n        if(allDigitsAreOdd){\n         \
    \   output.push(x[i]);\n        }\n    }\n    return output.sort((a,b) => a -\
    \ b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(num => num.toString().split('').every(x => x % 2 !== 0))\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpr88p_rry.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr88p_rry.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar temp\
    \ = x.toString().split('');\n\tvar len = temp.length;\n\tvar result = [];\n\t\
    for(var i = 0; i < len; i++){\n\t\tif(temp[i] % 2 !== 0){\n\t\t\tresult.push(parseInt(temp[i]));\n\
    \t\t}\n\t}\n\treturn result.sort(function(a,b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  NaN,\n  3,\n  3,\n  NaN,\n  1,\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmphbhs6rjp.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphbhs6rjp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      1,\
    \ 5, NaN, 3, 3,\n    NaN, 1, NaN, 1\n  ],\n  expected: [ 1, 15, 33 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let y\
    \ = []\n    for(let i=0; i<x.length; i++){\n        let str = x[i].toString()\n\
    \        let z = true\n        for(let j=0; j<str.length; j++){\n            if(str[j]%2===0){\n\
    \                z = false\n            }\n        }\n        if(z){\n       \
    \     y.push(x[i])\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b})\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tif(typeof\
    \ x !== \"number\"){\n\t\tthrow \"Input must be a number\";\n\t}\n\n\tvar n =\
    \ x;\n\tvar str = x.toString();\n\tvar arr = [];\n\t\n\tfor(var i = 0; i < str.length;\
    \ i++){\n\t\tif(x%2 === 0){\n\t\t\tarr.push(n);\n\t\t}\n\t\tx = (x - (x%10))/10;\n\
    \t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: Exception
  stderr: "\n/tmp/tmp467qfzh_.js:7\n\t\tthrow \"Input must be a number\";\n\t\t^\n\
    Input must be a number\n(Use `node --trace-uncaught ...` to show where the exception\
    \ was thrown)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var res\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    var xString = x[i].toString();\n\
    \    var count = 0;\n    for(var j = 0; j < xString.length; j++){\n      if(xString[j]\
    \ % 2 === 0){\n        count++;\n      }\n    }\n    if(count === 0){\n      res.push(x[i]);\n\
    \    }\n  }\n  return res.sort(function(a, b){return a - b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  //return\
    \ a sorted list of all elements that hasn't any even digit.\n  \n  let set = [];\n\
    \  for(let i = 0; i < x.length; i++){\n    let str = x[i].toString();\n    let\
    \ arr = str.split('');\n    let sum = 0;\n    for(let j = 0; j < arr.length; j++){\n\
    \      sum += parseInt(arr[j]);\n    }\n    if(sum % 2 != 0){\n      set.push(sum);\n\
    \    }\n  }\n  return set.sort(function(a, b){return a-b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmplbb7iss3.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmplbb7iss3.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    // your\
    \ code here\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpdnm2bbg4.js:13:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdnm2bbg4.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821514
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    for(let\
    \ i=0; i<x.length; i++){\n        if(x[i]%2 === 0){\n            x.splice(i,1);\n\
    \            i--;\n        }\n    }\n    return x;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpapr6ovm1.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapr6ovm1.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var uniquedigits\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    if(!x[i].toString().includes('2')\
    \ && !x[i].toString().includes('4') && !x[i].toString().includes('6') && !x[i].toString().includes('8')){\n\
    \    uniquedigits.push(x[i]);\n  }\n}\n  return uniquedigits.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpgqbvy0va.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpgqbvy0va.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var arr\
    \ = [];\n  var n = 0;\n  while(n < x.length){\n    var digits = x[n].toString().split('');\n\
    \    var evens = false;\n    var nums = [];\n    for(var i = 0; i < digits.length;\
    \ i++){\n      if(digits[i] % 2 === 0){\n        evens = true;\n      }\n    \
    \  nums.push(parseInt(digits[i]));\n    }\n    if(evens === false){\n      arr.push(nums.join(''));\n\
    \    }\n    n++;\n  }\n  return arr.sort(function(a,b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var set\
    \ = new Set();\n    var res = []\n    for(let i = 0; i < x.length; i++){\n   \
    \     if(x[i] % 2 != 0){\n            var temp = x[i].toString();\n          \
    \  for(let i = 0; i < temp.length; i++){\n                if(parseInt(temp[i])\
    \ % 2 == 0){\n                    set.add(x[i]);\n                }\n        \
    \    }\n        }\n    }\n    for(let i = 0; i < x.length; i++){\n        if(!set.has(x[i])){\n\
    \            res.push(x[i]);\n        }\n    }\n    return res.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  15,\n\
    \  33,\n  1422\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n  \
    \  at test (/tmp/tmpucsefsnx.js:30:10)\n    at Object.<anonymous> (/tmp/tmpucsefsnx.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 15, 33,\
    \ 1422 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var noEvens\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var current = x[i].toString();\n\
    \        var hasEven = false;\n        for(var j = 0; j < current.length; j++){\n\
    \            if(current[j] % 2 === 0){\n                hasEven = true;\n    \
    \        }\n        }\n        if(!hasEven){\n            noEvens.push(x[i]);\n\
    \        }\n    }\n    return noEvens.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp73tm4q5f.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp73tm4q5f.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t//var res\
    \ = [];\n\tvar even = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\t// // res.push(x[i]%10);\n\
    \t\t// // res.push(Math.floor(x[i]/10));\n\t\tif(x[i]%2 === 0){\n\t\t\teven.push(x[i]);\n\
    \t\t}\n\t}\n\tfor(var i = 0; i < even.length; i++){\n\t\tx.splice(x.indexOf(even[i]),\
    \ 1);\n\t}\n\treturn x;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp8v0n06e4.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8v0n06e4.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar newArray\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar temp = x[i].toString();\n\
    \t\tvar tempCounter = 0;\n\t\tfor(var j = 0; j < temp.length; j++){\n\t\t\tif(temp[j]\
    \ % 2 == 0){\n\t\t\t\ttempCounter++;\n\t\t\t}\n\t\t}\n\t\tif(tempCounter == 0){\n\
    \t\t\tnewArray.push(x[i]);\n\t\t}\n\t}\n\treturn newArray.sort();\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpsg3dzlku.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsg3dzlku.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var ret\
    \ = [];\n  for(var i=0; i<x.length; i++){\n    if(x[i].toString().split('').every(function(d){return\
    \ d%2!=0}))\n      ret.push(x[i]);\n  }\n  return ret.sort(function(a,b){return\
    \ a-b;});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let sorted\
    \ = x.sort((a,b) => a-b);\n    let result = [];\n    for(let i = 0; i < sorted.length;\
    \ i++){\n        let num = sorted[i];\n        let even = false;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n\
    \                even = true;\n                break;\n            }\n       \
    \     num = Math.floor(num / 10);\n        }\n        if(!even){\n           \
    \ result.push(sorted[i]);\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(x[i].toString().indexOf('2')\
    \ === -1 && x[i].toString().indexOf('4') === -1 && x[i].toString().indexOf('6')\
    \ === -1 && x[i].toString().indexOf('8') === -1 && x[i].toString().indexOf('0')\
    \ === -1){\n\t\t\tresult.push(x[i]);\n\t\t}\n\t}\n\treturn result.sort(function(a,b){return\
    \ a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let temp\
    \ = [];\n    let temp2 = [];\n    for(let i = 0; i < x.length; i++){\n       \
    \ let count = 0;\n        temp = x[i].toString().split('');\n        for(let j\
    \ = 0; j < temp.length; j++){\n            if(temp[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    temp2.push(x[i]);\n        }\n    }\n    return temp2.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var onlyEven\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(isOdd(x[i])){\n  \
    \          onlyEven.push(x[i]);\n        }\n    }\n    return onlyEven.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjgel1yui.js:8\n        if(isOdd(x[i])){\n        ^\n\nReferenceError:\
    \ isOdd is not defined\n    at unique_digits (/tmp/tmpjgel1yui.js:8:9)\n    at\
    \ test (/tmp/tmpjgel1yui.js:19:20)\n    at Object.<anonymous> (/tmp/tmpjgel1yui.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var y =\
    \ x.filter(function(n){\n    return n.toString().indexOf('2') < 0 &&\n       \
    \    n.toString().indexOf('4') < 0 &&\n           n.toString().indexOf('6') <\
    \ 0 &&\n           n.toString().indexOf('8') < 0;\n  });\n  return y.sort(function(a,b){\n\
    \    return a-b;\n  });\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpvj0wg78f.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpvj0wg78f.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    // var\
    \ x = [1, 10, 101];\n    var arr = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        // 1. split number into digits\n        var digits = x[i].toString().split('');\n\
    \        var count = 0;\n        for(var j = 0; j < digits.length; j++){\n   \
    \         if(digits[j] % 2 === 0){\n                count++;\n            }\n\
    \        }\n        if(count === 0){\n            arr.push(x[i]);\n        }\n\
    \    }\n    return arr.sort(function(a, b){\n        return a - b;\n    });\n\
    \    // console.log(digits);\n    // console.log(digits.length);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tconst evenDigits\
    \ = [2,4,6,8];\n\tlet unique = [];\n\tfor(let i = 0; i < x.length; i++){\n\t\t\
    const temp = x[i].toString().split('');\n\t\tlet hasEven = false;\n\t\tfor(let\
    \ k = 0; k < temp.length; k++){\n\t\t\tif(evenDigits.includes(parseInt(temp[k]))){\n\
    \t\t\t\thasEven = true;\n\t\t\t}\n\t\t}\n\t\tif(!hasEven){\n\t\t\tunique.push(x[i]);\n\
    \t\t}\n\t}\n\treturn unique.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp2ibvjgx1.js:29:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp2ibvjgx1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let a=x.filter(x=>x.toString().split('').some(x=>x%2==0))\n\
    \    return a.sort((a,b)=>a-b)\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp7a6rryjz.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7a6rryjz.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var arr\
    \ = [];\n  for(var i = 0; i < x.length; i++){\n    var str = x[i].toString();\n\
    \    if(str.indexOf('2') === -1 && str.indexOf('4') === -1 && str.indexOf('6')\
    \ === -1 && str.indexOf('8') === -1 && str.indexOf('0') === -1){\n      arr.push(x[i]);\n\
    \    }\n  }\n  return arr.sort(function(a,b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    x.sort(function(a,\
    \ b){return a-b});\n    console.log(x);\n    var x2 = [];\n    for(var i = 0;\
    \ i < x.length; i++){\n        if(x[i] > 9){\n            var num = x[i].toString();\n\
    \            console.log(num);\n            if(num.indexOf('2') == -1 && num.indexOf('4')\
    \ == -1 && num.indexOf('6') == -1 && num.indexOf('8') == -1 && num.indexOf('0')\
    \ == -1){\n                x2.push(x[i]);\n            }\n        }\n        else{\n\
    \            x2.push(x[i]);\n        }\n    }\n    return x2;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 15, 33, 1422 ]

    15

    33

    1422

    [ 10, 152, 323, 1422 ]

    10

    152

    323

    1422

    [ 111, 151, 2033, 12345 ]

    111

    151

    2033

    12345

    [ 31, 103, 135 ]

    31

    103

    135

    '
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar num = x[i].toString();\n\
    \t\tif(num.includes('2') || num.includes('4') || num.includes('6') || num.includes('8')){\n\
    \t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tresult.push(x[i]);\n\t\t}\n\t}\n\treturn\
    \ result.sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpkzyx0vn5.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpkzyx0vn5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\treturn\
    \ x.filter(x => x.toString().split('').map(Number).every(x => x % 2 === 1)).sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = [];\n    var z = [];\n    for(var i = 0; i < x.length; i++){\n        x[i]\
    \ = x[i].toString();\n        //console.log(x[i]);\n        for(var j = 0; j <\
    \ x[i].length; j++){\n            if(x[i][j] % 2 === 0){\n                if(z.indexOf(x[i])\
    \ < 0){\n                    z.push(x[i]);\n                }\n            }\n\
    \        }\n    }\n    for(var k = 0; k < x.length; k++){\n        if(z.indexOf(x[k])\
    \ < 0){\n            y.push(x[k]);\n        }\n    }\n    return y;\n}\nvar test\
    \ = [121, 10, 13, 25, 42, 15, 16, 17, 30, 24, 99, 90, 83, 46, 54, 64, 54, 51,\
    \ 54, 51, 54, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\
    \ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi2b0tk89.js:27\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ unique = [...new Set(x)]\n    const evens = unique.filter(item => !(item % 2))\n\
    \    const odds = unique.filter(item => item % 2)\n    return odds.sort((a, b)\
    \ => a - b)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpnfnvr9sa.js:18:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpnfnvr9sa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  //filter\
    \ through x\n  //if the number does not have an even digit\n  //push it into the\
    \ array\n  //sort the array\n  var array1 = [];\n  for(var i = 0; i < x.length;\
    \ i++){\n    if(x[i].toString().split('').map(Number).every(function(j){return\
    \ j % 2 !== 0})){\n      array1.push(x[i]);\n    }\n  }\n  return array1.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar uniqueArr\
    \ = [];\n\tx.forEach(function(el){\n\t\tvar isUnique = true;\n\t\tvar digits =\
    \ el.toString().split('');\n\t\tdigits.forEach(function(num){\n\t\t\tif(num %\
    \ 2 === 0){\n\t\t\t\tisUnique = false;\n\t\t\t}\n\t\t});\n\t\tif(isUnique ===\
    \ true){\n\t\t\tuniqueArr.push(el);\n\t\t}\n\t});\n\treturn uniqueArr.sort(function(a,b){\n\
    \t\treturn a - b;\n\t});\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let result\
    \ = [];\n    x.forEach(num => {\n        if (digitsCheck(num)) {\n           \
    \ result.push(num);\n        }\n    });\n    return result.sort(function(a, b){return\
    \ a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvnm83vw0.js:8\n        if (digitsCheck(num)) {\n        ^\n\nReferenceError:\
    \ digitsCheck is not defined\n    at /tmp/tmpvnm83vw0.js:8:9\n    at Array.forEach\
    \ (<anonymous>)\n    at unique_digits (/tmp/tmpvnm83vw0.js:7:7)\n    at test (/tmp/tmpvnm83vw0.js:19:20)\n\
    \    at Object.<anonymous> (/tmp/tmpvnm83vw0.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\t\n\treturn\
    \ x.filter(function(val){\n\t\t\treturn val.toString().split('').some(function(val){\n\
    \t\t\t\treturn val % 2 == 0;\n\t\t\t})\n\t\t}).sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmprx4fn38_.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmprx4fn38_.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    const\
    \ newArr = [];\n    x.forEach(int => {\n        let newInt = int.toString();\n\
    \        if(newInt.indexOf('2') == -1 && newInt.indexOf('4') == -1 &&\n      \
    \      newInt.indexOf('6') == -1 && newInt.indexOf('8') == -1){\n            newArr.push(int);\n\
    \        }\n    });\n    return newArr.sort((a,b) => a-b);\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpunx2f5ng.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpunx2f5ng.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    //return\
    \ array of digits that are unique\n    function onlyUnique(value, index, self)\
    \ { \n        return self.indexOf(value) === index;\n    }\n    var uniqueArray\
    \ = x.filter( onlyUnique );\n    return uniqueArray\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1422,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n   \
    \ at test (/tmp/tmp8gfu55wq.js:18:10)\n    at Object.<anonymous> (/tmp/tmp8gfu55wq.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1422, 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var even_number\
    \ = [];\n    x.sort();\n    for(var i = 0; i < x.length; i++){\n        var current_number\
    \ = x[i].toString();\n        var is_odd = true;\n        for(var j = 0; j < current_number.length;\
    \ j++){\n            if(current_number[j] % 2 == 0){\n                is_odd =\
    \ false;\n            }\n        }\n        if(is_odd){\n            even_number.push(x[i]);\n\
    \        }\n    }\n    return even_number;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmppq2n6k_m.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmppq2n6k_m.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var newArr\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven = false;\n\
    \        var val = x[i].toString();\n        for(var j = 0; j < val.length; j++){\n\
    \            if(val[j] % 2 === 0){\n                isEven = true;\n         \
    \   }\n        }\n        if(!isEven){\n            newArr.push(x[i]);\n     \
    \   }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let uniques\
    \ = [...new Set(x.map(c => String(c).split('').filter(p => p % 2 !== 0)))];\n\
    \    return uniques.sort();\n};\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    '1'\n\
    \  ],\n  [\n    '1'\n  ],\n  [\n    '1',\n    '5'\n  ],\n  [\n    '3',\n    '3'\n\
    \  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpl66y77n_.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl66y77n_.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ '1' ],\
    \ [ '1' ], [ '1', '5' ], [ '3', '3' ] ],\n  expected: [ 1, 15, 33 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var res\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            res.push(x[i]);\n        }else{\n            var is = false;\n\
    \            for(var j = 0; j < x[i].toString().length; j++){\n              \
    \  if(x[i].toString()[j] % 2 === 0){\n                    is = true;\n       \
    \         }\n            }\n            if(!is){\n                res.push(x[i]);\n\
    \            }\n        }\n    }\n    return res.sort(function(a, b){return a\
    \ - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n\tvar newArr\
    \ = [];\n\tvar xStr = x.toString();\n\tfor(var i = 0; i < xStr.length; i++){\n\
    \t\tif(newArr.indexOf(xStr[i]) === -1){\n\t\t\tnewArr.push(xStr[i]);\n\t\t}\n\t\
    }\n\treturn newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '5',\n\
    \  ',',\n  '3',\n  '4',\n  '2'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n\
    \  33\n]\n    at test (/tmp/tmpphui9vw2.js:21:10)\n    at Object.<anonymous> (/tmp/tmpphui9vw2.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '5',\
    \ ',', '3', '4', '2' ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(value => {\n        return value.toString().split('').every(num =>\
    \ {\n            return num % 2 !== 0;\n        })\n    })\n\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpsqed1jec.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsqed1jec.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let temp\
    \ = []\n    let result = []\n    for(let i = 0; i < x.length; i++){\n        temp.push(x[i].toString().split(''))\n\
    \    }\n    for(let i = 0; i < temp.length; i++){\n        for(let j = 0; j <\
    \ temp[i].length; j++){\n            if(temp[i][j] % 2 == 0){\n              \
    \  break\n            }\n            if(j == temp[i].length - 1){\n          \
    \      result.push(x[i])\n            }\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b})\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  var newArray\
    \ = [];\n  var thisArray = x.toString().split('');\n  for(var i = 0; i < thisArray.length;\
    \ i++){\n    if(thisArray[i]%2 === 1){\n      newArray.push(thisArray[i]);\n \
    \   }\n  }\n  return newArray.join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'153311'\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp6oxvehoh.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6oxvehoh.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '153311',\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result=[];\n\
    \    for(var i=0;i<x.length;i++){\n        var count=0;\n        var n=x[i];\n\
    \        while(n>0){\n            var r=n%10;\n            if(r%2==0){\n     \
    \           count++;\n            }\n            n=parseInt(n/10);\n        }\n\
    \        if(count==0){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpyp890km6.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyp890km6.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    x.forEach(n => {\n        n = n.toString();\n        var unique =\
    \ true;\n        for(var i = 0; i < n.length; i++){\n            if(n[i] % 2 ===\
    \ 0){\n                unique = false;\n            }\n        }\n        if(unique\
    \ === true){\n            result.push(n);\n        }\n    });\n    return result.sort((a,b)\
    \ => {return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  const evens\
    \ = ['0','2','4','6','8']\n  let newArr = []\n  for(let num of x){\n    let digits\
    \ = num.toString().split('')\n    let isGood = true\n    for(let digit of digits){\n\
    \      if(evens.includes(digit)){\n        isGood = false\n      }\n    }\n  \
    \  if(isGood){\n      newArr.push(num)\n    }\n  }\n  return newArr.sort((a,b)\
    \ => a-b)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var y\
    \ = x.filter(x => x.toString().split('').some(i => i % 2 === 0));\n    return\
    \ y;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpj45il0lu.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj45il0lu.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n  let evens\
    \ = []\n  let odds = []\n  for(let i = 0; i < x.length; i++){\n    let y = (x[i]\
    \ + '').split('')\n    let z = y.length\n    let count = 0\n    for(let j = 0;\
    \ j < z; j++){\n      if(y[j] % 2 == 0){\n        count += 1\n      }\n    }\n\
    \    if(count > 0){\n      evens.push(x[i])\n    }else{\n      odds.push(x[i])\n\
    \    }\n  }\n  console.log(odds.sort((a,b) => a - b))\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpat3h8yak.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpat3h8yak.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 15, 33 ]

    '
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    let even_check\
    \ = function(num){\n        while(num > 0){\n            let last_digit = num\
    \ % 10;\n            if(last_digit % 2 == 0){\n                return false;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        return\
    \ true;\n    }\n    let unique_nums = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        if(even_check(x[i])){\n            unique_nums.push(x[i]);\n        }\n\
    \    }\n    return unique_nums.sort(function(a, b){return a - b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    return\
    \ x.filter(n => n.toString().split('').every(n => n % 2 != 0)).sort((a, b) =>\
    \ a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    x.sort(function(a,\
    \ b){return a-b});\n    var arr = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(checker(x[i])){\n            arr.push(x[i]);\n        }\n    }\n \
    \   return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpml94vzp4.js:9\n        if(checker(x[i])){\n        ^\n\nReferenceError:\
    \ checker is not defined\n    at unique_digits (/tmp/tmpml94vzp4.js:9:9)\n   \
    \ at test (/tmp/tmpml94vzp4.js:20:20)\n    at Object.<anonymous> (/tmp/tmpml94vzp4.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var result\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n      var num = x[i].toString();\n\
    \      var isValid = true;\n      for(var j = 0; j < num.length; j++){\n     \
    \   if(num[j] % 2 === 0){\n          isValid = false;\n        }\n      }\n  \
    \    if(isValid === true){\n        result.push(x[i]);\n      }\n    }\n    return\
    \ result.sort(function(a, b){return a-b});\n  }\n  \n  \n  console.log(unique_digits([2,\
    \ 5, 3, 9, 11, 13]));\n  console.log(unique_digits([22, 5, 33, 9, 111, 13]));\n\
    \  \n  \n  //Fibonacci, recursion\n  function fibonacci(n){\n    if(n < 1){\n\
    \      return 0;\n    }\n    if(n === 1){\n      return 1;\n    }\n    return\
    \ fibonacci(n-1) + fibonacci(n-2);\n  }\n  \n  console.log(fibonacci(4));\n  \n\
    \  //Fibonacci, iteration\n  function fibonacci_iter(n){\n    var fib = [0, 1];\n\
    \    if(n <= 2){\n      return 1;\n    }\n    for(var i = 2; i <= n; i++){\n \
    \     fib[i] = fib[i-1] + fib[i-2];\n    }\n    return fib[n];\n  }\n  \n  console.log(fibonacci_iter(4));\n\
    \  \n  //Fibonacci, another iteration\n  function fibonacci_iter2(n){\n    var\
    \ a = 1, b = 0, temp;\n    while(n > 0){\n      temp = a;\n      a = a + b;\n\
    \      b = temp;\n      n--;\n    }\n    return b;\n  }\n  \n  console.log(fibonacci_iter2(4));\n\
    \  \n  //Flatten a nested array, multi-dimensional array with recursion\n \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 3, 5, 9, 11, 13 ]

    [ 5, 9, 13, 33, 111 ]

    3

    3

    3

    '
  timestamp: 1659821515
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunction unique_digits(x){\n    var unique\
    \ = [];\n    for(var i = 0; i < x.length; i++){\n        var eachNumber = x[i];\n\
    \        if(isUnique(eachNumber)){\n            unique.push(eachNumber);\n   \
    \     }\n    }\n    return unique;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk3nc_b9n.js:9\n        if(isUnique(eachNumber)){\n        ^\n\n\
    ReferenceError: isUnique is not defined\n    at unique_digits (/tmp/tmpk3nc_b9n.js:9:9)\n\
    \    at test (/tmp/tmpk3nc_b9n.js:21:20)\n    at Object.<anonymous> (/tmp/tmpk3nc_b9n.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821515
