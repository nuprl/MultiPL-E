language: js
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var output = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        output.push(string.substring(0, i + 1));\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar ret = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tret.push(string.substring(0, i));\n\t}\n\treturn ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    return prefixes_from_length(all_prefixes_lengths(string));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpn_gq_lma.js:3\n    return prefixes_from_length(all_prefixes_lengths(string));\n\
    \    ^\n\nReferenceError: prefixes_from_length is not defined\n    at all_prefixes\
    \ (/tmp/tmpn_gq_lma.js:3:5)\n    at test (/tmp/tmpn_gq_lma.js:11:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_gq_lma.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let prefixes = []\n    let new_string = \"\
    \"\n    for(let i = 0; i < string.length; i++){\n        new_string += string[i]\n\
    \        prefixes.push(new_string)\n    }\n    return prefixes\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let prefix_list = [string]\n    while(string.length\
    \ >= 1){\n        string = string.slice(0, string.length - 1)\n        prefix_list.push(string)\n\
    \    }\n    return prefix_list\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp0haibqot.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp0haibqot.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var n = 1; n <= string.length;\
    \ n++){\n\t\tprefixes.push(string.substring(0,n));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar p = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tp.push(string.substring(0,i));\n\t}\n\treturn p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//For all prefixes of length 1 up to length\
    \ string, return in array\n\treturn _.range(1, string.length + 1).map(function(size){\n\
    \t\treturn string.substring(0, size);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2fp0zr8i.js:4\n\treturn _.range(1, string.length + 1).map(function(size){\n\
    \t^\n\nReferenceError: _ is not defined\n    at all_prefixes (/tmp/tmp2fp0zr8i.js:4:2)\n\
    \    at test (/tmp/tmp2fp0zr8i.js:14:20)\n    at Object.<anonymous> (/tmp/tmp2fp0zr8i.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar all_prefixes = [];\n\tfor(var i = 0; i <\
    \ string.length; i++){\n\t\tall_prefixes.push(string.substring(0, i + 1));\n\t\
    }\n\treturn all_prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar array = [string];\n\tvar next_string = string;\n\
    \twhile(next_string.length > 1){\n\t\tnext_string = next_string.substring(0, next_string.length\
    \ - 1);\n\t\tarray.push(next_string);\n\t}\n\treturn array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp5epipeom.js:17:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5epipeom.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = []\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i))\n\t}\n\treturn prefixes\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar length = string.length;\n\
    \tfor(var i = 0; i < length; i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar len = string.length;\n\
    \tfor(var i = 1; i < len; i++){\n\t\tprefixes.push(string.substring(0, i));\n\t\
    }\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmp4kwz8ctm.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4kwz8ctm.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [''];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpvo2pmq_z.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpvo2pmq_z.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(i=0;i<string.length;i++){\n\
    \t\toutput.push(string.substring(0,i+1));\n\t}\n\treturn output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    string = string.toLowerCase();\n    var prefixes\
    \ = [];\n    for(var i = 1; i < string.length + 1; i++){\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'w',\n  'ww',\n\
    \  'www'\n]\n\nshould loosely deep-equal\n\n[\n  'W',\n  'WW',\n  'WWW'\n]\n \
    \   at test (/tmp/tmpm5romp8e.js:18:10)\n    at Object.<anonymous> (/tmp/tmpm5romp8e.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'w', 'ww',\
    \ 'www' ],\n  expected: [ 'W', 'WW', 'WWW' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar max_length = string.length;\n\tvar prefixes\
    \ = [];\n\tfor(var i = 1; i <= max_length; i++){\n\t\tprefixes.push(string.substring(0,i));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var res = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        res.push(string.substring(0,i+1));\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(i=0; i<=string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp0snvlr9b.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp0snvlr9b.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var output = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        output.push(string.substring(0, i));\n    }\n\
    \    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = []\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i))\n\t}\n\treturn output\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefix_list = [string]\n    for (var i\
    \ = 1; i <= string.length; i++){\n        prefix_list.push(string.slice(0, i))\n\
    \    }\n    return prefix_list\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_63t_8g7.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_63t_8g7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0, i + 1));\n\t}\n\treturn list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar ans = [];\n\tvar length = string.length;\n\
    \tfor(var i = 1; i <= length; i++){\n\t\tans.push(string.substring(0,i));\n\t\
    }\n\treturn ans;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t\n\tvar result = [];\n\tfor(var i = 1; i < string.length\
    \ + 1; i++){\n\t\tresult.push(string.substring(0, i));\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let output = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        output.push(string.slice(0,i+1));\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar out_list = []\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tout_list.push(string.substring(0, i + 1))\n\t}\n\treturn out_list\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar all_prefixes = [];\n\tfor(i=1; i<=string.length;\
    \ i++){\n\t\tall_prefixes.push(string.substring(0,i));\n\t}\n\treturn all_prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0, i + 1));\n\t}\n\treturn list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefs = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefs.push(string.substring(0,i+1));\n\t}\n\treturn prefs;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = []\n\tfor(var i = 1; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i))\n\t}\n\treturn prefixes\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmpzv7a47t_.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzv7a47t_.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var list = [];\n    var prefix = '';\n   \
    \ for(var i = 0; i <= string.length; i++){\n        prefix = string.substring(0,i);\n\
    \        list.push(prefix);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_pb_4dwj.js:17:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_pb_4dwj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var output = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        output.push(string.substring(0,i+1));\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(i=1; i<=string.length;\
    \ i++){\n        prefixes.push(string.substring(0,i));\n    }\n    return prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [string];\n    for(var i =\
    \ 1; i < string.length; i++){\n        prefixes.push(string.substring(0, string.length\
    \ - i));\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpyqxg947o.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpyqxg947o.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let prefixes = [string];\n    for(let i =\
    \ 0; i < string.length; i++){\n        prefixes.push(string.substring(0, string.length\
    \ - i));\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjlt_3ti4.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpjlt_3ti4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar length = string.length;\n\tvar list = [];\n\
    \tfor(var i = 0; i<length; i++){\n\t\tlist.push(string.substring(0,i+1));\n\t\
    }\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar ret = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tret.push(string.substring(0, i));\n\t}\n\treturn ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 0; i <= string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i));\n\t}\n\treturn output;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpezhsr7mm.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpezhsr7mm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var i = 0;\n    var prefixes = [];\n    while(i\
    \ < string.length){\n        prefixes.push(string.substring(0,i+1));\n       \
    \ i += 1;\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var out = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        out.push(string.substring(0, i + 1));\n    }\n    return out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0, i+1));\n\t}\n\treturn list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var output = [string];\n    for(var i = 1;\
    \ i < string.length; i++){\n        output.push(string.substring(0,i));\n    }\n\
    \    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmptl7oh21p.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmptl7oh21p.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar result = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tresult.push(string.substring(0, i));\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0,i+1));\n\t}\n\treturn list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar array=[];\n\tfor(var i=0;i<string.length;i++){\n\
    \t\tarray.push(string.substring(0,i+1));\n\t}\n\treturn array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp9qvd5e_7.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp9qvd5e_7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tlet output = [''];\n\tfor(let letter of string){\n\
    \t\toutput.push(output[output.length-1]+letter);\n\t}\n\treturn output;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpbxshcbfd.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpbxshcbfd.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tif(string.length < 2){\n\t\treturn [];\n\t}\n\
    \tvar output = [];\n\tfor(var i = 0; i < string.length; i++){\n\t\toutput.push(string.substring(0,\
    \ i + 1));\n\t}\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//Initialize list of prefixes\n\tvar prefixes\
    \ = [];\n\t//For every character in the string\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\t//Add the substring of characters up to the current index to the\
    \ list of prefixes\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\t//Return\
    \ the list of prefixes in reverse order so they will be sorted from shortest to\
    \ longest\n\treturn prefixes.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpr6ri5yug.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr6ri5yug.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let output = []\n    for(let i = 1; i < string.length\
    \ + 1; i++){\n        output.push(string.slice(0,i))\n    }\n    return output\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp9qvd5e_7.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp9qvd5e_7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0, i+1));\n\t}\n\treturn list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar result = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tresult.push(string.substring(0, i));\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tlet list = []\n\tfor(let i = 1; i <= string.length;\
    \ i++){\n\t\tlist.push(string.substring(0,i))\n\t}\n\treturn list\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar new_string = string;\n\tvar all_prefixes\
    \ = [];\n\tvar counter = 0;\n\twhile(new_string.length > 0){\n\t\tall_prefixes.push(new_string);\n\
    \t\tnew_string = new_string.substring(0, new_string.length - 1);\n\t}\n\treturn\
    \ all_prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmp813pvdbp.js:19:10)\n    at Object.<anonymous> (/tmp/tmp813pvdbp.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = []\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1))\n\t}\n\treturn prefixes\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//Ensure the word is all lowercase\n\tvar word\
    \ = string.toLowerCase();\n\t//Get the length of the word\n\tvar word_length =\
    \ word.length;\n\t//Initialize a list to hold all of the prefixes\n\tvar prefixes\
    \ = [];\n\t//Iterate through every prefix\n\tfor(var i = 0; i < word_length; i++){\n\
    \t\t//Only the first prefix is simply the first letter\n\t\tprefixes.push(word[i]);\n\
    \t\t//Every subsequent prefix is the letter plus the prefix before it\n\t\tfor(var\
    \ j = 0; j < i; j++){\n\t\t\tprefixes.push(prefixes[j] + word[i]);\n\t\t}\n\t\
    }\n\t//Return the list of prefixes\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  's',\n\
    \  'as',\n  'd',\n  'ad',\n  'sd',\n  'f',\n  'af',\n  'sf',\n  'asf',\n  'g',\n\
    \  'ag',\n  'sg',\n  'asg',\n  'dg',\n  'h',\n  'ah',\n  'sh',\n  'ash',\n  'dh',\n\
    \  'adh'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n\
    \  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmphgfnsydg.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphgfnsydg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \   's',   'as',  'd',\n    'ad',  'sd',  'f',   'af',\n    'sf',  'asf', 'g',\
    \   'ag',\n    'sg',  'asg', 'dg',  'h',\n    'ah',  'sh',  'ash', 'dh',\n   \
    \ 'adh'\n  ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [string];\n\tfor(var i = 1; i\
    \ < string.length; i++){\n\t\tprefixes.push(string.substring(0, string.length\
    \ - i));\n\t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpqbdnhn12.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpqbdnhn12.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i));\n\t}\n\treturn output;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var length = string.length;\n    var list\
    \ = [];\n    for(var i = 1; i <= length; i++){\n        list.push(string.substring(0,i));\n\
    \    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar array = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tarray.push(string.substring(0,i));\n\t}\n\treturn array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpf38q0ny5.js:16:10)\n    at Object.<anonymous> (/tmp/tmpf38q0ny5.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'a',\
    \ 'as', 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [''];\n\tfor(var i = 1; i <=\
    \ string.length; i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn\
    \ prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpi_azw605.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpi_azw605.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar len = string.length;\n\tvar result = [];\n\
    \tfor(var i = 1; i <= len; i++){\n\t\tresult.push(string.substring(0,i));\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar result = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tresult.push(string.substring(0, i));\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(i=1; i<=string.length;\
    \ i++){\n        prefixes.push(string.substring(0,i));\n    }\n    return prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar s = string.split(\"\");\n\tvar p = [];\n\
    \tfor(var i = 0; i < s.length; i++){\n\t\tp.push(s.slice(0,i+1).join(\"\"));\n\
    \t}\n\treturn p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar n = string.length;\n\tvar prefixes = [];\n\
    \tfor(var i = 0; i < n; i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t\
    }\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar length = string.length;\n\
    \tfor(var i = 1; i <= length; i++){\n\t\tprefixes.push(string.substring(0,i));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [string];\n    while(string.length\
    \ > 1){\n        string = string.substring(0, string.length - 1);\n        prefixes.push(string);\n\
    \    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_f0mgvom.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_f0mgvom.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var list = [];\n    var index = 0;\n    while(string.length\
    \ > index){\n        list.push(string.substring(0,index+1));\n        index++;\n\
    \    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmpslc8nobw.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpslc8nobw.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar all_pref = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tall_pref.push(string.substring(0,i));\n\t}\n\treturn all_pref;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tvar str_len = string.length;\n\
    \t\n\tfor(var i = 0; i < str_len; i++){\n\t\toutput.push(string.substring(0, i\
    \ + 1));\n\t}\n\t\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//Initialize allPrefixes variable\n\tvar allPrefixes\
    \ = [];\n\t//Loop over all characters in string\n\tfor(var c = 0; c < string.length;\
    \ c++){\n\t\t//Add each prefix to list\n\t\tallPrefixes.push(string.substring(0,\
    \ c + 1));\n\t}\n\t//Return list of all prefixes from shortest to longest\n\t\
    return allPrefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tlet prefixes = [];\n\tfor(let i = 0; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpt26xwhjh.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpt26xwhjh.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = []\n    for(var i = 0; i < string.length;\
    \ i++){\n        result.push(string.substring(0, i+1))\n    }\n    return result\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tlet all_prefixes = [];\n\tfor(let i = 1; i <=\
    \ string.length; i++){\n\t\tall_prefixes.push(string.substring(0, i));\n\t}\n\t\
    return all_prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i+1));\n\t}\n\treturn output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar len = string.length;\n\tvar result = [];\n\
    \tfor(var i = 0; i < len; i++){\n\t\tresult.push(string.substring(0, i+1));\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.slice(0,i+1));\n    }\n \
    \   return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar i;\n\tvar prefixes = [];\n\tfor(i=0; i<string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar current_prefix = \"\
    \";\n\tfor(var i = 0; i < string.length; i++){\n\t\tcurrent_prefix += string[i];\n\
    \t\tprefixes.push(current_prefix);\n\t}\n\treturn prefixes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar ret = [];\n\tvar strlen = string.length;\n\
    \tfor(var i = 0; i < strlen; i++){\n\t\tret.push(string.substring(0, i+1));\n\t\
    }\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let output = [];\n    for(let i = 1; i <=\
    \ string.length; i++){\n        output.push(string.substring(0, i));\n    }\n\
    \    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        result.push(string.substring(0, i + 1));\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar split_string = string.split(\"\");\n\tvar\
    \ prefixes = [];\n\tfor(var i = 1; i < split_string.length; i++){\n\t\tprefixes.push(split_string.slice(0,i).join(\"\
    \"));\n\t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmp4tyem9a4.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4tyem9a4.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = []\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1))\n    }\n\
    \    return prefixes\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let result = [];\n    for(let i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    if(string.length == 0){\n        return [];\n\
    \    }\n    let result = [string];\n    for(let i = 0; i < string.length; i++){\n\
    \        result.push(string.substring(0,i));\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  '',\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmprba9red0.js:19:10)\n    at Object.<anonymous> (/tmp/tmprba9red0.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ '', 'a', 'as', 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var p = [];\n    for(var i = 1; i <= string.length;\
    \ i++){\n        p.push(string.substring(0,i));\n    }\n    return p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar numChars = string.length;\n\
    \tfor(var i = 1; i <= numChars; i++){\n\t\tprefixes.push(string.substring(0,i));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var results = [];\n    var length = string.length;\n\
    \    for(var i = 1; i <= length; i++){\n        results.push(string.substring(0,i));\n\
    \    }\n    return results;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var min = 1\n    var max = string.length\n\
    \    var result = []\n    for (var i = min; i <= max; i++){\n        result.push(string.substring(0,i))\n\
    \    }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var i;\n    var prefixes = [];\n    for(i=0;\
    \ i<string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n  \
    \  }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar new_string = [];\n\tvar holder = \"\";\n\
    \tfor(var i = 0; i < string.length; i++){\n\t\tfor(var j = 0; j <= i; j++){\n\t\
    \t\tholder += string[j];\n\t\t}\n\t\tnew_string.push(holder);\n\t\tholder = \"\
    \";\n\t}\n\treturn new_string;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    var prefix = \"\"\
    ;\n    for(var i = 0; i < string.length; i++){\n        prefix += string[i];\n\
    \        prefixes.push(prefix);\n    }\n    return prefixes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar pref = all_prefixes_recurse(string);\n\t\
    pref.reverse();\n\treturn pref;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpypmnwqjy.js:3\n\tvar pref = all_prefixes_recurse(string);\n\t \
    \          ^\n\nReferenceError: all_prefixes_recurse is not defined\n    at all_prefixes\
    \ (/tmp/tmpypmnwqjy.js:3:13)\n    at test (/tmp/tmpypmnwqjy.js:13:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpypmnwqjy.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let string_array = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        string_array.push(string.slice(0, i + 1));\n\
    \    }\n    return string_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var arr = [string];\n    for(var i = 1; i\
    \ < string.length; i++){\n        arr.push(string.substring(0, i));\n    }\n \
    \   return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_3m8k7qe.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_3m8k7qe.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tvar word_length = string.length;\n\
    \tfor(var i = 1; i <= word_length; i++){\n\t\toutput.push(string.substring(0,i));\n\
    \t}\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [string]\n    for(var i = 1;\
    \ i < string.length; i++){\n        prefixes.push(string.substring(0,i))\n   \
    \ }\n    return prefixes\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp7ihdwvx7.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7ihdwvx7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var length = string.length\n    var prefixes\
    \ = []\n    for(i=0; i<length; i++){\n        prefixes.push(string.slice(0,length-i))\n\
    \    }\n    return prefixes\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmp2h91lhsf.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2h91lhsf.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    const length = string.length;\n    let prefixes\
    \ = [];\n    for(let i = 1; i < length; i++){\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmpsi879ewe.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsi879ewe.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar all_prefixes_arr = [];\n\tfor(var i = 0;\
    \ i <= string.length; i++){\n\t\tall_prefixes_arr.push(string.substring(0,i));\n\
    \t}\n\treturn all_prefixes_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp6cwq6drn.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp6cwq6drn.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar t_string = \"\";\n\tvar prefixes = [];\n\
    \tvar return_prefixes = [];\n\tfor(var i = 0; i < string.length; i++){\n\t\tt_string\
    \ += string[i];\n\t\tif(t_string.length > 0){\n\t\t\tprefixes.push(t_string);\n\
    \t\t}\n\t}\n\tprefixes.sort(function(a, b){return a.length - b.length});\n\tfor(var\
    \ i = 0; i < prefixes.length; i++){\n\t\treturn_prefixes.push(prefixes[i]);\n\t\
    }\n\treturn return_prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefix_list = []\n    var len = string.length;\n\
    \    for(var i = 1; i <= len; i++){\n        prefix_list.push(string.substring(0,i));\n\
    \    }\n    return prefix_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i+1));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar result = [];\n\tvar i = 1;\n\twhile(i<=string.length){\n\
    \t\tresult.push(string.substring(0,i));\n\t\ti++;\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//Empty prefixes array to be returned\n\tlet\
    \ prefixes = [];\n\t//Loop through each letter of string\n\tfor(let i = 0; i <\
    \ string.length; i++){\n\t\t//Add each prefix to array\n\t\tprefixes.push(string.slice(0,\
    \ i + 1));\n\t}\n\t//Return array\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let p = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        p.push(string.substring(0,i+1));\n    }\n    return p;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar length = string.length;\n\tvar prefix_array\
    \ = [];\n\tfor(var i = 0; i < length; i++){\n\t\tprefix_array.push(string.substring(0,i+1));\n\
    \t}\n\treturn prefix_array;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar all_prefixes_list = [];\n\tfor(var i = 1;\
    \ i <= string.length; i++){\n\t\tall_prefixes_list.push(string.substring(0,i));\n\
    \t}\n\treturn all_prefixes_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    return [...Array(string.length).keys()].map(\
    \ i => string.substring(0,i));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmp8b0glti3.js:12:10)\n    at Object.<anonymous> (/tmp/tmp8b0glti3.js:16:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'a',\
    \ 'as', 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar l = string.length;\n\
    \tfor(var i = 1; i <= l; i++){\n\t\tprefixes.push(string.substring(0,i));\n\t\
    }\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t//Split into array\n\tvar string_arr = string.split(\"\
    \");\n\t//Loop through array and add all combinations from shortest to longest\n\
    \tvar prefixes = [];\n\tfor(var i = 0; i < string_arr.length; i++){\n\t\tprefixes.push(string_arr.slice(0,\
    \ i+1).join(\"\"));\n\t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = []\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i))\n    }\n\
    \    return prefixes\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(i=0; i<string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlist.push(string.substring(0, i+1));\n\t}\n\treturn list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar chars = string.split('');\n\
    \tfor(var i = 0; i < chars.length; i++){\n\t\tprefixes.push(chars.slice(0,i+1).join(''));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var res = []\n    for(var i = 0; i < string.length;\
    \ i++){\n        res.push(string.substring(0, i+1))\n    }\n    return res\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar strings = []\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tstrings.push(string.substring(0,i+1))\n\t}\n\treturn strings\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [string];\n\tvar next = string;\n\
    \twhile(next.length > 1){\n\t\tnext = next.substring(0, next.length - 1);\n\t\t\
    output.push(next);\n\t}\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpm7d9bc5j.js:17:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpm7d9bc5j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\treturn string.split('').reduce(function(prefixes,\
    \ char, idx){\n\t\tprefixes.push(string.slice(0, idx + 1));\n\t\treturn prefixes;\n\
    \t}, []);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar out = \"\";\n\tfor(var\
    \ i = 0; i < string.length; i++){\n\t\tout += string[i];\n\t\tprefixes.push(out);\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [''];\n    var num_chars =\
    \ string.length;\n    for(var i = 0; i < num_chars; i++){\n        var current_char\
    \ = string[i];\n        var new_prefixes = [];\n        var current_prefixes =\
    \ prefixes;\n        current_prefixes.forEach(function(prefix){\n            new_prefixes.push(prefix\
    \ + current_char);\n        });\n        prefixes = prefixes.concat(new_prefixes);\n\
    \    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp78v2uvb5.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp78v2uvb5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar pref = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tpref.push(string.substring(0,i+1));\n\t}\n\treturn pref;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tlet prefixes = [];\n\tfor(let index=0; index<string.length;\
    \ index++){\n\t\tprefixes.push(string.substring(0,index+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar len = string.length;\n\
    \tfor(var i = 0; i < len; i++){\n\t\tprefixes.push(string.substring(0, i + 1));\n\
    \t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var out = [];\n    for(var i = 1; i <= string.length;\
    \ i++){\n        out.push(string.substring(0,i));\n    }\n    return out;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var list = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        list.push(string.substring(0,i));\n    }\n    return list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmprid_7eur.js:16:10)\n    at Object.<anonymous> (/tmp/tmprid_7eur.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'a',\
    \ 'as', 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: -5
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    var a = 0;\n    var\
    \ b = a + 1;\n    var next_string = string.slice(a,b);\n    while(next_string.length\
    \ > 0){\n        prefixes.push(next_string);\n        b++;\n        next_string\
    \ = string.slice(a,b);\n    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce9043d20\n 1: 0x2b8058448727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b8058fdd28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b8058917f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b8058aa99f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b8058ab1390  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b8058c9b7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b80585fa7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659823086
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar count = 1;\n\tvar result = [];\n\t\n\twhile(count\
    \ <= string.length){\n\t\tresult.push(string.substring(0, count));\n\t\tcount++;\n\
    \t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = []\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i))\n    }\n\
    \    return prefixes\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar out = [];\n\tfor(var i = 0; i <= string.length;\
    \ i++){\n\t\tout.push(string.substring(0,i));\n\t}\n\treturn out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpic5m8pah.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpic5m8pah.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    if(string.length == 0){\n        return [\"\
    \"];\n    }\n    let result = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        result.push(string.substring(0, i + 1));\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmphnpgiesv.js:18:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphnpgiesv.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar ret = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tret.push(string.substring(0, i));\n\t}\n\treturn ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let result = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        result.push(string.slice(0, i+1));\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefix_list = [];\n    for(var i = 1;\
    \ i <= string.length; i++){\n        prefix_list.push(string.substring(0,i));\n\
    \    }\n    return prefix_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var l = string.length;\n    var prefixes =\
    \ [];\n    for(var i = 0; i < l; i++){\n        prefixes.push(string.substring(0,l-i));\n\
    \    }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpfotkr_l8.js:17:10)\n    at Object.<anonymous> (/tmp/tmpfotkr_l8.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar out = []\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tout.push(string.substring(0, i + 1))\n\t}\n\treturn out\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var out = [];\n    for(var i = 0; i < string.length;\
    \ i++){\n        out.push(string.substring(0, i+1));\n    }\n    return out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    let prefix_list = [string];\n    for(i=0;i<string.length;i++){\n\
    \        string = string.slice(0,string.length-1);\n        prefix_list.push(string);\n\
    \    }\n    return prefix_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpwhprhk62.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpwhprhk62.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tvar word_array = string.split(\"\
    \ \");\n\t\n\tfor(var i = 0; i < word_array.length; i++){\n\t\tfor(var j = 0;\
    \ j < word_array[i].length; j++){\n\t\t\tprefixes.push(word_array[i].substring(0,\
    \ j + 1));\n\t\t}\n\t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0,i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmpe4icxouc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe4icxouc.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar list = [];\n\tfor(var i = 1; i < string.length\
    \ + 1; i++){\n\t\tlist.push(string.substring(0, i));\n\t}\n\treturn list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var i, prefix;\n    var prefixes = [];\n \
    \   for(i = 0; i < string.length; i++){\n        prefix = string.substring(0,\
    \ i + 1);\n        prefixes.push(prefix);\n    }\n    return prefixes;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n\
    \    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar i,\n\t\tlen = string.length,\n\t\tprefixes\
    \ = [];\n\tfor(i = 0; i < len; i++){\n\t\tprefixes.push(string.substring(0, len\
    \ - i));\n\t}\n\treturn prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpadkgwph6.js:18:10)\n    at Object.<anonymous> (/tmp/tmpadkgwph6.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i < string.length\
    \ + 1; i++){\n\t\tprefixes.push(string.substring(0, i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var all_prefixes = [];\n    for(var i = 0;\
    \ i <= string.length; i++){\n        all_prefixes.push(string.substring(0,i));\n\
    \    }\n    return all_prefixes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpb_7242pp.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpb_7242pp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var output = [];\n    for(var x = 0; x < string.length;\
    \ x++){\n        output.push(string.substring(0,x+1));\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\t\n\tvar result = new Array();\n\tvar length\
    \ = string.length;\n\t\n\t//Push each prefix of the string onto the result\n\t\
    for(var i = 1; i <= length; i++){\n\t\tresult.push(string.substring(0, i));\n\t\
    }\n\t\n\treturn result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var _all_prefixes = []\n    for(var i = 1;\
    \ i <= string.length; i++){\n        _all_prefixes.push(string.substring(0, i))\n\
    \    }\n    return _all_prefixes\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i));\n\t}\n\treturn output;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n \
    \   }\n    return prefixes;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar out = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tout.push(string.substring(0,i));\n\t}\n\treturn out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n    var result = [];\n    for(var i = 1; i <=\
    \ string.length; i++){\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar strings = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tstrings.push(string.substring(0,i+1));\n\t}\n\treturn strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'as',\n\
    \  'asd',\n  'asdf',\n  'asdfg'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n\
    \  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test (/tmp/tmpslc8nobw.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpslc8nobw.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'as',\
    \ 'asd', 'asdf', 'asdfg' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(i=1; i<=string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [string]\n\tfor(var i = 1; i\
    \ < string.length; i++){\n\t\tprefixes.push(string.substring(0,i))\n\t}\n\treturn\
    \ prefixes\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp5hr2es0y.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5hr2es0y.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = []\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0, i+1))\n\t}\n\treturn prefixes\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar output = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\toutput.push(string.substring(0,i+1));\n\t}\n\treturn output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar out = [];\n\tfor(var i = 1; i <= string.length;\
    \ i++){\n\t\tout.push(string.substring(0,i));\n\t}\n\treturn out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Return list of all prefixes from shortest to longest of the input string\n\
    function all_prefixes(string){\n\tvar prefixes = [];\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tprefixes.push(string.substring(0,i+1));\n\t}\n\treturn prefixes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
