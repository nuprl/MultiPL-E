name: HumanEval_54_same_chars
language: js
prompt: "//Check if two words have the same characters.\nfunction same_chars(s0, s1){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
  ),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"\
  dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"\
  ),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\"\
  , \"aaccc\"),false);\n}\n\ntest();"
completions: ["    if(s0.length != s1.length){\n        return false;\n    }\n\n \
    \   for(var i = 0; i < s0.length; i++){\n        if(s0.indexOf(s1[i]) === -1){\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\n\n", "  \
    \  return s0.split('').sort().join('') === s1.split('').sort().join('');\n}\n",
  "\tfor(var i=0; i<s0.length; i++){\n\t\tif(s1.indexOf(s0[i])<0) return false;\n\t\
    }\n\treturn true;\n}\n", "    //Helper function that makes a hashmap of the frequency\
    \ of a character in a string.\n    function char_map(string){\n        var map\
    \ = {};\n        for(var i = 0; i < string.length; i++){\n            map[string[i]]\
    \ = map[string[i]] || 0;\n            map[string[i]]++;\n        }\n        return\
    \ map;\n    }\n    return JSON.stringify(char_map(s0)) === JSON.stringify(char_map(s1));\n\
    }\n", "\tvar len = s0.length;\n\tif(len !== s1.length) return false;\n\tfor(var\
    \ i = 0; i < len; i++)\n\t\tif(!has_char(s1, s0[i])) return false;\n\treturn true;\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tif(s0 == s1){\n\
    \t\treturn true;\n\t}\n\tvar l = s0.length;\n\tvar s = s0.split(\"\");\n\ts.sort();\n\
    \ts0 = s.join(\"\");\n\ts = s1.split(\"\");\n\ts.sort();\n\ts1 = s.join(\"\");\n\
    \tfor(var i = 0; i < l; i++){\n\t\tif(s0[i] != s1[i]){\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\n", "\tvar char_counts0 = count_chars(s0);\n\tvar\
    \ char_counts1 = count_chars(s1);\n\tfor(var c in char_counts0){\n\t\tif(char_counts0[c]\
    \ != char_counts1[c]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar my_arr0 = s0.split(\"\
    \");\n\tvar my_arr1 = s1.split(\"\");\n\tmy_arr0.sort();\n\tmy_arr1.sort();\n\t\
    for(var i = 0; i < my_arr0.length; i++){\n\t\tif(my_arr0[i] != my_arr1[i]){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n", "\tif(s0.length != s1.length){\n\
    \t\treturn false;\n\t}\n\tvar m = s0.split(\"\");\n\tvar n = s1.split(\"\");\n\
    \tm.sort();\n\tn.sort();\n\tfor(var i = 0; i < m.length; i++){\n\t\tif(m[i] !=\
    \ n[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    return (s0.split('').sort().join('')\
    \ == s1.split('').sort().join(''));\n}\n\n", "    let count = 0;\n    s0.split('').forEach(function(c){\n\
    \        if(s1.indexOf(c) >= 0){\n            count++;\n        }\n    });\n \
    \   return count;\n}\n", "    if(s0.length != s1.length){\n        return false;\n\
    \    }\n    for(var i = 0; i < s0.length; i++){\n        if(s0.charAt(i) != s1.charAt(i)){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "\tif(s0.length\
    \ != s1.length){\n\t\treturn false;\n\t}\n\t\n\t//Everytime a character appears\
    \ in s0 it is removed from s1.\n\tfor(var i = 0; i < s0.length; i++){\n\t\tvar\
    \ j = s1.indexOf(s0[i]);\n\t\tif(j == -1){\n\t\t\treturn false;\n\t\t}else{\n\t\
    \t\ts1 = s1.slice(0, j) + s1.slice(j + 1);\n\t\t}\n\t}\n\t\n\treturn true;\n}\n",
  "    //Check if first string is empty, if so, then return true.\n    if(s0.length\
    \ === 0){\n        return true;\n    }\n\n    //Check if first string is not empty,\
    \ and if not, keep going.\n    else if(s0.length >= 1){\n        //Create a loop\
    \ to iterate over each character in the first string.\n        for(var i = 0;\
    \ i < s0.length; i++){\n            //Check if character appears in second string.\n\
    \            if(s1.indexOf(s0[i]) > -1){\n                //If character appears\
    \ in second string, check if it also appears in first string.\n              \
    \  if(s0.indexOf(s0[i]) > -1){\n                    //If it appears in both strings,\
    \ remove the character from the first string.\n                    s0 = s0.replace(s0[i],\
    \ \"\");\n                    //If it does not appear in both strings, return\
    \ false.\n                } else {\n                    return false;\n      \
    \          }\n                //If character does not appear in second string,\
    \ return false.\n            } else {\n                return false;\n       \
    \     }\n        }\n    }\n    //Finally, if all other checks pass, return true.\n\
    \    return true;\n}\n", "    var a0 = s0.split('').sort();\n    var a1 = s1.split('').sort();\n\
    \    var n_same = 0;\n    for(var i=0; i<a0.length; i++){\n        if(a0[i]==a1[i]){\n\
    \            n_same++;\n        }\n    }\n    return n_same;\n}\n", "\tvar len\
    \ = s0.length;\n\tfor(var i = 0; i < len; i++){\n\t\tif(s1.indexOf(s0[i]) == -1){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tlet len0 = s0.length;\n\
    \tlet len1 = s1.length;\n\tif(len0 != len1){\n\t\treturn false;\n\t}\n\tlet c\
    \ = 0;\n\tfor(let i = 0; i < len0; i++){\n\t\tc = s0.charCodeAt(i);\n\t\tif(s1.indexOf(s0[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    //Sort\
    \ characters\n    s0 = s0.split('').sort().join('');\n    s1 = s1.split('').sort().join('');\n\
    \    //Compare\n    return s0 == s1;\n}\n", "\tvar i;\n\tvar c0, c1;\n\tvar len\
    \ = Math.min(s0.length, s1.length);\n\tfor(i = 0; i < len; i++){\n\t\tc0 = s0.charAt(i);\n\
    \t\tc1 = s1.charAt(i);\n\t\tif(c0 !== c1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n", "    let counter0 = {};\n    let counter1 = {};\n    for(let\
    \ i = 0; i < s0.length; i++){\n        counter0[s0[i]] = counter0[s0[i]] ? counter0[s0[i]]\
    \ + 1 : 1;\n    }\n    for(let i = 0; i < s1.length; i++){\n        counter1[s1[i]]\
    \ = counter1[s1[i]] ? counter1[s1[i]] + 1 : 1;\n    }\n    for(let key in counter0){\n\
    \        if(counter0[key] !== counter1[key]){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    if(s0.length !== s1.length){\n  \
    \      return false;\n    }\n    for(let i = 0; i < s0.length; i++){\n       \
    \ let index = s1.indexOf(s0[i]);\n        if(index < 0){\n            return false;\n\
    \        }\n        s1 = s1.slice(0, index) + s1.slice(index + 1);\n    }\n  \
    \  return true;\n}\n", "\tvar chars0 = s0.split('').sort().join('').trim();\n\t\
    var chars1 = s1.split('').sort().join('').trim();\n\treturn chars0 == chars1;\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar char_count\
    \ = [], i;\n\tfor(i = 0; i < s0.length; i++){\n\t\tchar_count[s0.charCodeAt(i)]\
    \ = char_count[s0.charCodeAt(i)] + 1 || 1;\n\t}\n\tfor(i = 0; i < s1.length; i++){\n\
    \t\tif(!char_count[s1.charCodeAt(i)]){\n\t\t\treturn false;\n\t\t}\n\t\tchar_count[s1.charCodeAt(i)]\
    \ -= 1;\n\t}\n\treturn true;\n}", "    if(s0.length != s1.length){\n        return\
    \ false;\n    }\n    //s0 and s1 have the same length.\n    for(var i = 0; i <\
    \ s0.length; i++){\n        if(s0.indexOf(s1[i]) == -1){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    return s0.length === s1.length\
    \ && \n        s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n", "\tvar a0 = s0.split('').sort();\n\tvar a1 = s1.split('').sort();\n\tif(a0.length\
    \ != a1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < a0.length; i++){\n\
    \t\tif(a0[i] != a1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "    var table = {};\n    var c = s0.split('');\n    var d = s1.split('');\n   \
    \ var length = c.length;\n    var duplicates = false;\n    for(var i = 0; i <\
    \ length; i++){\n        var char = c[i];\n        table[char] = table[char] ||\
    \ 0;\n        table[char]++;\n    }\n    for(var i = 0; i < length; i++){\n  \
    \      var char = d[i];\n        table[char] = table[char] || 0;\n        table[char]--;\n\
    \    }\n    for(var char in table){\n        if(table[char] != 0){\n         \
    \   duplicates = true;\n            break;\n        }\n    }\n    return !duplicates;\n\
    }\n", "    if(s0.length != s1.length){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s0.length; i++){\n        if(s0.indexOf(s1[i]) == -1){\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n", "\tif(s0.length\
    \ != s1.length){\n\t\treturn false;\n\t}\n\tvar l0 = s0.length;\n\tfor(var i =\
    \ 0; i < l0; i++){\n\t\tif(s0.indexOf(s1[i]) < 0){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i])\
    \ < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor(var i = 0; i < s1.length; i++){\n\
    \t\tif(s0.indexOf(s1[i]) < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\tvar s0s = s0.split(\"\");\n\tvar s1s = s1.split(\"\");\n\tvar e1 = 0;\n\
    \tvar e2 = 0;\n\tvar unique_s0 = [];\n\tvar unique_s1 = [];\n\t//Get unique characters\
    \ from each word\n\tfor(var i = 0; i < s0s.length; i++){\n\t\tvar e = s0s[i];\n\
    \t\tif(unique_s0.indexOf(e) < 0){\n\t\t\tunique_s0.push(e);\n\t\t}\n\t}\n\tfor(var\
    \ i = 0; i < s1s.length; i++){\n\t\tvar e = s1s[i];\n\t\tif(unique_s1.indexOf(e)\
    \ < 0){\n\t\t\tunique_s1.push(e);\n\t\t}\n\t}\n\t//Check if unique characters\
    \ from one word are in the other.\n\tfor(var i = 0; i < unique_s0.length; i++){\n\
    \t\tif(unique_s1.indexOf(unique_s0[i]) >= 0){\n\t\t\te1++;\n\t\t}\n\t}\n\tfor(var\
    \ i = 0; i < unique_s1.length; i++){\n\t\tif(unique_s0.indexOf(unique_s1[i]) >=\
    \ 0){\n\t\t\te2++;\n\t\t}\n\t}\n\t//If each word has all unique characters from\
    \ the other then return true\n\tif(e1 == unique_s0.length && e2 == unique_s1.length){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tvar chars = s0.split('');\n\
    \tvar count = 0;\n\tfor(var i = 0; i < chars.length; i++){\n\t\tif(s1.indexOf(chars[i])\
    \ !== -1){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count === chars.length;\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0;\
    \ i < s0.length; i++){\n\t\tvar c = s0.charAt(i);\n\t\tif(s1.indexOf(c) < 0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar chars0 = s0.split('').sort();\n\
    \tvar chars1 = s1.split('').sort();\n\treturn chars0.join('') === chars1.join('');\n\
    }\n", "    if(s0.length != s1.length){\n        return false;\n    }\n    else{\n\
    \        var l0 = s0.split(\"\").sort();\n        var l1 = s1.split(\"\").sort();\n\
    \        for(var i = 0; i < l0.length; i++){\n            if(l0[i] != l1[i]){\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar d0\
    \ = count_chars(s0);\n\tvar d1 = count_chars(s1);\n\tfor(var c in d0){\n\t\tif(d0[c]\
    \ != d1[c]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar chars0\
    \ = s0.split('').sort();\n\tvar chars1 = s1.split('').sort();\n\tfor(var i = 0;\
    \ i < chars0.length; i++){\n\t\tif(chars0[i] != chars1[i]) return false;\n\t}\n\
    \treturn true;\n}\n", "\tvar n0 = s0.length;\n\tvar n1 = s1.length;\n\tif(n0 !=\
    \ n1){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < n0; i++){\n\t\tif(s0.indexOf(s1[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\treturn s0.split('').sort().join('')\
    \ == s1.split('').sort().join('');\n}\n", "    const c0 = s0.split('').sort().join('');\n\
    \    const c1 = s1.split('').sort().join('');\n    return c0 === c1;\n}\n", "\t\
    if(s0.length !== s1.length){return false;}\n\tif(s0.length == 0){return true;}\n\
    \tif(s0[0] == s1[0]){\n\t\treturn same_chars(s0.slice(1), s1.slice(1));\n\t}\n\
    \treturn false;\n}\n", "    var flag = true;\n    var s0 = s0.split(\"\");\n \
    \   var s1 = s1.split(\"\");\n    for(var i = 0; i < s0.length; i++){\n      \
    \  if(s1.indexOf(s0[i]) == -1){\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;\n}\n", "\treturn (s0.split('').sort().join('')\
    \ == s1.split('').sort().join(''));\n}\n", "    var c0 = s0.split('').sort();\n\
    \    var c1 = s1.split('').sort();\n    for(var i = 0; i < c0.length; i++){\n\
    \        if(c0[i] != c1[i]){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n\nvar result = words.filter(function(word){\n    for(var i\
    \ = 0; i < words.length; i++){\n        if(word.length == words[i].length &&\n\
    \            same_chars(word, words[i]) &&\n            word != words[i]){\n \
    \           return true;\n        }\n    }\n    return false;\n});\n", "    return\
    \ anagrams(s0, s1);\n}\n", "    var a0 = s0.split('');\n    var a1 = s1.split('');\n\
    \    var i;\n    for(i=0; i<a0.length; i++){\n        var j = a1.indexOf(a0[i]);\n\
    \        if(j == -1){\n            return false;\n        }else{\n           \
    \ a1.splice(j, 1);\n        }\n    }\n    return a1.length == 0;\n}\n", "\tfor(var\
    \ i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i]) < 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "\tvar k = 0;\n\tvar len = s0.length;\n\tvar\
    \ chrs = [];\n\tfor(var i = 0; i < len; i++){\n\t\tvar c = s0.charAt(i);\n\t\t\
    if(chrs.indexOf(c) == -1){\n\t\t\tif(s1.indexOf(c) != -1){\n\t\t\t\tchrs.push(c);\n\
    \t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\treturn k == len;\n}\n\n", "\ts0 = s0.split('').sort().join('');\n\
    \ts1 = s1.split('').sort().join('');\n\treturn s0 == s1;\n}\n", "\tvar i, letters\
    \ = {};\n\t\n\t//Add each letter from the first word to the letters object.\n\t\
    for(i = 0; i < s0.length; i += 1){\n\t\tletters[s0[i]] = (letters[s0[i]] || 0)\
    \ + 1;\n\t}\n\t\n\t//Remove each letter from the second word from the letters\
    \ object.\n\tfor(i = 0; i < s1.length; i += 1){\n\t\tletters[s1[i]] = (letters[s1[i]]\
    \ || 0) - 1;\n\t}\n\t\n\t//Check if any of the letters are left in the letters\
    \ object.\n\tfor(i in letters){\n\t\tif(letters.hasOwnProperty(i) && letters[i]\
    \ !== 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "    var\
    \ s0_len = s0.length,\n        s1_len = s1.length,\n        i = 0,\n        n\
    \ = 0;\n    \n    if(s0_len !== s1_len){\n        return false;\n    }\n    \n\
    \    for(i = 0; i < s0_len; i++){\n        if(s0.indexOf(s1[i]) !== -1){\n   \
    \         n++;\n        }\n    }\n    \n    return n === s0_len;\n}\n", "\tvar\
    \ char0 = {};\n\tvar char1 = {};\n\tvar i = 0;\n\tif(s0.length !== s1.length){\n\
    \t\treturn false;\n\t}\n\twhile(i < s0.length){\n\t\tif(!char0[s0[i]]){\n\t\t\t\
    char0[s0[i]] = 1;\n\t\t}\n\t\telse{\n\t\t\tchar0[s0[i]]++;\n\t\t}\n\t\tif(!char1[s1[i]]){\n\
    \t\t\tchar1[s1[i]] = 1;\n\t\t}\n\t\telse{\n\t\t\tchar1[s1[i]]++;\n\t\t}\n\t\t\
    i++;\n\t}\n\tfor(var char in char0){\n\t\tif(char0[char] !== char1[char]){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var i, c;\n    for(i\
    \ = 0; i < s0.length; i++){\n        c = s0.charAt(i);\n        if(s1.indexOf(c)\
    \ < 0){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    var chars = {};\n    var s0_len = s0.length;\n    var s1_len = s1.length;\n\
    \    var i;\n    if(s0_len != s1_len){\n        return false;\n    }\n    for(i\
    \ = 0; i < s0_len; i++){\n        if(!chars[s0[i]]){\n            chars[s0[i]]\
    \ = 1;\n        }\n        else{\n            chars[s0[i]]++;\n        }\n   \
    \ }\n    for(i = 0; i < s1_len; i++){\n        if(!chars[s1[i]]){\n          \
    \  return false;\n        }\n        else{\n            chars[s1[i]]--;\n    \
    \    }\n    }\n    return true;\n}\n", "\tvar c0 = string_to_chars(s0);\n\tvar\
    \ c1 = string_to_chars(s1);\n\treturn same_arrays(c0, c1);\n}\n", "\tif(s0.length\
    \ !== s1.length){\n\t\treturn false;\n\t}\n\tvar alph = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n\tvar counts = {};\n\tfor(var i = 0; i < alph.length; i++){\n\t\
    \tcounts[alph[i]] = 0;\n\t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tcounts[s0[i]]++;\n\
    \t\tcounts[s1[i]]--;\n\t}\n\tfor(var i = 0; i < alph.length; i++){\n\t\tif(counts[alph[i]]\
    \ !== 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "\treturn to_chars(s0).sort().join('')==to_chars(s1).sort().join('');\n\
    }\n", "\tif(s0.length !== s1.length){\n\t\treturn false;\n\t}\n\n\t//Lowercase\
    \ both words.\n\ts0 = s0.toLowerCase();\n\ts1 = s1.toLowerCase();\n\n\tvar w0\
    \ = sorted_chars(s0);\n\tvar w1 = sorted_chars(s1);\n\n\tfor(var i = 0; i < w0.length;\
    \ i++){\n\t\tif(w0[i] !== w1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn\
    \ true;\n}\n", "    var char_map = {};\n    var i, l = s0.length;\n    if(l !=\
    \ s1.length) return false;\n    for(i = 0; i < l; i++){\n        char_map[s0[i]]\
    \ = char_map[s0[i]] ? char_map[s0[i]] + 1 : 1;\n        char_map[s1[i]] = char_map[s1[i]]\
    \ ? char_map[s1[i]] - 1 : -1;\n    }\n    for(i in char_map){\n        if(char_map[i]\
    \ != 0) return false;\n    }\n    return true;\n}\n", "\tvar num=0;\n\tvar max=0;\n\
    \tvar i=0;\n\tfor(i=0; i<26; i++){\n\t\tnum = get_char_count(s0, i) - get_char_count(s1,\
    \ i);\n\t\tif(num < 0){\n\t\t\tnum = -num;\n\t\t}\n\t\tmax += num;\n\t}\n\treturn\
    \ (max<=1);\n}\n", "    if(s0.length !== s1.length){\n        return false;\n\
    \    }\n    return (\n        s0.split('').sort().join('') ===\n        s1.split('').sort().join('')\n\
    \    );\n}\n", "    var letters0 = letters(s0);\n    var letters1 = letters(s1);\n\
    \    if(letters0.length != letters1.length){\n        return false;\n    }\n \
    \   for(var i=0; i<letters0.length; i++){\n        var c = letters0[i];\n    \
    \    if(letters1.indexOf(c) < 0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    if(s0.length != s1.length){\n        return false;\n\
    \    }\n\n    s0 = s0.split('').sort().join('');\n    s1 = s1.split('').sort().join('');\n\
    \n    return s0 == s1;\n}\n", "    return (s0.split('').sort().join('') == s1.split('').sort().join(''));\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar s0s = s0.split(\"\
    \");\n\tvar s1s = s1.split(\"\");\n\ts0s.sort();\n\ts1s.sort();\n\t\n\tfor(var\
    \ i = 0; i < s0s.length; i++){\n\t\tif(s0s[i] != s1s[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "    let s0_chars = s0.split('');\n    let s1_chars\
    \ = s1.split('');\n    s0_chars.sort();\n    s1_chars.sort();\n    return s0_chars.join('')\
    \ == s1_chars.join('');\n}\n\n", "\tvar s0_c = [], s1_c = [];\n\tfor(var i = 0;\
    \ i < s0.length; i++){\n\t\ts0_c.push(s0.charAt(i));\n\t}\n\tfor(var i = 0; i\
    \ < s1.length; i++){\n\t\ts1_c.push(s1.charAt(i));\n\t}\n\ts0_c.sort();\n\ts1_c.sort();\n\
    \tvar s0_cs = s0_c.join('');\n\tvar s1_cs = s1_c.join('');\n\t\n\treturn s0_cs\
    \ == s1_cs;\n}\n", "    if(s0.length != s1.length){\n        return false;\n \
    \   }\n    let set0 = new Set(s0);\n    let set1 = new Set(s1);\n    for(let c\
    \ of set0){\n        if(!set1.has(c)){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "\tif(s0.length !== s1.length){\n\t\treturn false;\n\
    \t}\n\tvar c0 = s0.split('').sort();\n\tvar c1 = s1.split('').sort();\n\tfor(var\
    \ i = 0; i < c0.length; i++){\n\t\tif(c0[i] !== c1[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "    return s0.toLowerCase().split('').sort().join('')\
    \ === s1.toLowerCase().split('').sort().join('');\n}\n", "\tif(s0.length != s1.length){\n\
    \t\treturn false;\n\t}\n\t//Sort each string.\n\tvar s0 = s0.split(\"\").sort().join(\"\
    \");\n\tvar s1 = s1.split(\"\").sort().join(\"\");\n\t//Compare each char.\n\t\
    for(var i = 0; i < s0.length; i++){\n\t\tif(s0[i] != s1[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "    s0 = s0.toLowerCase().replace(/[^a-z]/g,\
    \ \"\");\n    s1 = s1.toLowerCase().replace(/[^a-z]/g, \"\");\n    for(var i=0;\
    \ i<s0.length; i++){\n        var char = s0.charAt(i);\n        if(s1.indexOf(char)\
    \ == -1){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < s0.length;\
    \ i++){\n\t\tif(s0.indexOf(s1[i]) == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\t\
    for(var i = 0; i < s0.length; i++){\n\t\tvar c = s0.charAt(i);\n\t\tif(s1.indexOf(c)\
    \ < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if(s0.charAt(i) != s1.charAt(i)){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n\n    s0 = s0.toLowerCase();\n    s1 = s1.toLowerCase();\n\
    \n    var m = new Map();\n    for(var i = 0; i < s0.length; i++){\n        var\
    \ c = s0.charAt(i);\n        var j = m.get(c);\n        if(j == undefined){\n\
    \            m.set(c, 1);\n        }\n        else{\n            m.set(c, j +\
    \ 1);\n        }\n    }\n\n    for(var i = 0; i < s1.length; i++){\n        var\
    \ c = s1.charAt(i);\n        var j = m.get(c);\n        if(j == undefined){\n\
    \            return false;\n        }\n        else{\n            if(j == 1){\n\
    \                m.delete(c);\n            }\n            else{\n            \
    \    m.set(c, j - 1);\n            }\n        }\n    }\n\n    return m.size ==\
    \ 0;\n}", "    return s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n", "    var c = 0;\n    for(var i=0; i< s0.length; i++){\n        if(s0[i]\
    \ === s1[i]){\n            c++;\n        }\n    }\n    return c;\n}\n\n", "  \
    \  s0 = s0.replace(/[^a-zA-Z]/g,'').toLowerCase();\n    s1 = s1.replace(/[^a-zA-Z]/g,'').toLowerCase();\n\
    \    if(s0.length != s1.length){\n        return false;\n    }\n    for(var i\
    \ = 0; i < s0.length; i++){\n        if(s1.indexOf(s0[i]) == -1){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n", "    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    let chars = s0.split('');\n\
    \    let char_count = {};\n    for(let c of chars){\n        char_count[c] = char_count[c]\
    \ + 1 || 1;\n    }\n    for(let c of s1){\n        if(char_count[c] == 0){\n \
    \           return false;\n        }\n        char_count[c]--;\n    }\n    return\
    \ true;\n}\n", "    if(s0.length != s1.length){\n        return false;\n    }\n\
    \    var chars0 = s0.split(\"\");\n    var chars1 = s1.split(\"\");\n    chars0.sort();\n\
    \    chars1.sort();\n    var size = chars0.length;\n    for(var i = 0; i < size;\
    \ i++){\n        if(chars0[i] != chars1[i]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "\tvar equal = true;\n\tif(s0.length !=\
    \ s1.length){return false;}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i)\
    \ != s1.charAt(i)){\n\t\t\tequal = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ equal;\n}\n", "\treturn s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n", "    var c0 = new Count();\n    var c1 = new Count();\n    var i, c;\n \
    \   for(i = 0; i < s0.length; i++){\n        c = s0.charAt(i);\n        c0.add(c);\n\
    \    }\n    for(i = 0; i < s1.length; i++){\n        c = s1.charAt(i);\n     \
    \   c1.add(c);\n    }\n    return c0.equals(c1);\n}\n", "    var match = 0;\n\
    \    for(var i = 0; i < s0.length; i++){\n        for(var j = 0; j < s1.length;\
    \ j++){\n            if(s0[i] == s1[j]){\n                match++;\n         \
    \       break;\n            }\n        }\n    }\n    return match == s0.length;\n\
    }\n", "\tvar c0 = s0.split('');\n\tvar c1 = s1.split('');\n\t\n\tc0.sort();\n\t\
    c1.sort();\n\t\n\treturn c0.join('') === c1.join('');\n}\n", "\tif(s0.length !=\
    \ s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < s0.length; i++){\n\
    \t\tif(!s1.includes(s0[i])){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    var n0 = s0.length;\n    var n1 = s1.length;\n    var i;\n    if(n0\
    \ != n1){\n        return false;\n    }\n    for(i = 0; i < n0; i++){\n      \
    \  if(s0.charAt(i) != s1.charAt(i)){\n            return false;\n        }\n \
    \   }\n    return true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\t\n\tvar t0 = s0.split(\"\");\n\tvar t1 = s1.split(\"\");\n\t\n\tt0.sort();\n\
    \tt1.sort();\n\t\n\tfor(var i = 0; i < t0.length; i++){\n\t\tif(t0[i] != t1[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tvar c0 = s0.split('').sort();\n\
    \tvar c1 = s1.split('').sort();\n\tvar res = c0.every(function(value, index) {\n\
    \t\treturn value === c1[index];\n\t});\n\treturn res;\n}\n", "    let a0 = Array.from(s0);\n\
    \    let a1 = Array.from(s1);\n    a0.sort();\n    a1.sort();\n    return a0.join('')\
    \ === a1.join('');\n}\n", "    //Check if the two word have the same length.\n\
    \    if(s0.length != s1.length){\n        return false;\n    }\n    //Check if\
    \ all letters in s0 are in s1.\n    for(let i = 0; i < s0.length; i++){\n    \
    \    if(s1.indexOf(s0[i]) == -1){\n            return false;\n        }\n    }\n\
    \    //Check if all letters in s1 are in s0.\n    for(let i = 0; i < s1.length;\
    \ i++){\n        if(s0.indexOf(s1[i]) == -1){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "\treturn (get_chars(s0) == get_chars(s1));\n\
    }\n", "    return (s0.length == s1.length) && s0.split('').sort().join('') ==\
    \ s1.split('').sort().join('');\n}\n", "    return s0.split('').sort().join('')\
    \ === s1.split('').sort().join('');\n}\n", "\t//Check if first word has the same\
    \ letters that the second one.\n\tfor(i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t//Check if second word has the same\
    \ letters that the first one.\n\tfor(i = 0; i < s1.length; i++){\n\t\tif(s0.indexOf(s1[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var t0\
    \ = s0.split('');\n    var t1 = s1.split('');\n    var l = t0.length;\n    if(l\
    \ !== t1.length){\n        return false;\n    }\n    for(var i = 0; i < l; i++){\n\
    \        if(t0[i] !== t1[i]){\n            return false;\n        }\n    }\n \
    \   return true;\n}\n", "    var c0 = s0.split('');\n    var c1 = s1.split('');\n\
    \    c0.sort();\n    c1.sort();\n    return c0.join('') == c1.join('');\n}\n",
  "    var match=0;\n    for(var i=0; i<s0.length; i++){\n        if(s1.indexOf(s0[i])>=0){\n\
    \            match++;\n        }\n    }\n    return match==s0.length;\n}", "\t\
    var same = true;\n\tfor(var i = 0; i < s0.length; i++){\n\t\tvar found = false;\n\
    \t\tfor(var j = 0; j < s1.length; j++){\n\t\t\tif(s0[i] == s1[j]){\n\t\t\t\tfound\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\t\t\tsame = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn same;\n}\n", "\tvar s0_arr = s0.split(\"\"\
    ).sort();\n\tvar s1_arr = s1.split(\"\").sort();\n\tfor(var i = 0; i < s0_arr.length;\
    \ i++){\n\t\tif(s0_arr[i] != s1_arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n\
    }\n", "    s0 = s0.toLowerCase();\n    s1 = s1.toLowerCase();\n    return s0.split('').sort().join('')\
    \ === s1.split('').sort().join('');\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n    for(let i = 0; i < s0.length; i++){\n     \
    \   if(s0[i] != s1[i]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    return sort_alpha(s0) == sort_alpha(s1);\n}\n", "    let letter_count\
    \ = new Map();\n    for(let i = 0; i < s0.length; i++){\n        let letter =\
    \ s0[i];\n        if(letter_count.has(letter)){\n            letter_count.set(letter,\
    \ letter_count.get(letter) + 1);\n        }else{\n            letter_count.set(letter,\
    \ 1);\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        let\
    \ letter = s1[i];\n        if(letter_count.has(letter)){\n            letter_count.set(letter,\
    \ letter_count.get(letter) - 1);\n        }else{\n            return false;\n\
    \        }\n    }\n    for(let count of letter_count.values()){\n        if(count\
    \ !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    if(s0.length != s1.length){\n        return false;\n    }\n    s0 = s0.split(\"\
    \").sort().join(\"\");\n    s1 = s1.split(\"\").sort().join(\"\");\n    if(s0\
    \ == s1){\n        return true;\n    }\n    return false;\n}\n", "    s0 = s0.replace(/\\\
    s/g, '');\n    s1 = s1.replace(/\\s/g, '');\n    var counts = {};\n    var i;\n\
    \    for (i=0; i<s0.length; i++){\n        if (s0[i] in counts){\n           \
    \ counts[s0[i]] = counts[s0[i]] + 1;\n        }\n        else{\n            counts[s0[i]]\
    \ = 1;\n        }\n    }\n    for (i=0; i<s1.length; i++){\n        if (s1[i]\
    \ in counts){\n            counts[s1[i]] = counts[s1[i]] - 1;\n        }\n   \
    \     else{\n            return false;\n        }\n    }\n    for (var c in counts){\n\
    \        if (counts[c] !== 0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nvar lines = [];\nvar line;\nwhile (line = readline()){\n\
    \    lines.push(line);\n}\n\nfor (var i=0; i<lines.length; i++){\n    var words\
    \ = lines[i].split(' ');\n    var count = 0;\n    for (var j=0; j<words.length;\
    \ j++){\n        for (var k=j+1; k<words.length; k++){\n            if (same_chars(words[j],\
    \ words[k])){\n                count = count + 1;\n            }\n        }\n\
    \    }\n    print(count);\n}", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\tvar chars_s0 = s0.split(\"\");\n\tvar chars_s1 = s1.split(\"\");\n\tfor(var\
    \ i = 0; i < chars_s0.length; i++){\n\t\tvar c = chars_s0[i];\n\t\tif(chars_s1.indexOf(c)\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tif(s0.length\
    \ != s1.length){\n\t\treturn false;\n\t}\n\t\n\tvar w0_c = word_to_array(s0);\n\
    \tvar w1_c = word_to_array(s1);\n\t\n\tw0_c.sort();\n\tw1_c.sort();\n\t\n\tvar\
    \ r_value = true;\n\t\n\tfor(var i = 0; i < w0_c.length; i++){\n\t\tif(w0_c[i]\
    \ != w1_c[i]){\n\t\t\tr_value = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn\
    \ r_value;\n}\n", "\tvar counter = 0;\n\tvar array_of_chars = s0.split(\"\");\n\
    \tfor(var i = 0; i < array_of_chars.length; i++){\n\t\tif(s1.includes(array_of_chars[i])){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter === array_of_chars.length;\n}\n",
  "\tvar count = 0;\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i])\
    \ != -1){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == s0.length){\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i) != s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    return s0.split('').sort().join('')\
    \ == s1.split('').sort().join('');\n}\n", "\tvar a0 = s0.split('').sort();\n\t\
    var a1 = s1.split('').sort();\n\tvar c0 = a0.join('');\n\tvar c1 = a1.join('');\n\
    \treturn c0 === c1;\n}\n", "\tvar x = [];\n\tvar y = [];\n\tfor(var i = 0; i <\
    \ s0.length; i++){\n\t\tx.push(s0.charAt(i));\n\t}\n\tfor(var i = 0; i < s1.length;\
    \ i++){\n\t\ty.push(s1.charAt(i));\n\t}\n\treturn x.sort().join() == y.sort().join();\n\
    }\n", "    for(var c of s0){\n        var i = s1.indexOf(c);\n        if(i >=\
    \ 0){\n            s1 = s1.substring(0, i) + s1.substring(i + 1);\n        }\n\
    \        else return false;\n    }\n    return true;\n}\n", "    if(s0.length!=s1.length){\n\
    \        return false;\n    }\n\n    for(var i=0; i<s0.length; i++){\n       \
    \ var c = s0.charAt(i);\n        if(s1.indexOf(c)<0){\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n    for(var i = 0; i < s0.length; i++){\n     \
    \   if(s0.charAt(i) != s1.charAt(i)){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\t\n\tvar a0 = s0.split(\"\");\n\tvar a1 = s1.split(\"\");\n\t\n\tfor(var\
    \ i = 0; i < a0.length; i++){\n\t\tvar char = a0[i];\n\t\tif(a1.indexOf(char)\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tvar flag\
    \ = true;\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i]) ==\
    \ -1){\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\n", " \
    \   s0 = s0.replace(/\\s+/g, '').toLowerCase();\n    s1 = s1.replace(/\\s+/g,\
    \ '').toLowerCase();\n    if(s0.length != s1.length){\n        return false;\n\
    \    }\n    else{\n        //If the words have the same characters\n        //they\
    \ need to have the same frequency of each character.\n        var h0 = {};\n \
    \       var h1 = {};\n        for(var i = 0; i < s0.length; i++){\n          \
    \  var c = s0[i];\n            if(c in h0){\n                h0[c] += 1;\n   \
    \         }\n            else{\n                h0[c] = 1;\n            }\n  \
    \      }\n        for(var i = 0; i < s1.length; i++){\n            var c = s1[i];\n\
    \            if(c in h1){\n                h1[c] += 1;\n            }\n      \
    \      else{\n                h1[c] = 1;\n            }\n        }\n        for(var\
    \ c in h0){\n            if(!(c in h1)){\n                return false;\n    \
    \        }\n            else if(h0[c] != h1[c]){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n", "    var r = true;\n\
    \    for(var i = 0; i < s0.length; i++){\n        var c = s0.charAt(i);\n    \
    \    var o = s1.indexOf(c);\n        if(o >= 0){\n            s1 = s1.substring(0,\
    \ o) + s1.substring(o + 1);\n        }else{\n            r = false;\n        \
    \    break;\n        }\n    }\n    return r;\n}\n", "    var c = 0;\n    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length;\
    \ i++){\n        c |= (1 << (s0.charCodeAt(i) - 'a'.charCodeAt(0)));\n    }\n\
    \    for(var i = 0; i < s1.length; i++){\n        c |= (1 << (s1.charCodeAt(i)\
    \ - 'a'.charCodeAt(0)));\n    }\n    return c == ((1 << 26) - 1);\n}\n", "   \
    \ var map = {};\n    for(var i = 0; i < s0.length; i++){\n        if(!map[s0[i]]){\n\
    \            map[s0[i]] = 1;\n        }else{\n            map[s0[i]]++;\n    \
    \    }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(!map[s1[i]]){\n\
    \            return false;\n        }else{\n            map[s1[i]]--;\n      \
    \  }\n    }\n    return true;\n}\n", "    return s0.split('').sort().join('')\
    \ === s1.split('').sort().join('');\n}\n", "\treturn same_array(letter_count(s0),\
    \ letter_count(s1));\n}\n", "    s0 = s0.toLowerCase();\n    s1 = s1.toLowerCase();\n\
    \    for(var i = 0; i < s0.length; i++){\n        if(s1.indexOf(s0[i]) == -1){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    let s0_chars = s0.split(\"\
    \");\n    let s1_chars = s1.split(\"\");\n    let s0_seen = [];\n    for(let i\
    \ = 0; i < s0_chars.length; i++){\n        s0_seen.push(s0_chars[i]);\n      \
    \  for(let j = 0; j < s1_chars.length; j++){\n            if(s0_chars[i] == s1_chars[j]){\n\
    \                s1_chars.splice(j, 1);\n                break;\n            }\n\
    \        }\n    }\n    return s1_chars.length == 0;\n}\n", "\tfor(var i=0; i<s0.length;\
    \ i++){\n\t\tif(s1.indexOf(s0[i])<0)\n\t\t\treturn false;\n\t}\n\treturn true;\n\
    }\n", "\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i]) == -1){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tif(s0.length != s1.length){\n\
    \t\treturn false;\n\t}\n\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.indexOf(s1[i])\
    \ < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n", "    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if(s0.indexOf(s1[i]) == -1){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    if(s0.length != s1.length){return\
    \ false;}\n    var lst = s0.split(\"\");\n    for(var i=0; i<lst.length; i++){\n\
    \        if(s1.indexOf(lst[i]) < 0){return false;}\n    }\n    return true;\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar\tw0 = s0.split(\"\
    \"),\n\t\tw1 = s1.split(\"\");\n\tw0.sort();\n\tw1.sort();\n\tfor(var i=0; i<w0.length;\
    \ i++){\n\t\tif(w0[i] != w1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    var map0 = [];\n    var map1 = [];\n    for(var i = 0; i < s0.length;\
    \ i++){\n        var c = s0.charAt(i);\n        if(map0[c] == undefined){\n  \
    \          map0[c] = 1;\n        }else{\n            map0[c] = map0[c] + 1;\n\
    \        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        var c = s1.charAt(i);\n\
    \        if(map1[c] == undefined){\n            map1[c] = 1;\n        }else{\n\
    \            map1[c] = map1[c] + 1;\n        }\n    }\n    for(var i = 0; i <\
    \ 26; i++){\n        var c = String.fromCharCode(97 + i);\n        if(map0[c]\
    \ != map1[c]){\n            return false;\n        }\n    }\n    return true;\n\
    }", "    var dict = {};\n    if(s0.length !== s1.length){\n        return false;\n\
    \    }\n    for(var i = 0; i < s0.length; i++){\n        var c = s0[i];\n    \
    \    if(dict[c] === undefined){\n            dict[c] = 1;\n        }\n       \
    \ else{\n            dict[c]++;\n        }\n    }\n    for(var i = 0; i < s1.length;\
    \ i++){\n        var c = s1[i];\n        if(dict[c] === undefined){\n        \
    \    return false;\n        }\n        dict[c]--;\n        if(dict[c] === 0){\n\
    \            delete dict[c];\n        }\n    }\n    return true;\n}\n\nvar word_list\
    \ = [\n    \"a\",\n    \"aa\",\n    \"aaa\",\n    \"aaaa\",\n    \"aaaaa\",\n\
    \    \"aaaaaa\",\n    \"aaaaaaa\",\n    \"aaaaaaaa\",\n    \"aaaaaaaaa\",\n  \
    \  \"aaaaaaaaaa\",\n    \"ba\",\n    \"baa\",\n    \"baaa\",\n    \"baaaa\",\n\
    \    \"baaaaa\",\n    \"baaaaaa\",\n    \"baaaaaaa\",\n    \"baaaaaaaa\",\n  \
    \  \"baaaaaaaaa\",\n    \"ca\",\n    \"caa\",\n    \"caaa\",\n    \"caaaa\",\n\
    \    \"caaaaa\",\n    \"caaaaaa\",\n    \"caaaaaaa\",\n    \"caaaaaaaa\",\n  \
    \  \"caaaaaaaaa\",\n    \"da\",\n    \"daa\",\n    \"daaa\",\n    \"daaaa\",\n\
    \    \"daaaaa\",\n    \"daaaaaa\",\n    \"daaaaaaa\",\n    \"daaaaaaaa\",\n  \
    \  \"daaaaaaaaa\",\n    \"ea\",\n    \"eaa\",\n    \"eaaa\",\n    \"eaaaa\",\n\
    \    \"eaaaaa\",\n    \"eaaaaaa\",\n    \"eaaaaaaa\",\n    \"eaaaaaaaa\",\n  \
    \  \"eaaaaaaaaa\",\n    \"fa\",\n    \"faa\",\n    \"faaa\",\n    \"faaaa\",\n\
    \    \"faaaaa\",", "    var l0 = s0.length;\n    var l1 = s1.length;\n    var\
    \ h0 = get_hash(s0);\n    var h1 = get_hash(s1);\n    if(l0 != l1) return false;\n\
    \    for(var i=0; i<l0; i++){\n        if(h0[s0[i]] != h1[s0[i]]) return false;\n\
    \    }\n    return true;\n}\n", "\ts0 = s0.toLowerCase();\n\ts1 = s1.toLowerCase();\n\
    \tvar a0 = s0.split(\"\");\n\tvar a1 = s1.split(\"\");\n\tvar length = a0.length;\n\
    \tvar i = 0;\n\tvar j = 0;\n\tvar t = false;\n\tvar l0 = 0;\n\tvar l1 = 0;\n\t\
    if(length != a1.length){\n\t\treturn false;\n\t}\n\tfor(i = 0; i < length; i++){\n\
    \t\tt = false;\n\t\tfor(j = 0; j < length; j++){\n\t\t\tif(a0[i] == a1[j]){\n\t\
    \t\t\tl0++;\n\t\t\t\ta1[j] = null;\n\t\t\t\tt = true;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif(!t){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor(i = 0; i < length;\
    \ i++){\n\t\tif(a1[i] != null){\n\t\t\tl1++;\n\t\t}\n\t}\n\tif(l0 != l1){\n\t\t\
    return false;\n\t}\n\treturn true;\n}\n", "    if(s0.length != s1.length){\n \
    \       return false;\n    }\n    for(var i = 0; i < s0.length; i++){\n      \
    \  if(s0.indexOf(s1[i]) < 0){\n            return false;\n        }\n    }\n \
    \   return true;\n}\n", "\tfor(var i=0; i<s0.length; i++){\n\t\tif(s1.indexOf(s0[i])\
    \ < 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n", "    var map0 = new Map();\n\
    \    var map1 = new Map();\n    var i;\n    for(i = 0; i < s0.length; i++){\n\
    \        map0.set(s0[i], 1 + (map0.get(s0[i]) || 0));\n    }\n    for(i = 0; i\
    \ < s1.length; i++){\n        map1.set(s1[i], 1 + (map1.get(s1[i]) || 0));\n \
    \   }\n    for(i = 0; i < s0.length; i++){\n        if(map0.get(s0[i]) != map1.get(s0[i])){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    var\
    \ i = 0;\n    var c0 = s0.split('');\n    var c1 = s1.split('');\n    var result\
    \ = false;\n    c0.sort();\n    c1.sort();\n    if(c0.length == c1.length){\n\
    \        while(i < c0.length && c0[i] == c1[i]){\n            i++;\n        }\n\
    \        if(i == c0.length){\n            result = true;\n        }\n    }\n \
    \   return result;\n}\n", "    var a1 = s0.split('');\n    var a2 = s1.split('');\n\
    \    var len = a1.length;\n    if(len != a2.length){\n        return false;\n\
    \    }\n    for(var i = 0; i < len; i++){\n        if(a1[i] != a2[i]){\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if(s0.length\
    \ !== s1.length){\n        return false;\n    }\n\n    let hist = [];\n    for(let\
    \ i = 0; i < 26; i++){\n        hist.push(0);\n    }\n\n    for(let i = 0; i <\
    \ s0.length; i++){\n        let idx = s0.charCodeAt(i) - 'a'.charCodeAt(0);\n\
    \        hist[idx]++;\n    }\n\n    for(let i = 0; i < s1.length; i++){\n    \
    \    let idx = s1.charCodeAt(i) - 'a'.charCodeAt(0);\n        hist[idx]--;\n \
    \   }\n\n    for(let i = 0; i < 26; i++){\n        if(hist[i] !== 0){\n      \
    \      return false;\n        }\n    }\n\n    return true;\n}\n", "\tvar char0\
    \ = s0.split('').sort().join('');\n\tvar char1 = s1.split('').sort().join('');\n\
    \treturn char0 == char1;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i) != s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar d0 = [];\n\tvar\
    \ d1 = [];\n\tvar i;\n\tfor(i = 0; i < s0.length; i++){\n\t\td0[s0.charCodeAt(i)]\
    \ = true;\n\t}\n\tfor(i = 0; i < s1.length; i++){\n\t\td1[s1.charCodeAt(i)] =\
    \ true;\n\t}\n\tfor(i = 0; i < 65536; i++){\n\t\tif(d0[i] != d1[i]){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var a0 = s0.split('');\n    var\
    \ a1 = s1.split('');\n    a0.sort();\n    a1.sort();\n    return a0.join('') ==\
    \ a1.join('');\n}\n", "\tvar same = true;\n\tif(s0.length != s1.length){\n\t\t\
    same = false;\n\t}else{\n\t\tfor(var i = 0; i < s0.length; i++){\n\t\t\tif(s0.charAt(i)\
    \ != s1.charAt(i)){\n\t\t\t\tsame = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn same;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t\
    }\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i) != s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    let aux0 = s0.split('').sort();\n\
    \    let aux1 = s1.split('').sort();\n    let same = true;\n    for(let i = 0;\
    \ i < aux0.length; i++){\n        if(aux0[i] != aux1[i]){\n            same =\
    \ false;\n            break;\n        }\n    }\n    return same;\n}\n", "    if(s0.length\
    \ !== s1.length){\n        return false;\n    }\n    var i, j;\n    for(i = 0;\
    \ i < s0.length; i++){\n        for(j = 0; j < s1.length; j++){\n            if(s0[i]\
    \ === s1[j]){\n                break;\n            }\n        }\n        if(j\
    \ === s1.length){\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar i;\n\tfor(i\
    \ = 0; i < s0.length; i++){\n\t\tif(!s1.includes(s0[i])){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(!s1.includes(s0[i])){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    // If the words are not\
    \ the same length they cannot have the same characters.\n    if(s0.length !==\
    \ s1.length){return false;}\n    // If they are the same length and the same word,\
    \ they have the same characters.\n    if(s0 === s1){return true;}\n    // Split\
    \ the words into arrays.\n    var arr0 = s0.split('');\n    var arr1 = s1.split('');\n\
    \    // Sort the two arrays.\n    arr0.sort();\n    arr1.sort();\n    // Check\
    \ if the sorted arrays are the same.\n    for(var i = 0; i < arr0.length; i++){\n\
    \        if(arr0[i] !== arr1[i]){return false;}\n    }\n    // If all the letters\
    \ of the sorted arrays are the same, the words had the same letters.\n    return\
    \ true;\n}\n", "\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.indexOf(s0[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\treturn s0.split('').sort().join('')\
    \ === s1.split('').sort().join('');\n}\n", "    var arr0 = s0.split('').sort();\n\
    \    var arr1 = s1.split('').sort();\n    return arr0.toString() === arr1.toString();\n\
    }\n", "\tvar len = Math.min(s0.length, s1.length);\n\tvar i;\n\tfor(i = 0; i <\
    \ len; i++){\n\t\tif(s0[i] != s1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tvar n\
    \ = s0.length;\n\tfor(var i = 0; i < n; i++){\n\t\tif(s0.indexOf(s1[i]) < 0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    let s0_len = s0.length;\n\
    \    let s1_len = s1.length;\n    if(s0_len !== s1_len){\n        return false;\n\
    \    }\n    let s0_counter = {};\n    let s1_counter = {};\n    for(let i = 0;\
    \ i < s0_len; i++){\n        if(s0_counter[s0[i]]){\n            s0_counter[s0[i]]++;\n\
    \        }else{\n            s0_counter[s0[i]] = 1;\n        }\n        if(s1_counter[s1[i]]){\n\
    \            s1_counter[s1[i]]++;\n        }else{\n            s1_counter[s1[i]]\
    \ = 1;\n        }\n    }\n    for(let key in s0_counter){\n        if(s0_counter[key]\
    \ !== s1_counter[key]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    var s0_chars = string_to_chars(s0),\n        s1_chars = string_to_chars(s1);\n\
    \    if(s0_chars.length != s1_chars.length){\n        return false;\n    }\n \
    \   for(var i = 0; i < s0_chars.length; i++){\n        var char = s0_chars[i];\n\
    \        if(char_freq(char, s0_chars) != char_freq(char, s1_chars)){\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n", "\tvar letter_count\
    \ = [];\n\t\n\tfor(var i = 0; i < 26; i++){\n\t\tletter_count.push(0);\n\t}\n\t\
    \n\tfor(var i = 0; i < s0.length; i++){\n\t\tvar letter = s0.charCodeAt(i) - 'a'.charCodeAt(0);\n\
    \t\tletter_count[letter]++;\n\t}\n\t\n\tfor(var i = 0; i < s1.length; i++){\n\t\
    \tvar letter = s1.charCodeAt(i) - 'a'.charCodeAt(0);\n\t\tletter_count[letter]--;\n\
    \t}\n\t\n\tfor(var i = 0; i < 26; i++){\n\t\tif(letter_count[i] != 0){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "    var myMap = new Map();\n\
    \    for(var i = 0; i < s0.length; i++){\n        if(myMap.has(s0[i])){\n    \
    \        myMap.set(s0[i], myMap.get(s0[i]) + 1);\n        }\n        else{\n \
    \           myMap.set(s0[i], 1);\n        }\n    }\n    for(var i = 0; i < s1.length;\
    \ i++){\n        if(myMap.has(s1[i])){\n            myMap.set(s1[i], myMap.get(s1[i])\
    \ - 1);\n        }\n        else{\n            return false;\n        }\n    }\n\
    \    for(var key of myMap.keys()){\n        if(myMap.get(key) != 0){\n       \
    \     return false;\n        }\n    }\n    return true;\n}", "\tif(s0.length !=\
    \ s1.length){\n\t\treturn false;\n\t}\n\n\tvar p1 = 0;\n\tvar p2 = 0;\n\tvar alphacount\
    \ = Array.apply(null, Array(26)).map(Number.prototype.valueOf,0);\n\n\twhile(p1\
    \ < s0.length){\n\t\tvar c1 = s0.charCodeAt(p1) - \"a\".charCodeAt(0);\n\t\tvar\
    \ c2 = s1.charCodeAt(p2) - \"a\".charCodeAt(0);\n\t\talphacount[c1]++;\n\t\talphacount[c2]--;\n\
    \t\tp1++;\n\t\tp2++;\n\t}\n\n\tfor(var i = 0; i < 26; i++){\n\t\tif(alphacount[i]\
    \ != 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n", "    return\
    \ (s0.split('').sort().join('') === s1.split('').sort().join(''));\n}\n", "\t\
    var flag = true;\n\tvar n = s0.length;\n\tvar m = s1.length;\n\tvar i = 0;\n\t\
    if(n != m){\n\t\treturn false;\n\t}\n\tfor(i = 0; i < n; i++){\n\t\tif(s0.indexOf(s1[i])\
    \ == -1){\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\n",
  "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < s0.length;\
    \ i++){\n\t\tif(s0.indexOf(s1[i]) == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n", "    if(s0.length != s1.length){\n        return false;\n\
    \    }\n\n    var s0_count = {};\n    var s1_count = {};\n\n    var i;\n    for(i\
    \ = 0; i < s0.length; i++){\n        var c = s0[i];\n        if(c in s0_count){\n\
    \            s0_count[c]++;\n        }else{\n            s0_count[c] = 1;\n  \
    \      }\n    }\n\n    for(i = 0; i < s1.length; i++){\n        var c = s1[i];\n\
    \        if(c in s1_count){\n            s1_count[c]++;\n        }else{\n    \
    \        s1_count[c] = 1;\n        }\n    }\n\n    for(var prop in s0_count){\n\
    \        if(s0_count[prop] != s1_count[prop]){\n            return false;\n  \
    \      }\n    }\n\n    return true;\n}", "\tif(s0.length !== s1.length){return\
    \ false;}\n\tvar letters = 0;\n\tfor(var i = 0; i < s0.length; i++){\n\t\tletters\
    \ |= 1 << (s0.charCodeAt(i) - 65);\n\t}\n\tfor(var i = 0; i < s1.length; i++){\n\
    \t\tif((letters & (1 << (s1.charCodeAt(i) - 65))) === 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "\tvar s0_chars = s0.split('').sort();\n\tvar\
    \ s1_chars = s1.split('').sort();\n\tvar i;\n\tfor(i = 0; i < s0_chars.length;\
    \ i++){\n\t\tif(s0_chars[i] != s1_chars[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t}\n\
    \t\n\tvar i = 0;\n\twhile(i < s0.length){\n\t\tif(s0.charAt(i) != s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n", "\tvar count\
    \ = 0;\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s1.includes(s0[i])){\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count == s0.length;\n}\n", "    var arr = new\
    \ Array(26);\n    var a = 'a'.charCodeAt(0);\n    for(var i = 0; i < 26; i++)\
    \ arr[i] = 0;\n    for(var i = 0; i < s0.length; i++) arr[s0.charCodeAt(i) - a]++;\n\
    \    for(var i = 0; i < s1.length; i++) arr[s1.charCodeAt(i) - a]--;\n    for(var\
    \ i = 0; i < 26; i++) if(arr[i] != 0) return false;\n    return true;\n}\n", "\t\
    if(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tlet chars = {}\n\tfor(let\
    \ i = 0; i < s0.length; i++){\n\t\tlet c = s0[i];\n\t\tif(chars[c] === undefined){\n\
    \t\t\tchars[c] = 0;\n\t\t}\n\t\tchars[c]++;\n\t}\n\tfor(let i = 0; i < s1.length;\
    \ i++){\n\t\tlet c = s1[i];\n\t\tif(chars[c] === undefined){\n\t\t\treturn false;\n\
    \t\t}\n\t\tchars[c]--;\n\t\tif(chars[c] === 0){\n\t\t\tdelete chars[c];\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "\tvar temp = s0;\n\tfor(var i = 0; i < s1.length;\
    \ i++){\n\t\tvar index = temp.indexOf(s1[i]);\n\t\tif(index != -1){\n\t\t\ttemp\
    \ = temp.substring(0, index) + temp.substring(index + 1);\n\t\t}\n\t\telse{\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var chars_0 = s0.split('');\n\
    \    var chars_1 = s1.split('');\n    var i;\n    for(i = 0; i < chars_0.length;\
    \ i++){\n        if(chars_1.indexOf(chars_0[i]) == -1){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n    for(var i = 0; i < s0.length; i++){\n     \
    \   if(s0.charAt(i) != s1.charAt(i)){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    if(s0.length != s1.length){\n        return\
    \ false;\n    }\n    s0 = s0.split(\"\").sort().join(\"\");\n    s1 = s1.split(\"\
    \").sort().join(\"\");\n    return s0 == s1;\n}\n", "    var r = false;\n    var\
    \ cnt0 = new Counter();\n    var cnt1 = new Counter();\n    for(var i = 0; i <\
    \ s0.length; i++){\n        cnt0.add(s0[i]);\n    }\n    for(var i = 0; i < s1.length;\
    \ i++){\n        cnt1.add(s1[i]);\n    }\n    for(var c in cnt0.get_dict()){\n\
    \        if(cnt0.get_dict()[c] !== cnt1.get_dict()[c]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n\n    s0 = s0.split('').sort().join('');\n    s1\
    \ = s1.split('').sort().join('');\n\n    return s0 == s1;\n}\n", "    if(s0.length\
    \ != s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if(s0.charAt(i) != s1.charAt(i)){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "\tif(s0.length != s1.length){\n\t\t\
    return false;\n\t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i)\
    \ != s1.charAt(i)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \   var mapping = new Array(26);\n    for(var i = 0; i < 26; i++){\n        mapping[i]\
    \ = -1;\n    }\n    for(var i = 0; i < s0.length; i++){\n        var idx0 = s0.charCodeAt(i)\
    \ - 'a'.charCodeAt(0);\n        var idx1 = s1.charCodeAt(i) - 'a'.charCodeAt(0);\n\
    \        if(mapping[idx0] == -1){\n            mapping[idx0] = idx1;\n       \
    \ }else if(mapping[idx0] != idx1){\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\
    \t}\n\tvar l = s0.length;\n\tvar d = {};\n\tvar i;\n\tfor(i = 0; i < l; i++){\n\
    \t\tvar c = s0.charAt(i);\n\t\tif(!(c in d)){\n\t\t\td[c] = 0;\n\t\t}\n\t\td[c]++;\n\
    \t}\n\tfor(i = 0; i < l; i++){\n\t\tvar c = s1.charAt(i);\n\t\tif(!(c in d)){\n\
    \t\t\treturn false;\n\t\t}\n\t\td[c]--;\n\t\tif(d[c] < 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "\treturn s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n", "    return sort_chars(s0) == sort_chars(s1);\n}\n", "\tvar l0 = s0.length;\n\
    \tvar l1 = s1.length;\n\tif(l0 != l1){return false;}\n\tfor(var i = 0; i < l0;\
    \ i++){\n\t\tif(s0.indexOf(s1[i]) < 0){return false;}\n\t}\n\treturn true;\n}\n",
  "    if(s0.length !== s1.length){\n        return false;\n    }\n    var a0 = s0.split('').sort();\n\
    \    var a1 = s1.split('').sort();\n    for(var i = 0; i < a0.length; i++){\n\
    \        if(a0[i] !== a1[i]){\n            return false;\n        }\n    }\n \
    \   return true;\n}\n", "\tif(s0.length != s1.length){\n\t\treturn false;\n\t\
    }\n\telse{\n\t\tfor(var i = 0; i < s0.length; i++){\n\t\t\tif(count_char(s0, s0[i])\
    \ != count_char(s1, s0[i])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ true;\n\t}\n}\n", "\t//Sort two strings and see if they are the same.\n\tvar\
    \ a = s0.split(\"\").sort().join(\"\"),\n\t\tb = s1.split(\"\").sort().join(\"\
    \");\n\treturn a == b;\n}\n", "\treturn s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n", "\tif(s0.length !== s1.length){\n\t\treturn false;\n\t}\n\tfor(let ch of\
    \ s0){\n\t\tlet idx = s1.indexOf(ch);\n\t\tif(idx < 0){\n\t\t\treturn false;\n\
    \t\t}\n\t\ts1 = s1.substring(0, idx) + s1.substring(idx + 1);\n\t}\n\treturn true;\n\
    }\n", "\tvar n0 = s0.length;\n\tvar n1 = s1.length;\n\t\n\tif(n0 !== n1){\n\t\t\
    return false;\n\t}\n\n\t//Same length.\n\tfor(var i = 0; i < n0; i++){\n\t\tvar\
    \ c0 = s0.charAt(i);\n\t\tvar c1 = s1.charAt(i);\n\t\t\n\t\tif(c0 !== c1){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tvar i;\n\tif(s0.length\
    \ != s1.length)\n\t\treturn false;\n\tfor(i = 0; i < s0.length; i++){\n\t\tif(s0.charAt(i)\
    \ != s1.charAt(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n", "    var chars0\
    \ = s0.split('');\n    var chars1 = s1.split('');\n    var i;\n    var l = chars0.length;\n\
    \    if(l !== chars1.length){\n        return false;\n    }\n    for(i = 0; i\
    \ < l; i++){\n        if(chars1.indexOf(chars0[i]) === -1){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n", "\tvar i, j, l0, l1, c0,\
    \ c1;\n\ts0 = s0.toLowerCase();\n\ts1 = s1.toLowerCase();\n\tl0 = s0.length;\n\
    \tl1 = s1.length;\n\tif(l0 != l1){\n\t\treturn false;\n\t}\n\tfor(i = 0; i < l0;\
    \ i++){\n\t\tc0 = s0.charAt(i);\n\t\tc1 = s1.charAt(i);\n\t\tif(c0 == c1){\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif(c0 == '\\'' || c1 == '\\''){\n\t\t\tcontinue;\n\t\
    \t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "\ts0 = s0.toLowerCase();\n\
    \ts1 = s1.toLowerCase();\n\tif(s0.length != s1.length){\n\t\treturn false;\n\t\
    }\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(s0.indexOf(s1[i]) == -1){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    if(s0.length != s1.length){\n\
    \        return false;\n    }\n    var dict = {};\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if(dict[s0[i]] == undefined){\n            dict[s0[i]] = 1;\n\
    \        }\n        else{\n            dict[s0[i]] += 1;\n        }\n    }\n \
    \   for(var i = 0; i < s1.length; i++){\n        if(dict[s1[i]] == undefined){\n\
    \            return false;\n        }\n        else{\n            dict[s1[i]]\
    \ -= 1;\n        }\n    }\n    for(var key in dict){\n        if(dict[key] !=\
    \ 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "\t\
    var i;\n\tvar char_map0 = new Array(26);\n\tvar char_map1 = new Array(26);\n\t\
    for(i = 0; i < 26; i++){\n\t\tchar_map0[i] = 0;\n\t\tchar_map1[i] = 0;\n\t}\n\t\
    \n\tfor(i = 0; i < s0.length; i++){\n\t\tchar_map0[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n\
    \t}\n\tfor(i = 0; i < s1.length; i++){\n\t\tchar_map1[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n\
    \t}\n\t\n\tfor(i = 0; i < 26; i++){\n\t\tif(char_map0[i] != char_map1[i]){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
