language: js
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif(txt.indexOf('\
    \ ') >= 0){\n\t\treturn txt.split(' ');\n\t}\n\telse if(txt.indexOf(',') >= 0){\n\
    \t\treturn txt.split(',');\n\t}\n\telse {\n\t\treturn txt.match(/[a-z]/g).length;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyyb3suy4.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyyb3suy4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var text\
    \ = txt.split(\" \")\n    if(text.length === 1){\n        var textt = text[0].split(\"\
    ,\")\n        if(textt.length === 1){\n            var count = 0\n           \
    \ for(var i = 0; i < textt[0].length; i++){\n                if(i % 2 === 0){\n\
    \                    if(textt[0][i] === textt[0][i].toLowerCase()){\n        \
    \                count += 1\n                    }\n                }\n      \
    \      }\n            return count\n        }else{\n            return textt\n\
    \        }\n    }else{\n        return text\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp06cm2ayk.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp06cm2ayk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    // Note\
    \ txt.split() splits on whitespace by default.\n    var txt_list = txt.split()\n\
    \    if (txt_list.length < 2) {\n        return txt.length\n    }\n    return\
    \ txt_list\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjjo0c5rk.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjjo0c5rk.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    return\
    \ (txt.trim().split(\" \").length > 1 ? txt.trim().split(\" \") : (txt.trim().split(\"\
    ,\").length > 1 ? txt.trim().split(\",\") : count_odd(txt.trim())));\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3un2cr_x.js:8\n    return (txt.trim().split(\" \").length > 1 ?\
    \ txt.trim().split(\" \") : (txt.trim().split(\",\").length > 1 ? txt.trim().split(\"\
    ,\") : count_odd(txt.trim())));\n                                            \
    \                                                                          ^\n\
    \nReferenceError: count_odd is not defined\n    at split_words (/tmp/tmp3un2cr_x.js:8:119)\n\
    \    at test (/tmp/tmp3un2cr_x.js:20:20)\n    at Object.<anonymous> (/tmp/tmp3un2cr_x.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar splited\
    \ = txt.split(\" \");\n\tvar splited2 = txt.split(\",\");\n\tvar count = 0;\n\t\
    \n\tif(splited.length > 1){\n\t\treturn splited;\n\t}\n\telse if(splited2.length\
    \ > 1){\n\t\treturn splited2;\n\t}\n\telse{\n\t\tfor(var i = 0; i < txt.length;\
    \ i++){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpusnfpt_i.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpusnfpt_i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.split(\"\
    \ \").length >= 2){\n        return txt.split(\" \");\n    }\n    else if(txt.split(\"\
    ,\").length >= 2){\n        return txt.split(\",\");\n    }\n    else{\n     \
    \   var count = 0;\n        for(var i = 0; i < txt.length; i++){\n           \
    \ if(txt.charCodeAt(i) % 2 == 1){\n                count++;\n            }\n \
    \       }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpakibrgei.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpakibrgei.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (/\\\
    S/.test(txt)){\n        var txtSplit = txt.split(/\\s/);\n        var txtLen =\
    \ txtSplit.length;\n        if (txtLen > 1){\n            return txtSplit;\n \
    \       }\n        else{\n            return txtLen;\n        }\n    }\n    else\
    \ if (/\\S/.test(txt)){\n        var txtSplit = txt.split(/\\s/);\n        var\
    \ txtLen = txtSplit.length;\n        if (txtLen > 1){\n            return txtSplit;\n\
    \        }\n        else{\n            return txtLen;\n        }\n    }\n    else{\n\
    \        var lower_alpha = txt.match(/[a-z]/g).length;\n        return lower_alpha;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprl9kl2z5.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmprl9kl2z5.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var arr\
    \ = txt.split('');\n    var count = 0;\n    var letters = [];\n    var arr2 =\
    \ [];\n    var arr3 = [];\n    var arr4 = [];\n    var b = 0;\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] == \" \" || arr[i] == \",\"){\n\
    \            count += 1;\n        }\n    }\n    if(count == 0){\n        for(var\
    \ i = 0; i < arr.length; i++){\n            if(arr[i] != \" \" && arr[i] != \"\
    ,\"){\n                letters.push(arr[i]);\n            }\n        }\n     \
    \   for(var i = 0; i < letters.length; i++){\n            var a = letters[i].charCodeAt(0);\n\
    \            arr2.push(a);\n        }\n        for(var i = 0; i < arr2.length;\
    \ i++){\n            if(arr2[i] % 2 != 0){\n                arr3.push(arr2[i]);\n\
    \            }\n        }\n        for(var i = 0; i < arr3.length; i++){\n   \
    \         var c = arr3[i] - 97;\n            arr4.push(c);\n        }\n      \
    \  for(var i = 0; i < arr4.length; i++){\n            if(arr4[i] % 2 != 0){\n\
    \                b += 1;\n            }\n        }\n        return b;\n    }\n\
    \    else if(count > 0){\n        var words = txt.split(' ');\n        for(var\
    \ i = 0; i < words.length; i++){\n            arr2.push(words[i]);\n        }\n\
    \        return arr2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsf8oqpy6.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsf8oqpy6.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.includes(\"\
    \ \")) {\n\t\treturn txt.split(\" \");\n\t}\n\telse if (txt.includes(\",\")) {\n\
    \t\treturn txt.split(\",\");\n\t}\n\telse {\n\t\tvar count = 0;\n\t\tvar txt_lower\
    \ = txt.toLowerCase();\n\t\tfor (var i = 0; i < txt_lower.length; i++) {\n\t\t\
    \tif (i % 2 == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpkgyfavnn.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkgyfavnn.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.match(/\\\
    s+/)){\n\t\treturn txt.split(/\\s+/);\n\t} else if (txt.match(/,/)){\n\t\treturn\
    \ txt.split(/,/);\n\t} else {\n\t\tcount = 0;\n\t\tfor (var i = 0; i < txt.length;\
    \ i++){\n\t\t\tif (ord(txt[i]) % 2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \treturn count;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvezv3y_g.js:15\n\t\t\tif (ord(txt[i]) % 2 != 0){\n\t\t\t^\n\nReferenceError:\
    \ ord is not defined\n    at split_words (/tmp/tmpvezv3y_g.js:15:4)\n    at test\
    \ (/tmp/tmpvezv3y_g.js:32:20)\n    at Object.<anonymous> (/tmp/tmpvezv3y_g.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let sum\
    \ = 0;\n    let re = /,|\\s/;\n    if(re.test(txt)){\n        let spt = txt.split(/\\\
    s|,/);\n        return spt;\n    }else{\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n                sum++;\n\
    \            }\n        }\n        return sum;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp24ixqgcl.js:30:10)\n    at Object.<anonymous> (/tmp/tmp24ixqgcl.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.match(/\\\
    s/g)){\n\t\tvar split = txt.split(\" \");\n\t\tvar ans = split.map(function(word){\n\
    \t\t\treturn word;\n\t\t});\n\t\treturn ans;\n\t}\n\telse if (txt.match(/\\,/g)){\n\
    \t\tvar split = txt.split(\",\");\n\t\tvar ans = split.map(function(word){\n\t\
    \t\treturn word;\n\t\t});\n\t\treturn ans;\n\t}\n\telse {\n\t\tvar x = txt.toLowerCase();\n\
    \t\tvar ans = x.split(\"\");\n\t\tvar count = 0;\n\t\tfor (var i = 0; i < ans.length;\
    \ i++){\n\t\t\tif (i % 2 === 1){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ count;\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptbgpvqaa.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptbgpvqaa.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  let spl_txt\
    \ = txt.split(\" \");\n  let new_spl_txt = [];\n  for(let i = 0; i < spl_txt.length;\
    \ i++){\n    new_spl_txt.push(spl_txt[i]);\n  }\n  if(spl_txt.length > 1){\n \
    \   return new_spl_txt;\n  }else{\n    let spl_txt_2 = txt.split(\",\");\n   \
    \ let new_spl_txt_2 = [];\n    for(let i = 0; i < spl_txt_2.length; i++){\n  \
    \    new_spl_txt_2.push(spl_txt_2[i]);\n    }\n    if(spl_txt_2.length > 1){\n\
    \      return new_spl_txt_2;\n    }else{\n      let spl_txt_3 = txt.split(\"\"\
    );\n      let new_spl_txt_3 = [];\n      for(let i = 0; i < spl_txt_3.length;\
    \ i++){\n        new_spl_txt_3.push(spl_txt_3[i]);\n      }\n      let lower_case_letters\
    \ = [];\n      for(let i = 0; i < new_spl_txt_3.length; i++){\n        if(new_spl_txt_3[i]\
    \ === new_spl_txt_3[i].toLowerCase()){\n          lower_case_letters.push(new_spl_txt_3[i]);\n\
    \        }\n      }\n      let odd_order_letters = [];\n      for(let i = 0; i\
    \ < lower_case_letters.length; i++){\n        if(i % 2 !== 0){\n          odd_order_letters.push(lower_case_letters[i]);\n\
    \        }\n      }\n      return odd_order_letters.length;\n    }\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0lmf4hhn.js:57:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0lmf4hhn.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.indexOf('\
    \ ') > -1) {\n        return txt.split(' ');\n    } else if (txt.indexOf(',')\
    \ > -1) {\n        return txt.split(',');\n    } else {\n        let z = 0;\n\
    \        for (let i=0; i<txt.length; i++) {\n            if (i % 2 != 0) {\n \
    \               if (txt[i] != txt[i].toUpperCase()) {\n                    z +=\
    \ 1;\n                }\n            }\n        }\n        return z;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    txt.split(\"\
    \ \");\n    txt.split(\",\");\n    return;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpl89h30jl.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl89h30jl.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.match(/\\\
    s/g)){\n    return txt.split(/\\s/g);\n  }else if(txt.match(/\\,/g)){\n    return\
    \ txt.split(',');\n  }else{\n    var oddNum=0;\n    for(var i=0;i<txt.length;i++){\n\
    \      if(i%2!=0){\n        if(txt[i]=='a'||txt[i]=='c'||txt[i]=='e'||txt[i]=='g'||txt[i]=='i'||txt[i]=='k'||txt[i]=='m'||txt[i]=='o'||txt[i]=='q'||txt[i]=='s'||txt[i]=='u'||txt[i]=='w'||txt[i]=='y'){\n\
    \          oddNum++;\n        }\n      }\n    }\n    return oddNum;\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpdorkq7b1.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdorkq7b1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let arr\
    \ = txt.split(\" \");\n    if(arr.length > 1){\n        return arr;\n    }\n \
    \   arr = txt.split(\",\");\n    if(arr.length > 1){\n        return arr;\n  \
    \  }\n    let num = 0;\n    for(let i = 0; i < txt.length; i++){\n        if(txt.charCodeAt(i)\
    \ % 2 == 1){\n            num++;\n        }\n    }\n    return num;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpbazzfqwv.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbazzfqwv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpv32uwys1.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv32uwys1.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let arr\
    \ = txt.split(\" \");\n    if(arr.length>1){\n        let newArr = [];\n     \
    \   for(let i = 0; i<arr.length; i++){\n            newArr.push(arr[i].split(\"\
    ,\"))\n        }\n        return newArr\n    }\n    let newArr = [];\n    for(let\
    \ i = 0; i<arr.length; i++){\n        newArr.push(arr[i].split(\",\"))\n    }\n\
    \    return newArr\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'Hello'\n\
    \  ],\n  [\n    'world!'\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n\
    \  'world!'\n]\n    at test (/tmp/tmp6_9xxu4f.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6_9xxu4f.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.search(\"\
    \ \") === -1) {\n    if (txt.search(\",\") === -1) {\n      var count = 0;\n \
    \     for (var i = 0; i < txt.length; i += 2) {\n        count++;\n      }\n \
    \     return count;\n    }\n    else {\n      return txt.split(\",\");\n    }\n\
    \  }\n  else {\n    return txt.split(\" \");\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpz5k578as.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz5k578as.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes(\"\
    \ \")){\n        return txt.split(\" \");\n    }\n    else if (txt.includes(\"\
    ,\")){\n        return txt.split(\",\");\n    }\n    else{\n        let odd_number\
    \ = [];\n        let split_txt = txt.split(\"\");\n        for (let i = 0; i <\
    \ split_txt.length; i++){\n            if (split_txt[i].charCodeAt(0) % 2 != 0){\n\
    \                odd_number.push(split_txt[i].charCodeAt(0));\n            }\n\
    \        }\n        return odd_number.length;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf1f9kvgj.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf1f9kvgj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    \n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjpew7cha.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjpew7cha.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var output\
    \ = txt.split(/[ ,]/g);\n    if(output.length == 1) {\n        var count = 0;\n\
    \        var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n        for(var i = 0;\
    \ i < txt.length; i++) {\n            if(txt[i] == alphabet[i % 2]){\n       \
    \         count++;\n            }\n        }\n        return count;\n    }\n \
    \   return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp017is5m_.js:29:10)\n    at Object.<anonymous> (/tmp/tmp017is5m_.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes('\
    \ ')) {\n        const result = txt.split(' ');\n        return result;\n    }\
    \ else if (txt.includes(',')) {\n        const result = txt.split(',');\n    \
    \    return result;\n    } else {\n        const letters = txt.split('');\n  \
    \      let count = 0;\n        for (let i = 0; i < letters.length; i++) {\n  \
    \          if (letters[i].charCodeAt(0) % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpo14_c5yg.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo14_c5yg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let words\
    \ = txt.split(\" \");\n    if(words.length > 1){\n        return words;\n    }\n\
    \    words = txt.split(\",\");\n    if(words.length > 1){\n        return words;\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < txt.length; i++){\n       \
    \ let char = txt.charCodeAt(i);\n        if(char % 2 != 0){\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpzu3jznca.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzu3jznca.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    return\
    \ txt.split(/[\\s,]+/).length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmphja971qe.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmphja971qe.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var arr=txt.split(\"\
    \ \");\n  if(arr.length>1){\n    return arr;\n  }\n  var ar=txt.split(\",\");\n\
    \  if(ar.length>1){\n    return ar;\n  }\n  var oddCount=0;\n  for(var i=0;i<txt.length;i++){\n\
    \    if(i%2==0){\n      if(txt[i]==txt[i].toLowerCase()){\n        oddCount++;\n\
    \      }\n    }\n  }\n  return oddCount;\n}\n\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpv1xxvu25.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv1xxvu25.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    return\
    \ txt.split(\" \")\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpxmpcn2wt.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxmpcn2wt.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.match(/\\\
    s/)){\n        return txt.split(\" \");\n    }else if(txt.match(/\\,/)){\n   \
    \     return txt.split(\",\");\n    }else{\n        let letters = [];\n      \
    \  let count = 0;\n        let txtArray = txt.split(\"\");\n        for(let i\
    \ = 0; i < txtArray.length; i++){\n            if(txtArray[i].match(/[a-z]/)){\n\
    \                letters.push(txtArray[i]);\n            }\n        }\n      \
    \  for(let i = 0; i < letters.length; i++){\n            if(letters[i].charCodeAt(0)\
    \ % 2 != 0){\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwzvhibeo.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwzvhibeo.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    //Enter\
    \ code here!\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp1cv6vu1f.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1cv6vu1f.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  \n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpqpw88ven.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqpw88ven.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var words\
    \ = txt.split(/\\s+|,\\s*/);\n  var odd = 0;\n  for(var i = 0; i < words.length;\
    \ i++){\n    for(var j = 0; j < words[i].length; j++){\n      if(words[i][j].charCodeAt(0)\
    \ % 2 != 0){\n        odd++;\n      }\n    }\n  }\n  return odd;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp4gd_wvv6.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4gd_wvv6.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.split(\"\
    \ \").length > 1){\n        return txt.split(\" \");\n    }\n    else if(txt.split(\"\
    ,\").length > 1){\n        return txt.split(\",\");\n    }\n    else{\n      \
    \  let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 == 1){\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpparhc5wj.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpparhc5wj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.match(/\\\
    s/)){\n        return txt.split(/\\s+/);\n    }\n    else if(txt.match(/\\,/)){\n\
    \        return txt.split(\",\");\n    }\n    else{\n        let z=0;\n      \
    \  for(let i=0;i<txt.length;i+=2){\n            if(txt[i]=='a'||txt[i]=='c'||txt[i]=='e'||txt[i]=='g'||txt[i]=='i'||txt[i]=='k'||txt[i]=='m'||txt[i]=='o'||txt[i]=='q'||txt[i]=='s'||txt[i]=='u'||txt[i]=='w'||txt[i]=='y'){\n\
    \                z+=1;\n            }\n        }\n        return z;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpu_9w8tjc.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu_9w8tjc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    return\
    \ (/\\s/.test(txt)) ? txt.split(' ') : (/,/.test(txt)) ? txt.split(',') : txt.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxqtq34j0.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqtq34j0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf('\
    \ ') !== -1){\n        return txt.split(' ');\n    }\n    else if(txt.indexOf(',')\
    \ !== -1){\n        return txt.split(',');\n    }\n    else{\n        let counter\
    \ = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(i % 2 !==\
    \ 0){\n                counter++;\n            }\n        }\n        return counter;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp25_qryy9.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp25_qryy9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    const split_chars\
    \ = {\n        'whitespace': ' ',\n        'comma': ','\n    }\n    // split on\
    \ spaces\n    words = txt.split(split_chars['whitespace'])\n    // split on commas\n\
    \    if (words.length == 1) {\n        words = txt.split(split_chars['comma'])\n\
    \    }\n    if (words.length == 1) {\n        let count = 0\n        const odd_chars\
    \ = ['a', 'c', 'e', 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y']\n      \
    \  for (let i=0; i<txt.length; i++) {\n            if (odd_chars.includes(txt[i]))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n    return words\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwd24auvb.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwd24auvb.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf(\"\
    \ \") !== -1) {\n\t\t\tvar words = txt.split(\" \");\n\t\t\treturn words;\n\t\t\
    }\n\telse if (txt.indexOf(\",\") !== -1) {\n\t\t\tvar words = txt.split(\",\"\
    );\n\t\t\treturn words;\n\t\t}\n\telse {\n\t\t\tvar odd = 0;\n\t\t\tfor (var i\
    \ = 0; i < txt.length; i++) {\n\t\t\t\tif (txt.charCodeAt(i) % 2 == 1) {\n\t\t\
    \t\t\todd += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn odd;\n\t\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpby16uoqz.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpby16uoqz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var txtsplt\
    \ = txt.split(\" \");\n    if (txtsplt.length == 1) {\n        var txtsplt = txt.split(\"\
    ,\");\n        if (txtsplt.length == 1) {\n            var cnt = 0;\n        \
    \    for (var i = 0; i < txt.length; i++) {\n                if (i % 2 == 0) {\n\
    \                    if (txt[i] == txt[i].toLowerCase()) {\n                 \
    \       cnt = cnt + 1;\n                    }\n                }\n           \
    \ }\n            return cnt;\n        }\n        else {\n            return txtsplt;\n\
    \        }\n    }\n    else {\n        return txtsplt;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_eb1lmfq.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_eb1lmfq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.match(/\\\
    s/)){\n        return txt.split(/\\s/);\n    }\n    else if(txt.match(/\\,/)){\n\
    \        return txt.split(/\\,/);\n    }\n    else {\n        var num = 0;\n \
    \       for(var i = 0; i < txt.length; i++){\n            var x = txt.charCodeAt(i);\n\
    \            if(x%2 != 0){\n                num = num + 1;\n            }\n  \
    \      }\n        return num;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpjvlwmgsl.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjvlwmgsl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.indexOf('\
    \ ') != -1) {\n        return txt.split(' ');\n    } else if (txt.indexOf(',')\
    \ != -1) {\n        return txt.split(',');\n    } else {\n        let num = 0;\n\
    \        for (let i = 0; i < txt.length; i++) {\n            let val = txt.charCodeAt(i);\n\
    \            if (val % 2 == 1) {\n                num += 1;\n            }\n \
    \       }\n        return num;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmph7aeu5ml.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph7aeu5ml.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.search(/\\\
    s/) == -1) {\n        if (txt.search(/,/) == -1) {\n            var lower_case\
    \ = 0;\n            for (var i = 0; i < txt.length; i++) {\n                if\
    \ (txt[i] == txt[i].toLowerCase()) {\n                    if (txt.charCodeAt(i)\
    \ % 2 == 1) {\n                        lower_case = lower_case + 1;\n        \
    \            }\n                }\n            }\n            return lower_case;\n\
    \        }\n        return txt.split(\",\");\n    }\n    return txt.split(\" \"\
    );\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpls284tep.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpls284tep.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let str\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    let arr = txt.split('');\n    let count\
    \ = 0;\n    let result = [];\n    if(txt.includes(' ')){\n        result = txt.split('\
    \ ');\n    }else if(txt.includes(',')){\n        result = txt.split(',');\n  \
    \  }else{\n        arr.forEach(letter => {\n            if(str.indexOf(letter)\
    \ % 2 !== 0){\n                count += 1;\n            }\n        });\n     \
    \   result = count;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_o7pog6i.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_o7pog6i.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var res\
    \ = {};\n    var test = txt.split(\" \");\n    if(test.length == 1){\n       \
    \ var test2 = txt.split(\",\");\n        if(test2.length == 1){\n            var\
    \ test3 = txt.split(\"\");\n            if(test3.length % 2 == 1){\n         \
    \       return test3.length;\n            }else{\n                return 0;\n\
    \            }\n        }else{\n            return test2;\n        }\n    }else{\n\
    \        return test;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpni_jsdeu.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpni_jsdeu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.match(/\\\
    s/)) {\n      return txt.split(/\\s+/);\n    } else if(txt.match(/\\,/)) {\n \
    \     return txt.split(/\\,+/);\n    } else {\n      return txt.split('').filter(function(el,idx){\n\
    \        return (idx%2) === 0;\n      }).length;\n    }\n  }\n  \n  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \  //Given a string of text, return the string 'REPEAT (n)' where n is the number\
    \ of times the word 'HELLO' appears in the string\n  // >>>> repeat_hello(\"hello\
    \ world HELLO and hello new hello world\")\n  // 'REPEAT 3'\n  function repeat_hello(text){\n\
    \    if(!text.match(/hello/ig)) {\n      return 'REPEAT 0';\n    } else {\n  \
    \    return 'REPEAT ' + text.match(/hello/ig).length;\n    }\n  }\n  \n  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \  //Given a string, return a sequence of the words starting with the first vowel\
    \ in the string in the order they appear\n  // >>>> first_vowel_sequence(\"This\
    \ is a test\")\n  // ['is', 'a', 'e']\n  function first_vowel_sequence(text){\n\
    \    var result = [];\n    text.split(' ').forEach(function(el){\n      if(el.match(/^[aeiou]/i))\
    \ {\n        result.push(el);\n      }\n    });\n    return result;\n  }\n  \n\
    \  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n  //Given a string,\
    \ return True if the string is a palindrome\n  // >>>> is_palindrome(\"radar\"\
    )\n  // True\n  function is_palindrome(text){\n    return text.split('').reverse().join('')\
    \ === text;\n  }\n  \n  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \  //Given a string, return True if the string is a palindrome, ignore cases\n\
    \  // >>>> is_palindrome_ignore_case(\"RaDaR\")\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptu0gev1e.js:66:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptu0gev1e.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var wordArray\
    \ = [];\n    wordArray = txt.split(\" \");\n    if(wordArray.length > 1){\n  \
    \      return wordArray;\n    }else{\n        wordArray = txt.split(\",\");\n\
    \        if(wordArray.length > 1){\n            return wordArray;\n        }else{\n\
    \            wordArray = txt.split(\"\");\n            if(wordArray.length > 1){\n\
    \                var count = 0;\n                for(var i = 0; i < wordArray.length;\
    \ i++){\n                    if(wordArray[i] !== \" \" && wordArray[i] !== \"\
    ,\"){\n                        var num = wordArray[i].charCodeAt(0);\n       \
    \                 if(num % 2 === 1){\n                            count += 1;\n\
    \                        }\n                    }\n                }\n       \
    \         return count;\n            }\n        }\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpflmx2pwh.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpflmx2pwh.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var text\
    \ = txt.split(\",\");\n  var count = 0;\n  if(text.length > 1){\n      for(var\
    \ j = 0; j < text.length; j++){\n          for(var i = 0; i < text[j].length;\
    \ i++){\n              if(text[j].charCodeAt(i)%2 != 0){\n                  count++;\n\
    \              }\n          }\n      }\n      return count;\n  }\n  else{\n  \
    \    var text = txt.split(\" \");\n      if(text.length > 1){\n          for(var\
    \ j = 0; j < text.length; j++){\n              for(var i = 0; i < text[j].length;\
    \ i++){\n                  if(text[j].charCodeAt(i)%2 != 0){\n               \
    \       count++;\n                  }\n              }\n          }\n        \
    \  return count;\n      }\n      else{\n          var text = txt.split(\" \");\n\
    \          if(text.length > 1){\n              for(var j = 0; j < text.length;\
    \ j++){\n                  for(var i = 0; i < text[j].length; i++){\n        \
    \              if(text[j].charCodeAt(i)%2 != 0){\n                          count++;\n\
    \                      }\n                  }\n              }\n             \
    \ return count;\n          }\n          else{\n              for(var i = 0; i\
    \ < txt.length; i++){\n                  if(txt.charCodeAt(i)%2 != 0){\n     \
    \                 count++;\n                  }\n              }\n           \
    \   return count;\n          }\n      }\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpcxjbd2am.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcxjbd2am.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\treturn false;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp0oulaahb.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0oulaahb.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let words\
    \ = txt.split(\" \");\n    if(words.length > 1){\n        return words;\n    }\
    \ else {\n        let txt2 = txt.split(\",\");\n        if(txt2.length > 1){\n\
    \            return txt2;\n        } else {\n            let count = 0;\n    \
    \        for(let i = 0; i < txt.length; i++){\n                if(i % 2 != 0){\n\
    \                    if(txt[i] == txt[i].toLowerCase()){\n                   \
    \     count += 1;\n                    }\n                }\n            }\n \
    \           return count;\n        }\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var lst\
    \ = [];\n    if(txt.split(' ').length > 1){\n        lst = txt.split(' ');\n \
    \   }\n    else if(txt.split(',').length > 1){\n        lst = txt.split(',');\n\
    \    }\n    else{\n        var cnt = 0;\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 == 0){\n                cnt += txt.charCodeAt(i);\n\
    \            }\n        }\n        lst.push(cnt);\n    }\n    return lst;\n}\n\
    split_words(\"abcdef\");\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  297\n]\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpw9qlcc_w.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpw9qlcc_w.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 297 ],\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.includes(\"\
    \ \")){\n    return txt.split(\" \");\n  }\n  else if (txt.includes(\",\")){\n\
    \    return txt.split(\",\");\n  }\n  else{\n    let count = 0;\n    for (let\
    \ i = 0; i < txt.length; i++){\n      if (txt.charCodeAt(i) % 2 === 1){\n    \
    \    count++;\n      }\n    }\n    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpyt9cpcs3.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyt9cpcs3.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    // Code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp1_82_lck.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1_82_lck.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let count\
    \ = 0;\n    for(let i = 0; i < txt.length; i++){\n        if(txt[i] === ' '){\n\
    \            return txt.split(' ');\n        }\n        else if(txt[i] === ','){\n\
    \            return txt.split(',');\n        }\n        else if(txt[i] === txt[i]){\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'Hello',\n  'world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello,Hello,world',\n\
    \  '!'\n]\n    at test (/tmp/tmpntp3yw5q.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpntp3yw5q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello', 'world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var words\
    \ = txt.split(\" \");\n    if (words.length > 1){\n        return words;\n   \
    \ }\n    else {\n        var commas = txt.split(\",\");\n        if (commas.length\
    \ > 1){\n            return commas;\n        }\n        else {\n            var\
    \ alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n            var count = 0;\n       \
    \     for (var i = 0; i < txt.length; i++) {\n                if (i % 2 === 0\
    \ && alphabet.indexOf(txt[i]) >= 0) {\n                    count++;\n        \
    \        }\n            }\n            return count;\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpebo_66nn.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpebo_66nn.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var parts\
    \ = txt.split(\" \");\n    if (parts.length > 1) {\n        return parts;\n  \
    \  } else {\n        parts = txt.split(\",\");\n        if (parts.length > 1)\
    \ {\n            return parts;\n        } else {\n            var count = 0;\n\
    \            for (var i = 0; i < txt.length; i++) {\n                if (txt.charCodeAt(i)\
    \ % 2 == 1) {\n                    count += 1;\n                }\n          \
    \  }\n            return count;\n        }\n    }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpki5_vh_0.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpki5_vh_0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var wordArr\
    \ = [];\n  var word = '';\n  var orderArr = [];\n  var temp = 0;\n  if(txt.indexOf('\
    \ ') != -1){\n    for(var i = 0; i < txt.length; i++){\n      if(txt[i] != ' '){\n\
    \        word = word + txt[i];\n      }\n      else{\n        wordArr.push(word);\n\
    \        word = '';\n      }\n    }\n    wordArr.push(word);\n    return wordArr;\n\
    \  }\n  else if(txt.indexOf(',') != -1){\n    for(var i = 0; i < txt.length; i++){\n\
    \      if(txt[i] != ','){\n        word = word + txt[i];\n      }\n      else{\n\
    \        wordArr.push(word);\n        word = '';\n      }\n    }\n    wordArr.push(word);\n\
    \    return wordArr;\n  }\n  else{\n    for(var i = 0; i < txt.length; i++){\n\
    \      orderArr.push(txt.charCodeAt(i) - 97);\n    }\n    for(var i = 0; i < orderArr.length;\
    \ i++){\n      if(orderArr[i] % 2 != 0){\n        temp = temp + 1;\n      }\n\
    \    }\n    return temp;\n  }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp3c8x7v__.js:61:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3c8x7v__.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var noSpace\
    \ = txt.split(\" \");\n    var noComma = txt.split(\",\");\n    if (noSpace.length\
    \ > 1) {\n        return noSpace;\n    }\n    else if (noComma.length > 1) {\n\
    \        return noComma;\n    }\n    else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i += 2) {\n            if (txt[i] != \" \" && txt[i]\
    \ != \",\") {\n                count += 1;\n            }\n        }\n       \
    \ return count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp61h9qg5v.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp61h9qg5v.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.indexOf(\"\
    \ \") != -1){\n        let ans = txt.split(\" \");\n        return ans;\n    }\n\
    \    else if (txt.indexOf(\",\") != -1){\n        let ans = txt.split(\",\");\n\
    \        return ans;\n    }\n    else{\n        let ans = 0;\n        for (let\
    \ i = 0; i < txt.length; i += 2){\n            if (txt[i] == txt[i].toLowerCase()){\n\
    \                ans += 1;\n            }\n        }\n        return ans;\n  \
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplduah6oc.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplduah6oc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf('\
    \ ') != -1)\n\t\treturn txt.split(' ');\n\telse if (txt.indexOf(',') != -1)\n\t\
    \treturn txt.split(',');\n\telse {\n\t\tvar odd_count = 0;\n\t\tfor (var i = 0;\
    \ i < txt.length; i++) {\n\t\t\tif (txt.charCodeAt(i) % 2 != 0)\n\t\t\t\todd_count\
    \ += 1;\n\t\t}\n\t\treturn odd_count;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpijjd7p9z.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpijjd7p9z.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var x =\
    \ txt.split(\",\");\n    if(x.length > 1){\n        x = x.filter(function(y){return\
    \ y.length > 0;});\n        return x;\n    }\n    x = txt.split(\" \");\n    if(x.length\
    \ > 1){\n        x = x.filter(function(y){return y.length > 0;});\n        return\
    \ x;\n    }\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n  \
    \      if(i % 2 == 1 && txt[i] == txt[i].toLowerCase()){\n            count +=\
    \ 1;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmp_x17s8pg.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_x17s8pg.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var text\
    \ = txt.split(/\\s+/);\n  return text;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsjx3f9h0.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsjx3f9h0.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var words\
    \ = [];\n    var isNumbers = /^\\d+$/.test(txt);\n    var isCommas = /,/.test(txt);\n\
    \    if (isNumbers){\n        return txt.length;\n    } else if (isCommas){\n\
    \        words = txt.split(\",\");\n    } else {\n        words = txt.split(\"\
    \ \");\n    }\n    return words;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpofxufrdu.js:29:10)\n    at Object.<anonymous> (/tmp/tmpofxufrdu.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.includes('\
    \ ')){\n    return txt.split(' ');\n  } else if (txt.includes(',')){\n    return\
    \ txt.split(',');\n  } else {\n    var count = 0;\n    for (var i = 0; i < txt.length;\
    \ i++){\n      if (ord(txt[i]) % 2 != 0){\n        count += 1;\n      }\n    }\n\
    \    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9oz6kak0.js:15\n      if (ord(txt[i]) % 2 != 0){\n      ^\n\nReferenceError:\
    \ ord is not defined\n    at split_words (/tmp/tmp9oz6kak0.js:15:7)\n    at test\
    \ (/tmp/tmp9oz6kak0.js:32:20)\n    at Object.<anonymous> (/tmp/tmp9oz6kak0.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var words\
    \ = txt.split(\" \");\n    var lower_case_letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var lower_letters = [];\n    var odd_num = [];\n    var array_of_txt =\
    \ [];\n    var total = 0;\n    if(words.length > 1){\n        return words;\n\
    \    }\n    else{\n        lower_letters = txt.split(\",\");\n        if(lower_letters.length\
    \ > 1){\n            return lower_letters;\n        }\n        else{\n       \
    \     for(var i = 0; i < lower_case_letters.length; i++){\n                array_of_txt\
    \ = txt.split(\"\");\n                for(var j = 0; j < array_of_txt.length;\
    \ j++){\n                    if(lower_case_letters[i] == array_of_txt[j]){\n \
    \                       if(i % 2 != 0){\n                            odd_num.push(array_of_txt[j]);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            return odd_num.length;\n        }\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var word\
    \ = txt.split(\",\");\n  if(word.length > 1){\n    return word;\n  }\n  else{\n\
    \    var word = txt.split(\" \");\n    if(word.length > 1){\n      return word;\n\
    \    }\n    else{\n      var count = 0;\n      for(var i = 0; i < txt.length;\
    \ i++){\n        if(txt.charCodeAt(i) % 2 != 0){\n          count++;\n       \
    \ }\n      }\n      return count;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpqzheitaq.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqzheitaq.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (/[a-zA-Z]+/.test(txt))\
    \ {\n        if (txt.includes(\" \")) {\n            return txt.split(\" \");\n\
    \        } else if (txt.includes(\",\")) {\n            return txt.split(\",\"\
    );\n        } else {\n            let txtArray = txt.split(\"\");\n          \
    \  let txtLower = txtArray.map(function(x) {\n                return x.toLowerCase();\n\
    \            });\n            let odd = txtLower.filter(function(letter, index)\
    \ {\n                return index % 2 != 0;\n            });\n            return\
    \ odd.length;\n        }\n    } else {\n        return \"Invalid text\";\n   \
    \ }\n}\nsplit_words(\"ab,cd,ef\");\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpwgs14vxx.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwgs14vxx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let result\
    \ = '';\n    let odd = 0;\n    let split = false;\n    if (txt.indexOf(' ') ==\
    \ -1){\n        if (txt.indexOf(',') == -1){\n            for (let i = 0; i <\
    \ txt.length; i++){\n                if (ord(txt[i]) % 2 == 1){\n            \
    \        odd++;\n                }\n            }\n            return odd;\n \
    \       }\n        else{\n            for (let i = 0; i < txt.length; i++){\n\
    \                if (txt[i] == ','){\n                    result += ' ';\n   \
    \             }\n                else{\n                    result += txt[i];\n\
    \                }\n            }\n            return result.split();\n      \
    \  }\n    }\n    else{\n        return txt.split();\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpu69kyk72.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu69kyk72.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\"\
    \ \") != -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") != -1){\n        return txt.split(\",\");\n    }\n    else{\n        var\
    \ odd = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 != 0){\n                odd++;\n            }\n        }\n        return\
    \ odd;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp7i0np75e.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7i0np75e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.includes(\"\
    \ \")){\n    return txt.split(\" \");\n  }else if(txt.includes(\",\")){\n    return\
    \ txt.split(\",\");\n  }else{\n    txt = txt.toLowerCase();\n    var t = 0;\n\
    \    for(var i = 0; i < txt.length; i++){\n      if(i % 2 === 0){\n        t +=\
    \ txt.charCodeAt(i);\n      }\n    }\n    return t;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n297\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmphff8odly.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphff8odly.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 297,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (/\\\
    s/.test(txt)){\n        return txt.split(\" \");\n    }\n    else if (/,/.test(txt)){\n\
    \        return txt.split(\",\");\n    }\n    else{\n        var oddCount = 0;\n\
    \        for (i = 0; i < txt.length; i++){\n            if (i % 2 != 0){\n   \
    \             oddCount++;\n            }\n        }\n        return oddCount;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpm1oa_pfz.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm1oa_pfz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes('\
    \ ')){\n        return txt.split(' ')\n    } else if (txt.includes(',')){\n  \
    \      return txt.split(',')\n    } else {\n        let count = 0\n        for\
    \ (let i = 0; i < txt.length; i++){\n            if (i % 2 == 0){\n          \
    \      count += 1\n            }\n        }\n        return count\n    }\n}\n\
    split_words(\"abcdef\")\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp05k98xol.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp05k98xol.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let arr\
    \ = [];\n    if(txt.includes(\" \")){\n        arr = txt.split(\" \");\n    }else\
    \ if(txt.includes(\",\")){\n        arr = txt.split(\",\");\n    }else{\n    \
    \    let count = 0;\n        for(let i = 0; i < txt.length; i++){\n          \
    \  if(txt.charCodeAt(i) % 2 != 0){\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n    return arr;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5reih2zp.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5reih2zp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var split\
    \ = [];\n  var hasWhiteSpace = /\\s/;\n  var hasComma = /,/;\n  var alpha = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  if(hasWhiteSpace.test(txt)){\n    split = txt.split(/\\\
    s/);\n  }else if(hasComma.test(txt)){\n    split = txt.split(\",\");\n  }else{\n\
    \    var oddCount = 0;\n    for(var i = 0; i < txt.length; i++){\n      var letter\
    \ = txt[i];\n      if(alpha.indexOf(letter) % 2 === 1){\n        oddCount++;\n\
    \      }\n    }\n    split = oddCount;\n  }\n  return split;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.indexOf('\
    \ ') != -1){\n    var arr = txt.split(' ');\n    return arr;\n  }\n  else if(txt.indexOf(',')\
    \ != -1){\n    var arr = txt.split(',');\n    return arr;\n  }\n  else{\n    var\
    \ arr = txt.split('');\n    var result = 0;\n    for(var i = 0; i < arr.length;\
    \ i++){\n      if(i % 2 === 0){\n        result += 1;\n      }\n    }\n    return\
    \ result;\n  }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpt6sudpnp.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt6sudpnp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var result;\n\
    \    if (txt.search(/\\s/g) == -1) {\n        if (txt.search(/,/g) == -1) {\n\
    \            result = 0;\n            for (var i = 0; i < txt.length; i++) {\n\
    \                if ((txt.charCodeAt(i) - 97) % 2 == 1) {\n                  \
    \  result += 1;\n                }\n            }\n        } else {\n        \
    \    result = txt.split(\",\");\n        }\n    } else {\n        result = txt.split(\"\
    \ \");\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    \n    if\
    \ (txt.indexOf(\" \") >= 0)\n    {\n        var w = txt.split(\" \");\n      \
    \  return w;\n    }\n    else if (txt.indexOf(\",\") >= 0)\n    {\n        var\
    \ w = txt.split(\",\");\n        return w;\n    }\n    else \n    {\n        var\
    \ count = 0;\n        for (i = 0; i < txt.length; i++)\n        {\n          \
    \  var code = txt.charCodeAt(i);\n            if ((code - 97) % 2 == 1)\n    \
    \        {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\"\
    \ \") != -1){\n        let arr = txt.split(\" \");\n        return arr;\n    }else\
    \ if(txt.indexOf(\",\") != -1){\n        let arr = txt.split(\",\");\n       \
    \ return arr;\n    }else{\n        let arr = [];\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n                arr.push(txt[i]);\n\
    \            }\n        }\n        return arr.length;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp66savp6n.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66savp6n.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.includes('\
    \ ')){\n\t\treturn txt.split(' ');\n\t}\n\telse if (txt.includes(',')){\n\t\t\
    return txt.split(',');\n\t}\n\telse{\n\t\tvar a = Math.floor(txt.length/2);\n\t\
    \treturn a;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpvhjiywyy.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvhjiywyy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    const words\
    \ = txt.split(' ');\n    if (words.length > 1) {\n        return words;\n    }\n\
    \    const chars = txt.split(',');\n    if (chars.length > 1) {\n        return\
    \ chars;\n    }\n    let counter = 0;\n    for (let i = 0; i < txt.length; i++)\
    \ {\n        if (i % 2 == 0) {\n            counter += 1;\n        }\n    }\n\
    \    return counter;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfav8r6fk.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfav8r6fk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes(\"\
    \ \")){\n        return txt.split(\" \");\n    }\n    else if (txt.includes(\"\
    ,\")){\n        return txt.split(\",\");\n    }\n    else{\n        let sum =\
    \ 0;\n        for (let i = 0; i < txt.length; i++){\n            if (i % 2 ==\
    \ 0){\n                sum += txt.charCodeAt(i);\n            }\n        }\n \
    \       return sum;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n297\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpwko9z8x0.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwko9z8x0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 297,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.split('\
    \ ').length > 1){\n    return txt.split(' ');\n  }else if(txt.split(',').length\
    \ > 1){\n    return txt.split(',');\n  }else{\n    let arr = txt.split('');\n\
    \    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i].charCodeAt(0)\
    \ % 2 !== 0){\n        count++;\n      }\n    }\n    return count;\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp46qbca3e.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp46qbca3e.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var t =\
    \ txt.split(/\\s+|,+/);\n    if(t.length > 1){\n        return t;\n    }\n   \
    \ else{\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(i % 2 != 0){\n                count += 1;\n            }\n   \
    \     }\n        return count;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpcrwgfnmd.js:29:10)\n    at Object.<anonymous> (/tmp/tmpcrwgfnmd.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    for(var\
    \ i = 0; i < txt.length; i++){\n        if(txt[i] == \" \"){\n            return\
    \ txt.split(\" \");\n        }else if(txt[i] == \",\"){\n            return txt.split(\"\
    ,\");\n        }else{\n            return txt.length;\n        }\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp0zej6s_d.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0zej6s_d.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let result\
    \ = txt.match(/[\\w'-]+|[.,!?;:]/g)\n    if(result.length > 0){\n        return\
    \ result\n    }\n    return alfabetical(txt)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n\
    ]\n    at test (/tmp/tmposveqzf4.js:20:10)\n    at Object.<anonymous> (/tmp/tmposveqzf4.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\t\n\tif (/\\\
    s/.test(txt))\n\t\treturn txt.split(/\\s/);\n\telse if (/\\,/.test(txt))\n\t\t\
    return txt.split(/\\,/);\n\telse\n\t\treturn txt.replace(/[^a-z]/g, \"\").length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmptlsetl3n.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptlsetl3n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var list\
    \ = [];\n    var words = 0;\n    var i;\n    if(txt.search(/\\s/g) >= 0){\n  \
    \      list = txt.split(/\\s/g);\n        return list;\n    }\n    else if(txt.search(/\\\
    ,/g) >= 0){\n        list = txt.split(/\\,/g);\n        return list;\n    }\n\
    \    else{\n        for(i = 0; i < txt.length; i++){\n            if(i % 2 ==\
    \ 0){\n                if(txt[i] == 'a' || txt[i] == 'b' || txt[i] == 'c' || txt[i]\
    \ == 'd' || txt[i] == 'e' || txt[i] == 'f' || txt[i] == 'g' || txt[i] == 'h' ||\
    \ txt[i] == 'i' || txt[i] == 'j' || txt[i] == 'k' || txt[i] == 'l' || txt[i] ==\
    \ 'm' || txt[i] == 'n' || txt[i] == 'o' || txt[i] == 'p' || txt[i] == 'q' || txt[i]\
    \ == 'r' || txt[i] == 's' || txt[i] == 't' || txt[i] == 'u' || txt[i] == 'v' ||\
    \ txt[i] == 'w' || txt[i] == 'x' || txt[i] == 'y' || txt[i] == 'z'){\n       \
    \             words++;\n                }\n            }\n        }\n        return\
    \ words;\n    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4ol0bk8q.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ol0bk8q.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let result\
    \ = [];\n    let count = 0;\n    let i = 0;\n    while(i < txt.length){\n    \
    \    if(txt[i] == ' '){\n            if(count != 0){\n                result.push(count);\n\
    \                count = 0;\n            }\n            i++;\n        }\n    \
    \    else if(txt[i] == ','){\n            if(count != 0){\n                result.push(count);\n\
    \                count = 0;\n            }\n            result.push(txt[i]);\n\
    \            i++;\n        }\n        else{\n            count++;\n          \
    \  i++;\n        }\n    }\n    if(count != 0){\n        result.push(count);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp4mtuck0c.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4mtuck0c.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6 ],\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar arr =\
    \ txt.split(\" \");\n\tif(arr.length == 1){\n\t\tvar arr2 = txt.split(\",\");\n\
    \t\tif(arr2.length == 1){\n\t\t\tvar counter = 0;\n\t\t\tfor(var i = 0; i < txt.length;\
    \ i++){\n\t\t\t\tif(txt.charCodeAt(i) % 2 == 1){\n\t\t\t\t\tcounter++;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\treturn counter;\n\t\t}else{\n\t\t\treturn arr2;\n\t\t}\n\t\
    }else{\n\t\treturn arr;\n\t}\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmhba4gsq.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhba4gsq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var i;\n\
    \  var txt1 = txt.split(\" \");\n  var txt2 = [];\n  var txt3 = txt.split(\",\"\
    );\n  var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  var count = 0;\n  if (txt1.length\
    \ > 1){\n    return txt1;\n  } else if (txt3.length > 1){\n    return txt3;\n\
    \  } else {\n    txt = txt.toLowerCase();\n    for (i = 0; i < txt.length; i++){\n\
    \      if (alpha.indexOf(txt[i]) % 2 == 1){\n        count += 1;\n      }\n  \
    \  }\n    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpjoziqhgn.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjoziqhgn.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    txt = txt.trim();\n\
    \    txt = txt.replace(/,/g,' ');\n    if (txt.search(/ /) !== -1){\n        return\
    \ txt.split(/ /);\n    }\n    else {\n        let sum = 0;\n        for (i=0;\
    \ i<txt.length; i++){\n            if (txt.charCodeAt(i) % 2 === 1){\n       \
    \         sum += 1;\n            }\n        }\n        return sum;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp_92qxaao.js:30:10)\n    at Object.<anonymous> (/tmp/tmp_92qxaao.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    //code\
    \ here\n    var lst = [];\n    if(txt.includes(\" \")){\n        lst = txt.split(\"\
    \ \");\n    }\n    else if(txt.includes(\",\")){\n        lst = txt.split(\",\"\
    );\n    }\n    else{\n        txt = txt.toLowerCase();\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n \
    \               count++;\n            }\n        }\n        lst.push(count);\n\
    \    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpvigkszag.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvigkszag.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  return txt.split(/[,\\\
    s]+/).map(function(val){\n    if (val.split(/[^a-z]+/).length == 1){\n      return\
    \ val.split('').filter(function(val, i){\n        return i % 2 == 0;\n      }).length;\n\
    \    }\n    return val;\n  });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  3,\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n\
    \    at test (/tmp/tmp8xlwsuij.js:25:10)\n    at Object.<anonymous> (/tmp/tmp8xlwsuij.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 3, '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\"\
    \ \") > -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") > -1){\n        return txt.split(\",\");\n    }\n    else{\n        var odds\
    \ = 0;\n        for(var i = 0; i < txt.length; i++){\n            if( (txt.charCodeAt(i)\
    \ - 97) % 2 != 0){\n                odds++;\n            }\n        }\n      \
    \  return odds;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpcioyw93o.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcioyw93o.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar answer\
    \ = [];\n\tvar spl = txt.split(\" \");\n\tvar split2 = txt.split(\",\");\n\tvar\
    \ split3 = [];\n\tvar count = 0;\n\tvar sum = 0;\n\tif (spl.length > 1){\n\t\t\
    return spl;\n\t}\n\telse if (split2.length > 1){\n\t\treturn split2;\n\t}\n\t\
    else {\n\t\tfor (var i = 0; i < txt.length; i++){\n\t\t\tvar comp = txt.charCodeAt(i);\n\
    \t\t\tif (comp >= 97 && comp <= 122){\n\t\t\t\tcount = count + 1;\n\t\t\t\tsplit3.push(txt[i]);\n\
    \t\t\t}\n\t\t}\n\t\tfor (var j = 0; j < split3.length; j++){\n\t\t\tvar code =\
    \ split3[j].charCodeAt(0);\n\t\t\tif (code % 2 === 1){\n\t\t\t\tsum = sum + 1;\n\
    \t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpnexmeckn.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnexmeckn.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var split_whitespace\
    \ = txt.split(\" \");\n    if (split_whitespace.length > 1){\n        return split_whitespace;\n\
    \    }\n    var split_comma = txt.split(\",\");\n    if (split_comma.length >\
    \ 1){\n        return split_comma;\n    }\n    var counter = 0;\n    for (var\
    \ i = 0; i < txt.length; i++){\n        if ((txt.charCodeAt(i) - 97) % 2 === 1){\n\
    \            counter ++;\n        }\n    }\n    return counter;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar arr =\
    \ [],\n\t\tslitOnComma,\n\t\tresult = 0;\n\tif (txt.indexOf(' ') > -1) {\n\t\t\
    arr = txt.split(' ');\n\t\treturn arr;\n\t}\n\telse if (txt.indexOf(',') > -1)\
    \ {\n\t\tslitOnComma = txt.split(',');\n\t\treturn slitOnComma;\n\t}\n\telse {\n\
    \t\tfor (var i = 0; i < txt.length; i++) {\n\t\t\tif (i % 2 != 0) {\n\t\t\t\t\
    if (txt[i] === txt[i].toLowerCase()) {\n\t\t\t\t\tresult ++;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\treturn result;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.search(/[a-z]/)\
    \ != -1){\n    if(txt.search(/[A-Z]/) != -1){\n      return \"Invalid Input\"\
    ;\n    }\n    else{\n      if(txt.search(/\\s+/) != -1){\n        return txt.split(/\\\
    s+/);\n      }\n      else{\n        if(txt.search(/,+/) != -1){\n          return\
    \ txt.split(/,+/);\n        }\n        else{\n          if(txt.search(/[a-z]/)\
    \ != -1){\n            var letters = txt.split(\"\");\n            var count =\
    \ 0;\n            for(var i = 0; i < letters.length; i++){\n              if(i\
    \ % 2 != 0){\n                count++;\n              }\n            }\n     \
    \       return count;\n          }\n        }\n      }\n    }\n  }\n  else{\n\
    \    return \"Invalid Input\";\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Invalid Input'\n\
    \nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmplq42ow65.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmplq42ow65.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Invalid Input',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  let count = 0;\n  if(txt.includes(' ')){\n\
    \    return txt.split(' ');\n  }\n  else if(txt.includes(',')){\n    return txt.split(',');\n\
    \  }\n  else{\n    for(let i = 0; i < txt.length; i++){\n      if(alphabet.indexOf(txt[i])\
    \ % 2 === 1){\n        count++;\n      }\n    }\n    return count;\n  }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    split_text\
    \ = txt.split(',')\n\n    if (split_text.length == 1){\n        split_text = txt.split('\
    \ ')\n        if (split_text.length == 1){\n            count = 0\n          \
    \  for (i = 0; i < txt.length; i++){\n                if (i % 2 != 0){\n     \
    \               count += 1\n                }\n            }\n            return\
    \ count\n        }\n        else{\n            return split_text\n        }\n\
    \    }\n    else{\n        return split_text\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpsrc_6l6v.js:37:10)\n    at Object.<anonymous> (/tmp/tmpsrc_6l6v.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let arrWords\
    \ = txt.split(\" \");\n    if(arrWords.length > 1){\n        return arrWords;\n\
    \    }\n    else {\n        return isOdd(txt);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppwlxecib.js:13\n        return isOdd(txt);\n        ^\n\nReferenceError:\
    \ isOdd is not defined\n    at split_words (/tmp/tmppwlxecib.js:13:9)\n    at\
    \ test (/tmp/tmppwlxecib.js:23:20)\n    at Object.<anonymous> (/tmp/tmppwlxecib.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var words\
    \ = txt.split(\" \");\n    if (words.length > 1){\n        return words;\n   \
    \ }\n    else{\n        var words = txt.split(\",\");\n        if (words.length\
    \ > 1){\n            return words;\n        }\n        else{\n            var\
    \ count = 0;\n            for (var i = 0; i < txt.length; i++){\n            \
    \    if ((i + 1) % 2 === 1 && (txt.charCodeAt(i) - 97) % 2 === 1){\n         \
    \           count = count + 1;\n                }\n            }\n           \
    \ return count;\n        }\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpsuesj3ft.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsuesj3ft.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var txt_split\
    \ = txt.split(\" \");\n    if (txt_split.length > 1){\n        return txt_split;\n\
    \    }\n    else{\n        txt_split = txt.split(\",\");\n        if (txt_split.length\
    \ > 1){\n            return txt_split;\n        }\n        else{\n           \
    \ var count = 0;\n            for (var i = 0; i < txt.length; i++){\n        \
    \        if (txt.charCodeAt(i) % 2 != 0){\n                    count++;\n    \
    \            }\n            }\n            return count;\n        }\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf_qhl09q.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf_qhl09q.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf(\"\
    \ \") > -1)\n\t\treturn txt.split(\" \");\n\telse if (txt.indexOf(\",\") > -1)\n\
    \t\treturn txt.split(\",\");\n\telse {\n\t\tvar ords = [];\n\t\tfor (var i = 0;\
    \ i < txt.length; i++) {\n\t\t\tvar val = txt.charCodeAt(i) - 97;\n\t\t\tif (val\
    \ % 2 !== 0)\n\t\t\t\tords.push(val);\n\t\t}\n\t\treturn ords.length;\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfgo_k595.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfgo_k595.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let words\
    \ = txt.split(' ');\n    if(words.length == 1){\n        let comma = txt.split(',');\n\
    \        if(comma.length == 1){\n            let counter = 0;\n            for(let\
    \ i = 0; i < txt.length; i++){\n                if(i % 2 == 0){\n            \
    \        counter++;\n                }\n            }\n            return counter;\n\
    \        }\n        return comma;\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuqf8w28_.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuqf8w28_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf('\
    \ ') != -1){\n        return txt.split(' ');\n    }else if(txt.indexOf(',') !=\
    \ -1){\n        return txt.split(',');\n    }else{\n        var text = txt.toLowerCase();\n\
    \        var count = 0;\n        for(var i = 0; i < text.length; i++){\n     \
    \       if(i % 2 == 0){\n                count = count + 1;\n            }\n \
    \       }\n        return count;\n    }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphvrb_z3_.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphvrb_z3_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var list\
    \ = [], num = 0, has_space = false, has_comma = false;\n    var len = txt.length;\n\
    \    for(var i = 0; i < len; i++){\n        if(txt[i] == ' '){\n            has_space\
    \ = true;\n            break;\n        }\n        if(txt[i] == ','){\n       \
    \     has_comma = true;\n        }\n    }\n    if(has_space){\n        list =\
    \ txt.split(' ');\n    }else if(has_comma){\n        list = txt.split(',');\n\
    \    }else{\n        for(var i = 0; i < len; i++){\n            if(txt[i] <= 'z'\
    \ && txt[i] >= 'a' && (txt[i].charCodeAt() - 'a'.charCodeAt()) % 2 == 1){\n  \
    \              num++;\n            }\n        }\n    }\n    return list.length\
    \ == 0 ? num : list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  return txt.split(/[\\\
    s,]+/).reduce((acc, cv) => cv.split('').filter((x, i) => x.toLowerCase().charCodeAt(0)\
    \ % 2 === i % 2).length + acc, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbo7fdj6g.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbo7fdj6g.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var lowercase\
    \ = txt.toLowerCase();\n\n    if (lowercase.match(/\\s/)) {\n        return lowercase.split(\"\
    \ \");\n    } else if (lowercase.match(/\\,/)) {\n        return lowercase.split(\"\
    ,\");\n    } else {\n        var count = 0;\n        for (var i = 0; i < lowercase.length;\
    \ i++) {\n            if (lowercase.charCodeAt(i) % 2 !== 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n\
    \  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n\
    \    at test (/tmp/tmppg24i_ij.js:29:10)\n    at Object.<anonymous> (/tmp/tmppg24i_ij.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello',\
    \ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\"\
    \ \") != -1){\n        var words = txt.split(\" \");\n        return words;\n\
    \    }\n    else if(txt.indexOf(\",\") != -1){\n        var words = txt.split(\"\
    ,\");\n        return words;\n    }\n    else {\n        var counter = 0;\n  \
    \      for(var i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n   \
    \             if(txt[i] == txt[i].toLowerCase()){\n                    counter++;\n\
    \                }\n            }\n        }\n        return counter;\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpaay6b0az.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaay6b0az.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var a =\
    \ 0;\n    var s = txt.split(\" \");\n    if (s.length == 1){\n        var c =\
    \ txt.split(\",\");\n        if (c.length == 1){\n            for (var i = 0;\
    \ i < txt.length; i++){\n                if ((i % 2 == 0) && (txt[i] == txt[i].toLowerCase())){\n\
    \                    a++;\n                }\n            }\n            return\
    \ a;\n        }\n        else {\n            return c;\n        }\n    }\n   \
    \ else {\n        return s;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpq9ht550g.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq9ht550g.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.search(/\\\
    s/) != -1){\n        return txt.split(/\\s+/);\n    }\n    else if(txt.search(/\\\
    ,/) != -1){\n        return txt.split(/\\,+/);\n    }\n    else{\n        let\
    \ sum = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 == 1){\n                sum++;\n            }\n        }\n        return\
    \ sum;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmprv5rdjws.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprv5rdjws.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var arr =\
    \ txt.split(\",\");\n  if(arr.length==1){\n  \tvar arr = txt.split(\" \");\n \
    \ \tif(arr.length==1){\n  \t\tvar count = 0;\n  \t\tfor(var i=0;i<txt.length;i++){\n\
    \  \t\t\tif(i%2==0&&txt[i]==txt[i].toLowerCase()){\n  \t\t\t\tcount++;\n  \t\t\
    \t}\n  \t\t}\n  \t\treturn count;\n  \t}\n  \telse{\n  \t\treturn arr;\n  \t}\n\
    \  }\n  else{\n  \treturn arr;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmp7vp60wl1.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7vp60wl1.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar arr =\
    \ txt.split('');\n\tvar final = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\
    \tif(i % 2 !== 0){\n\t\t\tfinal.push(arr[i]);\n\t\t}\n\t}\n\tconsole.log(final.length);\n\
    \treturn final.length;\n}\nsplit_words(\"abcdef\");\n\nsplit_words(\"abc,def\"\
    ); // ['abc', 'def']\nsplit_words(\"abc,def ghij\"); // ['abc', 'def', 'ghij']\n\
    split_words(\"abc,def,ghij\"); // ['abc', 'def', 'ghij']\nsplit_words(\"abc,def,ghij,klmn,opqr,stuv,wxyz\"\
    ); // ['abc', 'def', 'ghij', 'klmn', 'opqr', 'stuv', 'wxyz']\nsplit_words(\"abc,def,ghij,klmn,opqr,stuv,wxyz\"\
    ); // ['abc', 'def', 'ghij', 'klmn', 'opqr', 'stuv', 'wxyz']\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp_81sxw81.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_81sxw81.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '3

    3

    6

    6

    16

    16

    6

    '
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var array\
    \ = txt.split(\" \");\n    if (array.length == 1){\n        var array2 = txt.split(\"\
    ,\");\n        if (array2.length == 1){\n            var count = 0;\n        \
    \    for (var x = 0; x < txt.length; x++){\n                if (((txt.charCodeAt(x))\
    \ % 2) == 1){\n                    count++;\n                }\n            }\n\
    \            return count;\n        }\n        else {\n            return array2;\n\
    \        }\n    }\n    else {\n        return array;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp7s7_8m47.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7s7_8m47.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let arr\
    \ = txt.split(\" \");\n    let newArr = [];\n    let count = 0;\n    let result\
    \ = \"\";\n    if(arr.length < 2){\n        arr = txt.split(\",\");\n        if(arr.length\
    \ < 2){\n            for(let i = 0; i < txt.length; i++){\n                if(txt.charCodeAt(i)\
    \ % 2 == 1){\n                    count++;\n                }\n            }\n\
    \            return count;\n        }\n        else{\n            return arr;\n\
    \        }\n    }\n    else{\n        return arr;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp9_krjzce.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_krjzce.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var temp\
    \ = txt.split(\",\");\n    if(temp.length != 1){\n        return temp;\n    }else{\n\
    \        temp = txt.split(\" \");\n        if(temp.length != 1){\n           \
    \ return temp;\n        }else{\n            return txt.length;\n        }\n  \
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpe4mt6ct4.js:27:10)\n    at Object.<anonymous> (/tmp/tmpe4mt6ct4.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let str_list\
    \ = txt.split(' ');\n    if (str_list.length > 1){\n        return str_list;\n\
    \    }\n    else{\n        str_list = txt.split(',');\n        if (str_list.length\
    \ > 1){\n            return str_list;\n        }\n        else{\n            return\
    \ oddLetters(txt);\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyuk6s1rw.js:18\n            return oddLetters(txt);\n         \
    \   ^\n\nReferenceError: oddLetters is not defined\n    at split_words (/tmp/tmpyuk6s1rw.js:18:13)\n\
    \    at test (/tmp/tmpyuk6s1rw.js:32:20)\n    at Object.<anonymous> (/tmp/tmpyuk6s1rw.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var res\
    \ = [];\n    if (txt.search(/\\s/g) === -1) {\n        if (txt.search(/,/g) ===\
    \ -1) {\n            var odd = 0;\n            for (var i = 0; i < txt.length;\
    \ i++) {\n                if (i % 2 === 0) {\n                    odd += 1;\n\
    \                }\n            }\n            return odd;\n        } else {\n\
    \            res = txt.split(',');\n        }\n    } else {\n        res = txt.split('\
    \ ');\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqe1fmc7n.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqe1fmc7n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var result\
    \ = 0;\n    var space = txt.indexOf(\" \");\n    var coma = txt.indexOf(\",\"\
    );\n    if (space !== -1){\n        var txt_split = txt.split(\" \");\n      \
    \  return txt_split;\n    }\n    else if (coma !== -1){\n        var txt_split\
    \ = txt.split(\",\");\n        return txt_split;\n    }\n    else {\n        var\
    \ lower = txt.toLowerCase();\n        for (var i = 0; i < lower.length; i++){\n\
    \            if (i % 2 !== 0){\n                result = result + 1;\n       \
    \     }\n        }\n        return result;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpy4q4r2o1.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy4q4r2o1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.split(\"\
    \ \").length>1){\n    return txt.split(\" \");\n  }else if(txt.split(\",\").length>1){\n\
    \    return txt.split(\",\");\n  }else{\n    var count=0;\n    for(var i=0;i<txt.length;i++){\n\
    \      if(txt.charCodeAt(i)%2===1){\n        count++;\n      }\n    }\n    return\
    \ count;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp81t0nfk2.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp81t0nfk2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.indexOf('\
    \ ') == -1){\n    if(txt.indexOf(',') == -1){\n      let counter = 0;\n      for(let\
    \ i = 0; i < txt.length; i += 2){\n        if(txt[i] == txt[i].toLowerCase()){\n\
    \          counter += 1;\n        }\n      }\n      return counter;\n    }\n \
    \   else{\n      return txt.split(',');\n    }\n  }\n  else{\n    return txt.split('\
    \ ');\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwch8l2ay.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwch8l2ay.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.search(/\\\
    W/) == -1){\n        var str = txt.split(\",\")\n        return str\n    }else\
    \ if(txt.search(/\\W/== -1)){\n        var str = txt.split(\" \")\n        return\
    \ str\n    }else if(txt.search(/\\s/== -1)){\n        var str = txt.split(\",\"\
    )\n        return str\n    }else{\n        var a = 'a'.charCodeAt(0)\n       \
    \ var z = 'z'.charCodeAt(0)\n        var map = {}\n        var count = 0\n   \
    \     var len = txt.length\n        var str = txt.split(\"\")\n        for(i=0;i<len;i++){\n\
    \            map[str[i]]= map[str[i]]+1||1\n        }\n        for(i=a;i<=z;i++){\n\
    \            if(map[String.fromCharCode(i)]%2!=0){\n                count++\n\
    \            }\n        }\n        return count\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpaur4jum_.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaur4jum_.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.includes(\"\
    \ \")){\n    return txt.split(\" \");\n  }\n  else if (txt.includes(\",\")){\n\
    \    return txt.split(\",\");\n  }\n  else{\n    var odds = 0;\n    for (var i\
    \ = 0; i < txt.length; i++){\n      if (txt.charCodeAt(i) % 2 === 1){\n      \
    \  odds++;\n      }\n    }\n    return odds;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpu7xua8xe.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu7xua8xe.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    \n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjpew7cha.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjpew7cha.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977081
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar wordList\
    \ = [];\n\twordList = txt.split(\" \");\n\tif(wordList.length < 2){\n\t\twordList\
    \ = txt.split(\",\");\n\t\tif(wordList.length < 2){\n\t\t\tvar count = 0;\n\t\t\
    \tfor(var i = 0; i < txt.length; i++){\n\t\t\t\tif(i % 2 == 0){\n\t\t\t\t\tif(txt[i]\
    \ == txt[i].toLowerCase()){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\treturn count;\n\t\t}\n\t}\n\treturn wordList;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpeyv6qutc.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeyv6qutc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    return\
    \ txt.split(/[,\\s]+/).length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprp4l2fqz.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmprp4l2fqz.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.includes(\"\
    \ \")){\n\t\treturn txt.split(\" \");\n\t}\n\telse if (txt.includes(\",\")){\n\
    \t\treturn txt.split(\",\");\n\t}\n\telse {\n\t\tvar odds = 0;\n\t\tfor (var i\
    \ = 0; i < txt.length; i++){\n\t\t\tif (txt.charCodeAt(i) % 2 == 1){\n\t\t\t\t\
    odds++;\n\t\t\t}\n\t\t}\n\t\treturn odds;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmps8l3og9y.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps8l3og9y.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar new_list\
    \ = [];\n\tvar is_comma = false;\n\tvar is_ws = false;\n\tvar count = 0;\n\tfor(var\
    \ i = 0; i < txt.length; i++){\n\t\t//loop through text one letter at a time\n\
    \t\tvar word = txt[i];\n\t\tif(word === \" \"){\n\t\t\t//if the letter is a space,\
    \ add a ',' to the new_list, this allows us to split text based on whitespace\n\
    \t\t\tnew_list.push(\",\");\n\t\t\tis_ws = true;\n\t\t}\n\t\telse if(word ===\
    \ \",\"){\n\t\t\t//if the letter is a comma, add a ' ' to the new_list, this allows\
    \ us to split text based on commas\n\t\t\tnew_list.push(\" \");\n\t\t\tis_comma\
    \ = true;\n\t\t}\n\t\telse{\n\t\t\t//if the letter is a letter, add it to the\
    \ new_list\n\t\t\tnew_list.push(word);\n\t\t}\n\t}\n\tif(is_ws === true){\n\t\t\
    //if there are whitespaces, join the new_list elements into a string and split\
    \ the string at each ','\n\t\treturn new_list.join(\"\").split(\",\");\n\t}\n\t\
    else if(is_comma === true){\n\t\t//if there are commas, join the new_list elements\
    \ into a string and split the string at each ' '\n\t\treturn new_list.join(\"\"\
    ).split(\" \");\n\t}\n\telse{\n\t\t//if there are no whitespaces or commas, loop\
    \ through the new_list and find all letters with odd number order\n\t\tfor(var\
    \ i = 0; i < new_list.length; i++){\n\t\t\tvar num = new_list[i].charCodeAt(0);\n\
    \t\t\tif(num % 2 !== 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n\
    \    at test (/tmp/tmpflf8f7kh.js:57:10)\n    at Object.<anonymous> (/tmp/tmpflf8f7kh.js:65:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world !' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var answer\
    \ = [];\n    var q = txt.split(\",\");\n    if (q.length > 1){\n        for (var\
    \ i = 0; i < q.length; i++){\n            answer.push(q[i]);\n        }\n    }\n\
    \    else{\n        var p = txt.split(\" \");\n        if (p.length > 1){\n  \
    \          for (var i = 0; i < p.length; i++){\n                answer.push(p[i]);\n\
    \            }\n        }\n        else{\n            for (var i = 0; i < txt.length;\
    \ i++){\n                if (i % 2 == 1){\n                    answer.push(txt[i]);\n\
    \                }\n            }\n        }\n    }\n    return answer;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpnds8au6m.js:40:10)\n    at Object.<anonymous> (/tmp/tmpnds8au6m.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n \n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpvftcgxay.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvftcgxay.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes(\"\
    \ \")) {\n        return txt.split(\" \");\n    }\n    else if (txt.includes(\"\
    ,\")) {\n        return txt.split(\",\");\n    }\n    else {\n        count =\
    \ 0;\n        for (i = 0; i < txt.length; i += 2) {\n            if (txt[i] ===\
    \ txt[i].toLowerCase()) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp17ssw38y.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp17ssw38y.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  \n  var ans\
    \ = txt.split(\" \");\n  var toRet = [];\n  if(ans.length > 1){\n    return ans;\n\
    \  }\n  else{\n    ans = txt.split(\",\");\n    if(ans.length > 1){\n      return\
    \ ans;\n    }\n    else{\n      for(var i = 0; i < txt.length; i++){\n       \
    \ if(i % 2 == 0){\n          toRet.push(txt[i]);\n        }\n      }\n      return\
    \ toRet.length;\n    }\n  }\n}\n\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp045hdg_8.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp045hdg_8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var result\
    \ = '';\n    var txt_array = txt.split(' ');\n    for(var i = 0; i < txt_array.length;\
    \ i++){\n        if(txt_array[i].length % 2 != 0){\n            result = txt_array[i];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello'\n\nshould\
    \ loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp6s64q4v9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6s64q4v9.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.indexOf('\
    \ ') != -1) {\n        return txt.split(' ');\n    } else if (txt.indexOf(',')\
    \ != -1) {\n        return txt.split(',');\n    } else {\n        var count =\
    \ 0;\n        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 ==\
    \ 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp2rf3yprt.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2rf3yprt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar arr =\
    \ txt.split(/[ ,]+/);\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar\
    \ odd_count = 0;\n\tvar counter = 0;\n\tif (arr.length > 1){\n\t\treturn arr;\n\
    \t}\n\telse{\n\t\twhile (counter < txt.length){\n\t\t\tif (alphabet.indexOf(txt[counter])\
    \ % 2 == 1){\n\t\t\t\todd_count++;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\treturn\
    \ odd_count;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp_4696t_a.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_4696t_a.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  // Your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpk9l9zi_o.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk9l9zi_o.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var split\
    \ = txt.split(/[ ,]/);\n  if (split.length == 1){\n    return split.length;\n\
    \  } else if (split.length > 1){\n    return split;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpgkug_vgd.js:23:10)\n    at Object.<anonymous> (/tmp/tmpgkug_vgd.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  let words\
    \ = txt.split(\" \");\n  if(words.length == 1){\n    let test = 0;\n    for(let\
    \ i = 0; i < txt.length; i++){\n      let value = txt.charCodeAt(i);\n      if(value\
    \ % 2 == 1){\n        test++;\n      }\n    }\n    return test;\n  }\n  else{\n\
    \    let comma = [];\n    for(let i = 0; i < words.length; i++){\n      if(words[i].includes(\"\
    ,\")){\n        comma.push(words[i]);\n      }\n    }\n    if(comma.length ==\
    \ 1){\n      return comma;\n    }\n    else{\n      return words;\n    }\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpdsdezt8p.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdsdezt8p.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf(\"\
    \ \") != -1){\n\t\treturn txt.split(\" \");\n\t} else if (txt.indexOf(\",\") !=\
    \ -1){\n\t\treturn txt.split(\",\");\n\t} else {\n\t\tvar odd = 0;\n\t\tfor (var\
    \ i = 0; i < txt.length; i++){\n\t\t\tif (ord(txt[i]) % 2 == 1){\n\t\t\t\todd\
    \ = odd + 1;\n\t\t\t}\n\t\t}\n\t\treturn odd;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr9onfpjm.js:15\n\t\t\tif (ord(txt[i]) % 2 == 1){\n\t\t\t^\n\nReferenceError:\
    \ ord is not defined\n    at split_words (/tmp/tmpr9onfpjm.js:15:4)\n    at test\
    \ (/tmp/tmpr9onfpjm.js:32:20)\n    at Object.<anonymous> (/tmp/tmpr9onfpjm.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar split\
    \ = txt.split(/[ ,]+/);\n\tconsole.log(split);\n\tvar count = 0;\n\tif (split.length\
    \ == 1){\n\t\tfor (var i = 0; i < txt.length; i++){\n\t\t\tif (txt.charCodeAt(i)\
    \ % 2 == 1){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\
    return split;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpb4u_b2qm.js:29:10)\n    at Object.<anonymous> (/tmp/tmpb4u_b2qm.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ ''Hello'', ''world!'' ]

    [ ''Hello'', ''world!'' ]

    [ ''Hello'', ''world'', ''!'' ]

    '
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.indexOf(\"\
    \ \") !== -1){\n    txt = txt.split(\" \");\n    return txt;\n  }\n  else if(txt.indexOf(\"\
    ,\") !== -1){\n    txt = txt.split(\",\");\n    return txt;\n  }\n  else{\n  \
    \  counter = 0;\n    for(var i = 0; i < txt.length; i++){\n      if(txt.charCodeAt(i)\
    \ % 2 === 1){\n        counter += 1;\n      }\n    }\n    return counter;\n  }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf9hi4pyr.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf9hi4pyr.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let split_txt\
    \ = txt.split(' ');\n    if (split_txt.length > 1){\n        return split_txt;\n\
    \    }\n    split_txt = txt.split(',');\n    if (split_txt.length > 1){\n    \
    \    return split_txt;\n    }\n    let count = 0;\n    for (let i=0; i<txt.length;\
    \ i++){\n        if (txt[i].charCodeAt(0) % 2 == 1){\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp35igs288.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp35igs288.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes('\
    \ ')) {\n        return txt.split(' ');\n    }\n    else if (txt.includes(','))\
    \ {\n        return txt.split(',');\n    }\n    else {\n        let num = 0;\n\
    \        for (let i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                num++;\n            }\n        }\n        return num;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmprbgpi7hb.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprbgpi7hb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.includes('\
    \ ')){\n\t\treturn txt.split(' ');\n\t}\n\telse if (txt.includes(',')){\n\t\t\
    return txt.split(',');\n\t}\n\telse{\n\t\tvar count = 0;\n\t\tfor (var i = 0;\
    \ i < txt.length; i++){\n\t\t\tif ((txt.charCodeAt(i) - 97) % 2 != 0){\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpq_zfp0vc.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq_zfp0vc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var txtSplitted\
    \ = txt.split(\" \");\n  var word = \"\";\n  if(txtSplitted.length == 1){\n  \
    \  word = txt.split(\",\");\n    if(word.length == 1){\n      var num = 0;\n \
    \     for(var i = 0; i < txt.length; i++){\n        if(i % 2 == 0){\n        \
    \  num += 1;\n        }\n      }\n      return num;\n    }\n    else{\n      return\
    \ word;\n    }\n  }\n  else{\n    return txtSplitted;\n  }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp88hj90qc.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp88hj90qc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif(/\\s/.test(txt)){\n\
    \t\treturn txt.split(/\\s+/);\n\t}\n\telse if(/,/.test(txt)){\n\t\treturn txt.split(',');\n\
    \t}\n\telse{\n\t\tlet lowerCase = txt.toLowerCase();\n\t\tlet letterList = [];\n\
    \t\tlet counter = 0;\n\t\tfor(let i = 0; i < lowerCase.length; i++){\n\t\t\tlet\
    \ index = lowerCase.charCodeAt(i) - 97;\n\t\t\tletterList.push(index);\n\t\t}\n\
    \t\tfor(let i = 0; i < letterList.length; i++){\n\t\t\tif(letterList[i] % 2 !==\
    \ 0){\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\treturn counter;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpp7qbqn8_.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp7qbqn8_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let list\
    \ = txt.split(\",\");\n    if(list.length == 1){\n        list = txt.split(\"\
    \ \");\n        if(list.length == 1){\n            let count = 0;\n          \
    \  for(let i = 0; i < txt.length; i++){\n                if(i % 2 == 0 && txt[i]\
    \ == txt[i].toLowerCase()){\n                    count++;\n                }\n\
    \            }\n            return count;\n        }\n    }\n    return list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpdo7ig45_.js:31:10)\n    at Object.<anonymous> (/tmp/tmpdo7ig45_.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    const splitted_words\
    \ = txt.split(' ');\n    if (splitted_words.length > 1) {\n        return splitted_words;\n\
    \    }\n    const split_commas = txt.split(',');\n    if (split_commas.length\
    \ > 1) {\n        return split_commas;\n    }\n    let res = 0;\n    for (let\
    \ i = 0; i < txt.length; i++){\n        const char = txt[i];\n        const index\
    \ = char.charCodeAt(0) - 97;\n        if (index % 2 === 0) {\n            res\
    \ += 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpacktvmf2.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpacktvmf2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var splitted\
    \ = txt.split(/[ ,]+/);\n\n  if (splitted.length == 1) {\n    var result = 0;\n\
    \    for (var i = 0; i < txt.length; i += 2) {\n      if (txt[i] == txt[i].toLowerCase())\
    \ {\n        result += 1;\n      }\n    }\n    return result;\n  } else {\n  \
    \  return splitted;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpxn96xzbl.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxn96xzbl.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var arr\
    \ = txt.split('');\n    var cnt = 0;\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] == \" \"){\n            return txt.split(\" \");\n        }\n\
    \        else if(arr[i] == \",\"){\n            return txt.split(\",\");\n   \
    \     }\n        else if(arr[i] != arr[i].toUpperCase()){\n            if(arr[i].charCodeAt(0)\
    \ % 2 != 0){\n                cnt += 1;\n            }\n        }\n    }\n   \
    \ return cnt;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'Hello',\n  'world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello,Hello,world',\n\
    \  '!'\n]\n    at test (/tmp/tmpyur6eo68.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyur6eo68.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello', 'world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var t=txt.split(\"\
    \ \");\n    if(t.length>1){\n        return t;\n    }\n    else{\n        var\
    \ t1=txt.split(\",\");\n        if(t1.length>1){\n            return t1;\n   \
    \     }\n        else{\n            var k=0;\n            for(var i=0;i<txt.length;i++){\n\
    \                if(i%2==0 && txt[i]==txt[i].toLowerCase()){\n               \
    \     k++;\n                }\n            }\n            return k;\n        }\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8cia8z41.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8cia8z41.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var text\
    \ = txt.split(\",\");\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\
    \");\n    var count = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i]\
    \ == \" \"){\n            return text;\n        }\n        else if(text[i] ==\
    \ \",\"){\n            return text;\n        }\n        else{\n            for(var\
    \ j = 0; j < alphabet.length; j++){\n                if(text[i] == alphabet[j]){\n\
    \                    j = j+1;\n                    if(j % 2 != 0){\n         \
    \               count += 1;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpidtfcjp0.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpidtfcjp0.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let words\
    \ = txt.split(\" \");\n    if(words.length == 1){\n        words = txt.split(\"\
    ,\");\n        if(words.length == 1){\n            let count = 0;\n          \
    \  for(let i = 0; i < txt.length; i++){\n                if(txt.charCodeAt(i)\
    \ % 2 == 1){\n                    count++;\n                }\n            }\n\
    \            return count;\n        }\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1gbik0w_.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1gbik0w_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar split_words\
    \ = txt.split(\" \");\n\t\n\t\n\tif(split_words.length < 2){\n\t\tvar split_words2\
    \ = txt.split(\",\");\n\t\tif(split_words2.length < 2){\n\t\t\tvar split_words3\
    \ = txt.split(\"\");\n\t\t\tvar count = 0;\n\t\t\tfor(var i = 0; i < split_words3.length;\
    \ i ++){\n\t\t\t\tif(i % 2 != 0){\n\t\t\t\t\tif(split_words3[i] === split_words3[i].toLowerCase()){\n\
    \t\t\t\t\t\tcount ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\
    \t}\n\t\telse{\n\t\t\treturn split_words2;\n\t\t}\n\t}\n\telse{\n\t\treturn split_words;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    \n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpwxcssk0y.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwxcssk0y.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes('\
    \ ')){\n        return txt.split(' ')\n    }\n    else if (txt.includes(',')){\n\
    \        return txt.split(',')\n    }\n    else{\n        counter = 0\n      \
    \  for (let i = 0; i < txt.length; i++){\n            if (i % 2 == 0 && txt[i]\
    \ == txt[i].toLowerCase()){\n                counter += 1\n            }\n   \
    \     }\n        return counter\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5j07otjv.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5j07otjv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    txt = txt.split(/\\\
    s+/);\n    if(txt.length < 2){\n        txt = txt[0].split(\",\");\n        if(txt.length\
    \ < 2){\n            let letters = txt[0].split(\"\");\n            let count\
    \ = 0;\n            for(let x = 0; x < letters.length; x++){\n               \
    \ if(x % 2 == 0){\n                    count += letters[x].charCodeAt(0);\n  \
    \              }\n            }\n            return count;\n        }\n    }\n\
    \    return txt;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n297\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpu44_jhiu.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu44_jhiu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 297,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var txtSplit\
    \ = txt.split(/[, ]+/);\n    if (txtSplit.length > 1)\n        return txtSplit;\n\
    \    else {\n        var count = 0;\n        for (var i = 0; i < txt.length; i++)\
    \ {\n            if ((txt.charCodeAt(i) - 97) % 2 == 1)\n                count\
    \ += 1;\n        }\n        return count;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp01ng_pbk.js:27:10)\n    at Object.<anonymous> (/tmp/tmp01ng_pbk.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.search(/[a-z]+/)\
    \ == -1){\n        return txt.split(',').length;\n    }\n    else if (txt.search(',')\
    \ == -1){\n        cnt = 0;\n        for (i = 0; i < txt.length; i++){\n     \
    \       if (txt.charCodeAt(i) % 2 == 1){\n                cnt += 1;\n        \
    \    }\n        }\n        return cnt;\n    }\n    else{\n        return txt.split('\
    \ ').length;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp_uw4up1a.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_uw4up1a.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.match(/\\\
    s/g)){\n        return txt.split(/\\s/g);\n    }\n    else if (txt.match(/,/g)){\n\
    \        return txt.split(/,/g);\n    }\n    else{\n        let lower = txt.toLowerCase();\n\
    \        let count = 0;\n        for (let i = 0; i < lower.length; i++){\n   \
    \         if (lower.charCodeAt(i) % 2 == 1){\n                count++;\n     \
    \       }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpouyl5jrq.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpouyl5jrq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.includes(\"\
    \ \")){\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")){\n  \
    \  return txt.split(\",\");\n  } else {\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var count = 0;\n    for (var i = 0; i < txt.length; i++){\n      var number\
    \ = alpha.indexOf(txt[i]);\n      if (number % 2 == 1){\n        count++;\n  \
    \    }\n    }\n    return count;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    //your\
    \ code here\n     if (txt.indexOf(\" \") != -1) {\n        return txt.split(\"\
    \ \");\n    } else if (txt.indexOf(\",\") != -1) {\n        return txt.split(\"\
    ,\");\n    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                if (txt[i] == txt[i].toLowerCase())\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpawpbz62q.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpawpbz62q.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.includes(\"\
    \ \")){\n        return txt.split(\" \");\n    }else if(txt.includes(\",\")){\n\
    \        return txt.split(\",\");\n    }else{\n        count = 0;\n        for(i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5osz_e3d.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5osz_e3d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n   if (txt.includes(\"\
    \ \")){\n     var splitText = txt.split(\" \");\n      return splitText;\n   \
    \ }\n    else if (txt.includes(\",\")){\n     var splitText = txt.split(\",\"\
    );\n      return splitText;\n    }\n    else{\n      var len = txt.length;\n \
    \     var final = [];\n      for (var i = 0; i < len; i++){\n        var ascii\
    \ = txt.charCodeAt(i);\n        if (ascii % 2 == 1){\n          final.push(ascii);\n\
    \        }\n      }\n      return final.length;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpw_3qx2yu.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw_3qx2yu.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.match(/\\\
    s/)) {\n    return txt.split(\" \");\n  } else if (txt.match(/,/)) {\n    return\
    \ txt.split(\",\");\n  } else {\n    sum = 0;\n    for (var i = 0; i < txt.length;\
    \ i++) {\n      if (txt.charCodeAt(i) % 2 != 0) {\n        sum += 1;\n      }\n\
    \    }\n    return sum;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp6nk_fw8d.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6nk_fw8d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.indexOf(\"\
    \ \")>=0){\n    return txt.split(\" \");\n  }\n  else if(txt.indexOf(\",\")>=0){\n\
    \    return txt.split(\",\");\n  }\n  else{\n    var count=0;\n    for(var i=0;i<txt.length;i++){\n\
    \      if(txt.charCodeAt(i)%2!=0){\n        count++;\n      }\n    }\n    return\
    \ count;\n  }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpanvytlhe.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpanvytlhe.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif(/\\s/.test(txt)){\n\
    \t\tlet a = txt.split(/\\s/);\n\t\treturn a;\n\t}\n\telse if(/,/.test(txt)){\n\
    \t\tlet a = txt.split(/,/);\n\t\treturn a;\n\t}\n\telse{\n\t\tlet count = 0;\n\
    \t\tfor(let i = 0; i < txt.length; i++){\n\t\t\tif(txt.charCodeAt(i) % 2 != 0){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0q2h1zis.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0q2h1zis.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.includes('\
    \ ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n\
    \        return txt.split(',');\n    }\n    else{\n        var count = 0;\n  \
    \      for(var i = 0; i < txt.length; i++){\n            if(!(i%2)){\n       \
    \         if(txt[i] == txt[i].toLowerCase()){\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplglzz8sz.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplglzz8sz.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    txt = txt.trim();\n\
    \    var whitespace = txt.indexOf(\" \");\n    var comma = txt.indexOf(\",\");\n\
    \    if (whitespace == -1 && comma == -1){\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++){\n            if (i % 2 == 0 && txt[i] >= 'a'\
    \ && txt[i] <= 'z'){\n                count += 1;\n            }\n        }\n\
    \        return count;\n    }\n    else if (whitespace != -1 && comma == -1){\n\
    \        return txt.split(\" \");\n    }\n    else if (whitespace == -1 && comma\
    \ != -1){\n        return txt.split(\",\");\n    }\n    else if (whitespace <\
    \ comma){\n        return txt.split(\" \");\n    }\n    else{\n        return\
    \ txt.split(\",\");\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'Hello',\n  'world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello,Hello,world',\n\
    \  '!'\n]\n    at test (/tmp/tmpqzgnu5ik.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqzgnu5ik.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello', 'world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if(txt.split(\"\
    \ \").length>1){\n      return txt.split(\" \");\n  }\n  else if(txt.split(\"\
    ,\").length>1){\n      return txt.split(\",\");\n  }\n  else{\n      var count=0;\n\
    \      for(var i=0;i<txt.length;i++){\n          if(txt.charCodeAt(i)%2==1){\n\
    \              count++;\n          }\n      }\n      return count;\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppf2kvlgj.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppf2kvlgj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  return txt.split(/\\\
    s+|,/).map(function(v){\n    return v.match(/[a-z]/g).length % 2 == 0 ? v : v.length;\n\
    \  })\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  6\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test\
    \ (/tmp/tmpyl8rnqd1.js:19:10)\n    at Object.<anonymous> (/tmp/tmpyl8rnqd1.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 6 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar test\
    \ = txt.split(\" \");\n\tvar test2 = txt.split(\",\");\n\tif (test2[0] == \"\"\
    ){\n\t\treturn test.length;\n\t}\n\telse if (test[0] == \"\"){\n\t\treturn test2.length;\n\
    \t}\n\telse {\n\t\tvar letters = txt.split(\"\");\n\t\tvar oddOrder = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n\t\tvar count = 0;\n\t\tfor (var i = 0; i < letters.length; i++){\n\
    \t\t\tif (oddOrder.indexOf(letters[i]) != -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\treturn count;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprbhz2h4u.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmprbhz2h4u.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  let words\
    \ = txt.split(\" \");\n  if(words.length === 1){\n    let letters = txt.split(\"\
    \");\n    let count = 0;\n    for(let i = 0; i < letters.length; i++){\n     \
    \ if(i % 2 === 0 && i % 2 !== letters[i].charCodeAt(0)){\n        count++;\n \
    \     }\n    }\n    return count;\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpm1ce3vcz.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm1ce3vcz.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.indexOf(\"\
    \ \") !== -1) {\n        return txt.split(\" \");\n    } else if (txt.indexOf(\"\
    ,\") !== -1) {\n        return txt.split(\",\");\n    } else {\n        var oddcount\
    \ = 0;\n        for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 !== 0) {\n                oddcount++;\n            }\n        }\n      \
    \  return oddcount;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_vrnlftz.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_vrnlftz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var s =\
    \ txt.split(\" \");\n    if(s.length > 1){\n      return s;\n    }else{\n    \
    \    var s = txt.split(\",\");\n        if(s.length > 1){\n            return\
    \ s;\n        }else{\n            var odd = 0;\n            for(var i = 0; i <\
    \ txt.length; i++){\n                if(txt.charCodeAt(i) % 2 != 0){\n       \
    \             odd++;\n                }\n            }\n            return odd;\n\
    \        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpld66twm5.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpld66twm5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if (txt.includes(\"\
    \ \")){\n        return txt.split(\" \");\n    }\n    else if (txt.includes(\"\
    ,\")){\n        return txt.split(\",\");\n    }\n    else {\n        var odd =\
    \ 0;\n        for (var i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i)\
    \ % 2 === 1){\n                odd += 1;\n            }\n        }\n        return\
    \ odd;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpgiuss7s_.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgiuss7s_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf(\"\
    \ \") == -1){\n\t\tif (txt.indexOf(\",\") == -1){\n\t\t\tvar word = txt.toLowerCase().split(\"\
    \");\n\t\t\tvar count = 0;\n\t\t\tfor (i=0; i<word.length; i++){\n\t\t\t\tif (i%2==0){\n\
    \t\t\t\t\tvar num = word[i].charCodeAt()-97;\n\t\t\t\t\tcount += num;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\t\telse{\n\t\t\treturn txt.split(\",\"\
    );\n\t\t}\n\t}\n\telse{\n\t\treturn txt.split(\" \");\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjqgfpweh.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjqgfpweh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tlet alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\tlet odd_count = 0;\n\tif (txt.indexOf(\"\
    \ \") == -1 && txt.indexOf(\",\") == -1){\n\t\tfor (i = 0; i < txt.length; i++)\
    \ {\n\t\t\tlet index = alphabet.indexOf(txt[i])\n\t\t\tif (index % 2 == 1) {\n\
    \t\t\t\todd_count += 1;\n\t\t\t}\n\t\t}\n\t\treturn odd_count;\n\t}\n\tif (txt.indexOf(\"\
    \ \") == -1){\n\t\treturn txt.split(\",\");\n\t}\n\treturn txt.split(\" \");\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var myText\
    \ = txt;\n    var splitedText = myText.split(\" \");\n    var splitedTextLen =\
    \ splitedText.length;\n    var splitedText2 = myText.split(\",\");\n    var splitedTextLen2\
    \ = splitedText2.length;\n    var splitedText3 = myText.split(\"\");\n    var\
    \ splitedTextLen3 = splitedText3.length;\n    if(splitedTextLen > 1){\n      \
    \  console.log(splitedText);\n    }\n    else if(splitedTextLen2 > 1){\n     \
    \   console.log(splitedText2);\n    }\n    else if(splitedTextLen3 > 1){\n   \
    \     var charCode = 0;\n        for(i = 0; i < splitedTextLen3; i++){\n     \
    \       if(charCode > 25){\n                charCode = 0;\n            }\n   \
    \         var character = splitedText3[i];\n            var charCode = character.charCodeAt()\
    \ - 97;\n            console.log(charCode);\n        }\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpfm2edb1m.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfm2edb1m.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''Hello'', ''world!'' ]

    '
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.includes('\
    \ ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n\
    \        return txt.split(',');\n    }\n    else{\n        let count = 0;\n  \
    \      let charCode;\n        for(i=0; i<txt.length; i++){\n            charCode\
    \ = txt.charCodeAt(i);\n            if(charCode > 96 && charCode < 123){\n   \
    \             if(charCode % 2 != 0){\n                    count++;\n         \
    \       }\n            }\n        }\n        return count;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp7zdkzwpv.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7zdkzwpv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    var txtSplit\
    \ = txt.split(\" \");\n    if (txtSplit.length == 1){\n        txtSplit = txt.split(\"\
    ,\");\n        if (txtSplit.length == 1){\n            var letterCount = 0;\n\
    \            for (i = 0; i < txt.length; i++){\n                var charCode =\
    \ txt.charCodeAt(i);\n                if (charCode >= 97 && charCode <= 122){\n\
    \                    if ((charCode - 97) % 2 != 0){\n                        letterCount++;\n\
    \                    }\n                }\n            }\n            return letterCount;\n\
    \        }\n        else{\n            return txtSplit;\n        }\n    }\n  \
    \  else{\n        return txtSplit;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tlet answer\
    \ = 0;\n\tif(txt.indexOf(\" \") == -1){\n\t\tif(txt.indexOf(\",\") == -1){\n\t\
    \t\tfor(let i = 0; i < txt.length; i += 2){\n\t\t\t\tif(txt[i] == txt[i].toLowerCase()){\n\
    \t\t\t\t\tanswer++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn txt.split(\"\
    ,\");\n\t\t}\n\t}\n\telse{\n\t\treturn txt.split(\" \");\n\t}\n\treturn answer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1n6rlseo.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1n6rlseo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    // Replace\
    \ this line with your code\n    if (txt.includes(\" \")){\n        var wordArray\
    \ = txt.split(\" \");\n        return wordArray;\n    }\n    else if (txt.includes(\"\
    ,\")){\n        var wordArray = txt.split(\",\");\n        return wordArray;\n\
    \    }\n    else{\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if ((i % 2) != 0 && txt[i] == txt[i].toLowerCase()){\n  \
    \              count += 1;\n            }\n        }\n        return count;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let y =\
    \ txt.split(\",\")\n    if (y.length == 1){\n        var x = y[0].split(\" \"\
    )\n        if (x.length == 1){\n            x = count_odd(x[0])\n        }\n \
    \   }\n    else{\n        x = y\n    }\n    return x\n}\nsplit_words(\"hello kitty,\
    \ hello puss\")\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmp1o53occy.js:29:10)\n    at Object.<anonymous> (/tmp/tmp1o53occy.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var spt =\
    \ txt.split(/[,\\s]+/);\n  if (spt.length > 1) {\n    return spt;\n  }\n  else\
    \ if (txt.match(/[,]+/)) {\n    return spt.length;\n  }\n  else {\n    var count\
    \ = 0;\n    for (var i = 0; i < txt.length; i++) {\n      if (txt.charCodeAt(i)\
    \ % 2 == 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp9gzi1nd4.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9gzi1nd4.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tvar txt_split\
    \ = [];\n\tvar count = 0;\n\tvar whitespace = [\" \"];\n\tvar comma = [\",\"];\n\
    \tvar alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"];\n\t// console.log(alphabet[25]);\n\t// for(i=0; i<alphabet.length;\
    \ i+=2){\n\t// \tconsole.log(alphabet[i]);\n\t// }\n\tif(txt.includes(whitespace)){\n\
    \t\ttxt_split = txt.split(\" \");\n\t\treturn txt_split;\n\t}else if(txt.includes(comma)){\n\
    \t\ttxt_split = txt.split(\",\");\n\t\treturn txt_split;\n\t}else{\n\t\tconsole.log(txt.length);\n\
    \t\tfor(i=0; i<txt.length; i+=2){\n\t\t\tif(txt[i] == alphabet[i]){\n\t\t\t\t\
    count += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n\nsplit_words(\"cbd\"\
    );\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpucaqff0q.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpucaqff0q.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '3

    6

    5

    '
  timestamp: 1659977083
- exit_code: 0
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif(txt.indexOf(\"\
    \ \") == -1 && txt.indexOf(\",\") == -1){\n\t\tvar odd_num = 0;\n\t\tfor(var i\
    \ = 0; i < txt.length; i++){\n\t\t\tvar ascii = txt.charCodeAt(i);\n\t\t\tvar\
    \ num = ascii - 97;\n\t\t\tif(num % 2 == 1){\n\t\t\t\todd_num += 1;\n\t\t\t}\n\
    \t\t}\n\t\treturn odd_num;\n\t}\n\telse if(txt.indexOf(\" \") == -1){\n\t\treturn\
    \ txt.split(\",\");\n\t}\n\telse{\n\t\treturn txt.split(\" \");\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  var t = txt.split(/[\
    \ ,]/g);\n  if(t.length > 1){\n    var t = txt.split(/[ ,]/g);\n    return t;\n\
    \  }\n  else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n\
    \      if(i % 2 == 0){\n        if(txt[i] == txt[i].toLowerCase()){\n        \
    \  count++;\n        }\n      }\n    }\n    return count;\n  }\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpds2j9ukl.js:34:10)\n    at Object.<anonymous> (/tmp/tmpds2j9ukl.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  const res\
    \ = txt.split(/[,\\s]/);\n  const lst = res.filter(x => x.length > 0);\n  const\
    \ odd_lst = lst.filter(x => x.length % 2 !== 0);\n  const let_lst = odd_lst.filter(x\
    \ => x.match(/[a-z]/));\n  return let_lst.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpqlf8q0zh.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqlf8q0zh.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  if (txt.indexOf('\
    \ ') > -1) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') > -1)\
    \ {\n    return txt.split(',');\n  } else {\n    var count = 0;\n    for (var\
    \ i = 0; i < txt.length; i++) {\n      if (txt.charCodeAt(i) % 2 === 1) {\n  \
    \      count++;\n      }\n    }\n    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8u0ih5t5.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8u0ih5t5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n  let words\
    \ = txt.split(/[, ]/);\n  console.log(words);\n  let charCount = 0;\n  for(let\
    \ i = 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      let char = words[i].charCodeAt(j);\n      if(char >= 97 && char <= 122){\n\
    \        if(char % 2 === 1){\n          charCount++;\n        }\n      }\n   \
    \ }\n  }\n  return charCount;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpy5aafmg8.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy5aafmg8.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''Hello'', ''world!'' ]

    '
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    let splitText\
    \ = txt.split(\" \");\n    if(splitText.length === 1){\n        splitText = txt.split(\"\
    ,\");\n        if(splitText.length === 1){\n            return count(txt);\n \
    \       }\n    }\n    return splitText;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplix57vd3.js:12\n            return count(txt);\n            ^\n\
    \nReferenceError: count is not defined\n    at split_words (/tmp/tmplix57vd3.js:12:13)\n\
    \    at test (/tmp/tmplix57vd3.js:27:20)\n    at Object.<anonymous> (/tmp/tmplix57vd3.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpmlkvev1u.js:14:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmlkvev1u.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\tif (txt.indexOf(\"\
    \ \") != -1){\n\t\treturn txt.split(\" \");\n\t} else if (txt.indexOf(\",\") !=\
    \ -1){\n\t\treturn txt.split(\",\");\n\t} else {\n\t\tvar count = 0;\n\t\tfor\
    \ (var i = 0; i < txt.length; i++){\n\t\t\tif (txt.charCodeAt(i) % 2 == 1){\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpvzlr31pm.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvzlr31pm.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    // [\\\
    s,] Match any whitespace character [\\r\\n\\t\\f ]\n    // . Match any character\
    \ [\\r\\n\\t\\f ]\n\n    var txtSplit = txt.split(/[\\s,]/);\n    if (txtSplit.length\
    \ === 1) {\n        var str = txtSplit[0];\n        var count = 0;\n        for\
    \ (var i = 0; i < str.length; i++) {\n            if (str.charCodeAt(i) % 2 !==\
    \ 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    return txtSplit;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp3flf3i62.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3flf3i62.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    // Your\
    \ code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5vtowsik.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5vtowsik.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\"\
    \ \") !== -1){\n        return txt.split(\" \");\n    }else if(txt.indexOf(\"\
    ,\") !== -1){\n        return txt.split(\",\");\n    }else{\n        let txtToArray\
    \ = txt.split(\"\");\n        let counter = 0;\n        for(let i = 0; i < txtToArray.length;\
    \ i++){\n            if(i % 2 !== 0){\n                counter += 1;\n       \
    \     }\n        }\n        return counter;\n    }\n\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmptvvkn0q9.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptvvkn0q9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n\treturn;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpcvjksvf7.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcvjksvf7.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n   var s =\
    \ txt.split(/\\s+/);\n   if (s.length == 1){\n     var s = txt.split(',');\n \
    \    if (s.length == 1){\n       var s = txt.split('');\n       var a = 0;\n \
    \      for (var i=0; i<s.length; i++){\n         if (s[i].charCodeAt(0)>96 &&\
    \ s[i].charCodeAt(0)<123){\n           if (i%2 == 0){\n             a+=1;\n  \
    \         }\n         }\n       }\n       return a;\n     }\n     else{\n    \
    \   return s;\n     }\n   }\n   else{\n     return s;\n   }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0asav081.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0asav081.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"abcdef\") \n// 3\nfunction split_words(txt){\n    if(txt.indexOf('\
    \ ') != -1){\n        return txt.split(' ');\n    }else if(txt.indexOf(',') !=\
    \ -1){\n        return txt.split(',');\n    }else{\n        var count = 0;\n \
    \       var i = 0;\n        for(i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 == 1){\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpm9lduyp4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm9lduyp4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977083
