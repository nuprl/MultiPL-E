language: js
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var m = 1;\n\twhile(n > 0){\n\t\tif(n & 1) m = (m * 2) % p;\n\t\tn = n >> 1;\n\
    \t}\n\treturn m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbm67sc_k.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbm67sc_k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return parseInt(BigInteger(2).pow(n).mod(p).toString());\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppvw8wutt.js:3\n\treturn parseInt(BigInteger(2).pow(n).mod(p).toString());\n\
    \t^\n\nReferenceError: BigInteger is not defined\n    at modp (/tmp/tmppvw8wutt.js:3:2)\n\
    \    at test (/tmp/tmppvw8wutt.js:12:20)\n    at Object.<anonymous> (/tmp/tmppvw8wutt.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var b = n.toString(2);\n\tvar r = 0;\n\tfor(var i = 0; i < b.length; i++){\n\t\
    \tr = r * 2;\n\t\tif(r >= p){\n\t\t\tr = r - p;\n\t\t}\n\t\tif(b[i] == \"1\"){\n\
    \t\t\tr = r + 1;\n\t\t}\n\t\tif(r >= p){\n\t\t\tr = r - p;\n\t\t}\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp132wyd8.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp132wyd8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n < 1){\n        return 1;\n    }\n    if(n == 1){\n        return 2;\n\
    \    }\n    var temp = modp(n / 2, p);\n    temp = (temp * temp) % p;\n    if(n\
    \ % 2 == 1){\n        temp = (temp * 2) % p;\n    }\n    return temp;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0xboflgf.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0xboflgf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tn = n%(p-1);\n\tif(n<0) n = n + p - 1;\n\tvar res = 1;\n\
    \tvar a = 2;\n\twhile(n>0){\n\t\tif(n%2==1){\n\t\t\tres = mod(res*a, p);\n\t\t\
    }\n\t\ta = mod(a*a, p);\n\t\tn = Math.floor(n/2);\n\t}\n\treturn res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8voy13k0.js:10\n\t\t\tres = mod(res*a, p);\n\t\t\t^\n\nReferenceError:\
    \ mod is not defined\n    at modp (/tmp/tmp8voy13k0.js:10:4)\n    at test (/tmp/tmp8voy13k0.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8voy13k0.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var x = 1;\n    for(var i = 0; i < n; i++){\n        x = (x * 2) % p;\n \
    \   }\n    return x;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(p == 2) return n%2;\n  var x = 1;\n  while(n>0){\n    if(n%2) x = (x*2)%p;\n\
    \    n = Math.floor(n/2);\n  }\n  return x;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpr3yo7gnt.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr3yo7gnt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0)\n\t\treturn 1;\n\tif(n === 1)\n\t\treturn 2;\n\tif(n%2 === 0){\n\t\
    \tn = modp(n/2, p);\n\t\treturn (n*n)%p;\n\t}\n\telse{\n\t\tn = modp(n-1, p);\n\
    \t\treturn (2*n)%p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n%2==0){\n\t\treturn modp(n/2, p)^2 % p;\n\t}\n\telse{\n\
    \t\treturn modp(n-1, p)*2 % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpkn1awhsp.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkn1awhsp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var x = BigInt(1);\n    var y = BigInt(2);\n    while (n > 0){\n        if\
    \ (n % 2 != 0){\n            x = (x * y) % p;\n        }\n        y = (y * y)\
    \ % p;\n        n = Math.floor(n / 2);\n    }\n    return x;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg0n1rre2.js:7\n            x = (x * y) % p;\n                 \
    \       ^\n\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n\
    \    at modp (/tmp/tmpg0n1rre2.js:7:25)\n    at test (/tmp/tmpg0n1rre2.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpg0n1rre2.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0) return 1;\n    if(n%2==0){\n        var res = modp(n/2, p);\n  \
    \      return (res*res)%p;\n    }\n    return (modp(n-1, p)*2)%p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    \"use strict\";\n\tif(n < 0) return;\n\tvar res = 1;\n\tvar bit;\n\tfor(bit =\
    \ 1; bit <= n; bit *= 2){\n\t\tif(n & bit) res = (res * 2) % p;\n\t}\n\treturn\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpso7ep797.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpso7ep797.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  if(n % 2 == 0){\n    var temp = modp(n/2, p);\n   \
    \ return (temp * temp) % p;\n  }\n  else return (2 * modp(n-1, p)) % p;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\telse return (2*modp(n-1, p)) %\
    \ p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res\
    \ = (res * n) % p;\n        }\n        n = Math.floor(n/2);\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    else if(n == 1) return 2;\n    else if(n == 2)\
    \ return 4;\n    else if(n == 3) return 8;\n    else if(n == 4) return 16;\n \
    \   else if(n == 5) return 32;\n    else if(n == 6) return 64;\n    else if(n\
    \ == 7) return 128;\n    else if(n == 8) return 256;\n    else if(n == 9) return\
    \ 512;\n    else if(n == 10) return 1024;\n    else if(n == 11) return 2048;\n\
    \    else if(n == 12) return 4096;\n    else if(n == 13) return 8192;\n    else\
    \ if(n == 14) return 16384;\n    else if(n == 15) return 32768;\n    else if(n\
    \ == 16) return 65536;\n    else if(n == 17) return 131072;\n    else if(n ==\
    \ 18) return 262144;\n    else if(n == 19) return 524288;\n    else if(n == 20)\
    \ return 1048576;\n    else if(n == 21) return 2097152;\n    else if(n == 22)\
    \ return 4194304;\n    else if(n == 23) return 8388608;\n    else if(n == 24)\
    \ return 16777216;\n    else if(n == 25) return 33554432;\n    else if(n == 26)\
    \ return 67108864;\n    else if(n == 27) return 134217728;\n    else if(n == 28)\
    \ return 268435456;\n    else if(n == 29) return 536870912;\n    else if(n ==\
    \ 30) return 1073741824;\n    else if(n == 31) return 2147483648;\n    else if(n\
    \ == 32) return 4294967296;\n    else if(n == 33) return 8589934592;\n    else\
    \ if(n == 34) return 17179869184;\n    else if(n == 35) return 34359738368;\n\
    \    else if(n == 36) return 68719476736;\n    else if(n ==\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz1dymnv3.js:41\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(!p) p = mod;\n\t\n\tvar pw = 1;\n\twhile(n > 0){\n\t\tif(n & 1) pw = mul(pw,\
    \ 2, p);\n\t\tn >>= 1;\n\t}\n\treturn pw;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpi4vt7sgt.js:7\n\t\tif(n & 1) pw = mul(pw, 2, p);\n\t\t        \
    \  ^\n\nReferenceError: mul is not defined\n    at modp (/tmp/tmpi4vt7sgt.js:7:13)\n\
    \    at test (/tmp/tmpi4vt7sgt.js:18:20)\n    at Object.<anonymous> (/tmp/tmpi4vt7sgt.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var two_n_p = BigInteger(2).modPow(BigInteger(n), BigInteger(p));\n\treturn parseInt(two_n_p.toString());\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptbbb_xwz.js:3\n\tvar two_n_p = BigInteger(2).modPow(BigInteger(n),\
    \ BigInteger(p));\n\t              ^\n\nReferenceError: BigInteger is not defined\n\
    \    at modp (/tmp/tmptbbb_xwz.js:3:16)\n    at test (/tmp/tmptbbb_xwz.js:12:20)\n\
    \    at Object.<anonymous> (/tmp/tmptbbb_xwz.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    \"use strict\";\n\tvar ret = 1;\n\tn = n % (p - 1);\n\twhile(n){\n\t\tif(n % 2){\n\
    \t\t\tret = (ret * 2) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tif(n){\n\t\t\
    \tret = (ret * ret) % p;\n\t\t}\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmprs8eatsg.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprs8eatsg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    //The following is the\
    \ simple version of the following line:\n    //return Math.pow(2, n) % p;\n  \
    \  //but it uses an algorithm to do it, which is in general better\n    //than\
    \ just using Math.pow() because of precision issues.\n    var t = modp(Math.floor(n/2),\
    \ p);\n    if(n % 2 == 0) return (t*t) % p;\n    return (2*t*t) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n < 0)return -1;\n\tif(n == 0)return 1;\n\tif(n == 1)return 2;\n\tif(n == 2)return\
    \ 4;\n\tif(n == 3)return 8;\n\tif(n == 4)return 16;\n\tif(n == 5)return 32;\n\t\
    if(n == 6)return 64;\n\tif(n == 7)return 128;\n\tif(n == 8)return 256;\n\tif(n\
    \ == 9)return 512;\n\tif(n == 10)return 1024;\n\tif(n == 11)return 2048;\n\tif(n\
    \ == 12)return 4096;\n\tif(n == 13)return 8192;\n\tif(n == 14)return 16384;\n\t\
    if(n == 15)return 32768;\n\tif(n == 16)return 65536;\n\tif(n == 17)return 131072;\n\
    \tif(n == 18)return 262144;\n\tif(n == 19)return 524288;\n\tif(n == 20)return\
    \ 1048576;\n\tif(n == 21)return 2097152;\n\tif(n == 22)return 4194304;\n\tif(n\
    \ == 23)return 8388608;\n\tif(n == 24)return 16777216;\n\tif(n == 25)return 33554432;\n\
    \tif(n == 26)return 67108864;\n\tif(n == 27)return 134217728;\n\tif(n == 28)return\
    \ 268435456;\n\tif(n == 29)return 536870912;\n\tif(n == 30)return 1073741824;\n\
    \tif(n == 31)return 2147483648;\n\tif(n == 32)return 4294967296;\n\tif(n == 33)return\
    \ 8589934592;\n\tif(n == 34)return 17179869184;\n\tif(n == 35)return 34359738368;\n\
    \tif(n == 36)return 68719476736;\n\tif(n == 37)return 137438953472;\n\tif(n ==\
    \ 38)return 274877906944\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_z70q0l_.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var i, j;\n\tvar res = 1;\n\tfor(i = 0; i < n; i++){\n\t\tfor(j = 0; j < n; j++){\n\
    \t\t\tres = (res * 2) % p;\n\t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_9k29irg.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9k29irg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var temp = 1,\n\t\tbase = 2;\n\twhile(n>0){\n\t\tif(n%2){\n\t\t\ttemp = (temp*base)%p;\n\
    \t\t}\n\t\tbase = (base*base)%p;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn temp;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    \n\t//We need to work modulo p, so we only keep the integer part.\n\tn = Math.floor(n);\n\
    \t\n\t//If n is a power of 2, then the answer is 2^n mod p.\n\tif (isPow2(n))\n\
    \t\treturn modpow(2, n, p);\n\t\n\t//We need to do an expensive algorithm, so\
    \ we cache the results.\n\tvar mod = Math.floor(Math.log(n) / Math.log(2));\n\t\
    var cache = modpCache[mod];\n\tif (cache === undefined){\n\t\tcache = [1];\n\t\
    \tfor (var i = 1; i <= mod; i++)\n\t\t\tcache[i] = modmult(cache[i - 1], 2, p);\n\
    \t\tmodpCache[mod] = cache;\n\t}\n\t\n\t//We want the answer to be positive, so\
    \ we take the remainder modulo p.\n\treturn modmult(cache[mod], modp(n - Math.pow(2,\
    \ mod), p), p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmcvs8epl.js:8\n\tif (isPow2(n))\n\t^\n\nReferenceError: isPow2\
    \ is not defined\n    at modp (/tmp/tmpmcvs8epl.js:8:2)\n    at test (/tmp/tmpmcvs8epl.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpmcvs8epl.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n<0){\n        return -1;\n    }else if(n===0){\n        return 1;\n \
    \   }else if(n===1){\n        return 2;\n    }else{\n        var i,\n        \
    \    result = 2;\n        for(i=2; i<=n; i++){\n            result = (result*2)%p;\n\
    \        }\n        return result;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2;\n    return\
    \ (2 * modp(n - 1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var s = 1;\n  while (n > 0){\n    if (n % 2 === 1)\n      s = (s * 2) % p;\n\
    \    n = n >> 1;\n  }\n  return s;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8t777ct5.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8t777ct5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var r = 1, b = 2;\n  while(n > 0){\n    if(n % 2 == 1) r = (r * b) % p;\n \
    \   n = Math.floor(n / 2);\n    b = (b * b) % p;\n  }\n  return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var re = 1;\n    for(var i = 0; i < n; i++){\n        re = (re * 2) % p;\n\
    \    }\n    return re;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var ans = 1;\n    n = n % p;\n    while(n > 0){\n        if(n & 1 > 0){\n\
    \            ans = (ans * 2) % p;\n        }\n        n = n >> 1;\n        p =\
    \ (p * p) % 1000000007;\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmprklz9iup.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprklz9iup.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    while(n>0){\n        if(n%2 != 0){\n            r = (r*2)%p;\n\
    \        }\n        n = n/2;\n        p = (p*p)%mod;\n    }\n    return r;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy8u5bovg.js:9\n        p = (p*p)%mod;\n                  ^\n\n\
    ReferenceError: mod is not defined\n    at modp (/tmp/tmpy8u5bovg.js:9:19)\n \
    \   at test (/tmp/tmpy8u5bovg.js:19:20)\n    at Object.<anonymous> (/tmp/tmpy8u5bovg.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n==1) return 2;\n\tvar result = modp(Math.floor(n/2),\
    \ p);\n\tresult = (result*result)%p;\n\tif(n%2==1) result = (result*2)%p;\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var r = 1;\n  for(var i = 0; i < n; i++){\n    r = (r * 2) % p;\n  }\n  return\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p == 1) return 0;\n    if(n == 0) return 1;\n    if(n == 1) return 2;\n\
    \    if(n == 2) return 4;\n    if(n == 3) return 8;\n    var x;\n    if(n % 2\
    \ == 0){\n        x = modp(n/2, p);\n        x = (x*x) % p;\n    }\n    else {\n\
    \        x = modp(n-1, p);\n        x = (x*2) % p;\n    }\n    return x;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpimc6qohx.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpimc6qohx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\twhile(n > 0){\n\t\tif(n & 1) res = (res * 2) % p;\n\t\tn >>= 1;\n\
    \t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyd66br6i.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyd66br6i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(p===0)\n    return NaN;\n  if(n===0)\n    return 0;\n  let res = 1;\n  while(n>0){\n\
    \    if(n%2 === 1)\n      res = (res*2)%p;\n    n = Math.floor(n/2);\n  }\n  return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuk3b9n3d.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuk3b9n3d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var m = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tm = (m * 2) % p;\n\t}\n\treturn\
    \ m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var pwrs = Math.pow(2, n);\n\treturn pwrs % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmpqt789su6.js:13:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqt789su6.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return ((1 << n) + p - 1) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp52xxvk2s.js:11:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp52xxvk2s.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var a = 1;\n\tfor(var i = 0; i < n; i++){\n\t\ta = (a * 2) % p;\n\t}\n\treturn\
    \ a;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    n= n%p;\n    var result = 1;\n    var x = 2;\n    while(n>0){\n        var\
    \ lastbit = n%2;\n        n = n/2;\n        if(lastbit == 1){\n            result\
    \ = (result*x)%p;\n        }\n        x = (x*x)%p;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp4dzekvs7.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4dzekvs7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0) return 0;\n\tif(n === 1) return 1;\n\tif(n % 2 === 0){\n\t\treturn\
    \ (modp(n/2, p) * modp(n/2, p)) % p;\n\t}\n\telse {\n\t\treturn (2 * modp(n-1,\
    \ p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbfm2lh3u.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbfm2lh3u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0)\n\t\treturn 1;\n\telse if(n == 1)\n\t\treturn 2 % p;\n\telse if(n %\
    \ 2 == 0){\n\t\tvar c = modp(n/2, p);\n\t\treturn (c*c) % p;\n\t}else{\n\t\treturn\
    \ (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var res = 1;\n  for(var i = 0; i < n; i++){\n    res = (res * 2) % p;\n  }\n\
    \  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0)\n\t\treturn 1;\n\tif(n % 2 == 0)\n\t\treturn Math.pow(modp(n/2, p),\
    \ 2) % p;\n\treturn (modp(n-1, p) * 2) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var result = 1;\n  for(var i = 0; i < n; i++){\n    result = (result * 2) %\
    \ p;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var k = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tk = (k * 2) % p;\n\t}\n\treturn\
    \ k;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n===0)\n        return 1;\n    if(n%2===0)\n        return modp(n/2, p)\
    \ ** 2 % p;\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var mod=1;\n  while(n>0){\n    if(n%2===1){\n      mod=(mod*2)%p;\n    }\n\
    \    n=Math.floor(n/2);\n    if(n>0){\n      mod=(mod*mod)%p;\n    }\n  }\n  return\
    \ mod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwgtfzmdy.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwgtfzmdy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var ans = 1;\n\tn %= p-1;\n\twhile(n){\n\t\tif(n & 1)\n\t\t\tans = (ans * 2) %\
    \ p;\n\t\tn >>= 1;\n\t}\n\treturn ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp97wlnae5.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp97wlnae5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  var x = modp(n/2, p);\n  if(n % 2 == 0) return (x %\
    \ p * x % p) % p;\n  else return (x % p * x % p * 2) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppajdo4nd.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppajdo4nd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tvar a = 2;\n\tfor(var i = n; i > 0; i >>= 1){\n\t\tif(i & 1)\n\
    \t\t\tres = mulmod(res, a, p);\n\t\ta = mulmod(a, a, p);\n\t}\n\treturn res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwgtlkkno.js:7\n\t\t\tres = mulmod(res, a, p);\n\t\t\t^\n\nReferenceError:\
    \ mulmod is not defined\n    at modp (/tmp/tmpwgtlkkno.js:7:4)\n    at test (/tmp/tmpwgtlkkno.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwgtlkkno.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var i, s = 1;\n\tfor(i = 0; i < n; i++) s = s * 2 % p;\n\treturn s;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n<0) return p - modp(-n, p);\n\tif(n==0) return 1;\n\tif(n==1) return n;\n\t\
    var m = modp(n/2, p);\n\tif(n%2==0) return (m*m)%p;\n\treturn (m*m*n)%p;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0b64xo94.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0b64xo94.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  var u = modp(Math.floor(n/2), p);\n  u = mod_mult(u,\
    \ u, p);\n  if(n % 2 == 1) u = mod_mult(u, 2, p);\n  return u;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps_fw2i7s.js:5\n  u = mod_mult(u, u, p);\n  ^\n\nReferenceError:\
    \ mod_mult is not defined\n    at modp (/tmp/tmps_fw2i7s.js:5:3)\n    at modp\
    \ (/tmp/tmps_fw2i7s.js:4:11)\n    at test (/tmp/tmps_fw2i7s.js:15:20)\n    at\
    \ Object.<anonymous> (/tmp/tmps_fw2i7s.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n < 0){\n    return (modp(n + p, p));\n  }\n  else if(n < p){\n    return\
    \ (n);\n  }\n  else{\n    return (modp(n - p, p));\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpm3amtodr.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm3amtodr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var s = 1;\n    var t = 2;\n    var r = 0;\n    var i = 0;\n    for (i =\
    \ 1; i <= n; i++) {\n        r = (s*t) % p;\n        s = r;\n    }\n    return\
    \ s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0) return 1;\n    if(n==1) return 2;\n    var a=modp(n>>1, p);\n  \
    \  a=(a*a)%p;\n    if(n%2!=0) a=(a*2)%p;\n    return a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var m = 1;\n    for(var i = 0; i < n; i++){\n        m = (m * 2) % p;\n \
    \   }\n    return m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return modp_p(n, p, 1);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2mze5saw.js:3\n\treturn modp_p(n, p, 1);\n\t^\n\nReferenceError:\
    \ modp_p is not defined\n    at modp (/tmp/tmp2mze5saw.js:3:2)\n    at test (/tmp/tmp2mze5saw.js:10:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2mze5saw.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = (r * 2) % p;\n \
    \   }\n    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 0; i < n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return gmp.div(gmp.pow(2, n), p).r\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsaa_lwwo.js:3\n    return gmp.div(gmp.pow(2, n), p).r\n    ^\n\n\
    ReferenceError: gmp is not defined\n    at modp (/tmp/tmpsaa_lwwo.js:3:5)\n  \
    \  at test (/tmp/tmpsaa_lwwo.js:11:20)\n    at Object.<anonymous> (/tmp/tmpsaa_lwwo.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var result = 1;\n  var m = n;\n  while (m > 0){\n    if ((m % 2) === 1){\n\
    \      result = (result * n) % p;\n    }\n    n = (n * n) % p;\n    m = Math.floor(m\
    \ / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3inynn2o.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3inynn2o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tif(n == 1) return 2;\n\telse return (modp(n-1, p)*2)%p;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n===0) return 0;\n\tif(n===1) return 1;\n\tif(n%2===0){\n\t\treturn modp(n/2,\
    \ p)*modp(n/2, p)%p;\n\t}else{\n\t\treturn modp(n/2, p)*modp(n/2, p)*2%p;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822251
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    \"use strict\";\n    if (n === 0){\n        return 1;\n    }\n    if (n %\
    \ 2 === 0){\n        return (modp(n / 2, p) ** 2) % p;\n    }\n    return ((2\
    \ * modp(n - 1, p)) % p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return expmod(2, n, p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfgf0u0x0.js:3\n\treturn expmod(2, n, p);\n\t^\n\nReferenceError:\
    \ expmod is not defined\n    at modp (/tmp/tmpfgf0u0x0.js:3:2)\n    at test (/tmp/tmpfgf0u0x0.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfgf0u0x0.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n==0) return 1%p;\n  var temp = modp(n>>1, p);\n  temp = (temp*temp)%p;\n\
    \  if(n%2) temp = (temp*2)%p;\n  return temp;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return Math.pow(2, n) % p;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmpfqp3kats.js:12:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqp3kats.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    let res = 1n;\n    for(let i = 0; i < n; i++){\n        res = (res * 2n)\
    \ % p;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwylttsq_.js:5\n        res = (res * 2n) % p;\n                \
    \         ^\n\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n\
    \    at modp (/tmp/tmpwylttsq_.js:5:26)\n    at test (/tmp/tmpwylttsq_.js:15:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwylttsq_.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\twhile(n > 0){\n\t\tif(n & 1){\n\t\t\tres = (res * 2) % p;\n\t\t\
    }\n\t\tn >>= 1;\n\t\t2 = (2 * 2) % p;\n\t}\n\treturn res;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyg_uz_k2.js:9\n\t\t2 = (2 * 2) % p;\n\t\t^\n\nSyntaxError: Invalid\
    \ left-hand side in assignment\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    while(n){\n        if(n & 1) result = (result * n) %\
    \ p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822251
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var i = 0;\n\tvar r = 1;\n\twhile( i < n ){\n\t\tr = r * 2 % p;\n\t\ti++;\n\t\
    }\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var x = 1, i;\n\tfor(i = 0; i < n; i++)\n\t\tx = (x * 2) % p;\n\treturn x;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    else if(n == 1)\n        return 2;\n \
    \   var res = 1;\n    var exp = 2;\n    while(n > 0){\n        if(n%2 == 1){\n\
    \            res = (res*exp)%p;\n        }\n        exp = (exp*exp)%p;\n     \
    \   n = n >> 1;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var i, ret = 1;\n  for(i = 0; i < n; i++)\n    ret = (ret * 2) % p;\n  return\
    \ ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    //TODO: Check that this\
    \ is correct.\n    var pow = Math.pow(2, n - 1);\n    var out = modp(n - 1, p);\n\
    \    out = (out * out) % p;\n    return out;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpnx9n2u6s.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnx9n2u6s.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(isNaN(n)){\n\t\treturn NaN;\n\t}\n\n\tvar result = 1;\n\tfor(var i = 0; i <\
    \ n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n==1) return 2;\n\tvar r = modp(Math.floor(n/2), p);\n\
    \tr = (r*r)%p;\n\tif(n%2) return (r*2)%p;\n\treturn r;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  // console.log(\"modp n: \" + n + \" p: \" + p);\n  if(n == 0){\n    return\
    \ 1;\n  }\n  else if(n == 1){\n    return 2;\n  }\n  else{\n    var first = modp(Math.floor(n/2),\
    \ p);\n    var second = first * first;\n    return second % p;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwpkcz9vh.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwpkcz9vh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    else{\n        var half = modp(Math.floor(n/2),\
    \ p);\n        if(n % 2 == 0) return (half * half) % p;\n        else return (half\
    \ * half * 2) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return BigInteger(2).pow(n).mod(p);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprmwi0rl_.js:3\n\treturn BigInteger(2).pow(n).mod(p);\n\t^\n\nReferenceError:\
    \ BigInteger is not defined\n    at modp (/tmp/tmprmwi0rl_.js:3:2)\n    at test\
    \ (/tmp/tmprmwi0rl_.js:11:20)\n    at Object.<anonymous> (/tmp/tmprmwi0rl_.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    n = n % p;\n    if (p - n < n) n = p - n;\n    var res = 1;\n    while (n\
    \ > 0){\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n        res\
    \ = res % p;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpqwzm6fqj.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqwzm6fqj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var a = bigInt(2).pow(n).mod(p);\n\treturn a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgwead7k8.js:3\n\tvar a = bigInt(2).pow(n).mod(p);\n\t        ^\n\
    \nReferenceError: bigInt is not defined\n    at modp (/tmp/tmpgwead7k8.js:3:10)\n\
    \    at test (/tmp/tmpgwead7k8.js:12:20)\n    at Object.<anonymous> (/tmp/tmpgwead7k8.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return Math.pow(2, n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp5n3o_r4s.js:12:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5n3o_r4s.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  let exp = [];\n  exp[0] = 1;\n  for(let i = 1; i < n; i++){\n    exp[i] = (exp[i-1]*2)%p;\n\
    \  }\n  return exp[n-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpr6qw4ypc.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr6qw4ypc.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tfor(var i = 1; i <= n; i++){\n\t\tr = mod(r*2, p);\n\t}\n\treturn\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3r2rdmev.js:5\n\t\tr = mod(r*2, p);\n\t\t^\n\nReferenceError: mod\
    \ is not defined\n    at modp (/tmp/tmp3r2rdmev.js:5:3)\n    at test (/tmp/tmp3r2rdmev.js:15:20)\n\
    \    at Object.<anonymous> (/tmp/tmp3r2rdmev.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    var mp = n % (p-1);\n    while(mp > 0){\n        if(mp\
    \ % 2 === 1){\n            result = (result * 2) % p;\n        }\n        mp =\
    \ Math.floor(mp / 2);\n        if(mp > 0){\n            result = (result * result)\
    \ % p;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpc9y2zw_e.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc9y2zw_e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0)\n    return 1;\n  var res = modp(n/2, p);\n  if(n%2 == 0)\n    return\
    \ (res*res)%p;\n  else\n    return (2*res*res)%p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpumvdjqw5.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpumvdjqw5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var r = 1;\n\tvar b = 2;\n\tn = n % (p-1);\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\
    \t\t\tr = (r * b) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tb = (b * b) % p;\n\
    \t}\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(!isInt(n)){\n    throw new Error('Pow(n,p) requires n to be a integer');\n\
    \  }\n  if(!isInt(p)){\n    throw new Error('Pow(n,p) requires p to be a integer');\n\
    \  }\n  if(p < 2){\n    throw new Error('Pow(n,p) requires p to be a prime');\n\
    \  }\n  var result = 1;\n  var y = 2;\n  while(n > 0){\n    if(n%2 == 1){\n  \
    \    result = (result*y)%p;\n    }\n    y = (y*y)%p;\n    n = Math.floor(n/2);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9lchdjr1.js:3\n  if(!isInt(n)){\n  ^\n\nReferenceError: isInt is\
    \ not defined\n    at modp (/tmp/tmp9lchdjr1.js:3:3)\n    at test (/tmp/tmp9lchdjr1.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9lchdjr1.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tvar c = modp(Math.floor(n/2), p);\n\tc = (c*c) % p;\n\t\
    if(n%2 == 1) c = (c*2) % p;\n\treturn c;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    for(var i = 1; i <= n; i++){\n        result = (result\
    \ * 2) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp57_nkuqr.js:11:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp57_nkuqr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var result = 1;\n  while(n>0){\n    if(n%2==1){\n      result = (result*2)%p;\n\
    \    }\n    n = Math.floor(n/2);\n    if(n>0){\n      result = (result*result)%p;\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplqit88vl.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplqit88vl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    let res = 1;\n\tlet z;\n\tfor(z=n; z>0; z>>=1){\n\t\tif(z&1) res = (res*p)%MOD;\n\
    \t\tp = (p*p)%MOD;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph7vcndyv.js:6\n\t\tif(z&1) res = (res*p)%MOD;\n\t\t           \
    \           ^\n\nReferenceError: MOD is not defined\n    at modp (/tmp/tmph7vcndyv.js:6:25)\n\
    \    at test (/tmp/tmph7vcndyv.js:17:20)\n    at Object.<anonymous> (/tmp/tmph7vcndyv.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    if(n == 2) return 4;\n\
    \    if(n == 3) return 8;\n    if(n == 4) return 16;\n    if(n == 5) return 32;\n\
    \    if(n == 6) return 64;\n    if(n == 7) return 128;\n    if(n == 8) return\
    \ 256;\n    if(n == 9) return 512;\n    if(n == 10) return 1024;\n    if(n ==\
    \ 11) return 2048;\n    if(n == 12) return 4096;\n    if(n == 13) return 8192;\n\
    \    if(n == 14) return 16384;\n    if(n == 15) return 32768;\n    if(n == 16)\
    \ return 65536;\n    if(n == 17) return 131072;\n    if(n == 18) return 262144;\n\
    \    if(n == 19) return 524288;\n    if(n == 20) return 1048576;\n    if(n ==\
    \ 21) return 2097152;\n    if(n == 22) return 4194304;\n    if(n == 23) return\
    \ 8388608;\n    if(n == 24) return 16777216;\n    if(n == 25) return 33554432;\n\
    \    if(n == 26) return 67108864;\n    if(n == 27) return 134217728;\n    if(n\
    \ == 28) return 268435456;\n    if(n == 29) return 536870912;\n    if(n == 30)\
    \ return 1073741824;\n    if(n == 31) return 2147483648;\n    if(n == 32) return\
    \ 4294967296;\n    if(n == 33) return 8589934592;\n    if(n == 34) return 17179869184;\n\
    \    if(n == 35) return 34359738368;\n    if(n == 36) return 68719476736;\n  \
    \  if(n == 37) return 137438953472;\n    if(n == 38) return 274877906944;\n  \
    \  if(n == 39) return 549\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl87z_53x.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var twoexp = [1, 2]; //Two^i mod p\n    var e = []; //Result will be stored\
    \ here\n    var l; //Length of e (number of bits in n)\n    var i;\n    l = n.length;\n\
    \    //Find exponentiation of 2^0 to 2^(l-1)\n    for(i = 2; i <= l; i++){\n \
    \       twoexp[i] = smod(twoexp[i-1]*2, p);\n    }\n    //Fill exponentiation\
    \ table\n    for(i = 0; i < l; i++){\n        e[i] = twoexp[n[i]];\n    }\n  \
    \  //Multiply all elements and mod\n    for(i = 1; i < l; i++){\n        e[0]\
    \ = smod(e[0]*e[i], p);\n    }\n    return e[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmp2r957f87.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2r957f87.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var value = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tvalue = (value * 2) % p;\n\t\
    }\n\treturn value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\
    \t\t}\n\t\tn = Math.floor(n / 2);\n\t\tp = (p * p) % 1000000007;\n\t}\n\treturn\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxrxdv2a7.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxrxdv2a7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var t = 1;\n  for(var i = 0; i < n; i++){\n    t = (t * 2) % p;\n  }\n  return\
    \ t;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2 % p;\n  \
    \  if(n % 2 == 0){\n        var temp = modp(n/2, p);\n        return (temp * temp)\
    \ % p;\n    }\n    else{\n        var temp = modp(n-1, p);\n        return (2\
    \ * temp) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return mxmod(bitw(n), p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy_edxr35.js:3\n\treturn mxmod(bitw(n), p);\n\t^\n\nReferenceError:\
    \ mxmod is not defined\n    at modp (/tmp/tmpy_edxr35.js:3:2)\n    at test (/tmp/tmpy_edxr35.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmpy_edxr35.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n==0) return 1%p;\n  var res = 1;\n  while(n>0){\n    if(n%2==1) res = (res*2)%p;\n\
    \    n = Math.floor(n/2);\n    if(n>0) p = (p*p)%MOD;\n  }\n  return res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpb7x4m9mc.js:8\n    if(n>0) p = (p*p)%MOD;\n                   \
    \   ^\n\nReferenceError: MOD is not defined\n    at modp (/tmp/tmpb7x4m9mc.js:8:23)\n\
    \    at test (/tmp/tmpb7x4m9mc.js:18:20)\n    at Object.<anonymous> (/tmp/tmpb7x4m9mc.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var p2 = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tp2 = (p2*2) % p;\n\t}\n\treturn\
    \ p2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    n = n % p;\n\tif(n<0)\n\t\tn += p;\n\treturn n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpho90nihj.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpho90nihj.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var r = 1;\n  for(var i = 1; i <= n; i++){\n    r = (r * 2) % p;\n  }\n  return\
    \ r;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tvar power = n;\n\twhile(power>0){\n\t\tif(power%2==1){\n\t\t\
    \tresult = (result*n)%p;\n\t\t}\n\t\tn = (n*n)%p;\n\t\tpower = parseInt(power/2);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxmur4s95.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxmur4s95.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0) return 1;\n    if(n==1) return 2;\n    var a = modp(n>>1, p);\n\
    \    a = (a*a)%p;\n    if(n&1) a=(a*2)%p;\n    return a;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var i, c = new BN(1);\n\tfor(i = 0; i < n; i++){\n\t\tc = c.mul(new BN(2)).mod(p);\n\
    \t}\n\treturn c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7pddour4.js:3\n\tvar i, c = new BN(1);\n\t           ^\n\nReferenceError:\
    \ BN is not defined\n    at modp (/tmp/tmp7pddour4.js:3:13)\n    at test (/tmp/tmp7pddour4.js:15:20)\n\
    \    at Object.<anonymous> (/tmp/tmp7pddour4.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n >= p){\n        n = n % p;\n    }\n    var res = 1;\n    var f = 2;\n\
    \    while(n > 0){\n        if(n % 2 != 0){\n            res = (res * f) % p;\n\
    \        }\n        f = (f * f) % p;\n        n = Math.floor(n / 2);\n    }\n\
    \    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n29\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfza7urgb.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfza7urgb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 29,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(p==1) return 0;\n\tvar l = 1;\n\tfor(var i=0; i<n; i++) l = (l * 2) % p;\n\t\
    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var mask = 1;\n    var result = 1;\n    for(var i = 0; i < n; i++){\n   \
    \     result = (result * 2) % p;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return BigInteger(2).pow(n).mod(p).valueOf();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpym_tn2rn.js:3\n    return BigInteger(2).pow(n).mod(p).valueOf();\n\
    \    ^\n\nReferenceError: BigInteger is not defined\n    at modp (/tmp/tmpym_tn2rn.js:3:5)\n\
    \    at test (/tmp/tmpym_tn2rn.js:11:20)\n    at Object.<anonymous> (/tmp/tmpym_tn2rn.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = r * 2 % p;\n   \
    \ }\n    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n === 0){\n        return 1;\n    }\n    if(n === 1){\n        return\
    \ 2;\n    }\n    var u = modp(n >> 1, p);\n    if(n % 2 === 0){\n        return\
    \ (u * u) % p;\n    } else {\n        return (2 * u * u) % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    n %= p;\n    if(n < 0) n += p;\n    if(n == 0) return p;\n    var r = Math.pow(2,\
    \ n);\n    r = r % p;\n    if(r < 0) r += p;\n    return r;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n29\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5x0ka_tj.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5x0ka_tj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 29,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\telse if(n%2 == 0) return sqr(modp(n/2, p)) % p;\n\telse\
    \ return (modp(n-1, p) * 2) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprj0qtbos.js:4\n\telse if(n%2 == 0) return sqr(modp(n/2, p)) % p;\n\
    \t                  ^\n\nReferenceError: sqr is not defined\n    at modp (/tmp/tmprj0qtbos.js:4:20)\n\
    \    at modp (/tmp/tmprj0qtbos.js:5:15)\n    at test (/tmp/tmprj0qtbos.js:13:20)\n\
    \    at Object.<anonymous> (/tmp/tmprj0qtbos.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var m = 1;\n\twhile(n > 0){\n\t\tm = (m * 2) % p;\n\t\tn = n - 1;\n\t}\n\treturn\
    \ m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var w = 1;\n  while(n > 0){\n    if(n % 2 == 1)\n      w = (w * 2) % p;\n \
    \   n = Math.floor(n/2);\n  }\n  return w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzdpenoh_.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzdpenoh_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p == 1) return 0;\n    var l = 1 << 30;\n    l = l*l*l;\n    var r = 1;\n\
    \    while(n > 0){\n        if(n & 1) r = r*l % p;\n        l = l*l % p;\n   \
    \     n = n >> 1;\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpy3gevs12.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy3gevs12.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n===0) return 0;\n    if(n===1) return 1;\n    if(n%2===0){\n        var\
    \ r = modp(n/2, p);\n        return (r*r)%p;\n    }\n    return ((2*modp(n-1,\
    \ p))%p);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpfk68h29g.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfk68h29g.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0) return 0;\n\tif(n === 1) return 1;\n\tif(n%2 === 0){\n\t\treturn Math.pow(modp(n/2,\
    \ p), 2) % p;\n\t} else {\n\t\treturn Math.pow(modp(n/2, p), 2) * 2 % p;\n\t}\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpfx5xy0qo.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfx5xy0qo.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    \"use strict\";\n    var t = 1;\n    if (n === 0){\n        return t;\n \
    \   } else {\n        var a = 2;\n        for (var i = 1; i <= n; i++){\n    \
    \        t = (t * a) % p;\n        }\n        return t;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n==0)\n        return 1;\n    else if(n==1)\n        return 2;\n    else{\n\
    \        var m = modp(Math.floor(n/2), p);\n        if(n%2==0)\n            return\
    \ (m*m)%p;\n        else\n            return (2*m*m)%p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var bn = n;\n  n = n%p;\n  if(n == 0){\n    return 0;\n  } else if(n == 1){\n\
    \    return 1;\n  } else if(n >= p/2){\n    n = n-p;\n  }\n  if(bn >= p/2){\n\
    \    return -(p - modp(p-n, p));\n  } else {\n    return modp(2*n, p);\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwrb7spr2.js:3\n  var bn = n;\n           ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpwrb7spr2.js:3:12)\n    at modp\
    \ (/tmp/tmpwrb7spr2.js:13:18)\n    at modp (/tmp/tmpwrb7spr2.js:13:18)\n    at\
    \ modp (/tmp/tmpwrb7spr2.js:13:18)\n    at modp (/tmp/tmpwrb7spr2.js:13:18)\n\
    \    at modp (/tmp/tmpwrb7spr2.js:13:18)\n    at modp (/tmp/tmpwrb7spr2.js:13:18)\n\
    \    at modp (/tmp/tmpwrb7spr2.js:13:18)\n    at modp (/tmp/tmpwrb7spr2.js:13:18)\n\
    \    at modp (/tmp/tmpwrb7spr2.js:13:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var c = 1;\n    for(var i = 0; i < n; i++){\n        c = (c * 2) % p;\n \
    \   }\n    return c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n%2 == 0){\n        var k = modp(n/2, p);\n\
    \        return (k*k)%p;\n    }\n    return (modp(n-1, p)*2)%p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0) return 1;\n    if(n == 1) return 2;\n    var res = modp(Math.floor(n/2),\
    \ p);\n    res = mul(res, res, p);\n    if(n % 2 == 1) res = mul(res, 2, p);\n\
    \    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9fglvgkl.js:6\n    res = mul(res, res, p);\n    ^\n\nReferenceError:\
    \ mul is not defined\n    at modp (/tmp/tmp9fglvgkl.js:6:5)\n    at test (/tmp/tmp9fglvgkl.js:16:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9fglvgkl.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    n = n%p;\n\tif(n<0)n += p;\n\n\tvar ret = 1;\n\tvar two = 2;\n\twhile(n>0){\n\t\
    \tif(n%2==1){\n\t\t\tret = (ret*two)%p;\n\t\t}\n\t\ttwo = (two*two)%p;\n\t\tn\
    \ = Math.floor(n/2);\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n29\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpemoihc6e.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpemoihc6e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 29,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var m = 1;\n\tvar a = 2;\n\t\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tm =\
    \ (m * a) % p;\n\t\t}\n\t\ta = (a * a) % p;\n\t\tn = Math.floor(n / 2);\n\t}\n\
    \t\n\treturn m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    while(n>0){\n        if(n&1){\n            res = (res*2)%p;\n\
    \        }\n        n = n >> 1;\n        if(n>0){\n            res = (res*res)%p;\n\
    \        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpgcjnruyr.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgcjnruyr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  return base(n, 2, p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7nf3y8zq.js:3\n  return base(n, 2, p);\n  ^\n\nReferenceError:\
    \ base is not defined\n    at modp (/tmp/tmp7nf3y8zq.js:3:3)\n    at test (/tmp/tmp7nf3y8zq.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmp7nf3y8zq.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    //I wish to give credits for this idea, but I can't remember where I saw\
    \ it.\n    if(n==0) return 1;\n    else{\n        x = modp(Math.floor(n/2), p);\n\
    \        x = (x*x) % p;\n        if(n % 2 == 0) return x;\n        else return\
    \ (x*2) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var pw = n;\n    var cur_pw = pw;\n    for(var i = 0; i\
    \ < 30; i++){\n        if((pw & 1) == 1){\n            res = (res * cur_pw) %\
    \ p;\n        }\n        cur_pw = (cur_pw * cur_pw) % p;\n        pw >>= 1;\n\
    \    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1kh3rdbv.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1kh3rdbv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n<0){\n        return undefined;\n    }else if(n==0){\n        return\
    \ 1;\n    }else if(n==1){\n        return 2;\n    }else{\n        var new_n =\
    \ n>>1;\n        var r = modp(new_n, p);\n        r = (r*r)%p;\n        if(n%2==1){\n\
    \            r = (r*2)%p;\n        }\n        return r;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    let out = 1;\n    for(let i = 0; i < n; i++){\n        out = (out * 2) %\
    \ p;\n    }\n    return out;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n%2==0){\n\t\tlet q = modp(n/2, p);\n\t\treturn (q*q)%p;\n\
    \t}\n\telse{\n\t\tlet q = modp((n-1)/2, p);\n\t\treturn (q*q*2)%p;\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n == 0) return 1;\n  if(n%2)\n    return (modp(n-1, p)*2)%p;\n  else{\n\
    \    var s = modp(n/2, p);\n    return (s*s)%p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    //We don't want to deal with negative exponents, so make them positive.\n\
    \    if(n < 0){\n        n = p - ((-n) % p);\n    }\n    if(n === 0){\n      \
    \  return 1;\n    }\n    if(n === 1){\n        return 2;\n    }\n    //Now use\
    \ the square-and-multiply method for calculating modular powers.\n    var r =\
    \ 1;\n    var b = 2;\n    while(n > 0){\n        if(n % 2 !== 0){\n          \
    \  r = (r * b) % p;\n        }\n        n = n >> 1;\n        b = (b * b) % p;\n\
    \    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var ret = 1n;\n\tvar two = 2n;\n\twhile(n>0){\n\t\tif(n%2n===1n){\n\t\t\tret =\
    \ (ret*two)%p;\n\t\t}\n\t\ttwo = (two*two)%p;\n\t\tn >>= 1n;\n\t}\n\treturn ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp554cz1xq.js:6\n\t\tif(n%2n===1n){\n\t\t    ^\n\nTypeError: Cannot\
    \ mix BigInt and other types, use explicit conversions\n    at modp (/tmp/tmp554cz1xq.js:6:7)\n\
    \    at test (/tmp/tmp554cz1xq.js:20:20)\n    at Object.<anonymous> (/tmp/tmp554cz1xq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = 1;\n    var N = p - 2;\n    while (N > 0){\n        if (N % 2 ==\
    \ 1){\n            res = (res * n) % p;\n        }\n        N = Math.floor(N /\
    \ 2);\n        n = (n * n) % p;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0oknr61r.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0oknr61r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n==0)\n    return 1;\n  if(n==1)\n    return 2;\n  if(n%2 == 0){\n    return\
    \ Math.pow(modp(n/2, p), 2) % p;\n  }\n  else{\n    return (modp(n-1, p) * 2)\
    \ % p;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    //Return: the value of 2^n modulo p.\n    if (n == 0) return 1;\n    var\
    \ half = n>>1;\n    var x = modp(half, p);\n    if (n % 2 == 0) return (x*x) %\
    \ p;\n    return (2*x*x) % p;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var nbr = 1;\n    for(var i = 0; i < n; i++){\n        nbr = nbr * 2 % p;\n\
    \    }\n    return nbr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var a = bigInt(2);\n    return bigInt(a.pow(n)).mod(p);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8wvkh5cw.js:3\n    var a = bigInt(2);\n            ^\n\nReferenceError:\
    \ bigInt is not defined\n    at modp (/tmp/tmp8wvkh5cw.js:3:13)\n    at test (/tmp/tmp8wvkh5cw.js:12:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8wvkh5cw.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(p < n) return 0;\n\tif(n == 0) return 1;\n\tif(n == 1) return 2;\n\tvar r =\
    \ modp(n >> 1, p);\n\tr = r * r % p;\n\tif(n & 1) r = r * 2 % p;\n\treturn r;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpc2_fu0ax.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc2_fu0ax.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p==2) return 1;\n\n    var m = ((n%p)+p)%p;\n    var i;\n    for(i=n;\
    \ i>m; i--){\n        r = (r*i)%p;\n    }\n    for(i=2; i<m; i++){\n        r\
    \ = (r*i)%p;\n    }\n    return r;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdf45c2cp.js:11\n        r = (r*i)%p;\n        ^\n\nReferenceError:\
    \ r is not defined\n    at modp (/tmp/tmpdf45c2cp.js:11:9)\n    at test (/tmp/tmpdf45c2cp.js:22:20)\n\
    \    at Object.<anonymous> (/tmp/tmpdf45c2cp.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var res = BigInt(1);\n    var two = BigInt(2);\n    var mod = BigInt(p);\n\
    \    for(var i = BigInt(n); i > BigInt(0); i--){\n        res = (res * two) %\
    \ mod;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return bigInt(2).pow(n).mod(p);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxnrv2_wv.js:3\n\treturn bigInt(2).pow(n).mod(p);\n\t^\n\nReferenceError:\
    \ bigInt is not defined\n    at modp (/tmp/tmpxnrv2_wv.js:3:2)\n    at test (/tmp/tmpxnrv2_wv.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmpxnrv2_wv.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return powm(2, n, p);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkq4t2eat.js:3\n    return powm(2, n, p);\n    ^\n\nReferenceError:\
    \ powm is not defined\n    at modp (/tmp/tmpkq4t2eat.js:3:5)\n    at test (/tmp/tmpkq4t2eat.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmpkq4t2eat.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p === 0) return 0;\n    if(n === 0) return 1;\n    if(n % 2 == 0){\n \
    \       var z = modp(n/2, p);\n        return (z*z) % p;\n    }\n    else{\n \
    \       return (modp(n-1, p) * 2) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var n = n;\n    var res = 1;\n    while(n){\n        if(n%2){\n         \
    \   res *= 2;\n            res %= p;\n        }\n        n >>= 1;\n        if(n)\
    \ {\n            res *= res;\n            res %= p;\n        }\n    }\n    return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwerhyinq.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwerhyinq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var res = 1;\n  while(n > 0){\n    if(n % 2 == 1){\n      res = (res * 2) %\
    \ p;\n    }\n    n = Math.floor(n/2);\n    if(n > 0){\n      res = (res * res)\
    \ % p;\n    }\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpotz_efch.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpotz_efch.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    return pow(2, n, p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0ahsaitj.js:3\n\treturn pow(2, n, p);\n\t^\n\nReferenceError: pow\
    \ is not defined\n    at modp (/tmp/tmp0ahsaitj.js:3:2)\n    at test (/tmp/tmp0ahsaitj.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmp0ahsaitj.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n<0){return 0;}\n    if(n==0){return 1;}\n    var res = 1;\n    for(var\
    \ i=1; i<=n; i++){\n        res = (res*2)%p;\n    }\n    return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  if(n==0)\n    return 1;\n  else{\n    var num = modp(Math.floor(n/2), p);\n\
    \    if(n%2==0)\n      return (num*num)%p;\n    else\n      return (2*num*num)%p;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  var n2 = Math.floor(n/2);\n  var n1 = n - 2*n2;\n  var t = 1;\n  var r = 0;\n\
    \  var i;\n  for(i = 0; i < p.length; i++){\n    var p1 = Math.floor(p[i]/2);\n\
    \    var p0 = p[i] - 2*p1;\n    var r1 = Math.floor(r/2);\n    var r0 = r - 2*r1;\n\
    \    t = (2*t + p1*n1 + p0*n0)%p[i];\n    r = (2*r + p1*n2 + p0*n1)%p[i];\n  \
    \  t = (2*t + p0*n2)%p[i];\n  }\n  return t;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpvxu6chqb.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvxu6chqb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n < p) return Math.pow(2, n) % p;\n    else return 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_qhlabkm.js:13:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_qhlabkm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(p==1) return 0;\n\tif(n==0) return 1;\n\tif(n<0) return modp(-n, p);\n\treturn\
    \ (modp(n-1, p)*2)%p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var ans = BigInt(1);\n    var two = BigInt(2);\n    while(n.toString() !=\
    \ \"0\"){\n        if(n.and(BigInt(1)).toString() == \"1\"){\n            ans\
    \ = (ans.multiply(two)).mod(p);\n        }\n        two = (two.multiply(two)).mod(p);\n\
    \        n = n.shiftRight(1);\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3emigtst.js:6\n        if(n.and(BigInt(1)).toString() == \"1\"\
    ){\n             ^\n\nTypeError: n.and is not a function\n    at modp (/tmp/tmp3emigtst.js:6:14)\n\
    \    at test (/tmp/tmp3emigtst.js:20:20)\n    at Object.<anonymous> (/tmp/tmp3emigtst.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var result = 1;\n    while(n>0){\n        if(n%2==1){\n            result\
    \ = (result*2)%p;\n        }\n        n = Math.floor(n/2);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpripq1l86.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpripq1l86.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var m = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tm = (m * 2) % p;\n\t}\n\treturn\
    \ m;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n >= p){\n\t\treturn modp(n%p, p);\n\t}\n\tvar res = 1;\n\tfor(var i = 0; i\
    \ < n; i++){\n\t\tres = (res*2)%p;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n29\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqdemae3z.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqdemae3z.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 29,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var n2 = (n%p*n%p)%p;\n\tvar n4 = (n2*n2)%p;\n\tvar n8 = (n4*n4)%p;\n\tvar n16\
    \ = (n8*n8)%p;\n\tvar n32 = (n16*n16)%p;\n\tvar n64 = (n32*n32)%p;\n\tvar n128\
    \ = (n64*n64)%p;\n\tvar n256 = (n128*n128)%p;\n\tvar n512 = (n256*n256)%p;\n\t\
    var n1024 = (n512*n512)%p;\n\tvar n2048 = (n1024*n1024)%p;\n\tvar n4096 = (n2048*n2048)%p;\n\
    \tvar n8192 = (n4096*n4096)%p;\n\tvar n16384 = (n8192*n8192)%p;\n\tvar n32768\
    \ = (n16384*n16384)%p;\n\tvar n65536 = (n32768*n32768)%p;\n\tvar n131072 = (n65536*n65536)%p;\n\
    \tvar n262144 = (n131072*n131072)%p;\n\tvar n524288 = (n262144*n262144)%p;\n\t\
    var n1048576 = (n524288*n524288)%p;\n\tvar n2097152 = (n1048576*n1048576)%p;\n\
    \tvar n4194304 = (n2097152*n2097152)%p;\n\tvar n8388608 = (n4194304*n4194304)%p;\n\
    \tvar n16777216 = (n8388608*n8388608)%p;\n\tvar n33554432 = (n16777216*n16777216)%p;\n\
    \tvar n67108864 = (n33554432*n33554432)%p;\n\tvar n134217728 = (n67108864*n6710\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp04n47yti.js:30\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    return Math.pow(2, n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp5n3o_r4s.js:12:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5n3o_r4s.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p<=n) return 0;\n    var res=1;\n    for(var i=0; i<n; i++)\n        res=(res*2)%p;\n\
    \    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp669rtf9d.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp669rtf9d.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p == 2)\n        return 1;\n    var ans = 1;\n    while(n > 0){\n    \
    \    if(n % 2 == 1)\n            ans = (ans * 2) % p;\n        n = Math.floor(n\
    \ / 2);\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpywvsx0p1.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpywvsx0p1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var ans = 1;\n\tvar max = Math.sqrt(p);\n\n\twhile(n>0){\n\t\t//Use square and\
    \ multiply.\n\t\tif(n%2==1){\n\t\t\tans = (ans*max)%p;\n\t\t}\n\t\tmax = (max*max)%p;\n\
    \t\tn = n>>1;\n\t}\n\treturn ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1.9860273225978185e-15\n\
    \nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpi66xgrn9.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpi66xgrn9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1.9860273225978185e-15,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var result = 1;\n\twhile(n>0){\n\t\tresult = (result*2)%p;\n\t\tn = n-1;\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\telse if(n % 2 == 0) return modp(n/2, p)^2 % p;\n\telse\
    \ return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp41zxirsf.js:13:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp41zxirsf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \  return pow(TWO, n, p);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiu0xhl5h.js:3\n  return pow(TWO, n, p);\n  ^\n\nReferenceError:\
    \ pow is not defined\n    at modp (/tmp/tmpiu0xhl5h.js:3:3)\n    at test (/tmp/tmpiu0xhl5h.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmpiu0xhl5h.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n === 0){return 1;}\n\tif(n % 2 === 0){\n\t\treturn modp(n/2, p) ** 2 % p;\n\
    \t}\n\treturn modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(p==2){\n\t\treturn 1;\n\t}\n\tvar res = 1;\n\tfor(var i=0; i<n; i++){\n\t\t\
    res = (res*2)%p;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n == 0)\n        return 1;\n    else if(n == 1)\n        return 2;\n \
    \   else{\n        var temp = modp(n >> 1, p);\n        temp = (temp * temp) %\
    \ p;\n        if(n & 1)\n            temp = (temp * 2) % p;\n        return temp;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n%2 == 0){\n\t\tvar half = modp(n/2, p);\n\t\treturn\
    \ mod(half*half, p);\n\t}else{\n\t\treturn mod(2*modp(n-1, p), p);\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph7tjwdse.js:8\n\t\treturn mod(2*modp(n-1, p), p);\n\t\t^\n\nReferenceError:\
    \ mod is not defined\n    at modp (/tmp/tmph7tjwdse.js:8:3)\n    at test (/tmp/tmph7tjwdse.js:17:20)\n\
    \    at Object.<anonymous> (/tmp/tmph7tjwdse.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822246
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(p==1) return 0;\n    var res = 1;\n    while(n>0){\n        if(n&1){\n\
    \            res = (res*2)%p;\n        }\n        n = n >> 1;\n        if(n>0){\n\
    \            res = (res*res)%p;\n        }\n    }\n    return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpol8ark2i.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpol8ark2i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(p===1) return 0;\n\tvar res = 1;\n\tfor(var i=0; i<n; i++){\n\t\tres = res*2\
    \ % p;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n < 0){\n\t\treturn (modp(-n, p) * (p - 1) * inverse(2, p)) % p;\n\t}\n\tvar\
    \ result = 1;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tresult = (result *\
    \ 2) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_itvtedm.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_itvtedm.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    if(n < 0)\n        return p - modp(-n, p);\n    if(n === 0)\n        return\
    \ 1;\n    if(n === 1)\n        return 2;\n    return (modp(n - 1, p) * 2) % p;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    //Assert that p is prime.\n    if(isPrime(p) !== true){\n        console.log('modp:\
    \ ERROR! p is not prime!');\n        return false;\n    }\n    //Assert that p\
    \ > 2 and that n >= 0.\n    if(p <= 2 || n < 0){\n        console.log('modp: ERROR!\
    \ p must be > 2 and n must be >= 0!');\n        return false;\n    }\n    //If\
    \ p = 2, return 1 if n is even, else return 0.\n    if(p === 2){\n        if(n\
    \ % 2 === 0){\n            return 1;\n        }\n        else{\n            return\
    \ 0;\n        }\n    }\n    var result = 1;\n    for(var i = 0; i < n; i++){\n\
    \        result = result * 2;\n        result = result % p;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp646pohpf.js:4\n    if(isPrime(p) !== true){\n    ^\n\nReferenceError:\
    \ isPrime is not defined\n    at modp (/tmp/tmp646pohpf.js:4:5)\n    at test (/tmp/tmp646pohpf.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmp646pohpf.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var rem=1;\n    for(var i=1; i<=n; i++){\n        rem=(rem*2)%p;\n    }\n\
    \    return rem;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var a = 1;\n\tvar r = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tr = r * 2;\n\t\t\
    if(r >= p){\n\t\t\tr = r - p;\n\t\t}\n\t}\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n < 0){\n\t\treturn 0;\n\t}\n\telse if(n == 0){\n\t\treturn 1;\n\t}\n\telse\
    \ if(n == 1){\n\t\treturn 2;\n\t}\n\telse{\n\t\tvar b = modp(n >> 1, p);\n\t\t\
    b *= b;\n\t\tb %= p;\n\t\tb *= (n & 1) ? 2 : 1;\n\t\tb %= p;\n\t\treturn b;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var ret = 1;\n    for(var i = 0; i < n; i++){\n        ret = (ret * 2) %\
    \ p;\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n==0) return 1;\n\tif(n==1) return 2;\n\tvar q = n>>1;\n\tvar r = n-(q<<1);\n\
    \tvar b = modp(q, p);\n\tb = (b*b)%p;\n\tif(r) b = (b*2)%p;\n\treturn b;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    var s = 1;\n\tfor(var i = 0; i < n; i++){\n\t\ts = s * 2 % p;\n\t}\n\treturn s;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var r = 1;\n    var n_bin = n.toString(2);\n    for(var i = 0; i < n_bin.length;\
    \ i++){\n        r = (r*r) % p;\n        if(n_bin[i] == \"1\")\n            r\
    \ = (r*2) % p;\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n < 0){\n\t\treturn -1;\n\t}\n\tif(n == 0){\n\t\treturn 1;\n\t}\n\tif(n%2 ==\
    \ 0){\n\t\tm = modp(n/2, p);\n\t\treturn (m*m)%p;\n\t}\n\treturn (2*modp(n-1,\
    \ p))%p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\
    \    var a=1;\n    var b=2;\n    var c;\n    if(n == 0){\n        return 1;\n\
    \    }\n    if(n == 1){\n        return 2;\n    }\n    for(var i=1; i<n; i++){\n\
    \        c = (a * b) % p;\n        a = c;\n        b = 2;\n    }\n    return c;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmprh8nrncb.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprh8nrncb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822247
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n\t\
    if(n == 0) return 1;\n\tvar tmp;\n\tif(n%2 == 0){\n\t\ttmp = modp(n/2, p);\n\t\
    \treturn (tmp*tmp)%p;\n\t}else{\n\t\ttmp = modp(n-1, p);\n\t\treturn (2*tmp)%p;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822247
