name: HumanEval_35_max_element
language: js
prompt: "//Return maximum element in the list.\nfunction max_element(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
completions: ["  if(l.length == 0){\n    return undefined;\n  } else if(l.length ==\
    \ 1){\n    return l[0];\n  } else {\n    return math.max(l[0], max_element(l.slice(1)));\n\
    \  }\n}\n", "   if(l.length == 0){\n      return undefined;\n   }else{\n     \
    \ var max = l[0];\n      for(var i = 1; i < l.length; i++){\n         if(l[i]\
    \ > max){\n            max = l[i];\n         }\n      }\n      return max;\n \
    \  }\n}\n", "\tvar max =l[0];\n\tvar i;\n\tfor(i=1;i<l.length;i++){\n\t\tif(l[i]>max){\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\treturn l.reduce(function(a,b){return\
    \ a>b?a:b});\n}\n", "\treturn reduce(l, function(a,b){return (a>b) ? a : b;});\n\
    }\n", "  if(l.tail == null){\n    return l.head;\n  }\n  var max_tail = max_element(l.tail);\n\
    \  if(l.head >= max_tail){\n    return l.head;\n  }else{\n    return max_tail;\n\
    \  }\n}\n", "    return fold_left(l,0,(a,b)=>a>b?a:b);\n}\n", "    return l.reduce(function(a,b){return\
    \ Math.max(a,b)});\n}\n", "  if(l.length==0){\n    return 0;\n  }\n  var max=l[0];\n\
    \  for(var i=1;i<l.length;i++){\n    if(l[i]>max){\n      max=l[i];\n    }\n \
    \ }\n  return max;\n}\n", "\tvar max = 0;\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar\
    \ len = l.length;\n\tvar max=l[0];\n\tfor(var i=1;i<len;i++){\n\t\tif(l[i]>max){\n\
    \t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}", "\treturn foldl1(max,l);\n}\n",
  "  if(l.length == 0){\n    return \"The list is empty\";\n  }\n  var m = l[0];\n\
    \  for(var i = 1; i < l.length; i++){\n    if(l[i] > m){\n      m = l[i];\n  \
    \  }\n  }\n  return m;\n}\n", "    return max(map(l, car));\n}\n", "\treturn _.reduce(l,function(a,b){return\
    \ Math.max(a,b);});\n}\n", "    var max = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    //@navi: use for\n    for(var i = 0; i < l.length;\
    \ i++){\n        return l[i];\n    }\n    //@navi: use forEach\n    l.forEach(function(element)\
    \ {\n        return element;\n    });\n}\n", "  if(typeof l === 'undefined')\n\
    \    return undefined;\n  else if(typeof l.length === 'undefined')\n    return\
    \ l;\n  else if(typeof l[0] === 'undefined')\n    return undefined;\n  var max\
    \ = l[0];\n  for(var i = 1; i < l.length; i++)\n    if(l[i] > max)\n      max\
    \ = l[i];\n  return max;\n}\n", "\tvar a = head(l);\n\tvar max = a;\n\tif(is_empty_list(l)){\n\
    \t\treturn max;\n\t}\n\tif(tail(l) == \"\"){\n\t\treturn max;\n\t}\n\twhile(!is_empty_list(tail(l))){\n\
    \t\tif(head(tail(l)) > max){\n\t\t\tmax = head(tail(l));\n\t\t}\n\t\tl = tail(l);\n\
    \t}\n\treturn max;\n}\n", "\treturn reduce(l, function(x,y){return x>y?x:y;});\n\
    }\n", "    //If the list is empty.\n    if(length(l)==0){\n        //Return null.\n\
    \        return null;\n    }\n    //Return the last element of the list.\n   \
    \ return l[length(l)-1];\n}\n", "  var max = l[0];\n  for(var i = 1; i < l.length;\
    \ i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n",
  "\treturn foldl(function(a,b){return a<b?b:a;},0,l);\n}\n", "    return reduce(l,function(x,y){return\
    \ (x>y)?x:y});\n}\n", "\tif(l == null) throw new Error(\"List is empty\");\n\t\
    if(l.cdr == null) return l.car;\n\telse return Math.max(l.car, max_element(l.cdr));\n\
    }\n", "    var num = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i]\
    \ > num){\n            num = l[i];\n        }\n    }\n    return num;\n}\n", "\t\
    return l.reduce(function(a,b){\n\t\treturn Math.max(a,b);\n\t});\n}\n", "  var\
    \ current = l.value,\n      max = current;\n  while(is_null(l) === false){\n \
    \   current = l.value;\n    if(current > max){max = current;}\n    l = l.rest;\n\
    \  }\n  return max;\n}\n", "\tvar max = l[0];\n\tfor(var i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n",
  "  if(is_empty_list(l)){\n    return \"List is empty.\";\n  }\n  return accumulate(Math.max,\
    \ -Infinity, l);\n}\n", "\tif(!l.head)return -1;\n\tvar max = l.head.value;\n\t\
    var current = l.head;\n\twhile(current){\n\t\tif(current.value > max)max = current.value;\n\
    \t\tcurrent = current.next;\n\t}\n\treturn max;\n}", "    if(l.length > 0){\n\
    \        return Math.max.apply(null, l);\n    }else{\n        return null;\n \
    \   }\n}\n", "    return fold_left(l, 0, function(x,y){return x>y?x:y});\n}\n",
  "\tvar max=l[0];\n\tfor(var i=1;i<l.length;i++){\n\t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n", "    return Math.max.apply(null, l);\n}\n", " \
    \   return l[l.length-1];\n}\n", "\treturn l.reduce(function(a,b){return a>b?a:b});\n\
    }\n", "\treturn max(l, function(x,y){return x>y;});\n}\n", "    return reduce(function(x,y){\n\
    \        return max(x,y);\n    },l);\n}\n", "\tif(l.length > 0){\n\t\tvar max\
    \ = l[0];\n\t\tfor(var i = 1; i < l.length; i++){\n\t\t\tif(l[i] > max){\n\t\t\
    \t\tmax = l[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\telse{\n\t\treturn undefined;\n\
    \t}\n}\n", "\treturn reduce(function(a,b){\n\t\treturn a>b?a:b;\n\t},l);\n}\n",
  "    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", " \
    \ return foldl(l, 0, function(a,b){return max(a,b);});\n}\n", "  let max = l[0];\n\
    \  for(let i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "  if(l.length==0){\n    return null;\n  }\n\
    \  var max=l[0];\n  for(var i=1;i<l.length;i++){\n    if(l[i]>max){\n      max=l[i];\n\
    \    }\n  }\n  return max;\n}\n", "  return foldl(function(acc, x){return acc\
    \ > x ? acc : x}, l[0], l);\n}\n", "\tvar max = l[0];\n\tfor(var i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n",
  "\t\n\tvar max = 0;\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i] > max){\n\t\t\
    \tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "    return l[l.length-1];\n}\n",
  "\tif(is_empty_list(l)){\n\t\treturn undefined;\n\t}\n\tif(is_empty_list(tail(l))){\n\
    \t\treturn head(l);\n\t}\n\tvar p = max_element(tail(l));\n\tif(head(l) >= p){\n\
    \t\treturn head(l);\n\t}\n\treturn p;\n}\n", "    return l.reduce(function(p,\
    \ c) {\n        return p > c ? p : c;\n    });\n}\n", "\tvar max = l[0];\n\tfor(var\
    \ i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "\tvar max = undefined;\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tif(max === undefined || max < l[i]){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "\tvar max = l[0]\n\tfor(var i = 1; i < l.length; i++){\n\
    \t\tif(l[i] > max){\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn max\n}\n", "\tvar\
    \ m;\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i == 0){\n\t\t\tm = l[i];\n\
    \t\t}else{\n\t\t\tif(l[i] > m){\n\t\t\t\tm = l[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ m;\n}\n", "    if(empty(l)){\n        return {};\n    }\n    else{\n       \
    \ return max(first(l), max_element(rest(l)));\n    }\n}\n", "    var max = l[0];\n\
    \    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n", "    if(is_empty_list(l)){\n\
    \        return 0;\n    }\n    else{\n        return Math.max(head(l), max_element(tail(l)));\n\
    \    }\n}", "  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i]\
    \ > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "    var max =\
    \ l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n   \
    \         max = l[i];\n        }\n    }\n    return max;\n}\n", "\tmax = l[0];\n\
    \tfor(i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n", "\tif(l === null)\n\t\treturn null;\n\tvar max =\
    \ l.data;\n\twhile(l !== null){\n\t\tif(l.data > max)\n\t\t\tmax = l.data;\n\t\
    \tl = l.next;\n\t}\n\treturn max;\n}\n", "  if(l.length==0){\n    return 0;\n\
    \  }\n  let r = l[0];\n  for(let i=1;i<l.length;i++){\n    if(l[i]>r){\n     \
    \ r = l[i];\n    }\n  }\n  return r;\n}\n", "\treturn reduce(l, function(prev,next){\n\
    \t\tif(prev > next){\n\t\t\treturn prev;\n\t\t}\n\t\telse{\n\t\t\treturn next;\n\
    \t\t}\n\t});\n}\n", "    return reduce(function(m,x){\n        return x > m ?\
    \ x : m;\n    }, l);\n}\n", "\treturn fold_left(function(x, y){\n\t\tif(x>y){\n\
    \t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\treturn y;\n\t\t}\n\t}, 0, l);\n}\n",
  "\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "    var max = Number.MIN_VALUE;\n\
    \    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n", "    return reduce(l,(a,b)=>(a>b?a:b));\n\
    }", "return foldl(function(a,b){return (a>b)?a:b;},-INFINITY,l);\n}\n", "\tvar\
    \ a = max_position(l);\n\treturn l[a];\n}\n", "\tvar max = l[0];\n\tfor(var i\
    \ = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "    var max = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    return l.reduce(function(a,b){\n\treturn Math.max(a,b);\n\
    \    },0);\n}\n", "\tvar max_number = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\
    \t\tif(l[i] > max_number){\n\t\t\tmax_number = l[i];\n\t\t}\n\t}\n\treturn max_number;\n\
    }\n", "    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "\t\
    var max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\treturn foldl(max, l, MIN_INT);\n\
    }\n", "\tl.sort(function(a,b){return a - b});\n\treturn l[l.length - 1];\n}\n",
  "  var max = 0;\n  var len = l.length;\n  for(var i = 0; i < len; i++){\n    if(l[i]\
    \ > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "\tif(l===null)\n\
    \t\treturn null;\n\telse if(l.rest===null)\n\t\treturn l.value;\n\telse if(max_element(l.rest)>l.value)\n\
    \t\treturn max_element(l.rest);\n\telse\n\t\treturn l.value;\n}", "    return\
    \ foldl(function(x,y){\n        if(x>y){\n            return x;\n        }else{\n\
    \            return y;\n        }\n    },l.head,l.tail);\n}\n", "    return l[Math.max(...l.keys())];\n\
    }\n", "    return max(function(a,b){return a > b}, l);\n}\n", "\treturn l.reduce(function(prev,curr){return\
    \ Math.max(prev,curr);});\n}\n", "    var max = l[0];\n    for(var i = 1; i <\
    \ l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}\n", "    return l.reduce(function(a,b){\n        return\
    \ a>b?a:b;\n    });\n}\n", "\tif(l.length === 0){\n\t\tthrow \"Empty list\"\n\t\
    }\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "  var k;\n  var m;\n  if(l!==null){\n\
    \    m=l[0];\n    for(k=1;k<l.length;k++){\n      if(l[k]>m){\n        m=l[k];\n\
    \      }\n    }\n    return m;\n  }\n  else{\n    return NaN;\n  }\n}\n", "  var\
    \ m = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > m){\n      m\
    \ = l[i];\n    }\n  }\n  return m;\n}\n", "    return reduce_list(function(a,b){\n\
    \treturn Math.max(a,b);\n    }, 0, l);\n}\n", "    return l[l.length-1];\n}\n",
  "    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", " \
    \ var max=0;\n  for(var i=0;i<l.length;i++){\n    if(l[i]>max){\n      max=l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    var m = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > m){\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n", "\tvar temp = l;\n\tvar max = temp.item;\n\twhile(temp.next !== null){\n\
    \t\ttemp = temp.next;\n\t\tif(temp.item > max){\n\t\t\tmax = temp.item;\n\t\t\
    }\n\t}\n\treturn max;\n}\n", "\treturn foldl1(Math.max, l);\n}\n", "\tvar max=l[0];\n\
    \tvar l_max=max;\n\tvar index=0;\n\tfor(var i=1;i<l.length;i++){\n\t\tvar elem=l[i];\n\
    \t\tif(elem>max){\n\t\t\tmax=elem;\n\t\t\tindex=i;\n\t\t}\n\t}\n\treturn [l_max,index];\n\
    }", "\tvar m = l[0];\n\tfor(var i=1; i<l.length; i++){\n\t\tif(l[i] > m){\n\t\t\
    \tm = l[i];\n\t\t}\n\t}\n\treturn m;\n}\n", "  if(length(l)==0){\n    return 0;\n\
    \  }\n  else{\n    var m = head(l);\n    var r = max_element(tail(l));\n    if(m>r){\n\
    \      return m;\n    }\n    else{\n      return r;\n    }\n  }\n}", "\tvar r\
    \ = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > r){\n\t\t\tr =\
    \ l[i];\n\t\t}\n\t}\n\treturn r;\n}\n", "  return l.reduce(function(a,b){return\
    \ Math.max(a,b)});\n}\n", "\treturn l[l.length-1];\n}\n", "\treturn l[l.length-1];\n\
    }\n", "  if(l.length === 0){\n    return null;\n  }\n  var max = l[0];\n  var\
    \ i;\n  for(i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    let max;\n    l.forEach(element => {\n\
    \        if(!max || max < element){\n            max = element;\n        }\n \
    \   });\n    return max;\n}\n", "    return l.reduce(function(a,b){return Math.max(a,b)});\n\
    }\n", "\tvar c=l[0];\n\tfor(var i=1;i<l.length;i++){\n\t\tif(l[i]>c){\n\t\t\t\
    c=l[i];\n\t\t}\n\t}\n\treturn c;\n}\n", "\tvar max=null;\n\teach(l,function(i){\n\
    \t\tif(max==null||max<i)\n\t\t\tmax=i;\n\t});\n\treturn max;\n}\n", "  if(!l)\
    \ return l;\n  var max = l.value;\n  var node = l.next;\n  while(node){\n    if(node.value\
    \ > max) max = node.value;\n    node = node.next;\n  }\n  return max;\n}\n", "\t\
    var max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "  return l.reduce(function(a,b){return\
    \ Math.max(a,b)});\n}\n", "    var ans = head(l);\n    while(!is_null(l)){\n \
    \       if(ans < head(l)){\n            ans = head(l);\n        }\n        l =\
    \ tail(l);\n    }\n    return ans;\n}\n", "\tl = Array.from(l);\n\tl.sort();\n\
    \treturn l[l.length-1];\n}\n", "\tvar m=l[0];\n\tfor(var i=1;i<l.length;i++){\n\
    \t\tif(l[i]>m){\n\t\t\tm=l[i];\n\t\t}\n\t}\n\treturn m;\n}", "    if(l.next ===\
    \ null){\n        return l.element;\n    }else{\n        if(l.element > max_element(l.next)){\n\
    \            return l.element;\n        }else{\n            return max_element(l.next);\n\
    \        }\n    }\n}\n", "    function max(x,y){\n        if(x > y){\n       \
    \     return x;\n        }\n        else{\n            return y;\n        }\n\
    \    }\n    if(l.length === 0){\n        return max(l[0],max_element(l.slice(1)));\n\
    \    }\n    else{\n        return max(l[0],max_element(l.slice(1)));\n    }\n\
    }\n", "\tif(l.length == 0){\n\t\treturn 0;\n\t}\n\tvar max = l[0];\n\tfor(var\
    \ i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "\tif(l.tail === null){return undefined;}\n\telse if(l.tail.head\
    \ > l.head){return max_element(l.tail);}\n\telse{return l.head;}\n}\n", "    return\
    \ array.apply(null,l).sort(function(a,b){return b-a;})[0];\n}\n", "  return Math.max.apply(null,\
    \ l);\n}\n", "\tvar max = -Infinity;\n\tforeach(l, function(x){\n\t\tif(x > max)\n\
    \t\t\tmax = x;\n\t});\n\treturn max;\n}\n", "\tvar max = l[0]\n\tfor(i = 0; i\
    \ < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn\
    \ max\n}\n", "\tif(l.length == 0){\n\t\treturn 0;\n\t}else{\n\t\treturn Math.max.apply(null,\
    \ l);\n\t}\n}\n", "    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "  max= l[0];\n\
    \  for(i=0;i<l.length;i++){\n    if(l[i]>max){\n      max=l[i];\n    }\n  }\n\
    \  return max;\n}", "  var m=0;\n  var index=0;\n  for(var i=0;i<l.length;i++){\n\
    \    if(l[i]>m){\n      m=l[i];\n      index=i;\n    }\n  }\n  return index;\n\
    }\n", "\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] >\
    \ max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tif(is_empty_list(l)){\n\
    \t\terror(\"Cannot call max_element on an empty list.\");\n\t}\n\treturn accumulate(Math.max,\
    \ l, head(l));\n}\n", "    var max=l[0];\n    var i;\n    for(i=1;i<l.length;i++){\n\
    \        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n\
    }\n", "    if(l.length == 0){\n        return 0;\n    }\n    var max = l[0];\n\
    \    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n", "  const result = {\n\
    \    type: 'int',\n    value: l.value[0]\n  };\n  for(let x = 1; x < l.value.length;\
    \ x++){\n    if(l.value[x] > result.value){\n      result.value = l.value[x];\n\
    \    }\n  }\n  return result;\n}\n", "\tvar max = l[0];\n\tfor(var i = 1; i <\
    \ l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n", "\treturn reduce(max, l, -Infinity);\n}\n", "\tvar max = l[0];\n\
    \tvar i;\n\tfor(i=1;i<l.length;i++){\n\t\tif(l[i]>max){\n\t\t\tmax = l[i];\n\t\
    \t}\n\t}\n\treturn max;\n}\n", "  return reduce(function(a, b){ return (a > b)\
    \ ? a : b; }, l);\n}\n", "    return max.apply(undefined, l);\n}\n", "  return\
    \ (l.length > 0) ? Math.max.apply(null, l) : 0;\n}\n", "    let max = Number.MIN_SAFE_INTEGER;\n\
    \    for(let i = 0; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}", "  return reduce(l, function(a,b){\n\
    \    return a > b ? a : b;\n  });\n}\n", "\tif(l.length == 0){\n\t\treturn null;\n\
    \t}\n\n\tvar max = l[0];\n\tvar i;\n\tfor(i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar len = l.length;\n\
    \tvar max = Number.MIN_VALUE;\n\tfor(var i = 0; i < len; i++){\n\t\tif(max < l[i]){\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar max = l[0];\n\tfor(var\
    \ i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "    var max=null;\n    for(var i=0;i<l.length;i++){\n\
    \        var e=l[i];\n        if(max==null || e>max){\n            max=e;\n  \
    \      }\n    }\n    return max;\n}\n", "  var max = l[0];\n  for(var i = 1; i\
    \ < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n", "    return foldl(Math.max,l[0],l);\n}\n", "  if(!is_empty_list(l)){\n\
    \    var max_elem = function(l,max){\n      if(is_empty_list(l)){\n        return\
    \ max;\n      } else {\n        return max_elem(tail(l),head(l) > max ? head(l)\
    \ : max);\n      }\n    };\n    return max_elem(l,0);\n  } else {\n    return\
    \ 0;\n  }\n}\n", "   return foldl1(max,l);\n}\n", "    var max=l[0];\n    for(var\
    \ i=1;i<l.length;i++){\n        if(l[i]>max){\n            max=l[i];\n       \
    \ }\n    }\n    return max;\n}\n", "  if(is_empty_list(l)){\n    return [];\n\
    \  }else{\n    var a = max_element(tail(l));\n    if(head(l) > head(a)){\n   \
    \   return list(head(l));\n    }else{\n      return a;\n    }\n  }\n}\n", "\t\
    return l.reduce(function(a,b){\n\t\treturn a>b?a:b;\n\t});\n}\n", "    var max\
    \ = -Infinity;\n    for(var i = 0; i < l.length; i++){\n        if(max < l[i]){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = l[0];\n    let i = 1;\n    while(i < l.length){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n        i = i + 1;\n    }\n    return max;\n\
    }\n", "\tif(l === undefined){\n\t\tthrow new Error(\"List is empty\");\n\t}\n\t\
    var max = -Infinity;\n\tfor(var elem in l){\n\t\tif(l[elem] > max){\n\t\t\tmax\
    \ = l[elem];\n\t\t}\n\t}\n\treturn max;\n}\n", "  return reduce(function(x,y){return\
    \ x>y?x:y;},l);\n}\n", "    //Your code here\n    var max = 0;\n    for(var i=0;i<l.length;i++){\n\
    \        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "  if(l === undefined){\n    return undefined;\n  }\n  if(l.length\
    \ === 0){\n    return undefined;\n  }\n  if(l.length === 1){\n    return l[0];\n\
    \  }\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n\
    \      max = l[i];\n    }\n  }\n  return max;\n}\n", "    if(l.length == 0){\n\
    \        return null;\n    }\n    var max_value = l[0];\n    for(var i = 1; i\
    \ < l.length; i++){\n        if(l[i] > max_value){\n            max_value = l[i];\n\
    \        }\n    }\n    return max_value;\n}\n", "\treturn reduce(function(x,y){return\
    \ x>y?x:y;},l);\n}\n", "    if(empty(l)){\n        return -1;\n    }\n    return\
    \ Math.max(last(l), max_element(list_tail(l)));\n}\n", "\treturn l.reduce(function(a,b){\n\
    \t\tif(a < b) return b;\n\t\telse return a;\n\t});\n}\n", "\tvar m = Number.MIN_VALUE;\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > m){\n\t\t\tm = l[i];\n\t\t\
    }\n\t}\n\treturn m;\n}\n", "    //BEGIN Q1\n    return reduce(l, function(acc,\
    \ n) {\n        if (n > acc) {\n            return n;\n        } else {\n    \
    \        return acc;\n        }\n    }, reduce(l, function(acc, n) {\n       \
    \ return acc;\n    }, 0));\n    //END Q1\n}\n", "\treturn foldl(function(x,y){\
    \ return Math.max(x,y); },l[0],l);\n}\n", "  return l.max(function(a,b){return\
    \ a-b});\n}\n", "  var mx = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i]\
    \ > mx){\n      mx = l[i];\n    }\n  }\n  return mx;\n}\n", "  if(!is_empty_list(l)){\n\
    \    return fold_left(function(x, y){return x>y?x:y;},\n                     head(l),\
    \ tail(l));\n  }\n}\n", "    var max = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "\tif(l.length === 0){\n\t\treturn null;\n\t}\n\tvar elem\
    \ = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > elem){\n\t\t\t\
    elem = l[i];\n\t\t}\n\t}\n\treturn elem;\n}\n", "    return foldl1(max, l);\n\
    }\n", "    return max(...l);\n}\n", "  return foldl1(Math.max, l);\n}\n", "  var\
    \ max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n   \
    \   max = l[i];\n    }\n  }\n  return max;\n}\n", "    var max = l[0];\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "  var max_elem = l[0];\n  for(var i\
    \ = 1; i < l.length; i++){\n    if(l[i] > max_elem){\n      max_elem = l[i];\n\
    \    }\n  }\n  return max_elem;\n}\n", "    var max = l[0];\n    for(var i = 1;\
    \ i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n    \
    \    }\n    }\n    return max;\n}\n", "\treturn _.last(l);\n}\n", "    var max\
    \ = 0;\n    if(typeof l == \"object\"){\n        for(var i = 0; i < l.length;\
    \ i++){\n            max = (l[i] > max)? l[i] : max;\n        }\n    }\n    return\
    \ max;\n}\n", "\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tl.max_element();\n\
    }\n", "    return fold_left(function(a,b){\n        if(a>b){\n            return\
    \ a;\n        }\n        else{\n            return b;\n        }\n    }, l, head(l));\n\
    }\n", "\treturn fold_left(function(x,y){if(x>y){return x;}else{return y;}},l.head,l.tail);\n\
    }\n", "   var max=0;\n   var i=0;\n   while(l[i]!=null){\n       if(l[i]>max){\n\
    \          max=l[i];\n       }\n       i++;\n   }\n   return max;\n}", "  return\
    \ reduce(l, function(x,y){return x>y?x:y;});\n}\n", "\tvar max = 0;\n\tvar index\
    \ = 0;\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax =\
    \ l[i];\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn max;\n}\n", "    let max = l[0];\n\
    \    for(let i = 1; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n", "    if(l.data == null){\n\
    \        return null;\n    }\n    max = l.data;\n    l = l.next;\n    while(l.data\
    \ != null){\n        if(l.data > max){\n            max = l.data;\n        }\n\
    \        l = l.next;\n    }\n    return max;\n}\n", "\t// Your code here\n\treturn\
    \ math.max(...l);\n}\n", "\treturn reduce(l, function(acc, curr){\n\t\tif(curr\
    \ > acc){\n\t\t\treturn curr;\n\t\t}\n\t\treturn acc;\n\t}, 0);\n}\n", "    var\
    \ max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "\tif(is_empty_list(l)){\n\
    \t\treturn undefined;\n\t}\n\tif(is_empty_list(tail(l))){\n\t\treturn head(l);\n\
    \t}\n\tif(head(l) > max_element(tail(l))){\n\t\treturn head(l);\n\t}else{\n\t\t\
    return max_element(tail(l));\n\t}\n}\n", "\tvar max=l[0];\n\tfor(var i=1;i<l.length;i++){\n\
    \t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "    if(l.length\
    \ == 0){\n        return false;\n    }\n    let max = 0;\n    for(let i = 0; i\
    \ < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n      \
    \  }\n    }\n    return max;\n}\n", "  if(l.length == 0){\n    return null;\n\
    \  }\n  else{\n    return Math.max.apply(null, l);\n  }\n}\n", "return apply(\"\
    max\",l);\n}\n", "\tif(l === null){\n\t\treturn null;\n\t}\n\tvar max = l.head;\n\
    \tvar p = l.head;\n\twhile(p !== null){\n\t\tif(p.data > max.data){\n\t\t\tmax\
    \ = p;\n\t\t}\n\t\tp = p.next;\n\t}\n\treturn max.data;\n}\n", "\tif(l.length==0){\n\
    \t\treturn 'empty list';\n\t}\n\tvar max=l[0];\n\tfor(var i=1;i<l.length;i++){\n\
    \t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tif(!l.next){\n\
    \t\treturn l.info;\n\t}\n\telse{\n\t\tvar max = max_element(l.next);\n\t\tif(l.info\
    \ > max){\n\t\t\treturn l.info;\n\t\t}\n\t\telse{\n\t\t\treturn max;\n\t\t}\n\t\
    }\n}\n", "  if(is_null(l))\n  {\n   return 0;\n  }\n  else if(is_null(tail(l)))\n\
    \  {\n    return head(l);\n  }\n  else if(head(l)>head(tail(l)))\n  {\n   return\
    \ max_element(list(head(l),max_element(tail(tail(l)))));\n  }\n  else\n  {\n \
    \  return max_element(list(head(tail(l)),max_element(tail(tail(l)))));\n  }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
