name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  function filter_by_prefix(strings, prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["\tvar filtered = [];\n\tstrings.forEach(function(str){\n\t\tif(str.startsWith(prefix)){\n\
    \t\t\tfiltered.push(str);\n\t\t}\n\t});\n\treturn filtered;\n}\n\n", "    var\
    \ ret = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n", "    return _.filter(strings, function(x){\n        return x.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(str){\n        return (str.startsWith(prefix));\n\
    \    });\n}\n", "    var valid = [];\n    var i = 0;\n    var l = strings.length;\n\
    \    for(i; i < l; i++){\n        if(strings[i].indexOf(prefix) == 0){\n     \
    \       valid.push(strings[i]);\n        }\n    }\n    return valid;\n}\n\n",
  "    var filtered = [], i;\n    for(i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "\tvar strings_filtered = [];\n\t\n\t//Check if the prefix\
    \ is falsey, then skip the filtering\n\tif(prefix){\n\t\tstrings.forEach(function(string){\n\
    \t\t\tif(string.startsWith(prefix)){\n\t\t\t\tstrings_filtered.push(string);\n\
    \t\t\t}\n\t\t});\n\t}else{\n\t\tstrings_filtered = strings;\n\t}\n\t\n\treturn\
    \ strings_filtered;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\treturn strings.filter(function(str){return str.indexOf(prefix)==0});\n\
    }\n", "\treturn strings.filter(function(e){return e.startsWith(prefix)});\n}\n",
  "    var output = new Array();\n    for(var i=0; i<strings.length; i++){\n     \
    \   if(strings[i].indexOf(prefix) == 0){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "\tprefix = prefix.toLowerCase();\n\
    \treturn strings.filter(function(value){\n\t\treturn value.toLowerCase().indexOf(prefix)\
    \ == 0;\n\t});\n}\n", "    var ret = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    let result = [];\n\
    \    for(let s of strings){\n        if(s.startsWith(prefix)){\n            result.push(s);\n\
    \        }\n    }\n    return result;\n}\n", "\treturn strings.filter(function(str){\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n", "\treturn strings.filter(function(str){\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n\n", "    var filtered = [];\n \
    \   for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "    var filtered = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\treturn _.filter(strings, function(a)\
    \ { return a.indexOf(prefix) == 0; });\n}\n", "\tif (strings.length === 0) {\n\
    \t\treturn [];\n\t}\n\tif (strings[0].startsWith(prefix)) {\n\t\treturn [strings[0]].concat(filter_by_prefix(strings.slice(1),\
    \ prefix));\n\t}\n\treturn filter_by_prefix(strings.slice(1), prefix);\n}\n",
  "\tvar len = strings.length, result = [], i;\n\tfor(i = 0; i < len; i++){\n\t\t\
    if(strings[i].indexOf(prefix) === 0){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "\treturn strings.filter(function(s){return s.substring(0,\
    \ prefix.length) == prefix;});\n}\n", "    return strings.filter(function(string){\n\
    \        return (string.startsWith(prefix));\n    });\n}\n", "\tvar out = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tout.push(strings[i]);\n\t}\n\treturn out;\n}\n", "\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tfiltered.push(strings[i]);\n\t}\n\treturn filtered;\n}\n", "\tvar filtered\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n\nlet string_list = [\"the\"\
    , \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"\
    ];", "\tvar filtered = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "\tvar\
    \ filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "    var\
    \ filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "\tvar results = [];\n\tvar l = strings.length;\n\tfor(var\
    \ i = 0; i < l; i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\t\t\tresults.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn results;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) == 0;\n    });\n}\n", "\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n", "    return strings.filter(function(string){\n        return string.substring(0,\
    \ prefix.length) === prefix;\n    });\n}\n", "\treturn strings.filter(\n\t\tfunction(string){\n\
    \t\t\treturn string.slice(0, prefix.length) == prefix;\n\t\t}\n\t);\n}\n", "\t\
    return strings.filter(function(s){return s.substring(0, prefix.length) === prefix;});\n\
    }\n", "\treturn strings.filter(function(string){\n\t\treturn string.substring(0,\
    \ prefix.length) === prefix;\n\t});\n}\n", "    var result = [];\n    var prefix_len\
    \ = prefix.length;\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix_len) == prefix){\n            result.push(strings[i]);\n        }\n \
    \   }\n    return result;\n}\n\n", "    var r = []\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) == 0){\n            r.push(strings[i]);\n\
    \        }\n    }\n    return r;\n}\n", "    let filtered = []\n    strings.forEach(\
    \ s => { if(s.startsWith(prefix)) filtered.push(s) })\n    return filtered\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(\
    \ function(string){\n\t\treturn string.indexOf(prefix) == 0;\n\t});\n}\n", " \
    \   var list = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            list.push(strings[i]);\n        }\n    }\n    return list;\n\
    }\n", "    return strings.filter(function(el){return el.startsWith(prefix)});\n\
    }\n", "\tvar filtered = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ prefix.length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\t\
    return filtered;\n}\n", "\tif(!strings){\n\t\treturn [];\n\t}\n\tif(!prefix){\n\
    \t\treturn strings;\n\t}\n\treturn strings.filter(function(str){\n\t\treturn starts_with(str,\
    \ prefix);\n\t});\n}\n", "    prefix = prefix.toLowerCase();\n    var filtered\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].toLowerCase().startsWith(prefix))\n\
    \            filtered.push(strings[i]);\n    }\n    return filtered;\n}\n", " \
    \   var ret = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            ret.push(strings[i]);\n        }\n    }\n    return ret;\n}\n", "\t\
    if(!(strings && prefix)) return undefined;\n\treturn strings.filter(function(elem){\n\
    \t\treturn elem.startsWith(prefix);\n\t});\n}\n", "    var result = [];\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n \
    \           result.push(strings[i]);\n        }\n    }\n    return result;\n}\n",
  "    var results = [],\n        prefix_length = prefix.length;\n    for(var i =\
    \ 0; i < strings.length; i++){\n        if(strings[i].length >= prefix_length){\n\
    \            var matches = true;\n            for(var j = 0; j < prefix_length;\
    \ j++){\n                if(strings[i][j] != prefix[j]){\n                   \
    \ matches = false;\n                    break;\n                }\n          \
    \  }\n            if(matches){\n                results.push(strings[i]);\n  \
    \          }\n        }\n    }\n    return results;\n}\n", "    var prefix_length\
    \ = prefix.length;\n    var filtered = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].substring(0, prefix_length) == prefix){\n     \
    \       filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n",
  "    var ret = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            ret.push(strings[i]);\n        }\n    }\n    return ret;\n}\n", " \
    \   return strings.filter(function(el){\n        return el.startsWith(prefix);\n\
    \    });\n}\n", "    let ret = [];\n    for(let string of strings){\n        if(string.startsWith(prefix)){\n\
    \            ret.push(string);\n        }\n    }\n    return ret;\n}\n", "   \
    \ var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            result.push(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\n\n", "\treturn strings.filter(\n\t\tfunction(string){\n\t\t\treturn\
    \ string.startsWith(prefix);\n\t\t}\n\t);\n}\n", "    let result = [];\n    for(let\
    \ i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n \
    \           result.push(strings[i]);\n        }\n    }\n    return result;\n}\n",
  "    return strings.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\treturn strings.filter(function(x){\n\t\treturn x.substring(0,\
    \ prefix.length) == prefix;\n\t});\n}\n", "\treturn strings.filter(word => word.startsWith(prefix));\n\
    }\n", "\tvar ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n", "\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(prefix) == 0;\n\t});\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n}\n", "    var rtn = {};\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            rtn[strings[i]] = true;\n        }\n    }\n    return rtn;\n}\n",
  "\treturn strings.filter(function(value){\n\t\treturn value.startsWith(prefix);\n\
    \t});\n}\n", "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].indexOf(prefix) == 0){\n\t\t\tfiltered.push(strings[i]);\n\t\
    \t}\n\t}\n\treturn filtered;\n}\n", "\tvar res = [];\n\tfor(var i=0; i<strings.length;\
    \ i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\tres.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn res;\n}\n", "    var ret = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "\tvar r = new Array();\n\tfor(var i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\t\
    \t\tr.push(strings[i]);\n\t\t}\n\t}\n\treturn r;\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(prefix) === 0;\n\t});\n}\n", "\tvar prefix = prefix.toLowerCase();\n\
    \tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().startsWith(prefix)){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar prefix_regex\
    \ = new RegExp(\"^\" + prefix);\n\treturn _.filter(strings, function(string){\n\
    \t\treturn prefix_regex.test(string);\n\t});\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) == 0;\n    });\n}", "    var output = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n", "\treturn strings.filter(function(s){return s.startsWith(prefix)});\n}\n",
  "\tvar filtered = [];\n\tstrings.forEach(function(x){\n\t\tif(x.slice(0, prefix.length)\
    \ === prefix){\n\t\t\tfiltered.push(x);\n\t\t}\n\t});\n\treturn filtered;\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\tvar ret = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n", "    return\
    \ strings.filter(string => string.startsWith(prefix));\n}\n", "    var filtered\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    if(prefix === undefined){\n        prefix = \"\";\n    }\n    return\
    \ strings.filter(function(string){\n        return string.substring(0, prefix.length)\
    \ === prefix;\n    });\n}\n", "    return strings.filter(function(str){return\
    \ str.startsWith(prefix)});\n}\n", "    var results = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            results.push(strings[i]);\n\
    \        }\n    }\n    return results;\n}\n", "    var filtered = [];\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix))\n  \
    \          filtered.push(strings[i]);\n    }\n    return filtered;\n}\n", "  \
    \  return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(item => item.startsWith(prefix));\n\
    }\n", "    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n    \
    \    if(strings[i].substring(0, prefix.length) == prefix){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    var filtered = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "\tvar string_list = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)==0){\n\
    \t\t\tstring_list.push(strings[i]);\n\t\t}\n\t}\n\treturn string_list;\n}\n",
  "    return strings.filter(function(s){\n        return s.indexOf(prefix) == 0;\n\
    \    });\n}\n", "    return strings.filter(function(val, index, array){\n    \
    \    return val.substring(0, prefix.length) == prefix;\n    });\n}\n", "\tvar\
    \ ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ prefix.length) == prefix){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ ret;\n}\n", "    return strings.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\tvar filtered = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.startsWith(prefix)){\n\t\t\tfiltered.push(string);\n\t\t}\n\t});\n\
    \treturn filtered;\n}\n", "    return strings.filter(string => string.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tvar new_array = [];\n\tfor(var index in strings){\n\t\tif(strings[index].startsWith(prefix)){\n\
    \t\t\tnew_array.push(strings[index]);\n\t\t}\n\t}\n\treturn new_array;\n}\n",
  "    var result = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    var result = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar prefix_length = prefix.length;\n\
    \tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ prefix_length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\t\
    return filtered;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    var result = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      if(strings[i].indexOf(prefix) == 0){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var ret = [];\n    for(var i\
    \ = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix))\n\
    \            ret.push(strings[i]);\n    }\n    return ret;\n}\n", "\tvar output\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n", "    return\
    \ strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].startsWith(prefix)){\n\t\t\tfiltered.push(strings[i]);\n\t\t\
    }\n\t}\n\treturn filtered;\n}\n", "    var r = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            r.push(strings[i]);\n\
    \        }\n    }\n    return r;\n}\n", "    var filtered = [];\n    for(var i\
    \ = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ == 0;\n    });\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.indexOf(prefix) == 0;\n    });\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    var new_strings =\
    \ []\n    for(var string in strings){\n        if(strings[string].startsWith(prefix)){\n\
    \            new_strings.push(strings[string]);\n        }\n    }\n    return\
    \ new_strings;\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "\treturn strings.filter(function(value){\n\
    \t\treturn value.substring(0, prefix.length) == prefix;\n\t});\n}\n", "\tvar filtered\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tfiltered.push(strings[i]);\n\t}\n\treturn filtered;\n}\n", "    let filtered\
    \ = [];\n    for(let i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n    \
    \    if(strings[i].indexOf(prefix) == 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\tvar filtered = [];\n\tvar length\
    \ = prefix.length;\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ filtered;\n}\n", "    var filtered_strings = strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n    return filtered_strings;\n\
    }\n", "    return strings.filter(function(val){\n        return val.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    //Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    var filtered = [];\n    for (var i = 0;\
    \ i < strings.length; i++){\n        var s = strings[i];\n        if (s.indexOf(prefix)\
    \ === 0){\n            filtered.push(s);\n        }\n    }\n    return filtered;\n\
    }\n", "    var res = new Array();\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].substring(0, prefix.length) == prefix){\n            res.push(strings[i]);\n\
    \        }\n    }\n    return res;\n}\n\n", "\tvar new_strings = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}\n", "\t\
    var output = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n", "    var l\
    \ = strings.length;\n    var filtered = [];\n    for(var i=0; i<l; i++){\n   \
    \     if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "    return\
    \ strings.filter(function(string){\n        return (string.lastIndexOf(prefix,\
    \ 0) === 0);\n    });\n}\n", "    var output = [];\n    var prefix_length = prefix.length;\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix_length) === prefix){\n            output.push(strings[i]);\n        }\n\
    \    }\n    return output;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.slice(0, prefix.length) === prefix;\n    });\n}\n", " \
    \   prefix = prefix.toLowerCase();\n    return strings.filter(function(v){return\
    \ v.toLowerCase().startsWith(prefix);});\n}\n", "\tconst filtered = [];\n\tfor(let\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "    var\
    \ output = [];\n    strings.forEach(function(string){\n        if(string.substring(0,\
    \ prefix.length) == prefix){\n            output.push(string);\n        }\n  \
    \  });\n    return output;\n}\n", "\treturn strings.filter(function(s){return\
    \ s.indexOf(prefix) == 0;});\n}\n", "    const regExp = new RegExp(`^${prefix}`);\n\
    \    return strings.filter(s => s.match(regExp));\n}\n\nmodule.exports = {\n \
    \   filter_by_prefix\n};", "\tvar matches = [];\n\t$.each(strings, function(index,\
    \ string){\n\t\tif(string.substring(0, prefix.length) == prefix){\n\t\t\tmatches.push(string);\n\
    \t\t}\n\t});\n\treturn matches;\n}\n", "    var r = [], i, n = strings.length;\n\
    \    for(i = 0; i < n; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            r.push(strings[i]);\n        }\n    }\n    return r;\n}\n", "   \
    \ var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "\treturn strings.filter(function(string){\n\t\treturn (string.indexOf(prefix)\
    \ === 0);\n\t});\n}\n", "    return strings.filter(function(string){\n       \
    \ return string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix)===0;\n    });\n}\n", "\tfiltered = [];\n\
    \tstrings.forEach(function(string){\n\t\tif(string.startsWith(prefix)){\n\t\t\t\
    filtered.push(string);\n\t\t}\n\t});\n\treturn filtered;\n}\n\n", "    return\
    \ strings.filter(function(s){\n        return s.indexOf(prefix) === 0;\n    });\n\
    }\n", "    return strings.filter(function(x){return x.startsWith(prefix)});\n\
    }\n", "\treturn strings.filter(function(value){\n\t\treturn value.startsWith(prefix);\n\
    \t});\n}\n", "    var new_list = strings.filter(function(s){\n        return s.startsWith(prefix);\n\
    \    });\n    return new_list;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(value,\
    \ index, arr){\n\treturn String(value).startsWith(prefix);\n    });\n}\n", " \
    \   if(strings == null){\n        return null;\n    }\n    if(prefix == null){\n\
    \        return strings;\n    }\n    var filtered = new Array();\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) == 0){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    var reg = new RegExp(\"^\" + prefix);\n    var result = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(reg.test(strings[i])){\n      \
    \      result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", " \
    \   if(prefix == undefined || prefix == null){\n        return strings;\n    }\n\
    \    var new_strings = [];\n    for(var i = 0; i < strings.length; i++){\n   \
    \     if(strings[i].toLowerCase().indexOf(prefix.toLowerCase()) == 0){\n     \
    \       new_strings.push(strings[i]);\n        }\n    }\n    return new_strings;\n\
    }\n", "\treturn strings.filter( function(str){\n\t\treturn str.indexOf(prefix)\
    \ === 0;\n\t});\n}\n\nmodule.exports = {\n\tgroup_by_type: group_by_type,\n\t\
    filter_by_prefix: filter_by_prefix\n};", "    var result = [];\n    for(var i\
    \ = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    var output = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      if(strings[i].startsWith(prefix)){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "    if(strings\
    \ === null){\n        return null;\n    }\n    if(strings.length === 0){\n   \
    \     return [];\n    }\n    return strings.filter(function(word){\n        return\
    \ word.substring(0, prefix.length) === prefix;\n    });\n}\n", "    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "    var filtered_strings = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) == 0){\n\
    \            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n", "    var new_list = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            new_list.push(strings[i]);\n\
    \        }\n    }\n    return new_list;\n}\n", "    return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n\nvar replace_element = function(parent,\
    \ index, replacement){\n    //Replace index'th element in parent with replacement.\n\
    \    var temp = parent[index];\n    parent[index] = replacement;\n    temp.remove();\n\
    }\n", "    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n    \
    \    if(strings[i].indexOf(prefix)==0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\treturn strings.filter(function(e){\n\
    \t\treturn e.substring(0, prefix.length) == prefix;\n\t});\n}\n", "    var prefixed_list\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            prefixed_list.push(strings[i]);\n        }\n    }\n   \
    \ return prefixed_list;\n}\n", "\treturn strings.filter(function(string){\n\t\t\
    return string.slice(0, prefix.length) === prefix;\n\t});\n}\n", "    if(prefix\
    \ === \"\")\n        return strings;\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "    var new_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n", "\tvar filtered = [];\n\tfor(var i=0; i<strings.length;\
    \ i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n", "\tvar result = [];\n\tvar i;\n\tfor(i =\
    \ 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\t\t\
    \tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n",
  "    return strings.filter(function(str){\n        return str.indexOf(prefix) ==\
    \ 0;\n    });\n}\n", "\treturn strings.filter(function(s){return s.startsWith(prefix)});\n\
    }\n", "    var filtered = [];\n    for(i = 0; i < strings.length; i++){\n    \
    \    var string = strings[i];\n        if(string.indexOf(prefix) === 0){\n   \
    \         filtered.push(string);\n        }\n    }\n    return filtered;\n}\n",
  "    var ret = [];\n    strings.forEach(function(string){\n        if(string.indexOf(prefix)==0){\n\
    \            ret.push(string);\n        }\n    });\n    return ret;\n}\n", "\t\
    let filtered = strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n\treturn filtered;\n}\n", "    return strings.filter(function(str){\n\t\
    return starts_with(str, prefix);\n    });\n}\n", "    let filtered = [];\n   \
    \ for(let string of strings){\n        if(string.startsWith(prefix)){\n      \
    \      filtered.push(string);\n        }\n    }\n    return filtered;\n}\n", " \
    \   var result = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix.length) === prefix){\n            result.push(strings[i]);\n        }\n\
    \    }\n    return result;\n}\n", "\tvar filtered = [];\n\tstrings.forEach(function(s){\n\
    \t\tif(s.startsWith(prefix)){\n\t\t\tfiltered.push(s);\n\t\t}\n\t});\n\treturn\
    \ filtered;\n}\n", "\tvar filter_strings = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.substring(0, prefix.length) == prefix){\n\t\t\tfilter_strings.push(string);\n\
    \t\t}\n\t});\n\treturn filter_strings;\n}\n", "    return strings.filter(function(s){\n\
    \        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(x){\n\
    \        return x.substring(0, prefix.length) === prefix;\n    });\n}\n", "  \
    \  var filtered = [];\n    $.each(strings, function(idx, value){\n        if(value.indexOf(prefix)\
    \ === 0){\n            filtered.push(value);\n        }\n    });\n    return filtered;\n\
    }\n", "    return strings.filter(function(s){\n        return s.slice(0, prefix.length)\
    \ == prefix;\n    });\n}\n", "    var filtered = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\tvar result = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar results\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tresults.push(strings[i]);\n\t}\n\treturn results;\n}\n", "    var new_strings\
    \ = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    var r = [];\n    for(var i = 0;\
    \ i < strings.length; i++){\n        if(strings[i].indexOf(prefix) == 0){\n  \
    \          r.push(strings[i]);\n        }\n    }\n    return r;\n}\n", "\tvar\
    \ ret = [];\n\t\n\tstrings.forEach(function(str){\n\t\tif(str.indexOf(prefix)\
    \ === 0){\n\t\t\tret.push(str);\n\t\t}\n\t});\n\t\n\treturn ret;\n}\n", "\tvar\
    \ result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ prefix.length) == prefix){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar results = [];\n\t\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tif(strings[i].indexOf(prefix) == 0){\n\t\t\tresults.push(strings[i]);\n\t\t\
    }\n\t}\n\t\n\treturn results;\n}\n", "    var vals = new Array();\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n \
    \           vals.push(strings[i]);\n        }\n    }\n    return vals;\n}\n",
  "    var filtered_strings = [];\n    for(i = 0; i < strings.length; i++){\n    \
    \    if(strings[i].indexOf(prefix) != -1){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n", "\treturn strings.filter(function(s){return\
    \ s.startsWith(prefix)});\n}\n", "    var prefix_filter = function(string){\n\
    \        return string.indexOf(prefix) == 0;\n    };\n    return strings.filter(prefix_filter);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
