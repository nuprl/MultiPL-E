name: HumanEval_121_solution
language: js
prompt: "//Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1]) \n// 12\n\
  // >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
  \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
  \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
  \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
completions: ["    return lst.filter((v, i) => i % 2 !== 0).reduce((a, b) => a + b);\n\
    }\n", "  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,b)\
    \ => a + b, 0)\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "  return lst.filter((e, i) => i % 2).reduce((a,\
    \ e) => a + e)\n}\n", "    let result = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 !== 0 && lst[i] % 2 !== 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}", "    if (lst.length === 0)\
    \ return 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}", "  let sum = 0;\n\
    \  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !==\
    \ 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "  let sum = 0;\n\
    \  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "    //coding and coding..\n  \
    \  let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "  return lst.filter((x, i) => i % 2 !== 0 && x % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}", "  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n\
    \    if(lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
  "  return lst.filter((v,i)=>i%2==0).filter(v=>v%2!=0).reduce((a,b)=>a+b,0)\n}",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !==\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    return lst.filter((val, i) => i % 2 != 0).reduce((sum, val) =>\
    \ val%2==0 ? sum + val : sum, 0);\n}\n", "    var oddPositionSum = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n\
    \            oddPositionSum += lst[i];\n        }\n    }\n    return oddPositionSum;\n\
    }\n", "    //nested for loop\n    //3 pointers\n    // let i = 0\n    // let j\
    \ = 1\n    // let count = 0\n    // while(i < lst.length && j < lst.length){\n\
    \    //     if(lst[i] % 2 !== 0 && lst[j] % 2 === 0){\n    //         count +=\
    \ lst[i]\n    //     }\n    //     i++\n    //     j+=2\n    // }\n    // return\
    \ count\n    let count = 0\n    for(let i = 0; i < lst.length; i+=2){\n      \
    \  if(lst[i] % 2 !== 0){\n            count += lst[i]\n        }\n    }\n    return\
    \ count\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}", "    if (lst.length == 0) {\n        return 0;\n    }\n    var sum\
    \ = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 &&\
    \ lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    return lst.filter((e, i) => i % 2 === 1 && e % 2 === 1).reduce((acc,\
    \ val) => acc + val, 0);\n}", "    // Type your solution here\n    return lst.filter((e,\
    \ i) => i % 2 === 0).filter(e => e % 2 === 1).reduce((a, b) => a + b);\n  }",
  "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i]\
    \ % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  // Your\
    \ solution here\n  var sum = 0;\n  var position = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (position % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n\
    \    }\n    position += 1;\n  }\n  return sum;\n}\n", "    let sum = 0;\n    let\
    \ odd = [];\n    let even = [];\n    for(let i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] % 2 === 0){\n            even.push(lst[i]);\n        }else{\n\
    \            odd.push(lst[i]);\n        }\n    }\n    for(let j = 0; j < odd.length;\
    \ j++){\n        sum += odd[j];\n    }\n    return sum;\n}", "    let sum = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] %\
    \ 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
  "    let i = 1\n    let sum = 0\n    for(i = 1; i < lst.length; i += 2){\n     \
    \   sum += lst[i]\n    }\n    return sum\n}\n", "    let sum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  //your\
    \ code here\n}\n", "    if (lst.length < 1) {\n        return 0;\n    }\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    // coder code here\n  \n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    if (i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}", "    //coding and coding..\n    let sum = 0;\n  \
    \  for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 != 0){\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    // Write\
    \ your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that converts camelCase strings to regular strings,\
    \ with spaces between the words.\n  // camelCaseStringToRegularString(\"theCatIsOnTheTable\"\
    )\n  // => \"the cat is on the table\"\n  function camelCaseStringToRegularString(str){\n\
    \    // Write your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that takes in a number and returns that number with\
    \ commas every 3 digits.\n  // Examples\n  // >>> solution(12345678) \n  // \"\
    12,345,678\"\n  // >>> solution(233467) \n  // \"233,467\"\n  function solution(num){\n\
    \    // Write your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that searches an array for a particular element.\n \
    \ // Examples\n  // >>> solution([1, 5, 2, 4, 6, 5, 2, 1], 2) \n  // [2, 5, 2]\n\
    \  // >>> solution([3, 3, 4, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], 4) \n  //\
    \ [4, 4, 4, 4]\n  function solution(arr, num){\n    // Write your code here\n\
    \  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that takes an array of numbers and returns an array\
    \ where all the negative numbers have been replaced with the word \"negative\"\
    .\n  // Examples\n  // >>> solution([-1, -2, 3, -4, 5, 6, -7, 8, 9]) \n  // [\"\
    negative\", \"negative\", 3, \"negative\", 5, 6, \"negative\", 8, 9]\n  // >>>\
    \ solution([-3, -3, -3, -3, -3, -3, -3, -3, -3, -3]) \n  // [\"negative\", \"\
    negative\", \"negative\", \"negative\", \"negative\", \"negative\", \"negative\"\
    , \"negative\", \"negative\", \"negative\"]\n  function solution(arr){\n    //\
    \ Write your code here\n  }\n  ", "    return lst.filter((el,i)=>i%2==0&&el%2!=0).reduce((a,b)=>a+b)\n\
    \  }\n  // ---------------------------\n  //Given a number, return the sum of\
    \ all the digits of that number that are even.\n  //Examples\n  // >>> solution(3456)\
    \ \n  // 12\n  // >>> solution(12345) \n  // 6\n  function solution(num){\n  \
    \  let numStr = num.toString()\n    let arr = numStr.split('')\n    return arr.filter(el=>Number(el)%2==0).reduce((a,b)=>Number(a)+Number(b))\n\
    \  }\n  // ---------------------------\n  //Given a string, return the sum of\
    \ each character's position in the alphabet.\n  //Examples\n  // >>> solution('abc')\
    \ \n  // 6\n  // >>> solution('abba') \n  // 25\n  function solution(str){\n \
    \   let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    let arr = str.split('')\n\
    \    return arr.reduce((a,b)=>a+alphabet.indexOf(b)+1,0)\n  }\n  // ---------------------------\n\
    \  //Given an array of numbers, return the sum of each of the numbers multiplied\
    \ by their index.\n  //Examples\n  // >>> solution([0, 1, 2, 3]) \n  // 14\n \
    \ // >>> solution([1, 2, 3, 4]) \n  // 20\n  function solution(lst){\n    return\
    \ lst.reduce((a,b,i)=>a+b*i,0)\n  }\n  // ---------------------------\n  //Given\
    \ an array of numbers, return the sum of the sum of each of the digits of each\
    \ number.\n  //Examples\n  // >>> solution([1, 1, 2, 3]) \n  // 10\n  // >>> solution([1,\
    \ 10, 100]) \n  // 6\n  function solution(lst){\n    return lst.reduce((a,b)=>a+b.toString().split('').reduce((a,b)=>Number(a)+Number",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n", "  if(lst.length < 2) return 0;\n  let sum\
    \ = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i] % 2 === 1) sum\
    \ += lst[i];\n  }\n  return sum;\n}\n", "    let evenSum = 0;\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n   \
    \         evenSum += lst[i];\n        }\n    }\n    return evenSum;\n}\n", " \
    \ let result = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 0 &&\
    \ lst[i] % 2 == 1){\n      result += lst[i];\n    }\n  }\n  return result;\n}",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    let oddSum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0 && lst[i] % 2 == 1){\n            oddSum += lst[i];\n \
    \       }\n    }\n    return oddSum;\n}\n", "    //coding and coding..\n    let\
    \ result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}", "    return lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((acc,val)=>acc+val)\n\
    \  }\n", "    //coding and coding..\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "  // Your code here\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for(i\
    \ = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    // Write your code here\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    let result = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let total = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n\
    \            total += lst[i];\n        }\n    }\n    return total;\n}\n", "  \
    \  // Write your code here\n    var res = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 != 0 && lst[i] % 2 != 0){\n            res += lst[i];\n\
    \        }\n    }\n    return res;\n}", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}", "  return lst.filter((ele,\
    \ idx) => idx % 2 === 1 && ele % 2 === 1).reduce((acc, cur) => acc + cur, 0)\n\
    }", "    //coding and coding..\n    let ans = 0;\n    lst.forEach((value, index)\
    \ => {\n        if(value % 2 === 1 && index % 2 === 0) {\n            ans += value;\n\
    \        }\n    });\n    return ans;\n}", "    let res = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n      \
    \      res += lst[i];\n        }\n    }\n    return res;\n}", "    //coding and\
    \ coding..\n    var result = 0;\n    lst.forEach((element, index) => {\n     \
    \   if(element % 2 !== 0 && index % 2 === 0){\n            result += element;\n\
    \        }\n    });\n    return result;\n}", "    let newArr = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n\
    \            newArr.push(lst[i]);\n        }\n    }\n    let sum = newArr.reduce((acc,\
    \ curr) => {\n        return acc + curr;\n    }, 0);\n    return sum;\n}\n", " \
    \   let sum = 0;\n    let oddNum = false;\n    for(i = 0; i < lst.length; i++)\
    \ {\n        if(lst[i] % 2 !== 0 && oddNum === false) {\n            sum += lst[i];\n\
    \            oddNum = true;\n        } else if(lst[i] % 2 === 0 && oddNum ===\
    \ true) {\n            sum += lst[i];\n            oddNum = false;\n        }\n\
    \    }\n    return sum;\n}", "    var result = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "  let sum = 0;\n  for(let i = 0;\
    \ i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n", "    //coding and coding..\n    return\
    \ lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) => a + b, 0);\n\
    }\n", "    var evens = lst.filter(function(val, i){\n        return i % 2 ===\
    \ 0;\n    });\n    var odds = evens.filter(function(val){\n        return val\
    \ % 2 === 1;\n    });\n    return odds.reduce(function(prev, curr){\n        return\
    \ prev + curr;\n    });\n}\n", "    if(lst.length < 1){\n        return undefined;\n\
    \    }\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}\n", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    return lst.filter((item, index) =>\
    \ index % 2 === 1 && item % 2 === 1).reduce((acc, curr) => acc + curr);\n  }",
  "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 ==\
    \ 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if (i % 2 === 0){\n            if (lst[i] % 2 !== 0){\n                sum\
    \ += lst[i];\n            }\n        }\n    }\n    return sum;\n}\n", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    if (lst.length === 0) return 0;\n    const isEven = i => i %\
    \ 2 === 0;\n    const isOdd = i => i % 2 !== 0;\n    const evenPositioned = lst.filter((_,\
    \ i) => isEven(i));\n    const sumOdd = evenPositioned.filter(isOdd).reduce((acc,\
    \ curr) => acc + curr, 0);\n    return sumOdd;\n}\n", "    // set a count to keep\
    \ track of the index\n    let count = 0;\n    // set an accumulator to keep the\
    \ sum\n    let acc = 0;\n    // iterate over the list\n    for(let elem of lst){\n\
    \        // check if the element is odd\n        if(elem % 2 !== 0){\n       \
    \     // if it is check if the count is even and add it to the accumulator if\
    \ so\n            if(count % 2 === 0){\n                acc += elem;\n       \
    \     }\n        }\n        // increment the count\n        count++;\n    }\n\
    \    // return the accumulator\n    return acc;\n}\n", "    return lst.filter((x,i)=>i%2!==0).filter(x=>x%2!==0).reduce((a,b)=>a+b)\n\
    }", "    var sum = 0;\n    var count = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(count % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n        count++;\n    }\n    return sum;\n}\n", "  return lst.filter((num,idx)=>\
    \ idx % 2 === 1 && num % 2 === 1).reduce((acc,num)=>acc+num,0)\n}\n", "    if\
    \ (lst.length === 0) return 0;\n    // return lst.reduce((acc, cv, idx) => acc\
    \ + (idx % 2 === 0 && cv % 2 === 1 ? cv : 0), 0);\n    let res = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 === 1)\
    \ {\n            res += lst[i];\n        }\n    }\n    return res;\n}\n", "  \
    \  var sum = 0;\n    for(var i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    if (lst.length==0) return 0;\n    var a = lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((a,b)=>a+b,0);\n\
    \    return a;\n  }", "    if (lst.length === 0) {\n        return 0;\n    }\n\
    \    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i %\
    \ 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    // Your code here\n    let lstEven = lst.filter((num,\
    \ index) => index % 2 === 0);\n    let lstOdd = lstEven.filter(num => num % 2\
    \ !== 0);\n    return lstOdd.reduce((acc, num) => acc + num, 0);\n  }\n  \n  //\
    \ Given a list of integers, return the sum of every element multiplied by its\
    \ index.\n  // Examples\n  // >>> solution([10, 3, 7, 8]) \n  // 69\n  // >>>\
    \ solution([10, 3, 7, 8, 11, 3, 5, 2]) \n  // 144\n  function solution(lst){\n\
    \    // Your code here\n    return lst.reduce((acc, num, index) => acc + num *\
    \ index, 0);\n  }\n  \n  // Given a list of integers, return a list of integers\
    \ with the duplicates removed.\n  // Examples\n  // >>> solution([8, 8, 9, 10,\
    \ 10, 10, 11, 11, 11, 11, 12, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 17,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18,", "  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for(let i = 0; i\
    \ < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}", "    //coding and coding..\n    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0\
    \ && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  //Code Here\n}\n", "\tlet sum = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif (i % 2 === 0 && lst[i] % 2 !== 0){\n\t\t\tsum += lst[i];\n\t\t\
    }\n\t}\n\treturn sum;\n}", "    if(!lst.length) return 0;\n    return lst.filter((_,\
    \ i) => i % 2 === 1 && _ % 2 !== 0).reduce((acc, x) => acc + x);\n  }", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 &&\
    \ lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "  if(lst.length == 0) return 0;\n  else {\n    var sum = 0;\n   \
    \ for(var i = 0; i < lst.length; i++){\n      if(i % 2 != 0 && lst[i] % 2 != 0)\
    \ sum += lst[i];\n    }\n    return sum;\n  }\n}", "    return lst.filter((el,\
    \ i) => i % 2 === 0 && el % 2 !== 0).reduce((acc, el) => acc + el, 0)\n}\n", " \
    \   let count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            count += lst[i];\n        }\n    }\n\
    \    return count;\n}\n", "    // Write your code here...\n    let oddList = []\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 && lst[i] % 2\
    \ != 0){\n            oddList.push(lst[i])\n        }\n    }\n    return oddList.reduce((a,b)\
    \ => a + b, 0)\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "  return lst.filter((x,i) => i % 2).reduce((a,b)\
    \ => a + b);\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "  return lst.filter((_, i) => i % 2 ===\
    \ 1).reduce((acc, curr) => acc + curr * (curr % 2), 0);\n}", "    if(lst.length\
    \ === 0) return 0;\n    let newLst = lst.filter((el, index) => el % 2 !== 0 &&\
    \ index % 2 === 0)\n    return newLst.reduce((acc, curr) => acc + curr)\n}\n",
  "    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\n", "  let total = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      total += lst[i];\n  \
    \  }\n  }\n  return total;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i += 2){\n        if(lst[i] % 2 == 1){\n            sum += lst[i];\n       \
    \ }\n    }\n    return sum;\n}\n", "    return lst.filter((v, i) => v % 2 == 1\
    \ && i % 2 == 0).reduce((a, b) => a + b, 0);\n}\n", "  let newArr = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n   \
    \   newArr.push(lst[i]);\n    }\n  }\n  return newArr.reduce((acc, el) => acc\
    \ + el, 0);\n}\n", "    return lst.filter((x, index) => index % 2 === 1 && x %\
    \ 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  var total = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      total\
    \ += lst[i];\n    }\n  }\n  return total;\n}", "  var sum = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(i % 2 == 0 && lst[i] % 2 == 1){\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}", "    let oddSum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n\
    \            oddSum += lst[i];\n        }\n    }\n    return oddSum;\n}\n", " \
    \   let evenOdd = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 !== 0){\n            evenOdd.push(lst[i]);\n        }\n    }\n    let odd\
    \ = evenOdd.filter(function(num){\n        return num % 2 !== 0;\n    })\n   \
    \ let oddSum = odd.reduce(function(a, b){\n        return a + b;\n    }, 0)\n\
    \    return oddSum;\n  }", "\treturn lst.filter((num, index) => {\n\t\treturn\
    \ num % 2 === 1 && index % 2 === 0;\n\t}).reduce((acc, val) => {\n\t\treturn acc\
    \ + val;\n\t}, 0);\n}\n", "    let odd = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            odd += lst[i];\n\
    \        }\n    }\n    return odd;\n}", "  var result = 0;\n  for(var i = 0; i\
    \ < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}", "  let lst2 = lst.filter((el,i)=>i%2==0\
    \ && el%2==1);\n  let sum = lst2.reduce((acc, el)=> acc + el);\n  return sum;\n\
    }\n", "    return lst.filter((n, i) => n % 2 == 1 && i % 2 == 0).reduce((a, n)\
    \ => a + n, 0);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the difference between the largest and smallest\
    \ numbers in the list.\n  // Examples\n  // >>> solution([2, 5, 9, 12, 1]) \n\
    \  // 11\n  // >>> solution([1, 2, 3, 4, 5]) \n  // 4\n  function solution(lst){\n\
    \    return Math.max(...lst) - Math.min(...lst);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of each number in the list, but\
    \ only if it is divisible by 3 or 5.\n  // Examples\n  // >>> solution([2, 3,\
    \ 8, 15, 1]) \n  // 24\n  // >>> solution([4, 5, 6, 7, 8]) \n  // 0\n  function\
    \ solution(lst){\n    return lst.filter(n => n % 3 == 0 || n % 5 == 0).reduce((a,\
    \ n) => a + n, 0);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of all of the numbers that are strictly\
    \ greater than 8.\n  // Examples\n  // >>> solution([2, 5, 9, 12, 1]) \n  // 23\n\
    \  // >>> solution([1, 2, 3, 4, 5]) \n  // 0\n  function solution(lst){\n    return\
    \ lst.filter(n => n > 8).reduce((a, n) => a + n, 0);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of the first two numbers (if they\
    \ exist) plus the sum of the next two numbers (if they exist).\n  // Examples\n\
    \  // >>> solution([5, 4, 7, 8, 2]) \n  // 18\n  // >>> solution([2, 3, 1, 9,\
    \ 5]) \n  // 9\n  function solution(lst){\n    let sum = 0;\n    for (let i =\
    \ 0; i < lst.", "    return lst.filter((e,i)=>i%2==0&&e%2==1).reduce((a,c)=>a+c,0)\n\
    }\n", "    var oddSum = 0;\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(i % 2 === 0 && lst[i] % 2 === 1){\n            oddSum += lst[i];\n      \
    \  }\n    }\n    return oddSum;\n}\n", "  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    //coding and coding..\n    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++) {\n        if(i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    //coding and coding....\n    return lst.filter((x,i)=>i%2===0).filter(x=>x%2===1).reduce((a,b)=>a+b,0)\n\
    }", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}", "    if(lst.length == 0) return 0;\n    let res = 0;\n   \
    \ for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 && lst[i] % 2 !=\
    \ 0){\n            res += lst[i];\n        }\n    }\n    return res;\n}\n", " \
    \   let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}", "    let sum = 0;\n    let even = lst.filter((element,\
    \ index) => index % 2 === 0)\n    sum = even.reduce((acc, element) => element\
    \ % 2 !== 0 ? acc + element : acc, 0)\n    return sum\n}\n", "    let i = 0;\n\
    \    let sum = 0;\n    for(i; i < lst.length; i++){\n        if(lst[i] % 2 !==\
    \ 0 && i % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for(i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}", "    // Insert solution here\n    let newArr = []\n\
    \    for(let i = 0; i < lst.length; i++) {\n        if(i % 2 === 0 && lst[i] %\
    \ 2 !== 0) {\n            newArr.push(lst[i])\n        }\n    }\n    return newArr.reduce((a,\
    \ b) => a + b, 0)\n}\n", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  var result = 0;\n  for(var i = 0; i < lst.length; i+=2){\n\
    \    if(lst[i] % 2 != 0){\n      result+=lst[i];\n    }\n  }\n  return result;\n\
    }", "    var oddTotal = 0;\n    for(var i = 0; i < lst.length; i+=2){\n      \
    \  if(lst[i] % 2 !== 0){\n            oddTotal += lst[i];\n        }\n    }\n\
    \    return oddTotal;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    let sum = 0;\n    for(i=0; i<lst.length;\
    \ i++){\n        if(i%2==0 && lst[i]%2==1){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "  //TODO: complete the solution, return\
    \ an integer\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  //your code here\n  let x = 0;\n  let y = 0;\n  while (y < lst.length)\
    \ {\n    if (lst[y] % 2 === 1 && y % 2 === 0) {\n      x += lst[y];\n    }\n \
    \   y++;\n  }\n  return x;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}", "  return lst.filter((item,\
    \ index) => item % 2 === 1 && index % 2 === 0).reduce((total, current) => total\
    \ + current, 0);\n}", "    let total = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}\n", "  //coding and coding..\n   var sum\
    \ = 0;\n   for(var i = 1; i < lst.length; i+=2){\n       if(lst[i] % 2 !== 0){\n\
    \           sum+=lst[i];\n       }\n   }\n   return sum;\n}", "  var sum = 0;\n\
    \  for(var i = 0; i < lst.length; i++){\n    if (i % 2 !== 0 && lst[i] % 2 !==\
    \ 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  //#1 way\n  var\
    \ n = 0;\n  for(var i = 0; i < lst.length; i++) {\n    if(i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n      n += lst[i];\n    }\n  }\n  return n;\n  \n  //#2 way\n \
    \ var oddPos = [];\n  var evenPos = [];\n  for(var i = 0; i < lst.length; i++)\
    \ {\n    if(i % 2 == 0) {\n      oddPos.push(lst[i]);\n    }\n    else {\n   \
    \   evenPos.push(lst[i]);\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < oddPos.length;\
    \ i++) {\n    if(oddPos[i] % 2 != 0) {\n      sum += oddPos[i];\n    }\n  }\n\
    \  return sum;\n}", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n\
    \    if(i % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "\n}\n", "  var even_indices = [];\n  var odd_sum = 0;\n\
    \  for (var i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even_indices.push(lst[i]);\n\
    \    }\n  }\n  for (var j = 0; j < even_indices.length; j++) {\n    if (even_indices[j]\
    \ % 2 !== 0) {\n      odd_sum += even_indices[j];\n    }\n  }\n  return odd_sum;\n\
    }", "    var lst2 = lst.filter(function(e,i) {\n        return i % 2 !== 0;\n\
    \    });\n    lst2 = lst2.filter(function(e) {\n        return e % 2 === 1;\n\
    \    });\n    return lst2.reduce(function(a,b) {\n        return a + b;\n    });\n\
    };", "    // good luck!\n    let count = 0;\n    lst.forEach((ele,i)=>{\n    \
    \    if(i%2 !== 0 && ele%2 !== 0){\n            count += ele;\n        }\n   \
    \ })\n    return count;\n  }", "  var sum = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "    return lst.filter((val, index) => index % 2 != 0 &&\
    \ val % 2 != 0).reduce((acc, val) => acc + val);\n};", "  let result = 0;\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n   \
    \   result += lst[i];\n    }\n  }\n  return result;\n}\n", "    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 0 && lst[i] % 2\
    \ == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
  "    return lst.filter((element, index) => index % 2 === 0 && element % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}", "  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}", "  var s = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if(i % 2 != 0 && lst[i] % 2 != 0) {\n      s += lst[i];\n    }\n  }\n\
    \  return s;\n}\n", "    let sum = 0;\n    let pos = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(pos % 2 == 0 && lst[i] % 2 != 0){\n        \
    \    sum += lst[i];\n        }\n        pos++;\n    }\n    return sum;\n}\n",
  "    var odds = lst.filter(function(num, i){\n        return (i % 2 !== 0) && (num\
    \ % 2 !== 0);\n    });\n    return odds.reduce(function(acc, num){\n        return\
    \ acc + num;\n    }, 0);\n}\n", "    return lst.filter((n, i) => i % 2 === 1 &&\
    \ n % 2 === 1).reduce((a, b) => a + b, 0);\n}", "    let sum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    //YOUR\
    \ CODE HERE\n    let oddSum = 0;\n    for (let i = 0; i < lst.length; i++){\n\
    \        if (i % 2 !== 0 && lst[i] % 2 !== 0){\n            oddSum += lst[i];\n\
    \        }\n    }\n    return oddSum;\n}\n", "    let sum = 0;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n \
    \           sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 &&\
    \ lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n", "    return lst.filter((item,index)=>(index % 2\
    \ == 0 && item % 2 !== 0)).reduce((a,b)=>a+b,0)\n  }\n  solution([5, 8, 7, 1]) ",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.filter((num, index)\
    \ => index % 2 === 0).filter(num => num % 2 !== 0).reduce((acc, current) => acc\
    \ + current, 0);\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    return lst.filter((x,i)=>i%2!==0).filter(x=>x%2!==0).reduce((a,b)=>a+b)\n\
    }\n", "    let accum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            accum += lst[i];\n        }\n \
    \   }\n    return accum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "  var total = 0;\n  for(var i = 0; i\
    \ < lst.length; i++){\n    if(i % 2 == 0 && lst[i] % 2 != 0){\n      total +=\
    \ lst[i];\n    }\n  }\n  return total;\n}\n", "    //coding and coding..\n   \
    \ let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "  return lst.filter((val, i) => {\n    return (i + 1) % 2 === 0 &&\
    \ val % 2 !== 0;\n  }).reduce((sum, val) => {\n    return sum + val;\n  }, 0);\n\
    }", "  return lst.filter((e,i)=>i%2 && e%2).reduce((a,b)=>a+b,0)\n}", "    //\
    \ only change code below this line\n    let sum = 0;\n    let even = false;\n\
    \    for(let i = 0; i < lst.length; i++){\n      if(even){\n        sum += lst[i];\n\
    \      }\n      even = !even;\n    }\n    return sum;\n    // only change code\
    \ above this line\n  }", "    // Your code here\n}", "    var sum = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  // Type\
    \ your solution here\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "    if (lst.length === 0) {\n        return\
    \ 0;\n    }\n    let total = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}", "    return lst.filter((x, i) => x %\
    \ 2 && i % 2).reduce((a, b) => a + b, 0);\n}\n", "    return lst.filter((a,b)=>b%2!=0).filter(a=>a%2!=0).reduce((a,b)=>a+b,0)\n\
    }", "  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0)\n}", "  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i+=2){\n    if(lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }", "    let evens = lst.filter((e, i) => i % 2 === 0);\n    let odds = evens.filter(e\
    \ => e % 2 !== 0);\n    return odds.reduce((acc, i) => acc + i);\n}", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 &&\
    \ lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    var finalSum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0 && lst[i] % 2 == 1){\n            finalSum += lst[i];\n\
    \        }\n    }\n    return finalSum;\n}\n", "  if(lst.length == 0) return 0;\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", " \
    \   return lst.filter((e, i) => i % 2 == 0 && e % 2 != 0).reduce((acc, cur) =>\
    \ acc + cur, 0)\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "    let odds = 0;\n    let count = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(count % 2 === 0 && lst[i]\
    \ % 2 === 1){\n            odds += lst[i];\n        }\n        count++;\n    }\n\
    \    return odds;\n}", "    let oddNumber = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            oddNumber +=\
    \ lst[i];\n        }\n    }\n    return oddNumber;\n}\n", "    let sum = 0;\n\
    \    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n  \
    \          sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0 && lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 === 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "  return lst.filter((num,idx)=>(idx%2===0\
    \ && num%2!==0)).reduce((x,y)=>x+y,0)\n}", "  let sum = 0;\n  for(i=0; i<lst.length;\
    \ i++){\n    if(i%2 !== 0 && lst[i]%2 !== 0){\n      sum += lst[i];\n    }\n \
    \ }\n  return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "\treturn lst.filter((el, idx) => el\
    \ % 2 !== 0 && idx % 2 === 0).reduce((a, b) => a + b);\n}", "    var temp = [];\n\
    \    var odd = [];\n    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 === 0){\n            temp.push(lst[i]);\n        }\n    }\n\
    \    for(var j = 0; j < temp.length; j++){\n        if(temp[j] % 2 !== 0){\n \
    \           odd.push(temp[j]);\n        }\n    }\n    for(var k = 0; k < odd.length;\
    \ k++){\n        result += odd[k];\n    }\n    return result;\n}", "    let oddElementsInEvenPositions\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1\
    \ && i % 2 === 0){\n            oddElementsInEvenPositions += lst[i];\n      \
    \  }\n    }\n    return oddElementsInEvenPositions;\n}\n", "    // Your code here\n\
    \    let arr = lst.filter((v, i) => {\n      return i % 2 === 0 && v % 2 !== 0;\n\
    \    })\n    let sum = arr.reduce((acc, cur) => {\n      return acc + cur;\n \
    \   }, 0)\n    return sum;\n  }", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
