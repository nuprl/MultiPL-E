name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the list l.\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["\tvar middle = Math.floor(l.length/2);\n\tif(l.length % 2){\n\t\treturn\
    \ l[middle];\n\t}\n\telse{\n\t\treturn (l[middle-1] + l[middle]) / 2.0;\n\t}\n\
    }\n", "    var mid = l.length / 2;\n    l.sort();\n    if(l.length % 2 == 0){\n\
    \        return (l[mid] + l[mid-1]) / 2;\n    }\n    else{\n        return l[Math.floor(mid)];\n\
    \    }\n}\n", "    return mean(l);\n}\n", "\tvar med;\n\t//First, we sort the\
    \ list.\n\tvar sorted = l.sort(function(a,b){return a-b});\n\t\n\t//If there are\
    \ an even number of elements, then the median is just the average of the two middle\
    \ elements.\n\tif (sorted.length % 2 == 0){\n\t\tmed = (sorted[sorted.length/2-1]\
    \ + sorted[sorted.length/2])/2;\n\t}\n\t//If there are an odd number of elements,\
    \ then the median is the middle element.\n\telse{\n\t\tmed = sorted[(sorted.length+1)/2-1];\n\
    \t}\n\treturn med;\n}\n", "    var s = l.sort(function(a,b){return a-b;});\n \
    \   var len = s.length;\n    if(len % 2 != 0){\n        return s[Math.floor(len/2)];\n\
    \    }\n    return (s[len/2 - 1] + s[len/2])/2;\n}\n", "\tvar m = 0;\n\tl.sort(numSort);\n\
    \tif(l.length % 2 == 0){\n\t\tm = (l[l.length/2] + l[l.length/2 - 1])/2;\n\t}else{\n\
    \t\tm = l[(l.length - 1)/2];\n\t}\n\treturn m;\n}\n", "\tvar tempL = l.slice(0,l.length);\n\
    \ttempL.sort(function(a,b){return a-b});\n\tvar m = (tempL.length - 1)/2;\n\t\
    if(Math.floor(m) === m){return tempL[m];}\n\telse{return (tempL[Math.floor(m)]\
    \ + tempL[Math.ceil(m)])/2;}\n}\n", "  if(l.length === 0) return NaN;\n  var sorted\
    \ = l.sort();\n  var mid = Math.floor(sorted.length/2);\n  return sorted.length\
    \ % 2 === 0 ? (sorted[mid]+sorted[mid-1])/2 : sorted[mid];\n}\n", "\tvar median=[];\n\
    \tmedian=l.sort(function(a,b){return a-b});\n\tif(median.length%2==0){\n\t\treturn((median[median.length/2-1]+median[median.length/2])/2);\n\
    \t}\n\telse{\n\t\treturn(median[Math.floor(median.length/2)]);\n\t}\n}\n", "\t\n\
    \tvar sorted = l.sort(function(a,b){return a-b});\n\tvar len = sorted.length;\n\
    \tvar median;\n\tif(len%2 != 0){\n\t\tmedian = sorted[Math.floor(len/2)];\n\t\
    }\n\telse{\n\t\tmedian = (sorted[len/2-1] + sorted[len/2])/2;\n\t}\n\treturn median;\n\
    }\n", "\tif(l.length == 0) return 0;\n\tvar median = 0;\n\tif(l.length % 2 ==\
    \ 0){\n\t\tmedian = (l[l.length/2-1] + l[l.length/2])/2;\n\t}else{\n\t\tmedian\
    \ = l[(l.length-1)/2];\n\t}\n\treturn median;\n}\n", "    var n = l.length;\n\
    \    var temp;\n    for(var i = n-1; i > 0; i--){\n        for(var j = 0; j <\
    \ i; j++){\n            if(l[j] > l[j+1]){\n                temp = l[j];\n   \
    \             l[j] = l[j+1];\n                l[j+1] = temp;\n            }\n\
    \        }\n    }\n    if(n%2 == 0){\n        return l[n/2];\n    }\n    else{\n\
    \        return l[(n-1)/2];\n    }\n}\n", "    l.sort(function(a,b){return a-b});\n\
    \    var even = (l.length % 2 == 0);\n    if(even){\n        return (l[l.length/2]\
    \ + l[l.length/2-1])/2;\n    }\n    else{\n        return l[Math.floor(l.length/2)];\n\
    \    }\n}\n", "  //Find median of l.\n  var len = l.length;\n  if(len % 2 == 0){\n\
    \    //If even, return average of the two middle elements.\n    return (l[len/2-1]\
    \ + l[len/2])/2;\n  }else{\n    //Otherwise, return the middle element.\n    return\
    \ l[Math.floor(len/2)];\n  }\n}\n", "\tsort(l);\n\t\n\tvar len = l.length;\n\t\
    var mid = len >> 1;\n\t\n\tif((len & 1) == 1){\n\t\treturn l[mid];\n\t}\n\telse{\n\
    \t\treturn (l[mid - 1] + l[mid]) >> 1;\n\t}\n}\n", "    let l_sorted = l.sort();\n\
    \    let l_len = l_sorted.length;\n    let l_mid = Math.floor(l_len/2);\n    if(l_len%2==0){\n\
    \        return (l_sorted[l_mid-1]+l_sorted[l_mid])/2;\n    }else{\n        return\
    \ l_sorted[l_mid];\n    }\n}\n", "    var sorted_l = l.sort(function(a,b){return\
    \ a-b;});\n    return (sorted_l[Math.floor(sorted_l.length/2)] + sorted_l[Math.ceil(sorted_l.length/2)])/2;\n\
    }\n", "\tif(l.length == 0)\n\t\treturn 0;\n\tif(l.length % 2 == 0)\n\t\treturn\
    \ (l[l.length/2] + l[l.length/2 - 1])/2;\n\telse\n\t\treturn l[Math.floor(l.length/2)];\n\
    }\n", "\tvar vals = l.sort();\n\tvar half = Math.floor(vals.length/2);\n\t\n\t\
    if(vals.length % 2){\n\t\treturn vals[half];\n\t}\n\telse{\n\t\treturn (vals[half-1]\
    \ + vals[half]) / 2.0;\n\t}\n}\n", "  l.sort(function(a,b){return a-b});\n  var\
    \ mid = l.length/2;\n  if(l.length%2==0){\n    return l[mid-1]\n  }\n  else{\n\
    \    return l[Math.floor(mid)]\n  }\n}\n", "  var m = 0;\n  var s = sum(l);\n\
    \  if(l.length == 0){\n    return m;\n  }else if(l.length == 1){\n    return s;\n\
    \  }else if(l.length % 2 != 0){\n    return select(l, 0, l.length - 1, Math.ceil(l.length\
    \ / 2));\n  }else{\n    return (select(l, 0, l.length - 1, Math.ceil(l.length\
    \ / 2)) + select(l, 0, l.length - 1, Math.ceil(l.length / 2) + 1)) / 2;\n  }\n\
    }\n", "\tif(l.length == 0) return 0;\n\tvar half = Math.floor(l.length/2);\n\t\
    if(l.length % 2) return l[half];\n\telse return (l[half-1] + l[half]) / 2.0;\n\
    }\n", "    //If l is empty, return null\n    if(l.length == 0){\n        return\
    \ null;\n    }\n    //If l has an even number of elements, return the mean of\
    \ the two elements in the middle of the list.\n    if(l.length % 2 == 0){\n  \
    \      var m1 = l[(l.length/2)-1];\n        var m2 = l[(l.length/2)];\n      \
    \  return (m1+m2)/2;\n    }\n    //If l has an odd number of elements, return\
    \ the middle element.\n    else {\n        return l[Math.floor(l.length/2)];\n\
    \    }\n}\n", "\tl.sort(function(a,b){return a-b});\n\tif(l.length%2 === 0){\n\
    \t\treturn (l[l.length/2] + l[l.length/2-1])/2;\n\t}else{\n\t\treturn l[(l.length-1)/2];\n\
    \t}\n}\n", "    var m = Math.floor(l.length/2);\n    return l.length % 2 ? l[m]\
    \ : (l[m-1] + l[m]) / 2.0;\n}\n", "    let n = l.length;\n    let sortL = l.sort(function(a,\
    \ b){return a-b});\n    if(n%2 == 0){\n        let median = (sortL[(n/2)-1] +\
    \ sortL[n/2])/2;\n        return median;\n    }else{\n        let median = sortL[Math.floor(n/2)];\n\
    \        return median;\n    }\n}\n", "    var size = l.length;\n    var result\
    \ = 0;\n    if(size % 2 == 0){\n        var midIndex = (size/2) - 1;\n       \
    \ result = (l[midIndex] + l[midIndex + 1])/2;\n    }\n    else{\n        var midIndex\
    \ = (size-1)/2;\n        result = l[midIndex];\n    }\n    return result;\n}\n",
  "  l.sort(function(a,b){return a-b;});\n  var mid = l.length/2;\n  if(Number.isInteger(mid)){\n\
    \    return (l[mid-1]+l[mid])/2;\n  }\n  else{\n    return l[Math.floor(mid)];\n\
    \  }\n}\n", "  var sorted = l.sort(function(a,b){return a-b;});\n  var len = sorted.length;\n\
    \  if(len%2 == 0){\n    return (sorted[len/2-1]+sorted[len/2])/2;\n  }\n  else{\n\
    \    return sorted[Math.floor(len/2)];\n  }\n}\n", "  return l[Math.floor(l.length/2)];\n\
    }\n", "  var sorted = l.sort();\n  var len = sorted.length;\n  if(len % 2 == 0){\n\
    \    return (sorted[len/2-1] + sorted[len/2])/2;\n  }\n  else{\n    return sorted[parseInt(len/2)];\n\
    \  }\n}\n", "\tvar sorted = l.sort();\n\tif(sorted.length % 2 == 0){\n\t\tvar\
    \ right = (sorted.length - 2) / 2;\n\t\tvar left = right + 1;\n\t\treturn (sorted[right]\
    \ + sorted[left]) / 2;\n\t}\n\telse{\n\t\tvar middle = Math.floor(sorted.length\
    \ / 2);\n\t\treturn sorted[middle];\n\t}\n}\n", "    var m = Math.floor(l.length/2);\n\
    \    if(l.length % 2 == 0){\n        return (l[m] + l[m-1])/2;\n    }\n    else{\n\
    \        return l[m];\n    }\n}\n", "\tl.sort();\n\tvar median = Math.floor(l.length/2);\n\
    \treturn l[median];\n}\n", "    var l = quickSort(l);\n    if(l.length%2 == 0){\n\
    \        return (l[l.length/2] + l[l.length/2 - 1])/2;\n    }\n    else{\n   \
    \     return l[Math.floor(l.length/2)];\n    }\n}", "    //#YOUR CODE HERE\n \
    \   function max(a,b){\n        if(a<b){\n            return b;\n        }else{\n\
    \            return a;\n        }\n    }\n    function min(a,b){\n        if(a<b){\n\
    \            return a;\n        }else{\n            return b;\n        }\n   \
    \ }\n    function getMean(l){\n        if(length(l) == 0){\n            return\
    \ 0;\n        }else{\n            return getMean(tail(l)) + head(l);\n       \
    \ }\n    }\n    var len = length(l);\n    if(len % 2 == 0){\n        var el1 =\
    \ listRef(l,floor(len/2) - 1);\n        var el2 = listRef(l,floor(len/2));\n \
    \       return getMean(list(el1,el2));\n    }else{\n        return listRef(l,floor(len/2));\n\
    \    }\n}\n", "  l.sort();\n  var med = l.length/2;\n  if(l.length%2 == 0){\n\
    \    return (l[med-1]+l[med])/2;\n  }\n  else{\n    return l[med-0.5];\n  }\n\
    }\n", "\tif(l.length%2 == 0){\n\t\tvar mid = Math.floor(l.length/2);\n\t\treturn\
    \ (l[mid-1]+l[mid])/2;\n\t}\n\telse\n\t\treturn l[Math.floor(l.length/2)];\n}\n",
  "\tl.sort(function(a,b){return a-b});\n\tvar mid = Math.floor(l.length/2);\n\treturn\
    \ (l.length % 2 != 0) ? l[mid] : (l[mid-1] + l[mid]) / 2;\n}\n", "  var t = l.slice(0);\n\
    \  t.sort(function(a,b){return a-b});\n  return t[Math.floor(t.length/2)];\n}\n",
  "   // YOUR CODE HERE\n   var srt = l.sort();\n   var length = srt.length;\n   if\
    \ (length%2 === 0){\n       return ((srt[length/2]+srt[length/2-1])/2);\n   }\n\
    \   else{\n       return srt[Math.floor(length/2)];\n   }\n}\n", "  var m;\n \
    \ if(l.length%2==0){\n    m=(l[l.length/2]+l[l.length/2-1])/2;\n  }else{\n   \
    \ m=l[Math.floor(l.length/2)];\n  }\n  return m;\n}\n", "\tl.sort(compareNumbers);\n\
    \treturn l[Math.floor(l.length/2)];\n}\n", "    let len = l.length;\n    let mid\
    \ = Math.floor(len/2);\n    if(len % 2 === 0){\n        return (l[mid-1] + l[mid])/2;\n\
    \    }else{\n        return l[mid];\n    }\n}\n", "    //first sort l\n    let\
    \ lSorted = l.sort(function(a, b){return a-b});\n    //if number of elements is\
    \ odd\n    if(lSorted.length % 2 == 1){\n        return lSorted[(lSorted.length-1)/2];\n\
    \    }\n    //if number of elements is even\n    else{\n        let midUpper =\
    \ lSorted[lSorted.length/2];\n        let midLower = lSorted[(lSorted.length/2)-1];\n\
    \        return (midUpper + midLower)/2;\n    }\n}\n", "\treturn (l[Math.floor(l.length/2)]\
    \ + l[Math.ceil(l.length/2)])/2;\n}\n", "\tif(l.length == 0) return null;\n\t\
    l.sort(function(a,b){return a-b});\n\tif(l.length%2 == 0) return (l[l.length/2-1]+l[l.length/2])/2;\n\
    \telse return l[Math.floor(l.length/2)];\n}\n", "  if(isNaN(l[0])){\n    return\
    \ 0;\n  }\n  else{\n    return isOdd(l.length) ? l[Math.ceil(l.length/2)] : ((l[l.length/2]\
    \ + l[l.length/2 + 1])/2);\n  }\n}\n", "\tif(l.length==0)return 0;\n\tvar sorted\
    \ = l.sort(function(a,b){return a-b});\n\tvar middle = Math.floor(sorted.length/2);\n\
    \tif(sorted.length%2==0){\n\t\treturn (sorted[middle]+sorted[middle-1])/2;\n\t\
    }\n\telse{\n\t\treturn sorted[middle];\n\t}\n}\n", "    var len = l.length;\n\
    \    if(len % 2){\n        //Odd number of elements\n        return l[Math.floor(len/2)];\n\
    \    }\n    else{\n        //Even number of elements\n        return (l[len/2\
    \ - 1] + l[len/2]) / 2;\n    }\n}\n", "    return percentile(l,0.5);\n}\n", " \
    \ return l[Math.floor(l.length/2)];\n}\n", "    if(l.length === 0) {\n       \
    \ return 0;\n    }\n\n    var m = Math.floor(l.length / 2);\n    if(l.length %\
    \ 2){\n        return l[m];\n    } else {\n        return (l[m-1] + l[m]) / 2.0;\n\
    \    }\n}\n", "  let a = l.map(e=>e.toString()).sort((a,b)=>a>b);\n  let b = a.length;\n\
    \  let c = b/2;\n  return ((b%2)==0)?(parseInt(a[c-1])+parseInt(a[c]))/2:parseInt(a[c]);\n\
    }\n", "    if(l.length == 0)\n        return undefined;\n    else if(l.length\
    \ == 1)\n        return l[0];\n    else{\n        l.sort(sortNumber);\n      \
    \  var len = l.length;\n        if(len % 2 == 0)\n            return (l[(len /\
    \ 2)] + l[(len / 2) - 1]) / 2;\n        else\n            return l[(len - 1) /\
    \ 2];\n    }\n}\n", "\tif(l.length == 0)\n\t\treturn 0;\n\tif(l.length == 1)\n\
    \t\treturn l[0];\n\telse if(l.length == 2)\n\t\treturn (l[0] + l[1])/2;\n\telse{\n\
    \t\tvar length = l.length;\n\t\tif(length % 2 == 0){\n\t\t\tvar a = (length/2)-1;\n\
    \t\t\tvar b = length/2;\n\t\t\treturn (l[a] + l[b])/2;\n\t\t}\n\t\telse{\n\t\t\
    \tvar a = Math.floor(length/2);\n\t\t\treturn l[a];\n\t\t}\n\t}\n}\n", "\tl.sort(function(a,b){return\
    \ a-b});\n\tvar s = l.length;\n\tif(s%2){\n\t\treturn l[(s-1)/2];\n\t}\n\telse{\n\
    \t\treturn (l[s/2]+l[s/2-1])/2;\n\t}\n}\n", "    let t = l.slice();\n    t.sort((a,b)=>{return\
    \ a-b;});\n    if(t.length%2==0){\n        return (t[t.length/2]+t[t.length/2-1])/2;\n\
    \    }else{\n        return t[Math.floor(t.length/2)];\n    }\n}\n", "    var\
    \ median = 0,numElements = l.length;\n    l.sort();\n    if(numElements % 2 ===\
    \ 0){\n        median = (l[numElements/2 - 1] + l[numElements/2])/2;\n    }else{\n\
    \        median = l[(numElements - 1)/2];\n    }\n    return median;\n}", "\t\
    l.sort();\n\tvar l_len = l.length;\n\tif (l_len%2 == 0){\n\t\treturn (l[l_len/2]\
    \ + l[l_len/2-1])/2;\n\t}\n\telse{\n\t\treturn l[(l_len-1)/2];\n\t}\n}\n", " \
    \ let values = l.map(x => x.value);\n  return medianValue(values);\n}\n", "\t\
    var n = length(l);\n\tvar even = (n % 2 == 0);\n\tvar i = Math.floor(n / 2);\n\
    \tif(even){\n\t\treturn (nth(l, i - 1) + nth(l, i)) / 2;\n\t}else{\n\t\treturn\
    \ nth(l, i);\n\t}\n}\n", "    //bail if list is empty\n    if(l.length===0){\n\
    \        return NaN;\n    }\n    //this assumes the list is already sorted.\n\
    \    //it assumes the list is sorted in ascending order.\n    //if it is not,\
    \ then we'll return NaN and stop.\n    var sorted = true;\n    for(var i=0; i<l.length-1;\
    \ i++){\n        if(l[i]>l[i+1]){\n            sorted = false;\n            break;\n\
    \        }\n    }\n    if(!sorted){\n        return NaN;\n    }\n    //if the\
    \ list has an odd number of elements, return the middle element\n    if(l.length%2===1){\n\
    \        return l[Math.floor(l.length/2)];\n    }\n    //if the list has an even\
    \ number of elements, return the average of the two middle elements\n    else{\n\
    \        return (l[l.length/2]+l[l.length/2-1])/2;\n    }\n}", "  l.sort(function(a,b){\n\
    \    return a-b;\n  });\n  if(l.length%2 === 0){\n    return (l[l.length/2]+l[l.length/2-1])/2;\n\
    \  }else{\n    return l[Math.floor(l.length/2)];\n  }\n}\n", "\treturn quantile(l,\
    \ 0.5);\n}\n", "    l.sort(function(a,b){\n        return a-b;\n    });\n    var\
    \ half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n\
    \    else\n        return (l[half-1] + l[half]) / 2.0;\n}\n", "    return (l[Math.floor(l.length/2)]\
    \ + l[Math.ceil(l.length/2)])/2;\n}\n", "  l.sort();\n  var len = l.length;\n\
    \  var mid = len / 2;\n  if(l.length % 2 === 0){\n    return (l[mid] + l[mid -\
    \ 1]) / 2;\n  }\n  else{\n    return l[mid - 0.5];\n  }\n}\n", "    var m = l.length/2;\n\
    \    var r = Math.floor(m);\n    if(m==r){\n        return l[r];\n    }\n    else{\n\
    \        return (l[r]+l[r+1])/2;\n    }\n}\n\n", "\tvar sortedl = l.sort(function(a,b){return\
    \ a-b});\n\t//console.log(sortedl);\n\tvar idx = Math.floor(sortedl.length/2);\n\
    \treturn sortedl[idx];\n}\n", "\tvar s = l.sort(function(a,b){return a-b});\n\t\
    var m = s.length/2;\n\tif(m%1==0){\n\t\treturn s[m];\n\t}else{\n\t\treturn (s[Math.floor(m)]+s[Math.ceil(m)])/2;\n\
    \t}\n}\n", "\tif(l.length==0)\n\t\treturn -1;\n\telse{\n\t\tl.sort(sortNumber);\n\
    \t\tif(l.length%2==0)\n\t\t\treturn (l[l.length/2]+l[l.length/2-1])/2;\n\t\telse\n\
    \t\t\treturn l[parseInt(l.length/2)];\n\t}\n}\n", "\tvar arr = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tarr.push(l[i]);\n\t}\n\tarr.sort(function(a,b){return\
    \ a-b});\n\tvar len = arr.length;\n\tif(len % 2 == 0){\n\t\treturn (arr[len/2]\
    \ + arr[len/2-1])/2;\n\t}else{\n\t\treturn arr[(len+1)/2-1];\n\t}\n}\n", "\t//See\
    \ the tests for examples of how to find the median.\n\tvar n = l.length;\n\tvar\
    \ median;\n\tvar tmp = l.sort();\n\tif(n%2 == 0){\n\t\tmedian = (tmp[n/2-1] +\
    \ tmp[n/2])/2;\n\t}else{\n\t\tmedian = tmp[(n-1)/2];\n\t}\n\treturn median;\n\
    }\n", "    l.sort();\n    return l[Math.floor(l.length/2)];\n}\n", "\tl.sort(compare);\n\
    \tvar length = l.length;\n\tif(length%2 == 0){\n\t\treturn (l[length/2-1]+l[length/2])/2;\n\
    \t}\n\telse{\n\t\treturn l[Math.floor(length/2)];\n\t}\n}\n", "    return l[Math.floor(l.length/2)];\n\
    }\n", "    if(isEmpty(l)){\n        return -1;\n    }\n    else{\n        var\
    \ list_2 = [];\n        var result = 0;\n        for(var i = 0; i < l.length;\
    \ i++){\n            if(i % 2 == 0){\n                list_2.push(l[i]);\n   \
    \         }\n        }\n        if(list_2.length % 2 == 0){\n            result\
    \ = (list_2[(list_2.length / 2) - 1] + list_2[list_2.length / 2]) / 2;\n     \
    \   }\n        else{\n            result = list_2[Math.floor(list_2.length / 2)];\n\
    \        }\n        return result;\n    }\n}\n", "\treturn l[Math.floor(l.length/2)];\n\
    }\n", "\tif(l.length === 0) return 0;\n\tvar x = l.sort();\n\tif(x.length%2 ===\
    \ 0){\n\t\treturn (x[x.length/2-1]+x[x.length/2])/2;\n\t}else{\n\t\treturn x[Math.round(x.length/2-1)];\n\
    \t}\n}\n", "\tl.sort(function(a,b){return a-b});\n\tif(l.length % 2){\n\t\treturn\
    \ l[(l.length-1)/2];\n\t}\n\telse{\n\t\treturn (l[l.length/2]+l[l.length/2-1])/2.0;\n\
    \t}\n}\n", "\tvar n = l.length;\n\tif(n%2==0){\n\t\treturn (l[n/2]+l[n/2-1])/2;\n\
    \t}else{\n\t\treturn l[(n-1)/2];\n\t}\n}\n", "    //sort the list l\n    l.sort(function(a,b){\n\
    \        return a-b;\n    });\n    if(l.length%2==0){\n        return (l[l.length/2]+l[l.length/2-1])/2;\n\
    \    }else{\n        return l[(l.length-1)/2];\n    }\n}\n", "\tvar n = l.length;\n\
    \tif(n%2 == 0){\n\t\treturn (l[n/2] + l[n/2 - 1])/2;\n\t}\n\telse{\n\t\treturn\
    \ l[(n-1)/2];\n\t}\n}\n", "\tl.sort(function(a,b){\n\t\treturn (a-b);\n\t});\n\
    \tvar len = l.length;\n\tif(len%2==0){\n\t\treturn (l[len/2-1]+l[len/2])/2;\n\t\
    }\n\telse{\n\t\treturn l[Math.floor(len/2)];\n\t}\n}\n\n", "  var med;\n  if(l.length\
    \ % 2 == 0){\n    med = (l[l.length/2-1] + l[l.length/2])/2;\n  }\n  else{\n \
    \   med = l[(l.length+1)/2-1];\n  }\n  return med;\n}\n", "\tl.sort(function(a,b){return\
    \ a-b});\n\tvar half = Math.floor(l.length/2);\n\tif(l.length % 2 == 0){\n\t\t\
    return (l[half-1] + l[half]) / 2.0;\n\t}\n\telse{\n\t\treturn l[half];\n\t}\n\
    }\n", "  return l[Math.floor(l.length/2)];\n}\n", "    if(l.length % 2 == 0){\n\
    \        return l[l.length/2];\n    }else{\n        var i = (l.length-1)/2;\n\
    \        return (l[i] + l[i+1])/2;\n    }\n}\n", "  //Sort list of numbers l.\n\
    \  l.sort(function(a,b){return a-b});\n  var n = l.length;\n  if(n==0){return\
    \ 0;}\n  if(n%2==0){\n    return (l[n/2]+l[n/2-1])/2;\n  }\n  else{\n    return\
    \ l[(n-1)/2];\n  }\n}\n", "  let new_l = l.sort(sortInt);\n  let median = 0;\n\
    \  let middle = Math.floor(new_l.length/2);\n  if(new_l.length % 2 === 0){\n \
    \   median = (new_l[middle] + new_l[middle-1])/2;\n  }\n  else{\n    median =\
    \ new_l[middle];\n  }\n  return median;\n}\n", "    var med = 0;\n    var n =\
    \ l.length;\n    var s = '';\n    for(var i = 0; i < n; i++){\n        s += l[i].toString();\n\
    \    }\n    if(n % 2 == 0){\n        var i1 = n/2;\n        var i2 = n/2 - 1;\n\
    \        return (medianHelper(s,i1) + medianHelper(s,i2))/2;\n    }else{\n   \
    \     var i = Math.floor(n/2);\n        return medianHelper(s,i);\n    }\n}\n",
  "  if(l.length==0) return 0;\n  l.sort();\n  if(l.length%2==0) return (l[l.length/2-1]+l[l.length/2])/2;\n\
    \  else return l[(l.length-1)/2];\n}\n", "  if(l.length === 0)\n    return null;\n\
    \  return percentile(l, 50);\n}\n", "    var m = len(l) / 2;\n    m = Math.floor(m);\n\
    \    return l[m];\n}\n", "    // ********** WRITE YOUR CODE HERE **********\n\t\
    var len = l.length;\n\tif(len == 0)\n\t\treturn;\n\tl.sort(function(a,b){return\
    \ a-b});\n\tif(len % 2 == 0)\n\t\treturn (l[len/2-1]+l[len/2])/2;\n\telse\n\t\t\
    return l[(len-1)/2];\n\t\n    // ********** END OF YOUR CODE **********\n}\n\n",
  "    return null;\n}\n", "  var m = (l.length - 1) / 2;\n  if(l.length % 2 === 0){\n\
    \    return (l[m] + l[m + 1]) / 2;\n  }else{\n    return l[Math.ceil(m)];\n  }\n\
    }\n\nvar k = 3;\n\nvar arr = [2, 3, 4, 5, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9, 8,\
    \ 9, 5, 6, 7, 9, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3", "\t//Sort the list.\n\
    \tvar sorted = l.sort();\n\tvar mid = Math.floor(sorted.length/2);\n\tif(sorted.length\
    \ % 2 == 0){\n\t\treturn (sorted[mid-1] + sorted[mid])/2;\n\t}\n\telse{\n\t\t\
    return sorted[mid];\n\t}\n}\n", "\tvar m=0;\n\tl.sort(function(a,b){return a-b});\n\
    \tif(l.length%2===0){\n\t\tm=parseInt((l[l.length/2]+l[l.length/2-1])/2);\n\t\
    }else{\n\t\tm=l[Math.floor(l.length/2)];\n\t}\n\treturn m;\n}\n", "  // Copy list\n\
    \  var l2 = l.slice();\n  var n = length(l2);\n  // Sort ascending\n  l2.sort(function(a,b){return\
    \ a-b;});\n  var m = length(l2);\n  // If odd: median is at position length(l)/2\
    \ + 1\n  if (mod(n,2) === 1){\n    return l2[(m-1)/2];\n  }\n  // If even: median\
    \ is the mean of element at position (length(l)/2 + 1) and\n  // (length(l)/2)\n\
    \  else{\n    return (l2[m/2] + l2[m/2-1])/2;\n  }\n}\n", "    l.sort(function(a,b){return\
    \ a-b});\n    var middle = Math.floor(l.length/2);\n    return l[middle];\n}\n",
  "\treturn l[Math.floor(l.length/2)];\n}\n", "    if(l.length % 2 == 0){\n      \
    \  return (l[l.length/2] + l[l.length/2 + 1])/2;\n    }\n    else {\n        return\
    \ l[(l.length + 1)/2];\n    }\n}\n\n", "\tvar i,\n\t\t\tsum = 0;\n\tif(l.length\
    \ % 2 == 0){\n\t\ti = (l.length - 2) / 2;\n\t\tsum = l[i] + l[i + 1];\n\t\treturn\
    \ sum / 2;\n\t}\n\telse{\n\t\ti = (l.length - 1) / 2;\n\t\treturn l[i];\n\t}\n\
    }\n", "    return (l[~~(l.length/2)] + l[~~((l.length-1)/2)])/2;\n}\n", "\tl.sort(function(a,b){return\
    \ a-b});\n\tif(l.length%2==0){\n\t\treturn (l[l.length/2-1]+l[l.length/2])/2;\n\
    \t}else{\n\t\treturn l[Math.floor(l.length/2)];\n\t}\n}\n", "    return quantile(l,\
    \ 0.5);\n}\n", "    if(l.length == 0)\n        return undefined;\n    if(l.length\
    \ == 1)\n        return l[0];\n    if(l.length % 2 == 0)\n        return (l[l.length/2]\
    \ + l[l.length/2 - 1])/2;\n    return l[Math.floor(l.length/2)];\n}\n", "\treturn\
    \ l[Math.floor(l.length/2)];\n}\n", "  var k = 0;\n  var i = 0;\n  var sum = 0;\n\
    \  var p = 0;\n  var len = l.length;\n  for(i = 0; i < len; i++){\n    k = l[i];\n\
    \    sum += k;\n  }\n  p = sum / len;\n  return p;\n}\n", "  var n = l.length;\n\
    \  if(n === 0)\n    return null;\n  else if(n % 2 === 0)\n    return (l[n/2-1]\
    \ + l[n/2])/2;\n  else\n    return l[Math.floor(n/2)];\n}\n", "    return quartile(l,2);\n\
    }\n", "    return percentile(l, 0.5);\n}\n", "    if(l.length === 0)\n       \
    \ return 0;\n    if(l.length === 1)\n        return l[0];\n    var m = l.sort(function(a,b){return\
    \ a-b;});\n    if(m.length % 2)\n        return m[Math.floor(m.length/2)];\n \
    \   else\n        return (m[m.length/2]+m[m.length/2-1])/2;\n}\n", "\tvar a =\
    \ l.sort();\n\tif(a.length % 2 == 0){\n\t\treturn a[a.length/2 - 1];\n\t}else{\n\
    \t\treturn a[Math.floor(a.length/2)];\n\t}\n}\n\n\n", "    var med = l.length/2;\n\
    \    if(l.length % 2 == 0){\n        return (l[med-1] + l[med])/2;\n    }\n  \
    \  else{\n        return l[Math.floor(med)];\n    }\n}\n", "    var sorted=l.sort(sortNumber);\n\
    \    if(sorted.length%2!=0){\n        return sorted[(sorted.length-1)/2];\n  \
    \  }\n    else{\n        return (sorted[(sorted.length/2)-1]+sorted[sorted.length/2])/2;\n\
    \    }\n}\n", "\tvar m = l.length/2;\n\tvar i = Math.floor(m);\n\tif(l.length\
    \ % 2 != 0){\n\t\treturn l[i];\n\t}\n\treturn (l[i-1] + l[i])/2;\n}\n", "\tvar\
    \ middle = Math.floor(l.length/2);\n\tif(l.length % 2){\n\t\treturn l[middle];\n\
    \t}\n\telse{\n\t\treturn (l[middle-1] + l[middle]) / 2.0;\n\t}\n}\n\n", "  if(l.length\
    \ == 0) return 0;\n  if(l.length == 1) return l[0];\n  l.sort(function(a,b){return\
    \ a-b});\n  if(l.length % 2 == 0){\n    return (l[l.length/2-1]+l[l.length/2])/2;\n\
    \  }\n  else{\n    return l[Math.floor(l.length/2)];\n  }\n}\n", "  // Your code\
    \ here\n  if(l.length == 0){\n    return null;\n  }else if(l.length % 2 == 0){\n\
    \    return (l[l.length/2-1] + l[l.length/2])/2;\n  }else{\n    return l[Math.floor(l.length/2)];\n\
    \  }\n}", "\tif(!l.length) return;\n\tvar n = l.sort(function(a,b){return a-b});\n\
    \tvar m = n.length/2;\n\tif(m%1) return n[m-.5];\n\treturn (n[m-1]+n[m])/2;\n\
    }\n", "  var temp = l.slice();\n  temp.sort(function(a,b){\n    return a-b;\n\
    \  });\n  var mid = temp.length/2;\n  if(temp.length%2 == 0){\n    return (temp[mid]+temp[mid-1])/2;\n\
    \  }\n  else{\n    return temp[Math.floor(mid)];\n  }\n}\n", "  return l[Math.floor(l.length/2)];\n\
    }\n", "    if(l.length == 0) return 0;\n    if(l.length == 1) return l[0];\n \
    \   l.sort(function(a,b){return a-b});\n    if(l.length % 2 == 0){\n        return\
    \ (l[l.length/2-1]+l[l.length/2])/2;\n    }\n    else{\n        return l[Math.floor(l.length/2)];\n\
    \    }\n}\n", "    let m;\n    if(l.length%2 == 0){\n        m = (l[l.length/2]\
    \ + l[l.length/2 - 1])/2;\n    }else{\n        m = l[Math.floor(l.length/2)];\n\
    \    }\n    return m;\n}\n", "    return (l[Math.floor(l.length/2)]+l[Math.ceil(l.length/2)])/2;\n\
    }\n", "  var sorted = [...l].sort((a,b)=>a-b);\n  if(sorted.length == 0)\n   \
    \ return;\n  if(sorted.length % 2 == 0)\n    return (sorted[sorted.length/2-1]\
    \ + sorted[sorted.length/2])/2;\n  else\n    return sorted[Math.floor(sorted.length/2)];\n\
    }\n", "\treturn l[l.length/2];\n}\n", "\tl.sort(function(a,b){return a-b;});\n\
    \tif(l.length%2 == 0){\n\t\treturn (l[(l.length/2)-1]+l[l.length/2])/2;\n\t}\n\
    \telse{\n\t\treturn l[(l.length-1)/2];\n\t}\n}\n", "\tif(l.length == 0)\n\t\t\
    return 0;\n\tl.sort();\n\tvar m = l.length;\n\tif(m % 2 == 0)\n\t\treturn (l[m/2]\
    \ + l[m/2-1])/2;\n\telse\n\t\treturn l[(m-1)/2];\n}\n", "\treturn l[l.length/2];\n\
    }\n", "    return l[l.length >> 1];\n}\n", "\t//Sort the list\n\tvar l = l.sort();\n\
    \tvar len = l.length;\n\t//Check if list is empty\n\tif(len == 0){\n\t\treturn;\n\
    \t}\n\t//Check if list is even\n\tif(len % 2 == 0){\n\t\t//If even, take average\
    \ of middle two elements\n\t\tvar median = (l[len/2] + l[len/2 - 1])/2;\n\t}\n\
    \telse{\n\t\t//If odd, take middle element\n\t\tvar median = l[Math.floor(len/2)];\n\
    \t}\n\treturn median;\n}\n", "    var mid = (l.length - 1) / 2;\n    mid = Math.floor(mid);\n\
    \    return l[mid];\n}\n", "  var l2 = l.slice(0);//Copy the list, because we\
    \ will sort it.\n  l2.sort(function(a,b){return a-b;});//Sort it.\n  var n = l2.length;\n\
    \  var mid = Math.floor(n/2);\n  if(n%2==0){//If even\n    return (l2[mid-1]+l2[mid])/2;\n\
    \  }\n  else{//Else odd\n    return l2[mid];\n  }\n}\n", "  let mn = l.length/2;\n\
    \  return l.length % 2 !== 0 ? l[Math.floor(mn)] : (l[mn-1] + l[mn]) / 2;\n}\n\
    \nlet testList = [1, 2, 5, 2, 6, 7, -1, 0, 7, 100];", "\tvar sorted = l.sort();\n\
    \tvar length = sorted.length;\n\tvar half = length/2;\n\tif(length%2==0){\n\t\t\
    return (sorted[half]+sorted[half-1])/2;\n\t}\n\telse{\n\t\treturn sorted[Math.floor(half)];\n\
    \t}\n}\n", "    var median = 0;\n    var average = average_of_list(l);\n    var\
    \ distance = [];\n    var i = 0;\n    var d = 0;\n    for(i=0; i<l.length; i++){\n\
    \        d = Math.abs(l[i] - average);\n        distance.push(d);\n    }\n   \
    \ median = average_of_list(distance);\n    return median;\n}\n", "\t//Base case\n\
    \tif(l.length === 0){\n\t\treturn null;\n\t}\n\t//Find the middle index\n\tlet\
    \ midIndex = l.length/2;\n\t//If odd, return the element at the midIndex\n\tif(l.length\
    \ % 2 === 1){\n\t\treturn l[Math.floor(midIndex)];\n\t}\n\t//If even, return the\
    \ average of the two middle elements\n\treturn (l[midIndex] + l[midIndex-1])/2;\n\
    }\n", "\tl.sort();\n\tvar n = l.length;\n\tif(n == 0){\n\t\treturn null;\n\t}\n\
    \tif(n % 2 == 0){\n\t\treturn (l[n/2-1] + l[n/2])/2.0;\n\t}\n\telse{\n\t\treturn\
    \ l[(n-1)/2];\n\t}\n}\n", "\tvar sorted_list = l.sort(function(a,b){return a-b});\n\
    \tvar middle = sorted_list.length/2;\n\tif(sorted_list.length%2==0){\n\t\treturn\
    \ (sorted_list[middle]+sorted_list[middle-1])/2\n\t}\n\telse{\n\t\treturn sorted_list[Math.round(middle-1)]\n\
    \t}\n}\n", "    var sortedList = l.sort(function(a,b){return a-b});\n    if(sortedList.length\
    \ % 2 === 0){\n        var median = (sortedList[(sortedList.length/2)-1] + sortedList[sortedList.length/2])/2;\n\
    \        return median;\n    }\n    else{\n        var median = sortedList[Math.floor(sortedList.length/2)];\n\
    \        return median;\n    }\n}\n", "    //c is the temporary array to store\
    \ the numbers in.\n    var c = [];\n    var i = 0;\n    //Copy the list to temporary\
    \ array c.\n    for(i = 0; i < l.length; i++){\n        c[i] = l[i];\n    }\n\
    \    //Sort the array\n    c.sort(function(a, b){return a-b});\n    //return the\
    \ median.\n    if(c.length % 2 == 0){\n        //Array length is even, return\
    \ average of two middle elements.\n        return ((c[(c.length/2)-1]+c[(c.length/2)])/2);\n\
    \    }\n    else{\n        //Array length is odd, return middle element.\n   \
    \     return c[Math.floor(c.length/2)];\n    }\n}\n", "\tvar tmp = 0;\n\tl.sort(compareNumbers);\n\
    \tif(l.length%2==0){\n\t\tvar m = l.length/2;\n\t\ttmp = (l[m]+l[m-1])/2;\n\t\
    }\n\telse{\n\t\tvar m = Math.floor(l.length/2);\n\t\ttmp = l[m];\n\t}\n\treturn\
    \ tmp;\n}\n", "\tl.sort();\n\treturn l[(l.length-1)/2];\n}\n", "    var max =\
    \ l.length;\n    var mid = Math.floor(max/2);\n    if(l.length % 2 == 0){\n  \
    \      return l[mid];\n    }else{\n        return (l[mid-1] + l[mid])/2;\n   \
    \ }\n}\n", "\tvar i, half;\n\t//Average 2 middle elements if list has even length.\n\
    \tif (l.length % 2 === 0){\n\t\ti = l.length / 2;\n\t\treturn (l[i - 1] + l[i])\
    \ / 2;\n\t}\n\t//Return middle element if list has odd length.\n\telse{\n\t\t\
    half = (l.length - 1) / 2;\n\t\treturn l[half];\n\t}\n}\n", "    return (l[Math.floor(l.length/2)\
    \ - 1] + l[Math.floor(l.length/2)])/2\n}\n", "  var k = l.length;\n  if(k % 2\
    \ === 0){\n    return (l[k/2 - 1] + l[k/2]) / 2;\n  }else{\n    return l[parseInt(k/2)];\n\
    \  }\n}\n", "  var sortedList = l.sort();\n  var listLength = sortedList.length;\n\
    \  var midPoint = listLength/2;\n  if(listLength%2 == 0){\n    return (sortedList[midPoint-1]\
    \ + sortedList[midPoint])/2;\n  }else{\n    return sortedList[midPoint-0.5];\n\
    \  }\n}\n", "\tif(l.length === 0)\n\t\treturn NaN;\n\tvar m = (l.length - 1) /\
    \ 2;\n\tif(l.length % 2 === 0)\n\t\treturn (l[m] + l[m + 1]) / 2;\n\telse\n\t\t\
    return l[Math.ceil(m)];\n}\n", "  if(l.length === 0) return 0;\n  l.sort(function(a,b){return\
    \ a-b});\n  var mid = l.length / 2;\n  if(l.length % 2 == 0) return (l[mid] +\
    \ l[mid-1]) / 2;\n  else return l[Math.floor(mid)];\n}\n", "\tl.sort(function(a,b){return\
    \ a-b});\n\tif(l.length % 2 == 0){\n\t\tvar idx = l.length/2;\n\t\treturn (l[idx]\
    \ + l[idx-1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(l.length/2)];\n\t}\n}\n",
  "    var sorted = l.sort(function(a,b){return a-b});\n    var length = sorted.length;\n\
    \    var middle = Math.floor(length/2);\n    if(length % 2 == 0){\n        return\
    \ (sorted[middle] + sorted[middle-1])/2\n    }else{\n        return sorted[middle];\n\
    \    }\n}\n", "    var result;\n    if(l.length == 0){\n        result = null;\n\
    \    }else if(l.length % 2 == 0){\n        var i = l.length / 2;\n        result\
    \ = (l[i-1] + l[i]) / 2;\n    }else{\n        var i = (l.length + 1) / 2;\n  \
    \      result = l[i-1];\n    }\n    return result;\n}\n", "\treturn mean(l);\n\
    }\n", "    l.sort(function(a,b){return a-b});\n    var n = l.length;\n    if(n%2\
    \ == 0){\n        return (l[n/2-1]+l[n/2])/2;\n    }\n    else{\n        return\
    \ l[(n-1)/2];\n    }\n}\n", "\tvar l1 = l.sort();\n\tvar i = l1.length;\n\tif(i==0){return\
    \ 0;}\n\telse if(i%2==0){return (l1[i/2]+l1[i/2-1])/2;}\n\telse{return l1[(i-1)/2];}\n\
    }\n", "  \treturn Q2(l);\n}\n", "    var med = 0;\n    var len = l.length;\n \
    \   if(len % 2 != 0){\n\tmed = l[Math.floor(len/2)];\n    }\n    else{\n\tmed\
    \ = (l[Math.floor(len/2)] + l[Math.floor(len/2) - 1])/2;\n    }\n    return med;\n\
    }\n", "\tif(l.length == 0) return NaN;\n\telse if(l.length == 1) return l[0];\n\
    \telse if(l.length % 2 == 0){\n\t\treturn (l[l.length/2] + l[l.length/2 - 1])/2;\n\
    \t}else{\n\t\treturn l[Math.floor(l.length/2)];\n\t}\n}\n", "\treturn l[parseInt(l.length/2)];\n\
    }\n", "\t// If the list is empty, return null.\n\tif(l.length === 0){\n\t\treturn\
    \ null;\n\t}\n\t// If the list length is odd, return the middle element.\n\tif(l.length\
    \ % 2 !== 0){\n\t\treturn l[(l.length - 1) / 2];\n\t}\n\t// If the list length\
    \ is even, average the two middle elements.\n\telse{\n\t\tvar mid_left = l[(l.length\
    \ - 1) / 2]\n\t\tvar mid_right = l[(l.length - 1) / 2 + 1]\n\t\treturn (mid_left\
    \ + mid_right) / 2;\n\t}\n}\n", "    //Deep copy array, sort it and get the middle\
    \ index\n    let copy = l.slice(0);\n    copy.sort();\n    let idx = Math.floor(copy.length/2);\n\
    \    return copy[idx];\n}\n", "\tvar list = copy(l);\n\tlist.sort(function(a,b){return\
    \ a-b;});\n\n\tif(list.length % 2 == 0){\n\t\treturn (list[list.length/2] + list[list.length/2\
    \ - 1])/2;\n\t}\n\telse{\n\t\treturn list[Math.floor(list.length/2)];\n\t}\n}\n",
  "\tvar tempList = l.slice(0);\n\ttempList.sort(function(a,b){return a-b});\n\tvar\
    \ n = tempList.length;\n\tif(n % 2 == 0){ //if even number of elements\n\t\treturn\
    \ (tempList[n/2 - 1] + tempList[n/2])/2;\n\t}\n\telse{ //if odd number of elements\n\
    \t\treturn tempList[Math.floor(n/2)];\n\t}\n}\n", "    return l[Math.floor(l.length/2)];\n\
    }\n", "\tl.sort(function(a,b){\n\t\treturn a - b;\n\t});\n\tvar middle = Math.floor(l.length\
    \ / 2);\n\tif(l.length % 2){\n\t\treturn l[middle];\n\t}\n\telse{\n\t\treturn\
    \ (l[middle - 1] + l[middle]) / 2.0;\n\t}\n}\n", "  var v = l.slice(0);\n  v.sort(function(a,b){return\
    \ a-b;});\n  var i = Math.floor(v.length/2);\n  if(v.length % 2 == 0){\n    return\
    \ (v[i-1] + v[i])/2;\n  }\n  else{\n    return v[i];\n  }\n}\n", "\treturn l[Math.floor(l.length/2)];\n\
    }\n", "\tvar m = l.length / 2;\n\treturn (l.length % 2) ? l[m] : (l[m-1] + l[m])\
    \ / 2;\n}\n", "\tif(l.length==0) return 0;\n\tl.sort(function(a,b){return a-b});\n\
    \tif(l.length%2==0) return (l[l.length/2-1]+l[l.length/2])/2;\n\telse return l[Math.floor(l.length/2)];\n\
    }\n", "    l.sort(function(a,b){return a-b;});\n    var n = l.length;\n    var\
    \ mid = Math.floor(n/2);\n    if(n%2 == 0){\n        return (l[mid-1]+l[mid])/2;\n\
    \    }\n    else{\n        return l[mid];\n    }\n}\n", "  var length = l.length;\n\
    \  if(length === 0){\n    return null;\n  }\n  var mid = length/2;\n  var midFloor\
    \ = Math.floor(mid);\n  var even = length % 2 === 0;\n  var sorted = l.sort();\n\
    \  if(even){\n    return (sorted[midFloor-1] + sorted[midFloor])/2;\n  }\n  return\
    \ sorted[midFloor];\n}\n", "    var len = l.length;\n    if(len == 0){\n     \
    \   return null;\n    }\n    if(len == 1){\n        return l[0];\n    }\n    //Sort\
    \ elements in the list.\n    l.sort(function(a, b){return a - b});\n    //Get\
    \ the middle element if the list has odd number of elements.\n    if(len % 2 ==\
    \ 1){\n        return l[Math.floor(len / 2)];\n    }\n    //Get the mean of two\
    \ middle elements if the list has even number of elements.\n    return (l[Math.floor(len\
    \ / 2) - 1] + l[Math.floor(len / 2)]) / 2;\n}\n", "    var mid=Math.floor(l.length/2);\n\
    \    return l[mid];\n}\n", "\tvar s=l.sort(function(a,b){return a-b;});\n\tvar\
    \ m=0;\n\tif(s.length%2==0){\n\t\tm=(s[s.length/2-1]+s[s.length/2])/2;\n\t}else{\n\
    \t\tm=s[Math.floor(s.length/2)];\n\t}\n\treturn m;\n}\n", "\tif(l.length === 0)\
    \ return null;\n\telse if(l.length === 1) return l[0];\n\telse if(l.length % 2\
    \ === 0){\n\t\tvar i = (l.length - 1) / 2;\n\t\treturn (l[i] + l[i + 1]) / 2;\n\
    \t}\n\telse return l[Math.floor(l.length / 2)];\n}\n", "\t//yours\n\tvar result\
    \ = l.sort(function(a,b){return a-b});\n\tvar half = Math.floor(result.length/2);\n\
    \tif(result.length % 2)\n\t\treturn result[half];\n\telse\n\t\treturn (result[half-1]\
    \ + result[half]) / 2.0;\n}\n", "    l.sort(function(a,b){return a-b;});\n   \
    \ if(l.length % 2) return l[Math.floor(l.length/2)];\n    else return (l[l.length/2]\
    \ + l[l.length/2 - 1])/2;\n}\n", "  let sorted = l.sort(function(a, b){return\
    \ a-b});\n  let len = sorted.length;\n  let median;\n  if(len % 2 == 0){\n   \
    \ let i = len/2;\n    median = (sorted[i] + sorted[i-1])/2;\n  }\n  else{\n  \
    \  let i = Math.floor(len/2);\n    median = sorted[i];\n  }\n  return median;\n\
    }\n", "  var median;\n  if(l.length%2==0){\n    median=(l[l.length/2]+l[l.length/2-1])/2;\n\
    \  }\n  else{\n    median=l[(l.length-1)/2];\n  }\n  return median;\n}\n", " \
    \ var sorted = l.sort();\n  if(sorted.length % 2 == 0){\n    return (sorted[sorted.length/2]\
    \ + sorted[sorted.length/2 - 1])/2;\n  }else{\n    return sorted[Math.floor(sorted.length/2)];\n\
    \  }\n}\n", "\tif(l.length === 0) return null;\n\tl.sort(function(a,b){return\
    \ a-b;});\n\tlet n = l.length;\n\tif(n%2) return l[(n-1)/2];\n\treturn (l[n/2]\
    \ + l[n/2-1])/2;\n}\n", "    //If the list has no elements, return null.\n   \
    \ if(!l.length){\n        return null;\n    }\n    //Sort the list to ensure the\
    \ elements are in sorted order.\n    l.sort(function(a, b){\n        return a\
    \ - b;\n    });\n    //If the list has an odd number of elements, return the central\
    \ value.\n    if(l.length % 2){\n        return l[Math.floor(l.length / 2)];\n\
    \    }\n    //If the list has an even number of elements, return the average of\
    \ the two middle elements.\n    return (l[l.length / 2] + l[l.length / 2 - 1])\
    \ / 2;\n}\n", "    let nl = l.slice(0);\n    nl.sort(function(a,b){\n        return\
    \ a-b;\n    });\n    return (nl[nl.length/2-1]+nl[nl.length/2])/2;\n}\n", "\t\
    return (l[parseInt(l.length/2)]+l[parseInt((l.length-1)/2)])/2\n}\n", "\tvar sorted\
    \ = l.sort();\n\tvar len = sorted.length;\n\tvar i = (len+1)/2-1;\n\tvar f = Math.floor(i);\n\
    \tvar c = Math.ceil(i);\n\treturn (sorted[f]+sorted[c])/2;\n}\n", "  var m = l.length/2;\n\
    \  if(l.length % 2 === 0){\n    return (l[m-1] + l[m])/2;\n  }else{\n    return\
    \ l[Math.floor(m)];\n  }\n}\n", "\tif(l.length == 0)\n\t\treturn -1;\n\tvar l\
    \ = l.sort();\n\tif(l.length % 2 == 0)\n\t\treturn (l[l.length/2 - 1] + l[l.length/2])/2;\n\
    \telse\n\t\treturn l[Math.floor(l.length/2)];\n}\n", "    var sorted = sort(l);\n\
    \    var half = math_floor(toNumber(len(l)) / 2);\n    if (mod(toNumber(len(l)),\
    \ 2) == 0){\n        return add(l[half], l[add(half, 1)]);\n    }else{\n     \
    \   return l[add(half, 1)];\n    }\n}\n", "  return (l[0] + l[l.length-1])/2\n\
    }\n", "\tvar a = [];\n\tfor(var i=0; i<l.length; i++){\n\t\ta.push(l[i]);\n\t\
    }\n\ta.sort(function(a,b){return a-b});\n\tif(a.length%2 == 0){\n\t\treturn (a[a.length/2-1]+a[a.length/2])/2;\n\
    \t}\n\telse{\n\t\treturn a[(a.length-1)/2];\n\t}\n}\n", "\tvar l = l.sort(function(a,b){return\
    \ a-b;});\n\tvar m = l.length/2;\n\tif(m%1 === 0){\n\t\treturn (l[m]+l[m-1])/2;\n\
    \t}else{\n\t\treturn l[Math.ceil(m)-1];\n\t}\n}\n", "    const sorted = l.sort(function(a,\
    \ b){return a-b});\n    const half = Math.floor(sorted.length/2);\n    if(sorted.length\
    \ % 2)\n        return sorted[half];\n    else\n        return (sorted[half-1]\
    \ + sorted[half]) / 2.0;\n}\n", "    let sorted = l.sort(function(a, b){return\
    \ a-b});\n    if(sorted.length%2===0){\n        let index = sorted.length/2;\n\
    \        return ((sorted[index-1]+sorted[index])/2);\n    }else{\n        let\
    \ index = Math.floor(sorted.length/2);\n        return sorted[index];\n    }\n\
    }\n", "    l.sort(sortNumber);\n    return l[Math.floor(l.length/2)];\n}\n", "\t\
    var e = l.sort(function(a,b){return a-b});\n\tvar n = l.length;\n\treturn e[Math.floor(n/2)];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
