name: HumanEval_18_how_many_times
language: js
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\nfunction how_many_times(string, substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
  xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
  \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
completions: ["\tvar count = 0;\n\tvar i;\n\tfor(i = 0; i < string.length - substring.length\
    \ + 1; i++){\n\t\tif(string.substring(i, substring.length + i) == substring){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count = 0;\n\tlet index\
    \ = 0;\n\twhile (index !== -1){\n\t\tindex = string.indexOf(substring, index);\n\
    \t\tif (index !== -1){\n\t\t\tcount++;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "\tif(string.length == 0 || substring.length == 0)\n\t\treturn 0;\n\tvar\
    \ arr = string.split(substring);\n\treturn arr.length - 1;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i <= string.length - substring.length; i++) {\n  \
    \      if (string.substr(i, substring.length) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\n", "  let regexp = new RegExp(substring,\
    \ 'g');\n  return string.match(regexp).length;\n}\n\n", "  var count = 0;\n  for\
    \ (var i = 0; i <= string.length - substring.length; i++) {\n    if (string.substr(i,\
    \ substring.length) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "    var count = 0;\n    for (var i = 0; i <= string.length - substring.length;\
    \ i++) {\n        if (string.substr(i, substring.length) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n", "  var re = new\
    \ RegExp(substring, \"g\");\n  return string.match(re).length;\n}\n", "  let total\
    \ = 0;\n  for(let i = 0; i <= string.length - substring.length; i++){\n    for(let\
    \ j = 0; j < substring.length; j++){\n      if(string[i + j] !== substring[j]){\n\
    \        break;\n      }\n      if(j === substring.length - 1){\n        total++;\n\
    \      }\n    }\n  }\n  return total;\n}", "  let number = 0;\n  let index = 0;\n\
    \  while (index < string.length) {\n    if (string.substring(index, index + substring.length)\
    \ === substring) {\n      number++;\n      index += substring.length;\n    } else\
    \ {\n      index++;\n    }\n  }\n  return number;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i <= string.length; i++){\n        if(string.indexOf(substring,\
    \ i) === i){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    if (substring.length > string.length) return 0;\n    if (substring.length ===\
    \ 0) return 0;\n    var count = 0;\n    for (var i = 0; i < string.length; i++){\n\
    \        if (string.substring(i, i + substring.length) === substring){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n", "    var times =\
    \ 0;\n    while(true){\n        var index = string.indexOf(substring);\n     \
    \   if(index != -1){\n            times += 1;\n            string = string.slice(index\
    \ + 1);\n        }\n        else{\n            break;\n        }\n    }\n    return\
    \ times;\n}\n\n", "    if(!string || !substring){\n        return 0;\n    }\n\
    \    var count = 0;\n    var i;\n    for(i = 0; i <= string.length - substring.length;\
    \ i++){\n        if(string.substring(i, i + substring.length) === substring){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    string\
    \ = string.split('');\n    substring = substring.split('');\n    var lastIndex\
    \ = -1;\n    var count = 0;\n    for(var j = 0; j < substring.length; j++){\n\
    \        for(var i = 0; i < string.length; i++){\n            if(string[i] ===\
    \ substring[j]){\n                if(i > lastIndex){\n                    if(j\
    \ === 0){\n                        count++;\n                    }\n         \
    \           lastIndex = i;\n                    break;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}", "  let counter = 0;\n \
    \ let length = substring.length;\n  for(let i = 0; i < string.length; i++){\n\
    \    if(string.substring(i, i + length) === substring){\n      counter++;\n  \
    \  }\n  }\n  return counter;\n}\n", "  let count = 0;\n  for(let i = 0; i < string.length;\
    \ i++){\n    if(string.substring(i, i + substring.length) === substring){\n  \
    \    count++;\n    }\n  }\n  return count;\n}\n\n\n", "    var count = 0;\n  \
    \  var index = 0;\n    while(index < string.length){\n        var pos = string.indexOf(substring,\
    \ index);\n        if(pos == -1){\n            break;\n        }else{\n      \
    \      count++;\n            index = pos + 1;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  let i = 0;\n  while(i < string.length){\n    let temp\
    \ = i;\n    let j = 0;\n    while(string[i] === substring[j]){\n      i++;\n \
    \     j++;\n      if(j === substring.length){\n        count++;\n        break;\n\
    \      }\n    }\n    i = temp;\n    i++;\n  }\n  return count;\n}\n", "    let\
    \ counter = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n\
    \        if(string.substring(i, i + substring.length) === substring){\n      \
    \      counter++;\n        }\n    }\n    return counter;\n}\n", "\treturn string.split(substring).length\
    \ - 1;\n}\n", "\tvar count = 0;\n\tvar subLen = substring.length;\n\tvar strLen\
    \ = string.length;\n\tfor(var i = 0; i < strLen; i++){\n\t\tif(string.substring(i,\
    \ i + subLen) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
  "\tif(string.includes(substring)){\n\t\tvar results = string.match(new RegExp(substring,\
    \ \"g\"));\n\t\tconsole.log(results.length);\n\t}\n\telse{\n\t\tconsole.log(0);\n\
    \t}\n}\n", "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string.substring(i, i + substring.length) === substring){\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n", "    //Get the length\
    \ of both string and substring.\n    var string_length = string.length;\n    var\
    \ substring_length = substring.length;\n    //Count how many times the substring\
    \ is found in the string.\n    var count = 0;\n    for(var i = 0; i < string_length;\
    \ i++){\n        if(string.substring(i, i + substring_length) == substring){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "  let times\
    \ = 0\n  for(let i = 0; i < string.length; i++){\n    for(let j = 0; j < substring.length;\
    \ j++){\n      if(string[i + j] === substring[j]){\n        if(j === substring.length\
    \ - 1){\n          times++\n        }\n      } else {\n        break\n      }\n\
    \    }\n  }\n  return times\n}\n", "\tvar count = 0;\n\tvar pos = string.indexOf(substring);\n\
    \twhile(pos != -1){\n\t\tcount++;\n\t\tpos = string.indexOf(substring, pos + 1);\n\
    \t}\n\treturn count;\n}\n", "  var currentIndex = 0;\n  var count = 0;\n  while\
    \ (currentIndex != -1) {\n    currentIndex = string.indexOf(substring, currentIndex);\n\
    \    if (currentIndex != -1) {\n      count++;\n      currentIndex += substring.length;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for(let i = 0; i < string.length;\
    \ i++){\n    let sub = string.substring(i,i+substring.length);\n    if(sub ===\
    \ substring){\n      count++;\n    }\n  }\n  return count;\n}\n", "    var substring_length\
    \ = substring.length;\n    var sum = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.substring(i, i + substring_length) == substring){\n\
    \            sum += 1;\n        }\n    }\n    return sum;\n}\n", "    if(substring\
    \ === ''){\n        return null;\n    }\n    var substringLength = substring.length;\n\
    \    var times = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substr(i,\
    \ substringLength) === substring){\n            times++;\n        }\n    }\n \
    \   return times;\n}\n", "  //Your code goes here!\n}\n", "\tvar count = 0;\n\t\
    var string_index = 0;\n\tvar substring_index = 0;\n\twhile(string_index<string.length){\n\
    \t\tif(string[string_index]===substring[substring_index]){\n\t\t\tsubstring_index++;\n\
    \t\t\tif(substring_index===substring.length){\n\t\t\t\tcount++;\n\t\t\t\tsubstring_index\
    \ = 0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tstring_index = string_index - substring_index;\n\
    \t\t\tsubstring_index = 0;\n\t\t}\n\t\tstring_index++;\n\t}\n\treturn count;\n\
    }", "    var sum = 0, pos = 0;\n    while (true) {\n        pos = string.indexOf(substring,\
    \ pos);\n        if (pos >= 0) {\n            sum += 1;\n            pos += 1;\n\
    \        } else break;\n    }\n    return sum;\n}\n", "    var count = 0;\n  \
    \  for (var i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "\tif(string.length < substring.length)\n\t\treturn 0;\n\tlet count = 0;\n\
    \tfor(let i = 0; i <= string.length - substring.length; i++){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring)\n\t\t\tcount++;\n\t}\n\treturn count;\n\
    }\n\n\n", "    //replace all cases of substring with \"*\"\n    var modified =\
    \ string.replace(substring, \"*\");\n    var count = (modified.split(\"*\").length\
    \ - 1);\n\n    return count;\n}\n", "    var count = 0;\n    for (var i = 0; i\
    \ <= string.length - substring.length; i++) {\n        if (string.substr(i, substring.length)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "\tvar times = 0;\n\tvar substring_length = substring.length;\n\tvar start_position\
    \ = 0;\n\tvar index = string.indexOf(substring, start_position);\n\twhile(index\
    \ != -1){\n\t\ttimes++;\n\t\tstart_position = index + substring_length;\n\t\t\
    index = string.indexOf(substring, start_position);\n\t}\n\treturn times;\n}\n",
  "  //your code here\n  let count = 0;\n  for (let i = 0; i < string.length; i++)\
    \ {\n    if (string.substring(i, i + substring.length) === substring) {\n    \
    \  count++;\n    }\n  }\n  return count;\n}\n", "  var times = 0;\n  for(var i\
    \ = 0; i < string.length; i++){\n    var index = string.indexOf(substring, i);\n\
    \    if(index !== -1){\n      times++;\n      i = index + 1;\n    } else {\n \
    \     break;\n    }\n  }\n  return times;\n}\n", "  let counter = 0;\n  let pos\
    \ = string.indexOf(substring);\n  while (pos !== -1) {\n    counter++;\n    pos\
    \ = string.indexOf(substring, pos + 1);\n  }\n  return counter;\n}\n", "  var\
    \ count = 0;\n  var index = string.indexOf(substring);\n  while (index >= 0) {\n\
    \    count++;\n    index = string.indexOf(substring, index + 1);\n  }\n  return\
    \ count;\n}\n", "\tif(string.indexOf(substring)==-1){\n\t\treturn 0;\n\t}\n\t\
    var times = 0;\n\tvar index = string.indexOf(substring);\n\twhile(index!=-1){\n\
    \t\ttimes++;\n\t\tindex = string.indexOf(substring, index+1);\n\t}\n\treturn times;\n\
    }\n\n", "  // Write your code here\n}\n\n", "    var reg = new RegExp(substring,\
    \ \"g\");\n    return string.match(reg).length;\n}", "    if (string.length <\
    \ substring.length) return 0;\n    let counter = 0;\n    for (let i = 0; i < string.length;\
    \ i++){\n        if (string.slice(i, i + substring.length) === substring){\n \
    \           counter++;\n        }\n    }\n    return counter;\n}\n", "    var\
    \ split = string.split(substring);\n    return split.length - 1;\n}\n", "   return\
    \ string.split(substring).length - 1;\n}\n", "    var count = 0;\n    for (var\
    \ i = 0; i <= string.length - substring.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring)\n            count++;\n    }\n    return count;\n\
    }\n", "  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    for\
    \ (var j = 0; j < substring.length; j++) {\n      if (string[i+j] !== substring[j])\
    \ {\n        break;\n      }\n      if (j == substring.length - 1) {\n       \
    \ count++;\n      }\n    }\n  }\n  return count;\n}\n", "    var sub = substring;\n\
    \    var str = string;\n    var substring_length = sub.length;\n    var string_length\
    \ = str.length;\n    var difference = string_length - substring_length;\n    var\
    \ counter = 0;\n    for(var i = 0; i <= difference; i++){\n        if(sub == str.substring(i,\
    \ substring_length + i)){\n            counter += 1;\n        }\n    }\n    return\
    \ counter;\n}\n", "    let sum = 0;\n    let ind = string.indexOf(substring);\n\
    \    while(ind != -1){\n        ind = string.indexOf(substring, ind + 1);\n  \
    \      sum++;\n    }\n    return sum;\n}\n", "    var count = 0;\n    var n =\
    \ string.indexOf(substring);\n    while (n != -1) {\n        count++;\n      \
    \  n = string.indexOf(substring, n + 1);\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < string.length; i++){\n        let found\
    \ = true;\n        for(let j = 0; j < substring.length; j++){\n            if(string[i\
    \ + j] !== substring[j]){\n                found = false;\n                break;\n\
    \            }\n        }\n        if(found){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "    let x = 0;\n    let i = string.indexOf(substring);\n\
    \    while (i !== -1) {\n        x++;\n        i = string.indexOf(substring, i\
    \ + 1);\n    }\n    return x;\n}\n", "    var counter = 0;\n    var length = substring.length;\n\
    \    var index = string.indexOf(substring);\n    while(index != -1){\n       \
    \ counter++;\n        index = string.indexOf(substring, index + length);\n   \
    \ }\n    return counter;\n}\n", "\tvar parts = string.split(substring);\n\treturn\
    \ parts.length-1;\n}\n", "\tvar num = 0;\n\tvar last_index = -1;\n\tdo{\n\t\t\
    last_index = string.indexOf(substring, last_index + 1);\n\t\tif(last_index !==\
    \ -1){\n\t\t\tnum += 1;\n\t\t}\n\t}while(last_index !== -1);\n\treturn num;\n\
    }\n", "  let count = 0;\n  for(let i = 0; i < string.length; i++){\n    if(string.substring(i,\
    \ i + substring.length) === substring){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n\nlet str = 'Tobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornottobeornott",
  "  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.slice(i,\
    \ i + substring.length) == substring) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    var count = 0;\n    for (var i = 0; i <= string.length -\
    \ substring.length; i++) {\n        if (string.substr(i, substring.length) ==\
    \ substring) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "\tvar string_length = string.length;\n\tvar substring_length = substring.length;\n\
    \tvar counter = 0;\n\tvar check = false;\n\tfor(var i = 0; i < string_length;\
    \ i++){\n\t\tfor(var j = 0; j < substring_length; j++){\n\t\t\tcheck = false;\n\
    \t\t\tif(string[i+j] !== substring[j]){\n\t\t\t\tcheck = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(check === false){\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn\
    \ counter;\n}\n", "    let count = 0;\n    let length = substring.length;\n  \
    \  for(let i = 0; i < string.length; i++){\n        if(string.substring(i, i +\
    \ length) === substring){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    var n = 0;\n    var pos = 0;\n    while (true) {\n      \
    \  pos = string.indexOf(substring, pos);\n        if (pos != -1) {\n         \
    \   n++;\n            pos += substring.length;\n        } else {\n           \
    \ break;\n        }\n    }\n    return (n);\n}\n", "    var substring_length =\
    \ substring.length;\n    var num_overlaping_cases = 0;\n    var is_overlaping\
    \ = false;\n    var length = string.length;\n    var i;\n    var j;\n    for(i\
    \ = 0; i < length; i++){\n        if(string[i] === substring[0]){\n          \
    \  is_overlaping = true;\n            j = 0;\n            while(is_overlaping\
    \ && j < substring_length){\n                if(string[i + j] !== substring[j]){\n\
    \                    is_overlaping = false;\n                }\n             \
    \   j++;\n            }\n            if(is_overlaping){\n                num_overlaping_cases++;\n\
    \            }\n        }\n    }\n    return num_overlaping_cases;\n}\n", "  \
    \  var l=substring.length;\n    var count=0;\n    for(var i=0;i<string.length;i++){\n\
    \        if(string.substring(i,i+l)==substring){\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n", "    var count = 0;\n    var sub_len =\
    \ substring.length;\n    for(var i = 0; i < string.length; i++){\n        if(string.substr(i,\
    \ sub_len) == substring){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let stop = string.length - substring.length;\n\
    \    for(let i = 0; i <= stop; i++){\n        if(string.substring(i, i + substring.length)\
    \ === substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "\tvar count = 0;\n\tvar i = 0;\n\twhile(i < string.length){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring){\n\t\t\tcount++;\n\t\t\ti += substring.length;\n\
    \t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;\n}\n", "   var count\
    \ = 0;\n   for (i=0; i<string.length;i++){\n     if (string.substring(i,i+substring.length)==substring){\n\
    \       count++;\n     }\n   }\n   return count;\n}\n", "  let regex = new RegExp(substring,\
    \ 'g');\n  return string.match(regex).length;\n}\n", "    var n = 0;\n    var\
    \ pos = 0;\n    var l = substring.length;\n    \n    while (true) {\n        pos\
    \ = string.indexOf(substring, pos);\n        if (pos > -1) {\n            n++;\n\
    \            pos += l;\n        } else {\n            break;\n        }\n    }\n\
    \    return (n);\n}\n", "\tvar re = new RegExp(substring, \"g\");\n\tvar match\
    \ = string.match(re);\n\treturn match.length;\n}\n", "\tif(string.indexOf(substring)==-1){\n\
    \t\treturn 0;\n\t}\n\telse{\n\t\tvar count = 1;\n\t\tvar string_temp = string.substring(string.indexOf(substring)+substring.length);\n\
    \t\twhile(string_temp.indexOf(substring)!=-1){\n\t\t\tcount++;\n\t\t\tstring_temp\
    \ = string_temp.substring(string_temp.indexOf(substring)+substring.length);\n\t\
    \t}\n\t\treturn count;\n\t}\n}\n", "\tvar count = string.match(new RegExp(substring,\
    \ \"g\"));\n\treturn count.length;\n}\n\nvar substring = \"P\";\nvar string =\
    \ \"PPaPPPPPPPPPPPPPPPPP\";", "    let count = 0;\n    for(let i = 0; i <= string.length\
    \ - substring.length; i++){\n        if(string.substring(i, i + substring.length)\
    \ === substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++){\n    for (let\
    \ j = 0; j < substring.length; j++){\n      if (string[i + j] != substring[j]){\n\
    \        break;\n      }\n      if (j == substring.length - 1){\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}", "    if (substring === \"\"){\n   \
    \     return \"Infinity\";\n    }\n    var times = 0;\n    for (var i = 0; i <=\
    \ string.length; i++){\n        if (string.substring(i, substring.length + i)\
    \ === substring){\n            times += 1;\n        }\n    }\n    return times;\n\
    }\n", "\tvar count = 0;\n\tfor(var i = 0; i <= string.length - substring.length;\
    \ i++){\n\t\tif(string.substring(i, i + substring.length) == substring){\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  var count = 0;\n  var newString\
    \ = \"\";\n  for(var i = 0; i < string.length; i++){\n    newString += string[i];\n\
    \    if(newString.includes(substring)){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    let i = 0;\n    let count = 0;\n    while(i < string.length){\n\
    \        let temp = string.indexOf(substring, i);\n        if(temp !== -1){\n\
    \            count++;\n            i = temp + 1;\n        }else{\n           \
    \ break;\n        }\n    }\n    return count;\n}", "    var index = 0;\n    var\
    \ count = 0;\n    while (true){\n        index = string.indexOf(substring, index);\n\
    \        if (index != -1){\n            count++;\n            index += substring.length;\n\
    \        } else {\n            break;\n        }\n    }\n    return count;\n}\n",
  "    var len = string.length;\n    var sublen = substring.length;\n    var count\
    \ = 0;\n    for(var i = 0; i < len; i++){\n        if(string.slice(i, i + sublen)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n}",
  "  if (substring === \"\") return null;\n  let count = 0;\n  for (let i = 0; i <\
    \ string.length; i++){\n    if (string.slice(i, i + substring.length) === substring){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  var count = string.match(new\
    \ RegExp(substring, \"g\"));\n  return count ? count.length : 0;\n}\n", "    return\
    \ string.match(new RegExp(substring, 'g')).length;\n}\n", "    var count = 0;\n\
    \    var last = -1;\n    while(string.indexOf(substring, last + 1) != -1){\n \
    \       last = string.indexOf(substring, last + 1);\n        count++;\n    }\n\
    \    return count;\n}\n", "\tvar arr = [];\n\tvar start = 0;\n\twhile(string.indexOf(substring,\
    \ start) != -1){\n\t\tarr.push(string.indexOf(substring, start));\n\t\tstart =\
    \ string.indexOf(substring, start) + 1;\n\t}\n\treturn arr.length;\n}\n", "  \
    \  let times = 0;\n    let index = 0;\n    while(index<string.length){\n     \
    \   let current = string.indexOf(substring, index);\n        if(current!=-1){\n\
    \            times+=1;\n            index = current+1;\n        }else{\n     \
    \       break;\n        }\n    }\n    return times;\n}\n", "    var count = 0;\n\
    \    var index = 0;\n    while ((index = string.indexOf(substring, index + 1))\
    \ != -1) {\n        count++;\n    }\n    return count;\n}\n", "\tvar count = 0;\n\
    \tvar index = 0;\n\twhile(string.indexOf(substring, index) !== -1){\n\t\tindex\
    \ = string.indexOf(substring, index) + 1;\n\t\tcount++;\n\t}\n\treturn count;\n\
    }\n", "\tvar count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    var count = 0;\n    var string_length = string.length;\n    var substring_length\
    \ = substring.length;\n    var stop_loop = string_length - substring_length;\n\
    \    for(var i = 0; i <= stop_loop; i++){\n        if(string.substring(i, i +\
    \ substring_length) == substring){\n            count++;\n        }\n    }\n \
    \   return count;\n}", "    var n = 0;\n    var pos = 0;\n    var step = substring.length;\n\
    \n    while (true) {\n        pos = string.indexOf(substring, pos);\n        if\
    \ (pos >= 0) {\n            n++;\n            pos += step;\n        } else break;\n\
    \    }\n    return n;\n}\n\n", "  let count = 0;\n  let start = 0;\n  while(string.indexOf(substring,\
    \ start) !== -1){\n    count++;\n    start = string.indexOf(substring, start)\
    \ + 1;\n  }\n  return count;\n}\n\nhow_many_times(\"hehehehehehehehehehehehehehe\"\
    , \"he\"); // 14", "  var regex = new RegExp(substring,\"g\");\n  var matches\
    \ = string.match(regex);\n  if(matches == null){\n    return 0;\n  }\n  return\
    \ matches.length;\n}\n", "\tvar count = 0;\n\tvar index = string.indexOf(substring);\n\
    \twhile(index >= 0){\n\t\tcount++;\n\t\tindex = string.indexOf(substring, index\
    \ + 1);\n\t}\n\treturn count;\n}\n", "  var substrings_count = 0;\n  for(var i\
    \ = 0; i < string.length; i++){\n    if(string.substr(i, substring.length) ==\
    \ substring){\n      substrings_count++;\n    }\n  }\n  return substrings_count;\n\
    }\nvar how_many_times_answer = how_many_times(\"hello, the world's greatest hello\"\
    , \"hello\");", "    let count = 0;\n    let string_counter = 0;\n    let substring_counter\
    \ = 0;\n    while(string_counter < string.length){\n        if(string[string_counter]\
    \ == substring[substring_counter]){\n            substring_counter++;\n      \
    \      if(substring_counter == substring.length){\n                count++;\n\
    \                substring_counter = 0;\n            }\n        }\n        else{\n\
    \            substring_counter = 0;\n        }\n        string_counter++;\n  \
    \  }\n    return count;\n}\n", "  var parts = string.split(substring);\n  return\
    \ parts.length - 1;\n}\n", "    const result = string.match(new RegExp(substring,\
    \ 'g'));\n    return result === null ? 0 : result.length;\n}\n", "\t//Write your\
    \ code here\n\n};\n", "    var times = 0;\n    var index = 0;\n    for(var i =\
    \ 0; i<string.length; i++){\n        if(string[i] === substring[index]){\n   \
    \         if(index === 0){\n                var index_start = i;\n           \
    \ }\n            index++;\n            if(index === substring.length){\n     \
    \           var index_end = i;\n                index = 0;\n                i\
    \ = index_start;\n                times++;\n            }\n        }else{\n  \
    \          index = 0;\n        }\n    }\n    return times;\n}\n\n", "   var a=\
    \ 0, pos= 0;\n   while(true){\n      pos= string.indexOf(substring, pos);\n  \
    \    if(pos>=0){ a++; pos+= substring.length;}\n      else{return a;}\n   }\n\
    }\n", "    var counter = 0;\n    for(var i = 0; i < string.length; i++){\n   \
    \     if(string.substring(i, i + substring.length) == substring){\n          \
    \  counter++;\n        }\n    }\n    return counter;\n}\n", "    var index = 0;\n\
    \    var count = 0;\n    while (index < string.length) {\n        if (string.indexOf(substring,\
    \ index) === index) {\n            count += 1;\n            index += substring.length;\n\
    \        } else {\n            index += 1;\n        }\n    }\n    return count;\n\
    }\n", "    var str = string.split(substring).length - 1;\n    return str;\n}\n",
  "  var regex = new RegExp(substring, \"g\");\n  return string.match(regex).length;\n\
    }\n", "  var a = string.split(substring)\n  return a.length - 1\n}\n", "    var\
    \ lastIndex = 0, \n        count = 0;\n    \n    while(lastIndex != -1){\n   \
    \     lastIndex = string.indexOf(substring,lastIndex);\n        \n        if(lastIndex\
    \ != -1){\n            count++;\n            lastIndex += substring.length;\n\
    \        }\n    }\n    return count;\n}\n", "\tvar count = 0;\n\tfor(var i = 0;\
    \ i < string.length; i++){\n\t\tif(string.substring(i, i + substring.length) ==\
    \ substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var sub_length\
    \ = substring.length;\n    var match_array = string.match(new RegExp(substring,\
    \ 'g'));\n    if(match_array != null){\n        return match_array.length;\n \
    \   }\n    else{\n        return 0;\n    }\n}\n", "    var count = 0;\n    var\
    \ str_len = string.length;\n    var sub_len = substring.length;\n    for(var i\
    \ = 0; i < str_len; i++){\n        if(string.substring(i, i + sub_len) == substring){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var matches\
    \ = string.match(new RegExp(substring, \"g\"));\n    return matches ? matches.length\
    \ : 0;\n}\n", "\tvar count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\
    \tif(string.substring(i, i + substring.length) == substring){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}", "    var substring = new RegExp(substring,\"\
    g\");\n    return string.match(substring) ? string.match(substring).length : 0;\n\
    }\n", "    //count occurences\n    var count = 0;\n    var pos = string.indexOf(substring);\n\
    \    while (pos !== -1) {\n        count++;\n        pos = string.indexOf(substring,\
    \ pos + 1);\n    }\n    return count;\n}\n", "    let count = 0;\n    let offset\
    \ = 0;\n    while (true) {\n        offset = string.indexOf(substring, offset);\n\
    \        if (offset >= 0) {\n            count++;\n            offset += substring.length;\n\
    \        } else {\n            break;\n        }\n    }\n    return count;\n}",
  "\tif(substring.length > string.length){\n\t\treturn 0;\n\t}else{\n\t\tlet count\
    \ = 0;\n\t\tlet i = 0;\n\t\twhile(i < string.length - substring.length){\n\t\t\
    \tif(string.slice(i, i + substring.length) === substring){\n\t\t\t\tcount++;\n\
    \t\t\t\ti += substring.length;\n\t\t\t}else{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\
    \treturn count;\n\t}\n}", "    var count = string.split(substring).length - 1;\n\
    \    return count;\n}\n", "    var n = 0;\n    var pos = 0;\n    while (true)\
    \ {\n        pos = string.indexOf(substring, pos);\n        if (pos > -1) {\n\
    \            n++;\n            pos += substring.length;\n        } else {\n  \
    \          break;\n        }\n    }\n    return (n);\n}\n\n", "    if(string.length\
    \ < substring.length){\n        return 0;\n    }\n    var count = 0;\n    for(var\
    \ i = 0; i < string.length - substring.length + 1; i++){\n        if(string.substring(i,\
    \ i + substring.length) == substring){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    //Write code here\n    let result = 0;\n    let\
    \ start = 0;\n    let end = substring.length;\n    while(end <= string.length){\n\
    \        if(string.slice(start, end) === substring){\n            result++;\n\
    \        }\n        start++;\n        end++;\n    }\n    return result;\n}\n",
  "\treturn string.split(substring).length - 1;\n}\n", "  var count = 0;\n  for (var\
    \ i = 0; i <= string.length; i++) {\n    if (string.substring(i, i + substring.length)\
    \ == substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    string.split(substring).length\
    \ - 1;\n}\n", "\tvar re = new RegExp(substring, \"g\");\n\treturn (string.match(re)\
    \ || []).length;\n}\n", "    var count = 0;\n    var index = string.indexOf(substring);\n\
    \    while(index != -1){\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}", "    var count = 0;\n    for (var\
    \ i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ == substring)\n            count++;\n    }\n    return count;\n}\n", "    let\
    \ counter = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) === substring){\n            counter++;\n        }\n \
    \   }\n    return counter;\n}\n", "    var count = 0;\n    for (var i = 0; i <=\
    \ string.length - substring.length; i++) {\n        if (string.substr(i, substring.length)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let i = 0;\n    while(string.indexOf(substring,\
    \ i) !== -1){\n        count++;\n        i = string.indexOf(substring, i) + 1;\n\
    \    }\n    return count;\n}\n", "\tif(!string || !substring) return 0;\n\t\n\t\
    var count = 0;\n\tvar index = 0;\n\twhile(index < string.length){\n\t\tindex =\
    \ string.indexOf(substring, index);\n\t\tif(index == -1) return count;\n\t\tindex++;\n\
    \t\tcount++;\n\t}\n\treturn count;\n}\n", "\tvar regex = new RegExp(substring,\"\
    g\");\n\treturn string.match(regex).length;\n}", "\treturn string.split(substring).length\
    \ - 1;\n}\n", "    var i = 0;\n    var count = 0;\n    while(i < string.length){\n\
    \        if(string.slice(i, i + substring.length) == substring){\n           \
    \ count++;\n            i += substring.length;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return count;\n}\n", "\tstring = string.toLowerCase();\n\
    \tsubstring = substring.toLowerCase();\n\tvar count = 0;\n\tvar last_found = 0;\n\
    \twhile((last_found = string.indexOf(substring, last_found)) != -1){\n\t\tlast_found\
    \ = last_found + substring.length;\n\t\tcount++;\n\t}\n\treturn count;\n}\n",
  "\tvar regexp = new RegExp(substring,\"g\");\n\treturn string.match(regexp).length;\n\
    }\n\n", "    var s_length = string.length;\n    var sub_length = substring.length;\n\
    \    var times = 0;\n    for(var i = 0; i <= s_length - sub_length; i++){\n  \
    \      if(string.substring(i,i+sub_length) == substring){\n            times++;\n\
    \        }\n    }\n    return times;\n}\n", "  var count = 0;\n  for (var i =\
    \ 0; i < string.length; i++) {\n    var tempSubstring = string.substring(i, substring.length\
    \ + i);\n    if (tempSubstring === substring) {\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "    let count = 0;\n    let arr = string.split(substring);\n\
    \    count = arr.length-1;\n    return count;\n}", "    if(string.indexOf(substring)===-1){\n\
    \        return 0;\n    }\n    if(string.indexOf(substring)!==-1){\n        //if\
    \ not -1, return 1, and recursively call the function with the rest of the string\
    \ without the found substring.\n        return 1 + how_many_times(string.slice(string.indexOf(substring)+substring.length),substring);\n\
    \    }\n}\n", "  return string.split(substring).length - 1;\n}\n", "\tvar text\
    \ = string;\n\tvar count = 0;\n\twhile(text.indexOf(substring) != -1){\n\t\tcount++;\n\
    \t\ttext = text.replace(substring, \"\");\n\t}\n\tconsole.log(count);\n}\n\nhow_many_times(\"\
    aabcdaabc\", \"abc\");\nhow_many_times(\"aabcdaabc\", \"aa\");\nhow_many_times(\"\
    aabcdaabc\", \"ac\");", "  var result = 0;\n  var j = 0;\n  for(var i = 0; i <\
    \ string.length; i++){\n    if(string[i] === substring[j]){\n      j++;\n    \
    \  if(j === substring.length){\n        result++;\n        j = 0;\n      }\n \
    \   }\n    else{\n      j = 0;\n    }\n  }\n  return result;\n}\n", "    //Write\
    \ code here\n    let count = 0;\n    let regExp = new RegExp(substring, 'gi');\n\
    \    let found = string.match(regExp);\n    return found ? found.length : 0;\n\
    }\n", "\tvar res = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.substring(i,\
    \ i + substring.length) == substring){\n\t\t\tres++;\n\t\t}\n\t}\n\treturn res;\n\
    }\n\n", "\tvar count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.slice(i,\
    \ i + substring.length) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    let count = 0;\n    while(string.indexOf(substring) !== -1){\n    \
    \    string = string.replace(substring, '');\n        count++;\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        for(let j = 0; j < substring.length; j++){\n            if(string[i+j]\
    \ !== substring[j]){\n                break;\n            }\n            if(j\
    \ === substring.length - 1){\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\n", "    let count = 0;\n    let i = 0;\n  \
    \  while(string.indexOf(substring, i) !== -1){\n        count++;\n        i =\
    \ string.indexOf(substring, i) + 1;\n    }\n    return count;\n}", "  // console.log(substring,\
    \ string.substr(0, substring.length));\n  if(string.substr(0, substring.length)\
    \ !== substring){\n    return 0;\n  }\n  return 1 + how_many_times(string.substr(1),\
    \ substring);\n}\n", "  let result = 0;\n  for (let i = 0; i < string.length;\
    \ i++){\n    if (string.slice(i, substring.length + i) === substring){\n     \
    \ result++;\n    }\n  }\n  return result;\n}\n", "    var result = 0;\n    for(i\
    \ = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length)\
    \ == substring){\n            result++;\n        }\n    }\n    return result;\n\
    }\n\nhow_many_times(\"hello world\", \"o\"); //2\nhow_many_times(\"hello world\"\
    , \"l\"); //3\nhow_many_times(\"how are you today?\", \"o\"); //3\nhow_many_times(\"\
    how are you today?\", \"are\"); //1\nhow_many_times(\"how are you today?\", \"\
    how\"); //1\nhow_many_times(\"Abc\", \"A\"); //1\nhow_many_times(\"Abc\", \"C\"\
    ); //1\nhow_many_times(\"\", \"C\"); //0\n", "  var count = 0;\n  var i = 0;\n\
    \  while (string.indexOf(substring, i) > -1) {\n    count++;\n    i = string.indexOf(substring,\
    \ i) + 1;\n  }\n  return count;\n}\n", "    var sublength = substring.length;\n\
    \    var count = 0;\n    for(var i = 0; i < string.length - sublength + 1; i++){\n\
    \        if(string.substr(i, sublength) == substring){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    var count = 0;\n    var start\
    \ = 0;\n    while (string.indexOf(substring, start) != -1) {\n        count++;\n\
    \        start = string.indexOf(substring, start) + 1;\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n     \
    \   if(string.substring(i, i + substring.length) === substring){\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n", "    if(string.indexOf(substring)\
    \ != -1){\n        var n = string.indexOf(substring);\n        var counter = 1;\n\
    \        var new_string = string.substring(n+1);\n        return counter + how_many_times(new_string,\
    \ substring);\n    }\n    else{\n        return 0;\n    }\n}", "    if (string.length\
    \ > substring.length){\n        return(string.split(substring).length - 1);\n\
    \    }\n    else{\n        return 0;\n    }\n}\n", "\tvar index=string.indexOf(substring);\n\
    \tvar total=0;\n\twhile(index!=-1){\n\t\ttotal+=1;\n\t\tindex=string.indexOf(substring,index+1);\n\
    \t}\n\treturn total;\n}\n", "    if (string.length < substring.length) {\n   \
    \     return 0;\n    }\n    var matching_substrings = 0;\n    for (var i = 0;\
    \ i < string.length; i++) {\n        var matching_string = true;\n        for\
    \ (var j = 0; j < substring.length; j++) {\n            if (string[i + j] !==\
    \ substring[j]) {\n                matching_string = false;\n                break;\n\
    \            }\n        }\n        if (matching_string) {\n            matching_substrings++;\n\
    \        }\n    }\n    return matching_substrings;\n}\n", "    let subLength =\
    \ substring.length;\n    let count = 0;\n    let index = 0;\n    while (index\
    \ < string.length){\n        if (string.substring(index, index + subLength) ===\
    \ substring){\n            count++;\n            index += subLength;\n       \
    \ }\n        else{\n            index++;\n        }\n    }\n    return count;\n\
    }", "  if(substring == \"\"){\n    return 0;\n  }\n  var count = 0;\n  for(var\
    \ i = 0; i < string.length; i++){\n    if(string[i] == substring[0]){\n      var\
    \ sub_index = 1;\n      for(var j = i + 1; j < string.length; j++){\n        if(string[j]\
    \ == substring[sub_index]){\n          sub_index += 1;\n        }\n        else{\n\
    \          break;\n        }\n      }\n      if(sub_index == substring.length){\n\
    \        count += 1;\n      }\n    }\n  }\n  return count;\n}\n", "    //Make\
    \ sure we have lower case strings\n    string = string.toLowerCase();\n    substring\
    \ = substring.toLowerCase();\n    //Make sure we have non-empty strings\n    if(substring\
    \ == '' || string == ''){\n        return 'Please enter valid strings';\n    }\n\
    \n    //split string into array of characters\n    const arr_string = string.split('');\n\
    \    //const arr_substring = substring.split('');\n    let counter = 0;\n    for(let\
    \ i = 0; i < arr_string.length; i++){\n        let substring_counter = 0;\n  \
    \      for(let k = 0; k < substring.length; k++){\n            if(arr_string[i+k]\
    \ == substring[k]){\n                substring_counter ++;\n            }\n  \
    \      }\n        if(substring_counter == substring.length){\n            counter\
    \ ++;\n        }\n    }\n    return counter;\n}\n", "    var count = 0;\n    var\
    \ current = 0;\n    while(current != -1){\n        current = string.indexOf(substring,\
    \ current);\n        if(current != -1){\n            count++;\n            current\
    \ += substring.length;\n        }\n    }\n    return count;\n}\n", "    var found_times\
    \ = 0;\n    var index = string.indexOf(substring);\n    while(index >= 0){\n \
    \       found_times += 1;\n        index = string.indexOf(substring, index + 1);\n\
    \    }\n    return found_times;\n}\n", "\tvar output = 0;\n\tfor(var i = 0; i\
    \ <= string.length - substring.length; i++){\n\t\tvar found = true;\n\t\tfor(var\
    \ j = 0; j < substring.length; j++){\n\t\t\tif(string[i + j] != substring[j]){\n\
    \t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(found){\n\t\t\t\
    output++;\n\t\t}\n\t}\n\treturn output;\n}\n", "    let times = 0;\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length)\
    \ === substring){\n            times++;\n        }\n    }\n    return times;\n\
    }\n", "    var i = 0;\n    var count = 0;\n    while(true){\n        i = string.indexOf(substring,\
    \ i);\n        if(i == -1){\n            break;\n        }\n        count += 1;\n\
    \        i += 1;\n    }\n    return count;\n}\n", "  const regex = new RegExp(substring,\
    \ 'g');\n  const match = string.match(regex);\n  return match ? match.length :\
    \ 0;\n}\n", "\tvar count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\t\
    if(string.substring(i, i + substring.length) == substring){\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "    let counter = 0;\n    let startIndex = 0;\n\
    \    let index;\n    if(string.includes(substring)){\n        while(string.includes(substring,\
    \ startIndex)){\n            index = string.indexOf(substring, startIndex);\n\
    \            counter += 1;\n            startIndex = index + 1;\n        }\n \
    \   }\n    return counter;\n}\n", "    return string.split(substring).length -\
    \ 1;\n}", "    var arr = string.split(substring).length-1;\n    return arr;\n\
    }\n", "    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n   \
    \     if (string.substr(i, substring.length) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "  var count = 0;\n  for (var i =\
    \ 0; i <= string.length - substring.length; i++) {\n    if (string.substr(i, substring.length)\
    \ == substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\treturn\
    \ string.split(substring).length - 1;\n}\n", "\t//Initialize the count with -1.\
    \ Reason: If string is substring of itself. \n\tvar count = -1;\n\t//Next instance\
    \ position\n\tvar index = 0;\n\t//If string and substring are empty\n\tif(string.length\
    \ > 0 && substring.length > 0){\n\t\t//While we have any next instance of substring\n\
    \t\twhile((index = string.indexOf(substring, index)) > -1){\n\t\t\t//Add 1 to\
    \ count\n\t\t\tcount++;\n\t\t\t//Update index\n\t\t\tindex += substring.length;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "\tvar res = string.match(new RegExp(substring,\
    \ \"g\"));\n\treturn res ? res.length : 0;\n}\n", "\tvar count = 0;\n\tvar pos\
    \ = string.indexOf(substring);\n\twhile(pos >= 0){\n\t\tcount += 1;\n\t\tpos =\
    \ string.indexOf(substring, pos + 1);\n\t}\n\treturn count;\n}\n", "  var num=0;\n\
    \  for(var i=0; i<string.length; i++){\n    if(string.slice(i, i+substring.length)\
    \ == substring){\n      num++;\n    }\n  }\n  return num;\n}\n\nhow_many_times(\"\
    hahahahaha\", \"aha\");\n\n", "    return string.match(new RegExp(substring, 'g')).length;\n\
    }\nhow_many_times('lol lol lol', 'lol');", "    if(substring.length == 0){\n \
    \       return null;\n    }\n\n    var count = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.substring(i, i + substring.length) == substring){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "  //First we\
    \ will convert string to array\n  string = string.split(\"\");\n  //Second we\
    \ will convert substring to array and get its length\n  substring = substring.split(\"\
    \");\n  var substring_length = substring.length;\n  //Third we will create a counter\
    \ variable\n  var counter = 0;\n  //Fourth we will loop over the substring array\n\
    \  for(i=0; i<substring.length; i++){\n    //Fifth we will look for the first\
    \ substring letter in the array\n    if(string.indexOf(substring[i]) > -1){\n\
    \      //If we have found it, we will save the first index of this letter\n  \
    \    var substring_index = string.indexOf(substring[i]);\n      //Sixth we will\
    \ create a temporary subarray inside the string array\n      var temp_array =\
    \ string.slice(substring_index, substring_index+substring_length);\n      //Seventh\
    \ we will compare this subarray with substring array\n      if(temp_array.join(\"\
    \") == substring.join(\"\")){\n        //If it matchs, we will increase the counter\n\
    \        counter++;\n      }\n    }\n  }\n  //Finally we will return the counter\n\
    \  return counter;\n}\n", "    var result = 0;\n    for (var i = 0; i < string.length;\
    \ i++) {\n        var loc = string.indexOf(substring, i);\n        if (loc !==\
    \ -1) {\n            result++;\n            i = loc;\n        }\n    }\n    return\
    \ result;\n}", "    var original = string;\n    var count = 0;\n    var pos =\
    \ string.indexOf(substring);\n    while (pos >= 0) {\n        count += 1;\n  \
    \      string = string.substring(pos + 1);\n        pos = string.indexOf(substring);\n\
    \    }\n    return count;\n}\n", "    var a = 0;\n    var pos = 0;\n    while\
    \ (pos !== -1) {\n        pos = string.indexOf(substring,pos);\n        if (pos\
    \ !== -1) {\n            a++;\n            pos += substring.length;\n        }\n\
    \    }\n    return a;\n}\n", "    // your code here...\n}\n", "    var count =\
    \ 0;\n    var substring_length = substring.length;\n    var string_length = string.length;\n\
    \    for(var i = 0; i < string_length; i++) {\n        if(string.substring(i,\
    \ i + substring_length) == substring) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}", "\tvar count = 0;\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tif(string.slice(i, i + substring.length) == substring){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "    let regex = new RegExp(substring, 'g');\n\
    \    return (string.match(regex) || []).length;\n}\n", "  if(string.includes(substring)){\n\
    \    let times = 0;\n    for(let i = 0; i < string.length; i++){\n      if(string.slice(i,\
    \ i + substring.length) === substring){\n        times++;\n      }\n    }\n  \
    \  return times;\n  }\n  return 0;\n}\n", "    if (substring === \"\") {\n   \
    \     return null;\n    }\n    var a = 0;\n    var i = 0;\n    while (i <= string.length\
    \ - substring.length) {\n        if (string.substring(i,i+substring.length) ==\
    \ substring) {\n            a += 1;\n            i += substring.length - 1;\n\
    \        }\n        i += 1;\n    }\n    return a;\n}\n", "\tconsole.log(string.match(new\
    \ RegExp(substring, 'g')).length);\n}\n\nvar sentence = \"hello hello hello hello\"\
    ;\nvar word = \"hello\";\nhow_many_times(sentence, word);\n", "\t//ask user to\
    \ enter a string\n\tvar string = prompt(\"Enter a string:\");\n\t//ask user to\
    \ enter a substring to find in the string\n\tvar substring = prompt(\"Enter a\
    \ substring:\");\n\t//initialize count\n\tvar count = 0;\n\t//find length of string\n\
    \tvar length = string.length;\n\t//find length of substring\n\tvar sub_length\
    \ = substring.length;\n\t//find index of first occurence of substring in string\n\
    \tvar index = string.indexOf(substring);\n\t//convert string to an array\n\tvar\
    \ array = string.split(\"\");\n\t//start for loop to search for substring\n\t\
    for(var i = 0; i < length; i++){\n\t\t//check if index of substring is not -1\
    \ (not found)\n\t\tif(index != -1){\n\t\t\t//increment count by 1\n\t\t\tcount++;\n\
    \t\t\t//update index to find next occurence of substring in string\n\t\t\tindex\
    \ = string.indexOf(substring, index + sub_length);\n\t\t}\n\t}\n\t//print the\
    \ result\n\tconsole.log(\"The substring \\\"\" + substring + \"\\\" was found\
    \ \" + count + \" times in the string \\\"\" + string + \"\\\"\");\n}\n", "  \
    \  var count = 0;\n    var start_index = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == substring[0]){\n            for(let j = 0; j\
    \ < substring.length; j++){\n                if(string[i+j] != substring[j]){\n\
    \                    break;\n                }\n                else if(j == substring.length\
    \ - 1){\n                    count += 1;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\n", "    var count = 0;\n    var i = 0;\n\
    \    while (true) {\n        i = string.indexOf(substring, i);\n        if (i\
    \ != -1) {\n            i += substring.length;\n            count++;\n       \
    \ } else {\n            break;\n        }\n    }\n    return count;\n}\n", " \
    \   return string.split(substring).length - 1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
