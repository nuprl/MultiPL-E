name: HumanEval_2_truncate_number
language: js
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\nfunction\
  \ truncate_number(number){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
  \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
completions: ["    number = parseFloat(number);\n    return number - Math.floor(number);\n\
    }\n", "    return number % 1;\n}\n", "    var intPart = Math.floor(number);\n\
    \    var decPart = number - intPart;\n    return decPart;\n}\n", "    let number_as_string\
    \ = number.toString();\n    let truncated_numbers = number_as_string.split('.');\n\
    \    let decimal_part = '0.' + truncated_numbers[1];\n    return Number(decimal_part);\n\
    }\n", "    //return number - Math.floor(number); //your code here\n    return\
    \ number - Math.trunc(number);\n}\n", "   return number-Math.floor(number);\n\
    }\n\n", "    return (number - Math.floor(number));\n}\n", "  return number - Math.floor(number);\n\
    }\n", "    var number2 = Math.floor(number);\n    var result = number - number2;\n\
    \    return result;\n}\n", "    return number - Math.floor(number);\n}\n", " \
    \   return number % 1;\n}\n", "  return number - Math.floor(number);\n}\n", " \
    \   return (number - parseInt(number)).toFixed(2);\n}\n", "  let numbers =  number.toString().split('.');\n\
    \  if(numbers.length > 1){\n    return numbers[1];\n  }else{\n    return 0;\n\
    \  }\n}\n", "    number = number.toString();\n    var idx = number.indexOf('.');\n\
    \    if (idx < 0) { return 0; }\n    return parseFloat(number.substring(idx));\n\
    }\n", "    //Your code here\n    var strnum = String(number);\n    var floatt\
    \ = parseFloat(strnum);\n    var intt = parseInt(strnum);\n    var tos = String(floatt);\n\
    \    var a = tos.split(\".\");\n    var s = a[1];\n    var b = parseFloat(\"0.\"\
    +s);\n    return b;\n}\n", "    //We have truncate(1.55) = 0.55 and truncate(0.55)\
    \ = 0.55\n    let remainder = number % 1;\n    //We have truncate(0.55) = 0.55\
    \ and truncate(-0.55) = -0.55\n    //We truncate it twice to have a positive decimal\
    \ part\n    if (remainder < 0)\n        remainder = remainder + 1;\n    return\
    \ remainder;\n}\n", "    return number - Math.floor(number);\n}\n", "    return\
    \ number % 1;\n}\n", "  var exp = Math.log10(number);\n  var int_part = Math.floor(exp);\n\
    \  var dec_part = number/Math.pow(10,int_part);\n  return dec_part;\n}\n", " \
    \   return number % 1;\n}\n", "    return number % 1;\n}\n", "\tvar int = Math.floor(number);\n\
    \treturn number - int;\n}\n", "  //TODO: return the decimal part of number\n \
    \ return number - Math.floor(number);\n}\n", "\tvar string = number.toString();\n\
    \tvar dot = string.indexOf('.');\n\tvar decimals = '';\n\tif(dot>=0){\n\t\tdecimals\
    \ = string.substring(dot+1);\n\t}\n\treturn parseInt(decimals);\n}\n", "    var\
    \ part = number - Math.floor(number);\n    return part;\n}", "  // TODO: return\
    \ the decimal part of the number\n  // var str = number.toString();\n  // var\
    \ pieces = str.split(\".\");\n  // return pieces[1];\n  return number % 1;\n}\n",
  "\tvar truncated = number;\n\tvar truncated = parseInt(number)\n\tvar number = number\
    \ - truncated\n\treturn number;\n}\n", "    var number_integer = Math.floor(number);\n\
    \    var number_decimal = number - number_integer;\n    return number_decimal;\n\
    }\n", "    return number - Math.floor(number);\n}\n", "    let str = number.toString()\n\
    \    let point = str.indexOf('.')\n    if (point !== -1){\n        return str.slice(point\
    \ + 1)\n    }\n    return '0'\n}\n", "    let newnumber = number.toString().split('.');\n\
    \    return '0.' + newnumber[1];\n}\n\n\n", "\treturn number - Math.floor(number);\n\
    }\n", "\tif(number >= 0){\n\t\treturn number % 1;\n\t}\n\telse{\n\t\t//truncate\
    \ decimals using Math.floor.\n\t\t//If they were rounded using Math.round then\
    \ the left over \n\t\t//decimals would turn into 1\n\t\treturn (Math.floor(number)\
    \ % 1) + 1;\n\t}\n}\n", "  // your code here\n  return number % 1;\n}\n", "  \
    \  return number - Math.floor(number);\n}\n", "  return number - Math.floor(number);\n\
    }\n\ntruncate_number(10.123); // 0.123\ntruncate_number(5.0564); // 0.0564\ntruncate_number(0.00002);\
    \ // 0.00002\ntruncate_number(0.000012); // 0.000012", "    let str = number.toString();\n\
    \    let dot = str.indexOf('.');\n    return str.slice(dot+1);\n}\n\n\n", "  \
    \  // take the integer part of the number\n    var int_part = Math.floor(number);\n\
    \    // substract the integer part from the original number,\n    // this gives\
    \ us the floating (decimal) part\n    var float_part = number - int_part;\n  \
    \  // return the decimal part\n    return float_part;\n}\n", "  return number\
    \ - Math.floor(number);\n}\n", "  var truncated = number + '';\n  if(truncated.indexOf('.')\
    \ !== -1){\n    truncated = truncated.substring(truncated.indexOf('.'));\n  }\n\
    \  else {\n    truncated = '';\n  }\n  return truncated;\n}\n", "  var truncatedNumber\
    \ = number.toString().split('.')[1];\n  if (truncatedNumber === undefined) {\n\
    \    return 0;\n  }\n  else {\n    return '.' + truncatedNumber;\n  }\n}\n", " \
    \ //For example, truncate_number(14.55) should return 0.55\n  //while truncate_number(14.0)\
    \ should return 0.0\n  //Replace the line below with your code\n  var decimals\
    \ = number - Math.floor(number);\n  return decimals;\n}\n", "  var neg = 1;\n\
    \  if (number < 0) {\n    neg = -1;\n    number = -number;\n  }\n  var int_part\
    \ = Math.floor(number);\n  var dec_part = number - int_part;\n  return neg * dec_part;\n\
    }\n", "    var parts = number.toString().split(\".\");\n    if (parts.length <\
    \ 2) return 0;\n    return parts[1];\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    // For example, a given number of 2.34 will be truncated to 2\n   \
    \ // and a number of 2.66 will be truncated to 2.\n    // Hint: You can use Math.floor()\
    \ and Math.ceil()\n    // Hint: You can use parseInt()\n    // Hint: You can use\
    \ modulo operator '%'\n    // Hint: You can use division operator '/'\n    //\
    \ Hint: You can use Math.floor() and Math.ceil()\n    // Hint: You can use parseInt()\n\
    \    // Hint: You can use modulo operator '%'\n    // Hint: You can use division\
    \ operator '/'\n    let truncated = number - Math.floor(number);\n    return truncated;\n\
    }\n", "  // Your code here.\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = number\
    \ % 1;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part : decimal_part;\n\
    \  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 10;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part : decimal_part;\n\
    \  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 100;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part : decimal_part;\n\
    \  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 1000;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part : decimal_part;\n\
    \  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 10000;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part : decimal_part;\n\
    \  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 100000;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part :\
    \ decimal_part;\n  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is the same as getting the decimal part.\n  // var decimal_part = (number\
    \ % 1) * 1000000;\n  // decimal_part = (decimal_part < 0) ? 1 + decimal_part :\
    \ decimal_part;\n  //\n  // return decimal_part;\n  //---------------------------------------------------------\n\
    \  // This is", "    return number - Math.floor(number);\n}\n", "    //Use the\
    \ modulo operator to get the decimal part\n    return number % 1;\n}\n", "   \
    \ var str = number.toString();\n    var int_part = str.split('.')[0];\n    var\
    \ dec_part = str.split('.')[1];\n    var result = dec_part/Math.pow(10, dec_part.length);\n\
    \    return result;\n}\n", "    return number - Math.floor(number);\n}\n", " \
    \   var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\n", "\treturn number - (~~number);\n}\n", "    var\
    \ string = number.toString();\n    var number = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] == \".\"){\n            number = i;\n          \
    \  break;\n        }\n    }\n    return parseFloat(string.substring(number + 1));\n\
    }\n", "  // your code here\n  var numberInt = Math.floor(number);\n  var numberFloat\
    \ = number - numberInt;\n  return numberFloat;\n}\n", "    return number % 1;\n\
    }\n", "    let str = String(number);\n    let res = str.split(\".\");\n    return\
    \ parseFloat(\"0.\" + res[1]);\n}\n", "  return (number - Math.floor(number));\n\
    }\n", "    let truncated_number;\n    let truncated_number_string;\n    let truncated_decimals;\n\
    \    //decompose number into integer and decimals\n    truncated_number = Math.trunc(number);\n\
    \    truncated_number_string = truncated_number.toString();\n    truncated_decimals\
    \ = number - truncated_number;\n    return truncated_decimals;\n}\n", "\n}\n\n",
  "\tvar decimal = number - Math.floor(number);\n\treturn decimal;\n}\n", "  var integer\
    \ = Math.floor(number);\n  var leftover = number - integer;\n  return leftover;\n\
    }\n", "  let truncated = (number + '').split('.')[1];\n  return truncated? parseInt(truncated)\
    \ : 0;\n}\n", "  if(is_number(number)){\n    return parseFloat(number - parseInt(number));\n\
    \  }\n  return null;\n}\n", "    var exp = Math.floor(Math.log10(number));\n \
    \   var digits = Math.pow(10, exp);\n    var result = number / digits;\n    return\
    \ result;\n}\n", "  return number-Math.floor(number);\n}\n", "    // TODO: Complete\
    \ this function\n}\n", "    var n = number,\n    n2 = n.toString(),\n    n3 =\
    \ n2.split('.'),\n    n4 = n3[1];\n    return n4;\n};\n", "    return number -\
    \ (number | 0);\n}\n", "    return parseFloat(number) - parseInt(number);\n}\n",
  "    return (number % Math.floor(number));\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    var str = \"\" + number;\n    var index = str.indexOf(\".\");\n   \
    \ if (index >= 0)\n        return parseFloat(str.substring(index));\n    else\n\
    \        return 0;\n}\n", "\tvar str = number.toString();\n\tvar pos = str.indexOf('.');\n\
    \tif(pos<0) return 0;\n\treturn parseFloat(str.substring(pos));\n}\n", "\t\n\t\
    var truncated_number;\n\t\n\ttruncated_number = Math.floor(number);\n\t\n\treturn\
    \ number - truncated_number;\n}\n", "\tnumber = parseFloat(number);\n\tvar int_part\
    \ = Math.floor(number);\n\tvar dec_part = number - int_part;\n\treturn dec_part;\n\
    }\n", "  var integer_part = Math.floor(number);\n  var decimal_part = number -\
    \ integer_part;\n  return decimal_part;\n}\n", "    var integerPart = Math.floor(number);\n\
    \    var decimalPart = number - integerPart;\n    return decimalPart;\n}\n", " \
    \ var number_str = number.toString()\n  var number_parts = number_str.split('.')\n\
    \  var integer_part = parseInt(number_parts[0])\n  var decimal_part = parseFloat(number_str.replace(integer_part.toString(),\
    \ \"\"))\n  return decimal_part\n}\n", "  var integer_part = Math.floor(number);\n\
    \  var decimal_part = number - integer_part;\n  return decimal_part;\n}", "  var\
    \ result = number - Math.floor(number);\n  return result;\n}\n", "    // Your\
    \ solution here\n    var trunc = Math.trunc(number);\n    var res = number - trunc;\n\
    \    return res;\n}\n", "    var parts = String(number).split(\".\");\n    if\
    \ (parts.length < 2) {\n        return 0;\n    }\n    return parts[1];\n}\n",
  "  // get the integer part of the number\n  var integer_part = parseInt(number);\n\
    \  // return decimal part of the number\n  return number - integer_part;\n}\n",
  "  var integerPart = parseInt(number);\n  return number - integerPart;\n}\n", " \
    \   //return number - parseInt(number);\n    let truncated = Math.floor(number);\n\
    \    return (number - truncated);\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    let parsed = parseFloat(number);\n    if (parsed < 0) {\n        return\
    \ NaN;\n    }\n    return parsed - Math.floor(parsed);\n}\n", "    // Same as\
    \ number.toFixed(1).split('.')[1]\n    return parseFloat((number%1).toFixed(5));\n\
    }\n", "\tvar intPart = Math.floor(number);\n\tvar decPart = number - intPart;\n\
    \treturn decPart;\n}\n", "  return number - Math.floor(number);\n}\n", "  // Your\
    \ code here\n  return number%1;\n}\n", "    var n = (number - Math.floor(number));\n\
    \    return n;\n}\n", "    // Get integer part.\n    var integer = Math.floor(number);\n\
    \    // Get decimal part.\n    var decimal = number - integer;\n    return decimal;\n\
    }\n", "\treturn number - Math.floor(number);\n}\n", "  let num = number.toString().split('.')[1];\n\
    \  return num === undefined ? 0 : num;\n}\n", "    //YOUR CODE HERE\n}\n", " \
    \  var parts = number.toString().split(\".\");\n   return (parts.length<2) ? 0\
    \ : (\"0.\"+parts[1]);\n}\n", "\tvar truncated = number % 1;\n\treturn truncated;\n\
    }\n", "  return (number - Math.floor(number));\n}\n", "  return number - Math.floor(number);\n\
    }\n", "  if(number < 0){\n    return 'The given number should be positive'\n \
    \ }\n  let int = Math.floor(number);\n  let dec = number - int;\n  return dec;\n\
    }", "    return number - Math.floor(number);\n}\n", "    if(number < 0){\n   \
    \     return undefined;\n    }\n    if(number < 1){\n        return number;\n\
    \    }\n    if(number - Math.floor(number) === 0){\n        return 0;\n    }\n\
    \n    return number - Math.floor(number);\n}\n", "\tvar integer = Math.floor(number);\n\
    \tvar decimals = number - integer;\n\treturn decimals;\n}\n", "    return number\
    \ - Math.floor(number);\n}\n", "    var text = \"\" + number;\n    var decimal\
    \ = text.indexOf(\".\");\n    if (decimal != -1)\n        return text.substring(decimal);\n\
    \    else\n        return \"\";\n}\n", "    var integer_part = parseInt(number);\n\
    \    return number - integer_part;\n}\n", "\tvar n = parseFloat(number);\n\treturn\
    \ n - parseInt(n);\n}\n", "    return number - (number ^ 0);\n}\n", "  return\
    \ number - Math.floor(number);\n}\n", "    return number % 1;\n}\n", "\n}\n",
  "  if(number<1){\n    return number;\n  }else{\n    var intPart = parseInt(number);\n\
    \    return (number-intPart);\n  }\n}\n", "    //return (number % 1);\n    var\
    \ arr = number.toString().split(\".\");\n    var num = arr[1];\n    var num =\
    \ parseInt(num);\n    var num = num / Math.pow(10, arr[1].length);\n    return\
    \ num;\n}", "    //your code here\n}\n\n", "    // We put the negative sign back,\
    \ truncate the number, multiply to\n    // get the decimal part back, and then\
    \ put the negative sign back to\n    // get the correct result\n    return -(Math.trunc(-number)\
    \ - number);\n}\n", "    if (isNaN(number)) {\n        return NaN;\n    }\n  \
    \  var truncated = parseInt(number);\n    return number - truncated;\n}\n", " \
    \   return number % Math.floor(number);\n}\n", "\n}\n", "  return (number > 0)\
    \ ? number % 1 : number % -1\n}\n", "    var truncated_number = Math.floor(number);\n\
    \    var truncated_number_decimals = number - truncated_number;\n    return truncated_number_decimals;\n\
    }\n", "  var result = (number % 1).toFixed(2);\n  return parseFloat(result);\n\
    }", "    let aux = number.toString().split(\".\");\n    let decimals = \"0.\"\
    \ + aux[1];\n    return parseFloat(decimals);\n}\n", "    var parts = String(number).split(\"\
    .\");\n    if (parts.length == 1) {\n        return \"0\";\n    }\n    return\
    \ parts[1];\n}\n", "  return number % 1;\n}\n", "    var number_integer = Math.floor(number);\n\
    \    var decimal_part = number - number_integer;\n    return decimal_part;\n}\n",
  "    return number - parseInt(number);\n}\n", "    var integer = Math.floor(number);\n\
    \    var decimal = number - integer;\n    return decimal;\n}\n", "    return number\
    \ - Math.floor(number);\n}\n\n", "    //return (Math.trunc(number)).toFixed(2);\n\
    \    return number.toFixed(2);\n}\n", "    return number - Math.floor(number);\n\
    }\n", "\tvar sign = \"\";\n\tif(number < 0){\n\t\tsign = \"-\";\n\t\tnumber =\
    \ Math.abs(number);\n\t}\n\tvar number_str = number.toString();\n\tvar dot_pos\
    \ = number_str.indexOf(\".\");\n\tif(dot_pos === -1){\n\t\treturn \"0\";\n\t}\n\
    \treturn sign + number_str.substring(dot_pos);\n}\n", "  number = parseFloat(number);\n\
    \  return number - parseInt(number);\n}\n", "\treturn number - parseInt(number);\n\
    }\n", "    var integer_part = Math.floor(number);\n    var decimal_part = number\
    \ - integer_part;\n    return decimal_part;\n}\n", "  return number - Math.floor(number);\n\
    }\n", "    //Ok, so this is a bit lame...\n    //The only way I could find to\
    \ truncate the number was by converting\n    // it to a string.  I'm sure there's\
    \ a better way to do this in JS.\n    var string = number.toString();\n    var\
    \ array = string.split(\".\");\n    return array[1];\n}\n", "    const integer_part\
    \ = Math.trunc(number);\n    const decimal_part = number - integer_part;\n   \
    \ return decimal_part;\n}\n", "    return number - Math.floor(number);\n}\n",
  "\treturn number - Math.floor(number);\n}\n", "  // fill in the missing code here\n\
    \  let num = number.toString().split('.');\n  return +'0.' + num[1];\n}\n", " \
    \ return number - Math.floor(number);\n}\n", "    //TODO: Task 6\n\tvar integer\
    \ = parseInt(number);\n\t\n\treturn number - integer;\n}\n", "  var s_number =\
    \ number.toString();\n  var split_number = s_number.split(\".\");\n  return split_number[1];\n\
    }\n\n\n", "    //TODO: Return the decimal part of the number\n    var numberString\
    \ = number.toString();\n    var getDecimals = numberString.split(\".\");\n   \
    \ if (getDecimals.length == 1)\n        return 0;\n    var decimals = getDecimals[1];\n\
    \    return parseFloat(\"0.\" + decimals);\n}\n", "  return number - Math.floor(number);\n\
    }\n", "  var result = number % 1;\n  return result;\n}\n", "    let truncate_num\
    \ = Math.trunc(number);\n    let num = number - truncate_num;\n    return num;\n\
    }\n", "    return number - Math.floor(number);\n}\n", "  return number - Math.floor(number);\n\
    }\n", "    //console.log(number);\n    var num = number.toString();\n    var dot\
    \ = num.indexOf('.');\n    // console.log(dot);\n    var decimal = num.substring(dot+1);\n\
    \    return parseFloat('0.'+decimal);\n}\n", "    var integer_part = Math.floor(number);\n\
    \    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n",
  "    return Number((number % 1).toFixed(2));\n}\n", "  return number % Math.floor(number);\n\
    }\n", "  if(number < 0){\n    return 1 + truncate_number(-number);\n  }\n\n  var\
    \ str = \"\" + number;\n  var parts = str.split(\".\");\n  var decimals = parseFloat(\"\
    0.\" + parts[1]);\n  return decimals;\n}\n", "\treturn number - Math.floor(number);\n\
    }\n", "    //Fill in your code here.\n    var trunc_num = parseInt(number);\n\
    \    return number - trunc_num;\n}\ntruncate_number(5.12);\ntruncate_number(13.15);\n",
  "    //Your code here\n}\n", "    return Number((number%1).toFixed(1));\n}\n", " \
    \   var integer = Math.floor(number);\n    var decimals = number - integer;\n\
    \    return decimals;\n}", "    var number_str = number.toString()\n    var number_parts\
    \ = number_str.split('.')\n    if (number_parts.length === 1) {\n        return\
    \ 0\n    }\n    else {\n        return parseFloat('0.' + number_parts[1])\n  \
    \  }\n}\n", "\tlet integer_part = Math.floor(number);\n\tlet decimal_part = number\
    \ - integer_part;\n\treturn decimal_part;\n}\n", "    console.log(\"Number before:\
    \ \"+number);\n    if(number > 0){\n        if(number > 1){\n            number\
    \ -= parseInt(number);\n        }\n        console.log(\"Number after: \"+number);\n\
    \        return number;\n    }\n    else{\n        console.log(\"Number was not\
    \ positive.\");\n        return number;\n    }\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    var parts = number.toString().split(\".\");\n    if (parts.length <\
    \ 2) {\n        return 0;\n    }\n    var decimals = \"0.\" + parts[1];\n    return\
    \ parseFloat(decimals);\n}\n", "  let number_int = Math.floor(number);\n  let\
    \ number_decimal = number - number_int;\n  return number_decimal;\n}\n\n", " \
    \   return number%1;\n}\n", "    var integer_part = Math.floor(number);\n    var\
    \ decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "  var\
    \ temp = parseInt(number);\n  var dec = number - temp;\n  return dec;\n}\n", " \
    \   return number - Math.floor(number);\n}\n\n", "  return number%1;\n}\n", " \
    \ let truncate_number = String(number).split('.');\n  if (truncate_number.length\
    \ > 1) {\n    return \"0.\" + truncate_number[1];\n  } else {\n    return 0;\n\
    \  }\n}\n", "    return number - Math.floor(number);\n}\n", "    var result =\
    \ 0;\n    result = number - Math.floor(number);\n    return result;\n}\n", " \
    \ return Math.floor(number);\n}", "  // TODO: implement function\n  let num =\
    \ number.toString();\n  return parseFloat(num.slice(num.indexOf('.')));\n}\n",
  "    //TODO: return the decimal part\n    var intPart = Math.floor(number);\n  \
    \  return number - intPart;\n}\n", "  return number - Math.floor(number);\n}",
  "\n}\n", "    return parseFloat(number.toString().split('.')[1]);\n}\n", "  var\
    \ truncated_number = number.toString().split('.')[1];\n  return truncated_number;\n\
    }\n", "    var str_number = number.toString();\n    var position = str_number.indexOf('.');\n\
    \    if (position !== -1){\n        return str_number.substring(position+1);\n\
    \    }\n    return '';\n}\n", "  //your code here\n}\n", "  return number % 1;\n\
    }\n", "  return number - Math.floor(number);\n}", "    return (number - Math.floor(number));\n\
    }\n", "\treturn number - Math.floor(number);\n}\n", "\treturn number - Math.floor(number);\n\
    }\n", "\tvar integer = Math.floor(number);\n\tvar decimals = number - integer;\n\
    \treturn decimals;\n}\n", "  var truncated_number = number - Math.floor(number);\n\
    \  return truncated_number;\n}\n", "    // take the integer part of the number\
    \ and subtract it from the given number\n    return number - Math.floor(number);\n\
    }\n", "  if (number < 0) {\n    throw Error('positive number must be provided');\n\
    \  }\n\n  return number - Math.floor(number);\n}\n", "  var num = number;\n  var\
    \ str = num.toString();\n  var index = str.indexOf('.');\n  return +str.slice(index);\n\
    }\n", "    //YOUR CODE HERE\n}\n", "    //your code here\n    var str = number.toString()\n\
    \    var result = str.split('.')\n    if(result.length == 1){\n        return\
    \ 0;\n    }\n    return +result[1]\n}", "    var result = 0;\n    //Remove numbers\
    \ after the decimal point (if there are any)\n    number = number.toString().split('.')[0];\n\
    \    //If the number is not an integer, add leftover part to the result\n    if(number.toString().length\
    \ > 0){\n        result = number.toString().split('.')[1];\n    }\n    //Return\
    \ the decimal part of the number\n    return result;\n}", "  var array = number.toString().split(\"\
    .\");\n  if (array.length > 1) {\n    return \"0.\" + array[1];\n  } else {\n\
    \    return 0;\n  }\n}\n", "\treturn number - Math.floor(number);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
