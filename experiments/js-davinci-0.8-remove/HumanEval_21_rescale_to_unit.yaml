name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    var min = Math.min.apply(Math, numbers);\n    var max = Math.max.apply(Math,\
    \ numbers);\n    var out = [];\n    for (var i=0; i<numbers.length; i++){\n  \
    \      out.push((numbers[i]-min)/(max-min));\n    }\n    return out;\n}\n", " \
    \   //get the min and max, so that the returned list is scaled between 0 and 1\n\
    \    var min = d3.min(numbers);\n    var max = d3.max(numbers);\n    var output\
    \ = numbers.map(function(x){\n        return (x - min) / (max - min);\n    });\n\
    \    return output;\n}\n", "\tvar result = [], max = numbers[0], min = numbers[0];\n\
    \tfor(var i=0; i<numbers.length; i++){\n\t\tvar n = numbers[i];\n\t\tif(n > max)\
    \ max = n;\n\t\tif(n < min) min = n;\n\t}\n\tfor(var i=0; i<numbers.length; i++){\n\
    \t\tvar n = numbers[i];\n\t\tresult.push((n-min)/(max-min));\n\t}\n\treturn result;\n\
    }\n", "    var min = Infinity, max = -Infinity;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        if(numbers[i]<min) min = numbers[i];\n        if(numbers[i]>max)\
    \ max = numbers[i];\n    }\n    var scale = max-min;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i]-min)/scale;\n    }\n    return numbers;\n\
    }\n", "    var min_val = Math.min.apply(null, numbers);\n    var max_val = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(value){\n        return (value -\
    \ min_val) / (max_val - min_val);\n    });\n}\n", "  let min = Math.min(...numbers)\n\
    \  let max = Math.max(...numbers)\n  let new_numbers = []\n  numbers.forEach(d\
    \ => {\n    let new_num = (d - min) / (max - min)\n    new_numbers.push(new_num)\n\
    \  })\n  return new_numbers\n}\n", "\tvar min=Math.min.apply(Math, numbers), max=Math.max.apply(Math,\
    \ numbers);\n\tvar n=numbers.length;\n\tfor(var i=0; i<n; i++){\n\t\tnumbers[i]=(numbers[i]-min)/(max-min);\n\
    \t}\n\treturn numbers;\n}\n", "  var max = Math.max.apply(null, numbers);\n  var\
    \ min = Math.min.apply(null, numbers);\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    numbers[i] = (numbers[i] - min) / (max - min);\n  }\n  return numbers;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(n){\n        return (n - min) / (max\
    \ - min);\n    });\n}\n", "    //find smallest and largest numbers\n    var min\
    \ = numbers[0], max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min) min = numbers[i];\n        if(numbers[i] > max)\
    \ max = numbers[i];\n    }\n    //create a new array of numbers such that the\
    \ smallest number is zero, and the largest is 1\n    var new_numbers = [];\n \
    \   for(var i = 0; i < numbers.length; i++){\n        new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return new_numbers;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const transformed\
    \ = numbers.map(n => (n - min) / (max - min));\n    return transformed;\n}\n",
  "    var min_number = Math.min.apply(null, numbers);\n    var max_number = Math.max.apply(null,\
    \ numbers);\n    var min_max_range = max_number - min_number;\n    var rescaled_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; i++){\n        var rescaled_number\
    \ = (numbers[i] - min_number) / min_max_range;\n        rescaled_numbers.push(rescaled_number);\n\
    \    }\n    return rescaled_numbers;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var new_numbers = [];\n\
    \  for (var i=0; i<numbers.length; i++){\n    new_numbers.push((numbers[i]-min)/(max-min));\n\
    \  }\n  return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    return numbers.map(x => (x - min) / (max -\
    \ min));\n}\n", "  var new_min=0, new_max=1;\n  var min=numbers[0], max=numbers[0];\n\
    \  for(var i=1; i<numbers.length; i++){\n    if(numbers[i]<min) min=numbers[i];\n\
    \    if(numbers[i]>max) max=numbers[i];\n  }\n  var slope=(new_max-new_min)/(max-min);\n\
    \  var rescaled=[];\n  for(var i=0; i<numbers.length; i++){\n    rescaled.push(slope*(numbers[i]-min)+new_min);\n\
    \  }\n  return rescaled;\n}\n", "\tlet max = numbers[0];\n\tlet min = numbers[0];\n\
    \tfor(let number of numbers){\n\t\tif(number > max){\n\t\t\tmax = number;\n\t\t\
    }\n\t\tif(number < min){\n\t\t\tmin = number;\n\t\t}\n\t}\n\treturn numbers.map(number\
    \ => (number - min) / (max - min));\n}\n", "  var max = Math.max.apply(Math, numbers);\n\
    \  var min = Math.min.apply(Math, numbers);\n  return numbers.map(function(number){\n\
    \    return (number - min) / (max - min);\n  });\n}\n\n", "    var min = d3.min(numbers);\n\
    \    var max = d3.max(numbers);\n    var scale = d3.scale.linear().domain([min,\
    \ max]).range([0, 1]);\n    return numbers.map(function(v){ return scale(v); });\n\
    }\n", "\tvar min = Math.min.apply(Math, numbers);\n\tvar max = Math.max.apply(Math,\
    \ numbers);\n\tvar scale = max - min;\n\treturn numbers.map(function(n){return\
    \ (n - min) / scale});\n}\n", "\tvar min = Math.min.apply(null, numbers);\n\t\
    var max = Math.max.apply(null, numbers);\n\tvar scaled = numbers.map(function(n){return\
    \ (n-min)/(max-min);});\n\treturn scaled;\n}\n", "    var max = numbers[0];\n\
    \    var min = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  for(var i = 0; i < numbers.length; i++){\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\n", "    var result = [];\n\
    \    if (numbers.length > 1){\n        var min = Math.min.apply(Math, numbers);\n\
    \        var max = Math.max.apply(Math, numbers);\n        var length = max -\
    \ min;\n        for (var i = 0; i < numbers.length; i++){\n            result.push((numbers[i]\
    \ - min) / length);\n        }\n    }\n    return result;\n}\n", "\tvar res =\
    \ [];\n\tvar min = Math.min.apply(null, numbers);\n\tvar max = Math.max.apply(null,\
    \ numbers);\n\tfor (var i=0; i<numbers.length; i++){\n\t\tres.push((numbers[i]-min)/(max-min));\n\
    \t}\n\treturn res;\n}\n", "  let min = Number.MAX_VALUE;\n  let max = Number.MIN_VALUE;\n\
    \  for(const num of numbers){\n    if(num < min){\n      min = num;\n    }\n \
    \   if(num > max){\n      max = num;\n    }\n  }\n  const normalize = x => (x\
    \ - min) / (max - min);\n  return numbers.map(normalize);\n}\n", "\tif(!Array.isArray(numbers)){\n\
    \t\tthrow \"this is not a array\";\n\t}\n\n\tif(numbers.length < 2){\n\t\tthrow\
    \ \"this array has less than 2 numbers\";\n\t}\n\n\tvar min = _.min(numbers);\n\
    \tvar max = _.max(numbers);\n\n\tvar range = max - min;\n\n\tvar rescaled = _.map(numbers,\
    \ function(n){\n\t\treturn (n - min) / range;\n\t});\n\n\treturn rescaled;\n}\n",
  "    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n\
    \    const scale = 1/(max-min);\n    return numbers.map(num => (num-min)*scale);\n\
    }\n", "\tvar min = _.min(numbers);\n\tvar max = _.max(numbers);\n\tvar difference\
    \ = max - min;\n\treturn _.map(numbers, function(el){\n\t\treturn (el - min) /\
    \ difference;\n\t});\n}\n", "    //assume numbers is an array of at least two\
    \ points\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE;\n \
    \   var scaled_numbers = [];\n    var min_index = -1;\n    var max_index = -1;\n\
    \    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n            min_index = i;\n        }\n      \
    \  if(numbers[i] > max){\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    if(min === max){\n        //if everything is the\
    \ same, set to 0\n        for(var i = 0; i < numbers.length; i++){\n         \
    \   scaled_numbers.push(0);\n        }\n    }\n    else{\n        for(var i =\
    \ 0; i < numbers.length; i++){\n            scaled_numbers.push((numbers[i] -\
    \ min) / (max - min));\n        }\n    }\n    return scaled_numbers;\n}\n", " \
    \   var min_number = Math.min.apply(Math, numbers);\n    var max_number = Math.max.apply(Math,\
    \ numbers);\n    var scaled_numbers = numbers.map(function(n){return (n-min_number)/(max_number-min_number)});\n\
    \    return scaled_numbers;\n}\n", "    var smallest = numbers[0];\n    var largest\
    \ = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        smallest\
    \ = Math.min(smallest, numbers[i]);\n        largest = Math.max(largest, numbers[i]);\n\
    \    }\n    var q = largest - smallest;\n    return _.map(numbers, function(number){\n\
    \        return (number - smallest) / q;\n    });\n}\n", "\tvar min_number = Math.min.apply(null,\
    \ numbers);\n\tvar max_number = Math.max.apply(null, numbers);\n\tvar result =\
    \ [];\n\tfor (var i=0; i<numbers.length; i++){\n\t\tvar num = numbers[i];\n\t\t\
    if (max_number == min_number){\n\t\t\tresult.push(0);\n\t\t} else {\n\t\t\tresult.push((num\
    \ - min_number) / (max_number - min_number));\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar min = Math.min.apply(Math, numbers);\n\tvar max = Math.max.apply(Math,\
    \ numbers);\n\tvar res = [];\n\tfor (var i=0; i<numbers.length; i++){\n\t\tres.push((numbers[i]-min)/(max-min));\n\
    \t}\n\treturn res;\n}\n\n", "    var min = Math.min.apply(null, numbers);\n  \
    \  var max = Math.max.apply(null, numbers);\n    var newNumbers = [];\n    for\
    \ (var i = 0; i < numbers.length; i++) {\n        newNumbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return newNumbers;\n}\n", "\tlet min = Math.min(...numbers)\n\
    \tlet max = Math.max(...numbers)\n\tlet scaled = numbers.map(x => (x - min) /\
    \ (max - min))\n\treturn scaled\n}\n", "  var max = Math.max.apply(null, numbers);\n\
    \  var min = Math.min.apply(null, numbers);\n  if( max > min ){\n    var d = max\
    \ - min;\n    return numbers.map(function(number){\n      return (number - min)\
    \ / d;\n    });\n  }\n  else {\n    return numbers.map(function(number){\n   \
    \   return 0;\n    });\n  }\n}\n", "\tvar max = _.max(numbers);\n\tvar min = _.min(numbers);\n\
    \tvar numbers = _.map(numbers, function(num){\n\t\treturn (num - min) / (max -\
    \ min);\n\t});\n\treturn numbers;\n}\n\n", "  var min = Math.min.apply(null, numbers);\n\
    \  var max = Math.max.apply(null, numbers);\n  var to_unit = {\n    'a': (max\
    \ - min),\n    'b': -(min)\n  };\n  return numbers.map(function(x){\n    return\
    \ (x + to_unit.b) / to_unit.a;\n  });\n}\n", "\tvar max = numbers[0];\n\tvar min\
    \ = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif(numbers[i] < min){\n\t\t\tmin\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tvar scaled = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tscaled.push((numbers[i] - min) / (max - min));\n\t}\n\treturn scaled;\n\
    }\n", "    var max = Math.max.apply(Math, numbers);\n    var min = Math.min.apply(Math,\
    \ numbers);\n    var range = max - min;\n    return numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n}\n", "    var min = d3.min(numbers);\n\
    \    var max = d3.max(numbers);\n    //This is the formula for linear transform\
    \ into unit interval:\n    var rescaled = numbers.map(function(n){\n        return\
    \ (n - min) / (max - min);\n    });\n    return rescaled;\n}\n", "\tvar max =\
    \ Math.max.apply(null, numbers);\n\tvar min = Math.min.apply(null, numbers);\n\
    \tvar span = max - min;\n\tvar new_numbers = [];\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar number = numbers[i];\n\t\tvar new_number = (number - min) / span;\n\
    \t\tnew_numbers.push(new_number);\n\t}\n\treturn new_numbers;\n}\n", "    var\
    \ smallest = Math.min.apply(null, numbers);\n    var largest = Math.max.apply(null,\
    \ numbers);\n    var result = numbers.map(function(x){\n        return (x - smallest)\
    \ / (largest - smallest);\n    });\n    return result;\n}\n", "    const scalar\
    \ = Math.max(...numbers);\n    const devision = Math.min(...numbers);\n    const\
    \ result = numbers.map(x => x / (scalar - devision));\n    return result;\n}\n\
    \n", "\tvar max = Math.max.apply(null, numbers);\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar denom = max - min;\n\tvar rescaled = _.map(numbers, function(elem){\n\
    \t\treturn (elem - min) / denom;\n\t});\n\treturn rescaled;\n}\n", "    let min\
    \ = numbers[0];\n    let max = numbers[0];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n      \
    \  }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n\
    \    }\n    if(min == max){\n        throw new RangeError(\"Cannot rescale numbers\
    \ to unit interval, as they are all the same number\");\n    }\n    return numbers.map(function(num){\n\
    \        return (num - min) / (max - min);\n    });\n}\n", "\tvar _min = Math.min.apply(Math,\
    \ numbers);\n\tvar _max = Math.max.apply(Math, numbers);\n\tvar _scale = 1/(_max\
    \ - _min);\n\t\n\treturn numbers.map(function(val){return ((val - _min) * _scale)});\n\
    }\n", "    //Assume all numbers are nonnegative\n    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    return numbers.map(x => (x - min) /\
    \ (max - min));\n}\n", "  //get largest and smallest\n  let max = Math.max(...numbers);\n\
    \  let min = Math.min(...numbers);\n  //apply linear transform\n  let scaled =\
    \ numbers.map(x => (x - min) / (max - min));\n  return scaled;\n}\n", "  var min\
    \ = Math.min.apply(null, numbers);\n  var max = Math.max.apply(null, numbers);\n\
    \  return numbers.map(function(number){\n    return (number - min) / (max - min);\n\
    \  });\n}\n", "  numbers.sort();\n  var min = numbers[0];\n  var max = numbers[numbers.length-1];\n\
    \  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    result.push((numbers[i]-min)/(max-min));\n\
    \  }\n  return result;\n}\n", "  var min = d3.min(numbers);\n  var max = d3.max(numbers);\n\
    \  var rescaled = numbers.map(function(num){\n    return (num - min) / (max -\
    \ min);\n  });\n  return rescaled;\n}\n", "\tvar max=get_max(numbers);\n\tvar\
    \ min=get_min(numbers);\n\tvar divisor=max-min;\n\tvar rescaled=[];\n\tnumbers.forEach(function(element){\n\
    \t\tvar new_value=(element-min)/divisor;\n\t\trescaled.push(new_value);\n\t});\n\
    \treturn rescaled;\n}\n", "    var min = Math.min.apply(Math, numbers);\n    var\
    \ max = Math.max.apply(Math, numbers);\n    return numbers.map(function(n){return\
    \ (n-min)/(max-min);});\n}\n", "    let min = Math.min(...numbers);\n    let max\
    \ = Math.max(...numbers);\n    let scaled = numbers.map(x => (x - min) / (max\
    \ - min));\n    return scaled;\n}\n", "    numbers = Object.assign({}, numbers);\n\
    \    let minimum = numbers[Object.keys(numbers)[0]];\n    let maximum = numbers[Object.keys(numbers)[0]];\n\
    \    for (let key in numbers){\n        if (numbers[key] < minimum){\n       \
    \     minimum = numbers[key];\n        }\n        if (numbers[key] > maximum){\n\
    \            maximum = numbers[key];\n        }\n    }\n    for (let key in numbers){\n\
    \        numbers[key] = (numbers[key] - minimum) / (maximum - minimum);\n    }\n\
    \    return numbers;\n}\n", "  let min = d3.min(numbers)\n  let max = d3.max(numbers)\n\
    \  let scale = d3.scaleLinear()\n      .domain([min, max])\n      .range([0, 1])\n\
    \  let transformed = numbers.map(scale)\n  return transformed\n}\n\n", "  var\
    \ unit_numbers = [];\n  var min = Math.min.apply(Math, numbers);\n  var max =\
    \ Math.max.apply(Math, numbers);\n  numbers.forEach(function(num){\n    unit_numbers.push((num\
    \ - min) / (max - min));\n  });\n  return unit_numbers;\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\tvar\
    \ r = (largest - smallest)\n\tfor(i = 0; i < numbers.length; i++){\n\t\tnumbers[i]\
    \ = (numbers[i] - smallest) / r;\n\t}\n\treturn numbers;\n}\n", "  var min=numbers[0];\n\
    \  var max=numbers[0];\n  var i;\n  for(i=1;i<numbers.length;i++){\n    if(numbers[i]<min){\n\
    \      min=numbers[i];\n    }\n    if(numbers[i]>max){\n      max=numbers[i];\n\
    \    }\n  }\n  var diff=max-min;\n  var rescaled_numbers=[];\n  for(i=0;i<numbers.length;i++){\n\
    \    rescaled_numbers.push((numbers[i]-min)/diff);\n  }\n  return rescaled_numbers;\n\
    }\n", "  return numbers.map(n => (n - Math.min(...numbers)) / (Math.max(...numbers)\
    \ - Math.min(...numbers)));\n}\n", "  var rescaled = numbers.map(function(num){\n\
    \    return (num - min_num(numbers)) / (max_num(numbers) - min_num(numbers));\n\
    \  });\n  return rescaled;\n}\n", "    var original_min = numbers[0];\n    var\
    \ original_max = numbers[0];\n    var numbers_count = numbers.length;\n    for(var\
    \ i = 1; i < numbers_count; i++){\n        if(numbers[i] < original_min){\n  \
    \          original_min = numbers[i];\n        }\n        if(numbers[i] > original_max){\n\
    \            original_max = numbers[i];\n        }\n    }\n    var new_values\
    \ = [numbers_count];\n    for(var i = 0; i < numbers_count; i++){\n        new_values[i]\
    \ = (numbers[i] - original_min) / (original_max - original_min);\n    }\n    return\
    \ new_values;\n}\n", "    //Apply a linear transform on the array of numbers\n\
    \    //This function assumes that we have at least 2 numbers.\n    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    return numbers.map(x => (x - min) /\
    \ (max - min));\n}\n", "    var max = Math.max.apply(null, numbers);\n    var\
    \ min = Math.min.apply(null, numbers);\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\n", "    var max = numbers[0];\n    var min = numbers[0];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        if(numbers[i] < min){\n            min\
    \ = numbers[i];\n        }\n    }\n    var diff = max - min;\n    if(diff == 0){\n\
    \        throw new Error(\"Can't rescale, min and max are equal\");\n    }\n \
    \   for(var i = 0; i < numbers.length; i++){\n        numbers[i] = (numbers[i]\
    \ - min) / diff;\n    }\n    return numbers;\n}\n", "  //Find min and max\n  var\
    \ min = numbers[0];\n  var max = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n    }\n    if(numbers[i]\
    \ > max){\n      max = numbers[i];\n    }\n  }\n  //For each number, apply formula\n\
    \  var new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n  }\n  return new_numbers;\n}\n", "    var min=numbers[0],\
    \ max=numbers[0];\n    for(var i=1; i<numbers.length; i++){\n        if(numbers[i]<min)\
    \ min=numbers[i];\n        if(numbers[i]>max) max=numbers[i];\n    }\n    var\
    \ result=[];\n    for(var i=0; i<numbers.length; i++){\n        result.push((numbers[i]-min)/(max-min));\n\
    \    }\n    return result;\n}\n", "  let largest = -Number.MAX_VALUE;\n  let smallest\
    \ = Number.MAX_VALUE;\n  for(let n of numbers){\n    if(n > largest){\n      largest\
    \ = n;\n    }\n    if(n < smallest){\n      smallest = n;\n    }\n  }\n  let diff\
    \ = largest - smallest;\n  if(diff <= 0){\n    return [0];\n  }\n  return numbers.map(n\
    \ => {\n    return (n - smallest) / diff;\n  });\n}\n", "    return rescale(numbers,min(numbers),max(numbers),0,1);\n\
    }\n", "\n}\n", "\tvar min = Math.min.apply(null, numbers);\n\tvar max = Math.max.apply(null,\
    \ numbers);\n\tvar range = max - min;\n\tfor (var i = 0; i < numbers.length; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) / range;\n\t}\n\treturn numbers;\n}\n",
  "    if(numbers.length<2){\n        console.log(\"WARNING: rescale_to_unit() needs\
    \ at least two numbers, returning input\");\n        return numbers;\n    }\n\
    \    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    if(min==max){\n        console.log(\"WARNING: rescale_to_unit()\
    \ produced all zeros, returning input\");\n        return numbers;\n    }\n  \
    \  var zero_scale = -min;\n    var one_scale = max+zero_scale;\n    return numbers.map(function(n){return\
    \ (n+zero_scale)/one_scale;});\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n  \
    \  var scaled = [];\n    for (var i = 0; i < numbers.length; i++){\n        scaled.push((numbers[i]\
    \ - min) / range);\n    }\n    return scaled;\n}\n", "\tvar max = numbers[0];\n\
    \tvar min = numbers[0];\n\tfor(var i=1; i<numbers.length; i++){\n\t\tmax = Math.max(max,\
    \ numbers[i]);\n\t\tmin = Math.min(min, numbers[i]);\n\t}\n\tvar result = [];\n\
    \tfor(var i=0; i<numbers.length; i++){\n\t\tresult.push((numbers[i]-min)/(max-min));\n\
    \t}\n\treturn result;\n}", "\tvar min = numbers[0];\n\tvar max = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min){\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = (numbers[i]\
    \ - min) / (max - min);\n\t}\n\treturn numbers;\n}\n", "  var num_min = Math.min.apply(Math,\
    \ numbers),\n      num_max = Math.max.apply(Math, numbers),\n      range = num_max\
    \ - num_min;\n  return numbers.map(function(num){\n    return (num - num_min)\
    \ / range;\n  });\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n", "  var min = _.min(numbers);\n  var max = _.max(numbers);\n  var diff =\
    \ max - min;\n  return _.map(numbers, function(i){\n    return (i - min) / diff;\n\
    \  });\n}\n", "  var largest = -Infinity;\n  var smallest = Infinity;\n  for(var\
    \ i=0; i<numbers.length; i++){\n    if(numbers[i] > largest){\n      largest =\
    \ numbers[i];\n    }\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n\
    \    }\n  }\n  var new_numbers = [];\n  for(var i=0; i<numbers.length; i++){\n\
    \    new_numbers.push((numbers[i] - smallest) / (largest - smallest));\n  }\n\
    \  return new_numbers;\n}\n", "\t\n\tvar max = Math.max.apply(Math, numbers);\n\
    \tvar min = Math.min.apply(Math, numbers);\n\t\n\t\n\tnumbers.forEach(function(elem,\
    \ i){\n\t\tnumbers[i] = (elem - min) / (max - min);\n\t});\n\t\n\treturn numbers;\n\
    }\n\n", "  var min = numbers[0], max = numbers[0];\n  for(var i=1; i<numbers.length;\
    \ i++){\n    if(numbers[i] < min)\n      min = numbers[i];\n    if(numbers[i]\
    \ > max)\n      max = numbers[i];\n  }\n  var out = [];\n  for(var i=0; i<numbers.length;\
    \ i++){\n    if(min != max)\n      out.push((numbers[i] - min) / (max - min));\n\
    \    else out.push(0);\n  }\n  return out;\n}\n", "  var new_numbers = [];\n \
    \ var min = Math.min.apply(null, numbers);\n  var max = Math.max.apply(null, numbers);\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n  }\n  return new_numbers;\n}\n", "  var max_value =\
    \ Math.max.apply(null, numbers);\n  var min_value = Math.min.apply(null, numbers);\n\
    \  return numbers.map(function(value){\n    return (value - min_value) / (max_value\
    \ - min_value);\n  });\n}\n", "    var smallest = Math.min.apply(Math, numbers);\n\
    \    var largest = Math.max.apply(Math, numbers);\n    var unit_numbers = numbers.map(function(num){\n\
    \        return (num - smallest) / (largest - smallest);\n    });\n    return\
    \ unit_numbers;\n}\n", "    var result = new Array();\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    for (var index\
    \ = 0; index < numbers.length; index++) {\n        result.push((numbers[index]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n", "    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] < min){\n            min = numbers[i];\n        }\n      \
    \  if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n  \
    \  var diff = max - min;\n    if(diff === 0){\n        return numbers;\n    }\n\
    \    var newNumbers = [];\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    newNumbers.push((numbers[i] - min) / diff);\n    }\n    return newNumbers;\n\
    }\n", "\tvar biggest = numbers[0];\n\tvar smallest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > biggest){\n\t\t\tbiggest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t}\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = (numbers[i]\
    \ - smallest) / (biggest - smallest);\n\t}\n\treturn numbers;\n}\n", "\tvar sorted_numbers\
    \ = numbers.sort(function(a,b){return a-b});\n\tvar scale = sorted_numbers[sorted_numbers.length-1]\
    \ - sorted_numbers[0];\n\tvar range = 1 - 0;\n\tvar result = numbers.map(function(x){\n\
    \t\treturn (x - sorted_numbers[0])*range/scale;\n\t});\n\treturn result;\n}\n",
  "  var m = Math.min.apply(null, numbers);\n  var M = Math.max.apply(null, numbers);\n\
    \  return numbers.map(function(e){\n    return (e-m)/(M-m);\n  });\n}\n\n", "\t\
    var max = Math.max.apply(null, numbers),\n\t\tmin = Math.min.apply(null, numbers);\n\
    \t\n\t//We subtract min from all values, then divide by max-min to get the range\
    \ between 0 and 1\n\treturn numbers.map(function(num){\n\t\treturn (num-min)/(max-min);\n\
    \t});\n}\n", "    var new_numbers = [];\n    var min_number = Math.min.apply(Math,\
    \ numbers);\n    var max_number = Math.max.apply(Math, numbers);\n    var range\
    \ = max_number - min_number;\n    for (var i = 0; i < numbers.length; i++){\n\
    \        new_numbers.push((numbers[i] - min_number) / range);\n    }\n    return\
    \ new_numbers;\n}\n\n", "  var min=d3.min(numbers), max=d3.max(numbers)\n  var\
    \ d=max-min\n  var rescaled=numbers.map(function(n){return (n-min)/d})\n  return\
    \ rescaled\n}\n", "\t//first find the smallest and largest number\n\tlet largest_number\
    \ = _.max(numbers);\n\tlet smallest_number = _.min(numbers);\n\tif(largest_number\
    \ === smallest_number){\n\t\t//if every number is the same, we can't scale\n\t\
    \treturn numbers;\n\t}\n\t//otherwise\n\tlet a = 1 / (largest_number - smallest_number);\n\
    \tlet b = -a * smallest_number;\n\treturn _.map(numbers, x => a * x + b);\n}\n",
  "\tvar min = numbers[0];\n\tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tvar range = max - min;\n\tvar\
    \ result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tresult.push((numbers[i]\
    \ - min) / range);\n\t}\n\treturn result;\n}\n\n", "  var max = math.max(numbers);\n\
    \  var min = math.min(numbers);\n  if (max == min){\n    return numbers;\n  }\n\
    \  return numbers.map(function(num){\n    return (num - min) / (max - min);\n\
    \  });\n}\n", "    var numbers = math.rescale(numbers,0,1);\n    return numbers;\n\
    }\n", "\t//linear scaling to 0-1\n\tlet max = numbers[0];\n\tlet min = numbers[0];\n\
    \tfor(let i=1; i<numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax =\
    \ numbers[i];\n\t\t}\n\t\tif(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t\
    }\n\t}\n\t//console.log(\"max and min\",max,min);\n\tlet normalized = numbers.map(function(e){\n\
    \t\treturn (e-min)/(max-min);\n\t});\n\treturn normalized;\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tvar largest_index = 0;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t\tlargest_index = i;\n\t\t}\n\t}\n\treturn numbers.map(function(e){return\
    \ (e - smallest)/(largest - smallest)});\n}\n", "\t\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\t\n\tvar delta = max - min;\n\
    \tvar new_numbers = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    new_numbers.push((numbers[i] - min) / delta);\n\t}\n\t\n\treturn new_numbers;\n\
    }\n", "    var min = numbers[0], max = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        min = Math.min(min, numbers[i]);\n        max = Math.max(max,\
    \ numbers[i]);\n    }\n    var diff = max - min;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;\n\
    }\n", "  var max = _.max(numbers);\n  var min = _.min(numbers);\n  var diff =\
    \ max - min;\n  var rescaled = numbers.map(function(number){\n    return (number\
    \ - min) / diff;\n  });\n  return rescaled;\n}\n", "  var min_number = Math.min.apply(Math,\
    \ numbers);\n  var max_number = Math.max.apply(Math, numbers);\n  return numbers.map(function(number){\n\
    \    return (number - min_number) / (max_number - min_number);\n  });\n}\n", " \
    \   var min = Math.min.apply(null, numbers),\n        max = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(x){\n        return (x - min) / (max\
    \ - min);\n    });\n}\n", "\tvar min = Math.min.apply(null, numbers);\n\tvar max\
    \ = Math.max.apply(null, numbers);\n\treturn numbers.map(function(number){\n\t\
    \treturn (number - min) / (max - min);\n\t});\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let rescaled = numbers.map(number =>\
    \ (number - min) / (max - min));\n    return rescaled;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers),\n        max = Math.max.apply(null, numbers);\n    for (var i=0; i<numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let range = max - min;\n    return numbers.map(number => (number - min) /\
    \ range);\n}\n", "    var i;\n    var rescaled_numbers = [];\n    var min = Math.min.apply(Math,\
    \ numbers);\n    var max = Math.max.apply(Math, numbers);\n    var range = max\
    \ - min;\n    if (range == 0){\n        return numbers;\n    }\n    for (i = 0;\
    \ i < numbers.length; i++){\n        rescaled_numbers.push((numbers[i] - min)\
    \ / range);\n    }\n    return rescaled_numbers;\n}\n", "  var small = Math.min.apply(null,\
    \ numbers);\n  var large = Math.max.apply(null, numbers);\n  var factor = 1/(large-small);\n\
    \  return numbers.map(function(n){return (n-small)*factor;});\n}\n", "    var\
    \ max_number = Math.max.apply(null, numbers);\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var diff = max_number - min_number;\n    var scaled_numbers =\
    \ numbers.map(function(num){\n        return ((num - min_number) / diff);\n  \
    \  });\n    return scaled_numbers;\n}\n", "\tvar smallest = Math.min.apply(null,\
    \ numbers);\n\tvar largest = Math.max.apply(null, numbers);\n\tvar range = largest\
    \ - smallest;\n\tvar scaled = [];\n\tfor (var i = 0; i < numbers.length; i++){\n\
    \t\tvar ratio = (numbers[i] - smallest) / range;\n\t\tscaled.push(ratio);\n\t\
    }\n\treturn scaled;\n}\n", "  numbers.sort(function(a,b){return a-b});\n  var\
    \ smallest = numbers[0];\n  var largest = numbers[numbers.length-1];\n  var result\
    \ = [];\n  for (var i = 0; i < numbers.length; i++){\n    result.push((numbers[i]-smallest)/(largest-smallest));\n\
    \  }\n  return result;\n}\n", "    var largest = Math.max.apply(null, numbers);\n\
    \    var smallest = Math.min.apply(null, numbers);\n    return numbers.map( function(x){\
    \ return (x-smallest)/(largest-smallest) } );\n}\n", "\tvar _min = numbers[0];\n\
    \tvar _max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(_min\
    \ > numbers[i]){\n\t\t\t_min = numbers[i];\n\t\t}\n\t\tif(_max < numbers[i]){\n\
    \t\t\t_max = numbers[i];\n\t\t}\n\t}\n\tvar _range = _max - _min;\n\tvar _out\
    \ = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t_out.push((numbers[i]\
    \ - _min) / _range);\n\t}\n\treturn _out;\n}\n", "  //find min and max values\n\
    \  var max_val = Math.max.apply(null, numbers);\n  var min_val = Math.min.apply(null,\
    \ numbers);\n  var delta = max_val - min_val;\n  //rescale\n  for (var i=0; i<numbers.length;\
    \ i++){\n    numbers[i] = (numbers[i] - min_val) / delta;\n  }\n  return numbers;\n\
    }\n", "\tvar biggest = Math.max.apply(null, numbers);\n\tvar smallest = Math.min.apply(null,\
    \ numbers);\n\tvar result = [];\n\tnumbers.forEach(function(n){\n\t\tresult.push((n-smallest)/(biggest-smallest));\n\
    \t});\n\treturn result;\n}\n", "\tvar max = d3.max(numbers);\n\tvar min = d3.min(numbers);\n\
    \tvar rescaled = numbers.map(function(d){\n\t\treturn (d-min)/(max-min);\n\t});\n\
    \treturn rescaled;\n}\n\n", "    var rescaled = [];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        var number = numbers[i];\n        var number_is_max = numbers.every(function(x){return\
    \ x <= number;})\n        var number_is_min = numbers.every(function(x){return\
    \ x >= number;})\n        if (number_is_max){\n            rescaled.push(1);\n\
    \        } else if (number_is_min){\n            rescaled.push(0);\n        }\
    \ else {\n            rescaled.push(uniform_to_unit(number));\n        }\n   \
    \ }\n    return rescaled;\n}", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    var new_max = 1;\n    var new_min\
    \ = 0;\n    var range = max - min;\n    if (range === 0){\n        return numbers;\n\
    \    }\n    var new_range = new_max - new_min;\n    return numbers.map(function(val){\n\
    \        return ((val - min) / range) * new_range + new_min;\n    });\n}\n", " \
    \   var max_num = Math.max.apply(null, numbers);\n    var min_num = Math.min.apply(null,\
    \ numbers);\n    var rescaled = numbers.map(function(num){\n        return (num\
    \ - min_num) / (max_num - min_num);\n    });\n    return rescaled;\n}\n", "  var\
    \ smallest = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null,\
    \ numbers);\n  return numbers.map(function(num){\n    return (num - smallest)\
    \ / (largest - smallest);\n  });\n}\n\n", "  if(!numbers || numbers.length < 2){\n\
    \    return;\n  }\n  var min = numbers[0];\n  var max = numbers[0];\n  var len\
    \ = numbers.length;\n  for(var i = 1; i < len; i++){\n    if(numbers[i] < min){\n\
    \      min = numbers[i];\n    }\n    if(numbers[i] > max){\n      max = numbers[i];\n\
    \    }\n  }\n  var scale = 1 / (max - min);\n  for(var i = 0; i < len; i++){\n\
    \    numbers[i] = (numbers[i] - min) * scale;\n  }\n}\n", "  var max = Math.max.apply(Math,\
    \ numbers);\n  var min = Math.min.apply(Math, numbers);\n  var t = d3.scale.linear().domain([min,\
    \ max]).range([0, 1]);\n  for (var i=0; i<numbers.length; i++){\n    numbers[i]\
    \ = t(numbers[i]);\n  }\n  return numbers;\n}\n", "\t// get minimum and maximum\
    \ from the list of numbers\n\tvar min = Math.min.apply(null, numbers);\n\tvar\
    \ max = Math.max.apply(null, numbers);\n\t// subtract minimum from all numbers,\
    \ so that the smallest number becomes 0\n\tvar shifted = numbers.map(function(n){return\
    \ n-min;});\n\t//divide by the interval of possible values to get a number between\
    \ 0 and 1\n\tvar scaled = shifted.map(function(n){return n/(max-min);});\n\treturn\
    \ scaled;\n}\n\n", "    let numbers_copy = [...numbers];\n    let max = Math.max(...numbers_copy);\n\
    \    let min = Math.min(...numbers_copy);\n    let diff = max - min;\n    for(let\
    \ i = 0; i < numbers_copy.length; i++){\n        numbers_copy[i] = (numbers_copy[i]\
    \ - min) / diff;\n    }\n    return numbers_copy;\n}\n", "\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i=1; i<numbers.length; i++){\n\t\tif(numbers[i]<min){\n\
    \t\t\tmin = numbers[i];\n\t\t}\n\t\tif(numbers[i]>max){\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tvar length = max-min;\n\tvar scaled = [];\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tscaled.push((numbers[i]-min)/length);\n\t}\n\treturn scaled;\n}\n",
  "  var min = Math.min.apply(Math, numbers);\n  var max = Math.max.apply(Math, numbers);\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] -\
    \ min) / (max - min);\n  }\n  return numbers;\n}\n", "  var min = min_in_list(numbers);\n\
    \  var max = max_in_list(numbers);\n  var range = max - min;\n  if (range ===\
    \ 0){\n    return [0, 0, 0];\n  }\n  return numbers.map(function(n){\n    return\
    \ (n - min) / range;\n  });\n}\n", "  var min = Math.min.apply(null, numbers);\n\
    \  var max = Math.max.apply(null, numbers);\n  return numbers.map(function(n){return\
    \ (n-min)/(max-min);});\n}\n", "\t// smallest number is found\n\tvar min = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min){\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t}\n\t// largest number is found\n\tvar max = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\t// subtract min from each element, divide by\
    \ the difference between max and min\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tnumbers[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn numbers;\n}\n",
  "    var min=Math.min.apply(null,numbers);\n    var max=Math.max.apply(null,numbers);\n\
    \    var ret=[];\n    for(var i=0;i<numbers.length;i++){\n        ret.push((numbers[i]-min)/(max-min));\n\
    \    }\n    return ret;\n}\n", "\tif(numbers.length<2){\n\t\tthrow \"Can't rescale\
    \ array of 1 element\"\n\t}\n\tvar largest = Math.max.apply(Math, numbers);\n\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar diff = largest-smallest;\n\
    \tvar rescaled = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\trescaled.push((numbers[i]-smallest)/diff);\n\
    \t}\n\treturn rescaled;\n}\n", "\n}\n\nmodule.exports = {\n    word_count,\n \
    \   word_frequency,\n    word_frequency_map,\n    top_ten_words,\n    rescale_to_unit\n\
    };", "\tconst min_number = Math.min(...numbers);\n\tconst max_number = Math.max(...numbers);\n\
    \tconst transform = x => (x - min_number) / (max_number - min_number);\n\treturn\
    \ numbers.map(transform);\n}\n", "\t//return numbers.map(n => n);\n\tvar min =\
    \ Math.min(...numbers);\n\tvar max = Math.max(...numbers);\n\tvar scale = max\
    \ - min;\n\treturn numbers.map(n => (n - min) / scale);\n}\n", "  var max = Math.max.apply(null,\
    \ numbers),\n      min = Math.min.apply(null, numbers);\n  //console.log(\"max=\"\
    , max, \"min=\", min);\n  var rescaled = numbers.map(function(e){\n    return\
    \ (e - min) / (max - min);\n  });\n  return rescaled;\n}\n", "  //find min and\
    \ max values in the list\n  var min = Math.min.apply(null, numbers);\n  var max\
    \ = Math.max.apply(null, numbers);\n  return numbers.map(function(n){return (n-min)/(max-min);});\n\
    }\n", "\tvar max = Math.max.apply(Math, numbers);\n\tvar min = Math.min.apply(Math,\
    \ numbers);\n\t\n\tvar range = max - min;\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tnumbers[i] = (numbers[i] - min) / range;\n\t}\n\t\n\treturn numbers;\n\
    }\n", "\tvar linear_transform = function(number){\n\t\treturn (number - this.min)\
    \ / (this.max - this.min);\n\t}\n\t\n\tvar min = Math.min.apply(Math, numbers);\n\
    \tvar max = Math.max.apply(Math, numbers);\n\t\n\treturn numbers.map(linear_transform,\
    \ { min: min, max: max });\n}\n", "  var min = _.min(numbers);\n  var max = _.max(numbers);\n\
    \  var ranges = _.map(numbers, function(n){return n - min;});\n  var maximum =\
    \ _.max(ranges);\n  return _.map(ranges, function(r){return r / maximum;});\n\
    }\n", "    //first, figure out what the smallest number is and what the biggest\
    \ number is\n    var smallest_num = numbers[0];\n    var largest_num = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest_num){\n\
    \            smallest_num = numbers[i];\n        }\n        if(numbers[i] > largest_num){\n\
    \            largest_num = numbers[i];\n        }\n    }\n    //now that we know\
    \ the smallest and largest numbers, calculate the new numbers and return them\n\
    \    var rescaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        rescaled_numbers.push((numbers[i] - smallest_num) / (largest_num - smallest_num));\n\
    \    }\n    return rescaled_numbers;\n}\n", "\tvar min = Math.min.apply(null,\
    \ numbers),\n\t\tmax = Math.max.apply(null, numbers);\n\t\n\tvar new_numbers =\
    \ [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnew_numbers.push((numbers[i]\
    \ - min) / (max - min));\n\t}\n\treturn new_numbers;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var rescaled =\
    \ numbers.map(function(x){\n        return (x - min) / (max - min);\n    });\n\
    \    return rescaled;\n}\n\n", "  var mini = Math.min.apply(Math, numbers);\n\
    \  var maxi = Math.max.apply(Math, numbers);\n  var scale = maxi - mini;\n  return\
    \ numbers.map(function(e){\n    return (e - mini) / scale;\n  });\n}\n", "\tvar\
    \ min = d3.min(numbers);\n\tvar max = d3.max(numbers);\n\tvar rescaled = numbers.map(function(n){\n\
    \t\treturn (n - min) / (max - min);\n\t});\n\treturn rescaled;\n}\n", "    var\
    \ min = Math.min.apply(Math, numbers);\n    var max = Math.max.apply(Math, numbers);\n\
    \    var range = max - min;\n    var new_numbers = [];\n    for (var i = 0; i\
    \ < numbers.length; i++){\n        new_numbers.push((numbers[i] - min) / range);\n\
    \    }\n    return new_numbers;\n}\n\n", "  var min = numbers[0];\n  var max =\
    \ numbers[0];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] <\
    \ min){\n      min = numbers[i];\n    }\n    if(numbers[i] > max){\n      max\
    \ = numbers[i];\n    }\n  }\n  var dif = max - min;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    numbers[i] = (numbers[i] - min) / dif;\n  }\n  return numbers;\n\
    }\n", "\tvar max = numbers[0];\n\tvar min = numbers[0];\n\t\n\tfor(var i = 0;\
    \ i < numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\t\n\t\
    var interval = max - min;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    numbers[i] = (numbers[i] - min) / interval;\n\t}\n\t\n\treturn numbers;\n}\n",
  "  var min = Math.min.apply(Math, numbers),\n      max = Math.max.apply(Math, numbers);\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] -\
    \ min) / (max - min);\n  }\n  return numbers;\n}\n", "\tvar min = d3.min(numbers);\n\
    \tvar max = d3.max(numbers);\n\treturn numbers.map(function(d){return (d-min)/(max-min);});\n\
    }\n", "    var max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null,\
    \ numbers);\n    return numbers.map(function(x){return ((x-min)/(max-min))});\n\
    }\n", "    //what is the max and min of the array\n    var min=numbers[0], max=numbers[0];\n\
    \    for(var i=1; i<numbers.length; i++){\n        if(numbers[i]<min){\n     \
    \       min=numbers[i];\n        }\n        if(numbers[i]>max){\n            max=numbers[i];\n\
    \        }\n    }\n    //rescale to 0-1\n    var new_numbers=[];\n    for(var\
    \ i=0; i<numbers.length; i++){\n        new_numbers.push((numbers[i]-min)/(max-min));\n\
    \    }\n    return new_numbers;\n}\n", "\tvar largest = 0;\n\tvar smallest = 0;\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > largest){\n\t\t\
    \tlargest = numbers[i];\n\t\t}\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t}\n\tvar diff = largest - smallest;\n\tif(diff == 0){\n\
    \t\tfor(var i = 0; i < numbers.length; i++){\n\t\t\tnumbers[i] = 1;\n\t\t}\n\t\
    }else{\n\t\tfor(var i = 0; i < numbers.length; i++){\n\t\t\tnumbers[i] = (numbers[i]\
    \ - smallest) / diff;\n\t\t}\n\t}\n\treturn numbers;\n}\n", "  var min=numbers[0],max=numbers[0];\n\
    \  for(var i=1;i<numbers.length;i++){\n    if(numbers[i]<min) min=numbers[i];\n\
    \    if(numbers[i]>max) max=numbers[i];\n  }\n  for(var i=0;i<numbers.length;i++){\n\
    \    numbers[i]=numbers[i]/max;\n  }\n  return numbers;\n}\n", "    var max =\
    \ Math.max.apply(null, numbers);\n    var min = Math.min.apply(null, numbers);\n\
    \    var scale = max - min;\n    return numbers.map(function(i){\n        return\
    \ (i - min) / scale;\n    });\n}\n", "    let largest_number = Math.max(...numbers);\n\
    \    let smallest_number = Math.min(...numbers);\n    let diff = largest_number\
    \ - smallest_number;\n    let rescaled_numbers = [];\n    for (number of numbers){\n\
    \        rescaled_numbers.push((number - smallest_number) / diff);\n    }\n  \
    \  return rescaled_numbers;\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\
    \tvar min = Math.min.apply(null, numbers);\n\tvar transformed = numbers.map(function(n){\n\
    \t\treturn (n - min) / (max - min);\n\t});\n\treturn transformed;\n}\n", "   \
    \ let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    //let\
    \ range = max - min;\n\n    //return numbers.map(n => (n - min) / range);\n  \
    \  return numbers.map(n => (n - min) / (max - min));\n}\n", "    let min = numbers[0];\n\
    \    let max = numbers[0];\n    for(let i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] < min){\n            min = numbers[i];\n        }\n      \
    \  if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n  \
    \  let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n", "    var min = _.min(numbers);\n\
    \    var max = _.max(numbers);\n    var r = _.map(numbers, function(n){\n    \
    \    var r = (n - min) / (max - min);\n        return r;\n    });\n    return\
    \ r;\n}\n", "  var min = min_number(numbers);\n  var max = max_number(numbers);\n\
    \  var interval = max - min;\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    new_numbers.push((numbers[i] - min) / interval);\n  }\n  return new_numbers;\n\
    }\n", "\tlet min = Math.min(...numbers);\n\tlet max = Math.max(...numbers);\n\t\
    return numbers.map( (n) => {\n\t\treturn (n - min) / (max - min);\n\t});\n}\n",
  "  var min = d3.min(numbers);\n  var max = d3.max(numbers);\n  var result = [];\n\
    \  numbers.forEach(function(n){\n    result.push((n-min)/(max-min));\n  });\n\
    \  return result;\n}\n", "  var min = Math.min.apply(null, numbers),\n      max\
    \ = Math.max.apply(null, numbers);\n  var transformed = [];\n  for (var i = 0;\
    \ i < numbers.length; i++) {\n    transformed.push((numbers[i] - min) / (max -\
    \ min));\n  }\n  return transformed;\n}\n", "    const min = Math.min(...numbers)\n\
    \    const max = Math.max(...numbers)\n    const new_numbers = numbers.map(function(num){\n\
    \        return (num - min) / (max - min)\n    })\n    return new_numbers\n}\n",
  "\tvar min = Math.min.apply(null, numbers),\n\t\tmax = Math.max.apply(null, numbers);\n\
    \tvar denominator = max - min;\n\t//Check if the denominator is 0, which would\
    \ mean that all numbers in the list are the same\n\tif(denominator == 0){\n\t\t\
    //If so, instead of throwing an error, just return an array of 0's of the same\
    \ length\n\t\treturn numbers.map(function(){\n\t\t\treturn 0;\n\t\t});\n\t}\n\t\
    //Otherwise return an array of the rescaled numbers\n\treturn numbers.map(function(n){\n\
    \t\treturn (n - min) / denominator;\n\t});\n}\n", "  let max = Math.max(...numbers);\n\
    \  let min = Math.min(...numbers);\n  let arr = numbers.map(x => (x - min) / (max\
    \ - min));\n  return arr;\n}\n", "\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar smallest = Math.min.apply(Math, numbers);\n\tvar unit = [];\n\tfor (var\
    \ i = 0; i < numbers.length; i++) {\n\t\tunit.push((numbers[i] - smallest) / (largest\
    \ - smallest));\n\t};\n\treturn unit;\n}\n", "  var max = Math.max.apply(Math,\
    \ numbers);\n  var min = Math.min.apply(Math, numbers);\n  var spread = max -\
    \ min;\n  return numbers.map(function(n){return (n - min) / spread;});\n}\n",
  "    // grab the min and max numbers from the list of numbers\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    // subtract min\
    \ from all numbers in the list\n    var scaled_numbers = numbers.map(function(x){return\
    \ x - min;});\n    // divide each of the numbers by the difference between the\
    \ max and min\n    return scaled_numbers.map(function(x){return x / (max - min);});\n\
    }\n", "    var max = _.max(numbers);\n    var min = _.min(numbers);\n    var unit_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; i++){\n        unit_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return unit_numbers;\n}\n", "    const min_value\
    \ = min(numbers);\n    const max_value = max(numbers);\n    const range = max_value\
    \ - min_value;\n    if(range == 0){\n        throw 'cannot rescale a list with\
    \ a range of 0';\n    }\n    return numbers.map(function(v){\n        return (v\
    \ - min_value) / range;\n    });\n}\n", "\tvar min = d3.min(numbers);\n\tvar max\
    \ = d3.max(numbers);\n\tvar new_numbers = numbers.map(function(number){\n\t\t\
    return (number - min) / (max - min);\n\t});\n\treturn new_numbers;\n}\n", "\t\
    var min = Math.min.apply(null, numbers);\n\tvar max = Math.max.apply(null, numbers);\n\
    \tvar range = max - min;\n\tvar len = numbers.length;\n\tvar scaled = new Array(len);\n\
    \tfor(var i = 0; i < len; i++){\n\t\tscaled[i] = (numbers[i] - min) / range;\n\
    \t}\n\treturn scaled;\n}\n", "\tvar min = numbers[0], max = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min) min = numbers[i];\n\
    \t\tif(numbers[i] > max) max = numbers[i];\n\t}\n\tvar range = max - min;\n\t\
    for(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = (numbers[i] - min)\
    \ / range;\n\t}\n\treturn numbers;\n}\n", "    let max_n = -Infinity;\n    let\
    \ min_n = Infinity;\n    for(let i=0; i<numbers.length; ++i){\n        if(numbers[i]>max_n){\n\
    \            max_n = numbers[i];\n        }\n        if(numbers[i]<min_n){\n \
    \           min_n = numbers[i];\n        }\n    }\n    let range = max_n - min_n;\n\
    \    let new_numbers = [];\n    for(let i=0; i<numbers.length; ++i){\n       \
    \ new_numbers.push((numbers[i]-min_n)/range);\n    }\n    return new_numbers;\n\
    }\n", "    var m = Math.min.apply(null, numbers);\n    var M = Math.max.apply(null,\
    \ numbers);\n    var new_numbers = numbers.map(function(x){return (x-m)/(M-m);});\n\
    \    return new_numbers;\n}\n", "    var unit = numbers.slice();\n    var max\
    \ = Math.max.apply(null, unit);\n    var min = Math.min.apply(null, unit);\n \
    \   for (var i=0; i<unit.length; i++){\n        unit[i] = (unit[i]-min)/(max-min);\n\
    \    }\n    return unit;\n}\n", "    const max = Math.max(...numbers)\n    const\
    \ min = Math.min(...numbers)\n    return numbers.map(n => (n - min) / (max - min))\n\
    }\n", "    var min_number = Math.min.apply(null, numbers);\n    var max_number\
    \ = Math.max.apply(null, numbers);\n    var unit_numbers = numbers.map(function(num){\n\
    \        return (num - min_number) / (max_number - min_number);\n    });\n   \
    \ return unit_numbers;\n}\n", "  var max = Math.max.apply(null, numbers);\n  var\
    \ min = Math.min.apply(null, numbers);\n  var len = numbers.length;\n  var rescaled\
    \ = [];\n  for (var i = 0; i < len; i++){\n    rescaled.push((numbers[i] - min)\
    \ / (max - min));\n  }\n  return rescaled;\n}\n", "    const length = numbers.length;\n\
    \    let minimum = Number.MAX_VALUE;\n    let maximum = Number.MIN_VALUE;\n  \
    \  for(let i = 0; i < length; i++){\n        minimum = Math.min(minimum, numbers[i]);\n\
    \        maximum = Math.max(maximum, numbers[i]);\n    }\n    const factor = 1/(maximum\
    \ - minimum);\n    for(let i = 0; i < length; i++){\n        numbers[i] = (numbers[i]\
    \ - minimum) * factor;\n    }\n}\n", "    let max = _.max(numbers);\n    let min\
    \ = _.min(numbers);\n    let diff = max - min;\n    return numbers.map(n => (n\
    \ - min) / diff);\n}\n\nclass GloveButton extends React.Component {\n    render(){\n\
    \        let p = this.props;\n        return (\n            <div className=\"\
    col-xs-6 col-sm-3 col-md-2 button-container\">\n                <div className=\"\
    text-center\" style={{padding: \"0px\"}}>\n                    <button className=\"\
    btn btn-primary\"\n                            style={{color: p.color, height:\
    \ \"80px\", width: \"80px\", fontSize: \"1.2em\"}}\n                         \
    \   onClick={p.onClick}>\n                        {p.text}\n                 \
    \   </button>\n                </div>\n            </div>\n        );\n    }\n\
    }\n\nclass GloveAxis extends React.Component {\n    render(){\n        let p =\
    \ this.props;\n        return (\n            <div className=\"col-xs-6 col-sm-3\
    \ col-md-2 axis-container\">\n                <div className=\"text-center\" style={{padding:\
    \ \"0px\"}}>\n                    <h4 style={{color: p.color}}>{p.axis}</h4>\n\
    \                </div>\n            </div>\n        );\n    }\n}\n\nclass Glove\
    \ extends React.Component {\n    constructor(props){\n        super(props);\n\
    \        this.state = {\n            x: 0,\n            y: 0,\n            z:\
    \ 0,\n            button: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n\
    \    }\n\n    handleClick(axis){\n        return () => {\n            let state\
    \ = {};\n            state[axis] = state[axis] + 1;\n            this.setState(state);\n\
    \        };\n    }\n\n    render(){\n        let p = this.props;\n        return\
    \ (\n            <div>\n                <div className=\"row\" style={{paddingBottom:\
    \ \"1em\"}}>\n                    <Glove", "  numbers = numbers.sort(function(a,b){return\
    \ a-b});\n  var min = numbers[0];\n  var max = numbers[numbers.length-1];\n  var\
    \ A = max - min;\n  var B = -(A)*min/(max-min);\n  var scaled_values = numbers.map(function(n){\n\
    \    return n*A+B;\n  });\n  return scaled_values;\n}\n", "  //I feel like this\
    \ could be optimized by using the Reduce method instead of a for loop here, but\
    \ I'm not confident I know how to make it work yet\n  let min = numbers[0]\n \
    \ let max = numbers[0]\n  for (let i = 0; i < numbers.length; i++){\n    if (numbers[i]\
    \ < min){\n      min = numbers[i]\n    }\n    if (numbers[i] > max){\n      max\
    \ = numbers[i]\n    }\n  }\n  let scaled_numbers = []\n  for (let i = 0; i < numbers.length;\
    \ i++){\n    scaled_numbers.push((numbers[i] - min) / (max - min))\n  }\n  return\
    \ scaled_numbers\n}\n", "    let lowest = numbers[0];\n    let highest = numbers[0];\n\
    \    for(let i = 1; i < numbers.length; i++){\n        lowest = Math.min(lowest,\
    \ numbers[i]);\n        highest = Math.max(highest, numbers[i]);\n    }\n    let\
    \ span = highest - lowest;\n    return numbers.map(function(val){\n        return\
    \ (val - lowest) / span;\n    });\n}\n", "    var max = _.max(numbers);\n    var\
    \ min = _.min(numbers);\n    var scale = 1/(max-min);\n    return _.map(numbers,function(e){\n\
    \        return (e-min)*scale;\n    });\n}\n", "  let max = Math.max(...numbers)\n\
    \  let min = Math.min(...numbers)\n  let delta = max - min\n  let rescaled = numbers.map(n\
    \ => (n - min) / delta)\n  return rescaled\n}\n", "\tvar mins = []\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar min = numbers[i][0]\n\t\tfor(var j\
    \ = 0; j < numbers[i].length; j++){\n\t\t\tif(numbers[i][j] < min){\n\t\t\t\t\
    min = numbers[i][j]\n\t\t\t}\n\t\t}\n\t\tmins.push(min)\n\t}\n\tvar maxes = []\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tvar max = numbers[i][0]\n\t\t\
    for(var j = 0; j < numbers[i].length; j++){\n\t\t\tif(numbers[i][j] > max){\n\t\
    \t\t\tmax = numbers[i][j]\n\t\t\t}\n\t\t}\n\t\tmaxes.push(max)\n\t}\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tfor(var j = 0; j < numbers[i].length;\
    \ j++){\n\t\t\tnumbers[i][j] = (numbers[i][j] - mins[i]) / (maxes[i] - mins[i])\n\
    \t\t}\n\t}\n\treturn numbers\n}\n", "    var min = Math.min.apply(Math, numbers);\n\
    \    var max = Math.max.apply(Math, numbers);\n    return numbers.map(function(value){\n\
    \        return ((value - min) / (max - min))\n    });\n}\n", "    var max = Math.max.apply(Math,\
    \ numbers);\n    var min = Math.min.apply(Math, numbers);\n    var range = max\
    \ - min;\n    //console.log(\"max, min, range\", max, min, range);\n    var scalars\
    \ = numbers.map(function(number){\n        return (number - min) / range;\n  \
    \  });\n    return scalars;\n}\n", "    // ...\n}\n", "  let min = Math.min(...numbers);\n\
    \  let max = Math.max(...numbers);\n  let result = numbers.map(function(element){\n\
    \    return (element - min) / (max - min);\n  });\n  return result;\n}\n", " \
    \   let to_return = [];\n    let max = numbers[0];\n    let min = numbers[0];\n\
    \    for(let n of numbers){\n        if(n>max){\n            max = n;\n      \
    \  }\n        if(n<min){\n            min = n;\n        }\n    }\n    let diff\
    \ = max-min;\n    for(let n of numbers){\n        to_return.push((n-min)/diff);\n\
    \    }\n    return to_return;\n}\n", "    //Find the smallest number\n    var\
    \ min = 1000000\n    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i]\
    \ < min){\n            min = numbers[i]\n        }\n    }\n    //Find the largest\
    \ number\n    var max = -1000000\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (numbers[i] > max){\n            max = numbers[i]\n        }\n   \
    \ }\n    //Perform rescaling\n    for (var i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(value){\n        return (value -\
    \ min) / (max - min);\n    });\n}\n", "\tvar range = Math.max.apply(null, numbers)\
    \ - Math.min.apply(null, numbers);\n\tfor (var i=0; i<numbers.length; i++){\n\t\
    \tnumbers[i] = (numbers[i] - Math.min.apply(null, numbers)) / range;\n\t}\n\t\
    return numbers;\n}\n", "\tvar lowest_value = min(numbers);\n\tvar highest_value\
    \ = max(numbers);\n\tvar delta = highest_value - lowest_value;\n\treturn numbers.map(function(x){return\
    \ (x - lowest_value)/delta});\n}\n", "\tvar new_numbers = [];\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar max = Math.max.apply(null, numbers);\n\t\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tnew_numbers.push((numbers[i]-min)/(max-min));\n\t}\n\t\n\treturn\
    \ new_numbers;\n}\n", "    var max = Math.max.apply(null, numbers);\n    var min\
    \ = Math.min.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
