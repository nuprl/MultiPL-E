language: js
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let first = 0;\n\
    \  let second = 1;\n  let result = 0;\n  for(let i = 0; i < n; i++){\n    result\
    \ = first + second;\n    first = second;\n    second = result;\n  }\n  return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpatmibvzb.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpatmibvzb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n    while (n >= 0){\n        temp = a;\n        a = a + b;\n     \
    \   b = temp;\n        n--;\n    }\n    return b;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgqxosjfz.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqxosjfz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n==0){\n   \
    \     return 0;\n    }\n    if(n==1){\n        return 1;\n    }\n    return fib(n-1)+fib(n-2);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return Math.round((1/Math.sqrt(5))*(Math.pow((1+Math.sqrt(5))/2,n)-Math.pow((1-Math.sqrt(5))/2,n)));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var fibs = [0,1];\n\
    \  for(let i = 2; i <= n; i++){\n    fibs.push(fibs[i-1] + fibs[i-2]);\n  }\n\
    \  return fibs[n];\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var fibNum = 1;\n\
    \    var fibNumPrev = 1;\n    for(var i = 2; i < n; i++){\n        var fibTemp\
    \ = fibNum;\n        fibNum += fibNumPrev;\n        fibNumPrev = fibTemp;\n  \
    \  }\n    return fibNum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n == 0){\n   \
    \ return 0;\n  }\n  if(n == 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n == 0){\n\t\t\
    return 0;\n\t}else if(n == 1){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1) +\
    \ fib(n-2);\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 1, b = 0,\
    \ temp;\n  while (n > 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n\
    \  }\n  return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 0, b =\
    \ 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a\
    \ = b;\n        b = f;\n    }\n    return f;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<=1)\n    return\
    \ n;\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0 || n==1){\n\
    \    return n;\n  }\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\n\nvar btn = document.getElementById('btn');\n\
    btn.addEventListener('click', function(event){\n  console.log(fib(n));\n  n++;\n\
    });\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwtmx_vhz.js:7\nvar btn = document.getElementById('btn');\n    \
    \      ^\n\nReferenceError: document is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmpwtmx_vhz.js:7:11)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var fibo = [0, 1];\n\
    \  if (n <= 2) return 1;\n  for (var i = 2; i <=n; i++ ){\n  fibo[i] = fibo[i-1]+fibo[i-2];\n\
    \  }\n return fibo[n];\n} \ndocument.write(fib(12));\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqwwi_97l.js:10\ndocument.write(fib(12));\n^\n\nReferenceError:\
    \ document is not defined\n    at Object.<anonymous> (/tmp/tmpqwwi_97l.js:10:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n   var a = 1, b = 0,\
    \ temp;\n   if(n==0){\n      return b;\n   }\n   if(n==1){\n      return a;\n\
    \   }\n   while (n >= 0){\n      temp = a;\n      a = a + b;\n      b = temp;\n\
    \      n--;\n   }\n   return b;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpzdoth9hs.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzdoth9hs.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1)\n  \
    \      return n;\n    else\n        return fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1)\n  \
    \      return n;\n    else\n        return fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0) return 0;\n\
    \  if(n==1) return 1;\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 0;\n  \
    \  let b = 1;\n    let c = 1;\n    for(let i = 0; i < n; i++){\n        c = a\
    \ + b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\n  fib(5);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpzqwicdaq.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzqwicdaq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n==0) return\
    \ 0;\n    if(n==1) return 1;\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n    while (n >= 0){\n        temp = a;\n        a = a + b;\n     \
    \   b = temp;\n        n--;\n    }\n    return b;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmprfonoc6x.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprfonoc6x.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: -1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n == 0){\n \
    \       return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    return\
    \ fib(n-1) + fib(n-2);\n}\n\nvar testArr = [1,7,14,23,56,88,99,101,102,103,188,200,204,206,243,244,250,500,0,2,1];\n\
    for(var i = 0; i < testArr.length; i++){\n    console.log(fib(testArr[i]));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '1

    13

    377

    28657

    '
  timestamp: 1659821757
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n```\n\nFibonacci numbers: 1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34 ...\n\nIn this example, the call stack is:\n\nfib(5) - fib(4)\
    \ - fib(3) - fib(2) - fib(1) - fib(0)\n\nWhile we call the fib function, it adds\
    \ the function calls on the stack in the order. At first, it adds the fib(5) call,\
    \ then adds the fib(4) call and so on. When the fib(0) call returns the number\
    \ (1), it removes the call from the stack, calculates the result and returns it\
    \ to the fib(1) call. Then fib(1) call finishes, the fib(2) call finishes and\
    \ so on, until the fib(5) call is finished and returns the result - 8.\n\n**Example\
    \ #2**\n\n```js\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpne0wneoq.js:18\n```js\n   ^^\n\nSyntaxError: Unexpected identifier\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\treturn  n > 1 ? fib(n\
    \ - 1) + fib(n - 2) : n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Your code here.\n\
    \    if(n==0 || n==1){\n        return n;\n    }\n    return fib(n-1)+fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if( n == 0 )\n  \
    \  return 0;\n  else if( n == 1 )\n    return 1;\n  else\n    return fib(n-1)\
    \ + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return n < 2 ? n\
    \ : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var seq = [0,1];\n\
    \  while(seq.length <= n){\n    seq.push(seq[seq.length-1] + seq[seq.length-2]);\n\
    \  }\n  return seq[n];\n}\n\nfib(13);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    else return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Your code here\n\
    \    if(n<=0){\n        return 0;\n    }else if(n==1){\n        return 1;\n  \
    \  }else{\n        return fib(n-1)+fib(n-2);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  else{\n    return fib(n-1) + fib(n-2);\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var fibo = [0, 1];\n\
    \  if (n <= 2) return 1;\n  for (var i = 2; i <=n; i++ ){\n   fibo[i] = fibo[i-1]+fibo[i-2];\n\
    \  }\n return fibo[n];\n }\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n === 0){\n\t\t\
    return 0;\n\t}else if(n === 1){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1)\
    \ + fib(n-2);\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var arr = [0,1];\n\
    \  if(n<=2){\n    return 1;\n  }\n  for(var i=2;i<=n;i++){\n    arr.push(arr[i-2]+arr[i-1]);\n\
    \  }\n  return arr[n];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp5qlodmvm.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5qlodmvm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){\n  \
    \  return 0;\n  }\n  if(n === 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n==0){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==1){\n\t\treturn 1;\n\t}\n\treturn fib(n-1)+fib(n-2);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var arr=[];\n \
    \   arr[0]=0;\n    arr[1]=1;\n    for(var i=2;i<=n;i++){\n        arr[i]=arr[i-1]+arr[i-2];\n\
    \    }\n    return arr[n];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n == 0){\n   \
    \ return 0;\n  }\n  if(n == 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\n  \n  // Return true if\
    \ given string is palindrome.\n  function isPalindrome(str){\n    str = str.toLowerCase();\n\
    \    let letter = str.split('');\n    let reverseLetter = letter.reverse();\n\
    \    let revertStr = reverseLetter.join('');\n    return revertStr === str;\n\
    \  }\n  \n  // Return random integer value between min and max.\n  function getRandom(min,\
    \ max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\
    \  \n  // Returns true if given string is a substring of the specified string.\n\
    \  function isSubString(str, subStr){\n    let index = str.indexOf(subStr);\n\
    \    return index !== -1;\n  }\n  \n  // Returns true if given string is a substring\
    \ of the specified string \n  // starting at the specified index.\n  function\
    \ isSubStringAt(str, subStr, index){\n    let substring = str.substring(index);\n\
    \    return isSubString(substring, subStr);\n  }\n  \n  // Returns true if given\
    \ string is a substring of the specified string \n  // ending at the specified\
    \ index.\n  function isSubStringUpTo(str, subStr, index){\n    let substring =\
    \ str.substring(0, index + 1);\n    return isSubString(substring, subStr);\n \
    \ }\n  \n  // Returns true if given string is a substring of the specified string\
    \ \n  // starting at the specified index and ending at the specified index.\n\
    \  function isSubStringBetween(str, subStr, startIndex, endIndex){\n    let substring\
    \ = str.substring(startIndex, endIndex + 1);\n    return isSubString(substring,\
    \ subStr);\n  }\n  \n  // Returns the sum of all the numbers between two numbers.\n\
    \  function sumBetween(start, end){\n    let\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu8jew1qj.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let phi = (1 + Math.sqrt(5))\
    \ / 2; //Golden ratio\n  return Math.round((Math.pow(phi, n) - Math.pow(1 - phi,\
    \ n)) / Math.sqrt(5));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n === 0 || n\
    \ === 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 2) return\
    \ 1;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    else{\n        return fib(n-1)+fib(n-2);\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let fibArray = [0,1];\n\
    \  if(n == 0) return 0;\n  if(n == 1) return 1;\n  for(let i = 2; i < n; i++){\n\
    \    fibArray.push(fibArray[i-1] + fibArray[i-2]);\n  }\n  return fibArray[n-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpe96ca5ry.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe96ca5ry.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<0){\n    \
    \    return 0;\n    }\n    if(n==0 || n==1){\n        return 1;\n    }\n    return\
    \ fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp35n6pdsg.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp35n6pdsg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<2){\n    return\
    \ n;\n  }\n  return fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){return\
    \ 0;}\n  if(n === 1){return 1;}\n  else{return fib(n-1) + fib(n-2);}\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n==0 || n==1){\n\
    \t\treturn n;\n\t}\n\treturn fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let nums = [0,\
    \ 1];\n    let count = 0;\n    while(count < n){\n        nums.push(nums[0] +\
    \ nums[1]);\n        nums.shift();\n        count++;\n    }\n    return nums[1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpkqazj54g.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkqazj54g.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var mem = [];\n\
    \    mem[0] = 0;\n    mem[1] = 1;\n    for(var i = 2; i <= n; i++){\n        mem[i]\
    \ = mem[i-1] + mem[i-2];\n    }\n    return mem[n];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n<=1){\n\t\treturn\
    \ n;\n\t}\n\treturn fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n < 2){\n  \
    \      return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var last = 1;\n\
    \    var lastLast = 0;\n    var current = 0;\n    for(var i = 1; i < n; i++){\n\
    \        current = last + lastLast;\n        lastLast = last;\n        last =\
    \ current;\n    }\n    return current;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfcs_mq8a.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfcs_mq8a.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    return n < 2 ?\
    \ n : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar f1 = 0;\n\tvar\
    \ f2 = 1;\n\tfor(var i = 2; i <= n; i++){\n\t\tvar fn = f1 + f2;\n\t\tf1 = f2;\n\
    \t\tf2 = fn;\n\t}\n\treturn f2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n <= 1)\n\t\t\
    return n;\n\treturn fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 2){\n\t\t\
    return n;\n\t}\n\treturn fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n === 0){\n\t\t\
    return 0;\n\t} else if(n === 1){\n\t\treturn 1;\n\t} else {\n\t\treturn fib(n-1)\
    \ + fib(n-2);\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //If n is less than\
    \ zero, return 1.\n  if(n < 0){\n    return 1;\n  }\n  //If n is equal to zero,\
    \ return 1.\n  if(n === 0){\n    return 1;\n  }\n  //If n is equal to 1, return\
    \ 1.\n  if(n === 1){\n    return 1;\n  }\n  //If n is greater than 1, return fib(n-1)\
    \ + fib(n-2).\n  if(n > 1){\n    return fib(n-1) + fib(n-2);\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp0apf9dne.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0apf9dne.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n == 0) return\
    \ 0;\n  else if(n == 1) return 1;\n  else if(n == 2) return 1;\n  else return\
    \ fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 0) return\
    \ -1;\n  else if(n < 2) return n;\n  else return fib(n-1) + fib(n-2);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var fib1 = 0;\n\
    \    var fib2 = 1;\n    var fib3 = 1;\n    for(var i = 0; i<n; i++){\n       \
    \ fib3 = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fib3;\n    }\n   \
    \ return fib1;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0 || n ===\
    \ 1){\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmphd9rgypo.js:12:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphd9rgypo.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0 || n ===\
    \ 1){\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 2) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0 || n==1){\n\
    \    return n;\n  }\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0)\n    return\
    \ 0;\n  if(n==1)\n    return 1;\n  return fib(n-1)+fib(n-2);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpwfcwgdwm.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwfcwgdwm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<2){\n    return\
    \ n;\n  }\n  else{\n    return fib(n-1)+fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  // F(n) = F(n-1)\
    \ + F(n-2)\n  // F(0) = 0;\n  // F(1) = 1;\n  if(n === 0) return 0;\n  if(n ===\
    \ 1) return 1;\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<=2){\n    return\
    \ 1;\n  }else{\n    return fib(n-1)+fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    return fibHelper(n,\
    \ 0, 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4hqxkoa9.js:3\n    return fibHelper(n, 0, 1);\n    ^\n\nReferenceError:\
    \ fibHelper is not defined\n    at fib (/tmp/tmp4hqxkoa9.js:3:5)\n    at test\
    \ (/tmp/tmp4hqxkoa9.js:10:20)\n    at Object.<anonymous> (/tmp/tmp4hqxkoa9.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 0) return\
    \ -1;\n\tif(n <= 1) return n;\n\treturn fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0 || n ===\
    \ 1){\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //Set first two numbers.\n\
    \  let first = 0;\n  let second = 1;\n  let sum = 0;\n  //If n is 1, return 0.\n\
    \  if(n == 1){\n    return 0;\n  }\n  //If n is 2, return 1.\n  if(n == 2){\n\
    \    return 1;\n  }\n  //For loop to iterate through Fibonacci sequence.\n  for(let\
    \ i = 3; i <= n; i++){\n    //Sum of two numbers is the next number.\n    sum\
    \ = first + second;\n    //Second number becomes the first number.\n    first\
    \ = second;\n    //New number becomes the second number.\n    second = sum;\n\
    \  }\n  //Return sum.\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpz67hh4ag.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz67hh4ag.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let memo = {};\n\
    \  function fibHelper(num){\n    if(num <= 1) return num;\n    if(memo[num]) return\
    \ memo[num];\n    memo[num] = fibHelper(num - 1) + fibHelper(num - 2);\n    return\
    \ memo[num];\n  }\n  return fibHelper(n);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<0) return \"\
    Error\";\n  var fib_num = [0,1];\n  for(var i=2; i<=n; i++){\n    fib_num[i] =\
    \ fib_num[i-1] + fib_num[i-2];\n  }\n  return fib_num[n];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<2){\n    \
    \    return n;\n    }\n    else{\n        return fib(n-1)+fib(n-2);\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 1, b =\
    \ 0, temp;\n    while (n >= 0){\n        temp = a;\n        a = a + b;\n     \
    \   b = temp;\n        n--;\n    }\n    return b;\n}\n\nmodule.exports = fib;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp3sz9ihu_.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3sz9ihu_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 2)\n  \
    \  {\n        return 1;\n    }\n    else\n    {\n        return fib(n-1) + fib(n-2);\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n === 0 || n\
    \ === 1){\n        return n;\n    }\n    var fibNMinus1 = 1;\n    var fibNMinus2\
    \ = 0;\n    var fibN = fibNMinus1 + fibNMinus2;\n    for(var i = 2; i < n; i++){\n\
    \        fibNMinus2 = fibNMinus1;\n        fibNMinus1 = fibN;\n        fibN =\
    \ fibNMinus1 + fibNMinus2;\n    }\n    return fibN;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let fibs = [0, 1];\n\
    \  for (let i = 0; i < n - 1; i++) {\n    fibs.push(fibs[0] + fibs[1]);\n    fibs.shift();\n\
    \  }\n  return fibs[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpptmlzo4o.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpptmlzo4o.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n <= 2) return\
    \ 1;\n\treturn fib(n-1) + fib(n-2);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 2) return\
    \ 1;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  } else {\n    return fib(n-1) + fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let num1 = 0;\n\
    \    let num2 = 1;\n    for(let i = 0; i < n-1; i++){\n        const temp = num1;\n\
    \        num1 = num2;\n        num2 = temp + num2;\n    }\n    return num2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n==0) return 0;\n\
    \tif(n==1) return 1;\n\treturn fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 0, b =\
    \ 1, temp;\n    for(var i = 1; i < n; i++){\n        temp = a;\n        a = b;\n\
    \        b = temp + b;\n    }\n    return b;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n < 2){\n  \
    \      return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmphd9rgypo.js:12:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphd9rgypo.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0 || n ===\
    \ 1){\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let fibonacci = [0,\
    \ 1]\n  for (let i = 2; i <= n; i++){\n    fibonacci[i] = fibonacci[i-1] + fibonacci[i-2]\n\
    \  }\n  return fibonacci[n]\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n == 0)\n  \
    \      return 0;\n    else if(n == 1)\n        return 1;\n    else\n        return\
    \ fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n < 2){\n  \
    \      return n;\n    }\n    var a = 0, b = 1, c;\n    for(var i = 2; i <= n;\
    \ i++){\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return\
    \ c;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar fibA=1;\n\tvar\
    \ fibB=1;\n\tvar fibC=1;\n\tfor(var i=2;i<n;i++){\n\t\tfibC=fibA+fibB;\n\t\tfibA=fibB;\n\
    \t\tfibB=fibC;\n\t}\n\treturn fibC;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }else{\n    return fib(n-1) + fib(n-2);\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var result = 0;\n\
    \  if(n === 0 || n === 1){\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<2){\n    \
    \    return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 0, b = 1,\
    \ f = 1;\n  for(var i = 2; i <= n; i++) {\n    f = a + b;\n    a = b;\n    b =\
    \ f;\n  }\n  return f;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\n  console.log(fib(6));\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpbebj3oev.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbebj3oev.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '13

    '
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<0){\n    \
    \    throw new Error(\"n should not be negative\");\n    }\n    if(n===0 || n===1){\n\
    \        return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){\n  \
    \  return 0;\n  }else if(n === 1){\n    return 1;\n  }else{\n    return fib(n-1)\
    \ + fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 2){\n\t\t\
    return n;\n\t}else{\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var nums = [0,1];\n\
    \    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n\
    \    }\n    if(nums[n] > 0){\n        return nums[n];\n    }\n    else{\n    \
    \    nums[n] = fib(n-1) + fib(n-2);\n        return nums[n];\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  else{\n    return fib(n-1) + fib(n-2);\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){\n  \
    \  return 0;\n  } else if(n === 1) {\n    return 1;\n  }\n  return fib(n-1) +\
    \ fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<2){\n    \
    \    return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let v=0,i=1;\n\
    \    if(n>0){\n        for(let k=0;k<n;k++){\n            let o=i;\n         \
    \   i=v+i;\n            v=o;\n        }\n    }\n    return v;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Let's find n-th\
    \ Fibonacci number\n    var fib0 = 0;\n    var fib1 = 1;\n    for(var i = 0; i\
    \ < n; i++){\n        var temp = fib0;\n        fib0 = fib1;\n        fib1 = temp\
    \ + fib1;\n    }\n    return fib0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n <= 2)\n\t\t\
    return 1;\n\treturn fib(n-1) + fib(n-2);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    let fibPrev = 0;\n    let fibCurrent = 1;\n    let fibNext = 1;\n  \
    \  let i = 1;\n    while(i < n){\n        fibNext = fibPrev + fibCurrent;\n  \
    \      fibPrev = fibCurrent;\n        fibCurrent = fibNext;\n        i++;\n  \
    \  }\n    return fibNext;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n == 0) return\
    \ 0;\n  if(n == 1) return 1;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let a = 1, b = 0,\
    \ temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n \
    \   n--;\n  }\n\n  return b;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpll80qizl.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpll80qizl.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<2){\n    return\
    \ n;\n  }else{\n    return fib(n-1)+fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 1, b = 0,\
    \ temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n \
    \   n--;\n  }\n\n  return b;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpghdngp73.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpghdngp73.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar a = 1, b = 0,\
    \ temp;\n\twhile (n >= 0){\n\t\ttemp = a;\n\t\ta = a + b;\n\t\tb = temp;\n\t\t\
    n--;\n\t}\n\treturn b;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpuwu2hq2m.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuwu2hq2m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 2){\n\t\t\
    return n;\n\t}\n\t\n\tvar fib = [0, 1];\n\t\n\tfor(var i = 2; i <= n; i++){\n\t\
    \tfib[i] = fib[i - 1] + fib[i - 2];\n\t}\n\t\n\treturn fib[n];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var fibArray = [0,1];\n\
    \  if(n <= 2){\n    return 1;\n  }\n  for(var i = 2; i <= n; i++){\n    fibArray[i]\
    \ = fibArray[i-1] + fibArray[i-2];\n  }\n  return fibArray[n];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar a = 1, b = 0,\
    \ temp;\n\twhile (n >= 0){\n\t\ttemp = a;\n\t\ta = a + b;\n\t\tb = temp;\n\t\t\
    n--;\n\t}\n\treturn b;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpuwu2hq2m.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuwu2hq2m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<2){\n    return\
    \ n;\n  }\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  else{\n    return fib(n-1) + fib(n-2);\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){\n  \
    \  return 0;\n  }\n  if(n === 1){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let first = 0;\n\
    \    let second = 1;\n    let number = 0;\n    if(n === 0){\n        return 0;\n\
    \    }\n    if(n === 1){\n        return 1;\n    }\n    for(let i = 2; i <= n;\
    \ i++){\n        number = first + second;\n        first = second;\n        second\
    \ = number;\n    }\n    return number;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0){\n  \
    \  return 0;\n  }\n  if(n === 1){\n    return 1;\n  }\n  if(n > 1){\n    return\
    \ fib(n-1) + fib(n-2);\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let a = 1;\n  let\
    \ b = 1;\n  for (let i = 3; i <= n; i++){\n    let c = a + b;\n    a = b;\n  \
    \  b = c;\n  }\n  return b;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //insert your code\
    \ here!\n  var fib_arr = [0,1];\n  for(var i = 2; i < n; i++){\n    fib_arr.push(fib_arr[i-1]\
    \ + fib_arr[i-2]);\n  }\n  return fib_arr[n-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpjh6ke1p8.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjh6ke1p8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar fibNums = [0,1];\n\
    \tvar nthNum = 0;\n\tvar fibNumsLength = fibNums.length;\n\tif(n === 0 || n ===\
    \ 1){\n\t\treturn n;\n\t}\n\tfor(var i = 0; i <= n; i++){\n\t\tnthNum = fibNums[fibNumsLength\
    \ - 1] + fibNums[fibNumsLength - 2];\n\t\tfibNums.push(nthNum);\n\t\tfibNumsLength++;\n\
    \t}\n\treturn nthNum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n144\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmp89xqm51z.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp89xqm51z.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 144,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0) return 0;\n\
    \  if(n==1) return 1;\n  return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 2) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let a = 1, b = 0,\
    \ temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n \
    \   n--;\n  }\n\n  return b;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpftwpgnk5.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpftwpgnk5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n<2){\n    return\
    \ n;\n  }\n  return fib(n-1)+fib(n-2);\n}\nfib(10);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 1, b =\
    \ 0, temp;\n  \n    while (n >= 0){\n      temp = a;\n      a = a + b;\n     \
    \ b = temp;\n      n--;\n    }\n  \n    return b;\n  }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpg70bwxbi.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg70bwxbi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n === 0){\n\
    \        return 0;\n    }\n    else if(n === 1){\n        return 1;\n    }\n \
    \   else{\n        return fib(n-1) + fib(n-2);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let a = 1, b =\
    \ 0, temp;\n    while (n >= 0){\n        temp = a;\n        a = a + b;\n     \
    \   b = temp;\n        n--;\n    }\n    return b;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmppjaiapnn.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppjaiapnn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n === 0 || n ===\
    \ 1){\n    return n;\n  }\n  else{\n    return fib(n-1) + fib(n-2);\n  }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //if 1 or 2, return\
    \ 1\n  if(n===1 || n===2){\n    return 1;\n  }\n  //return fib(n-1) + fib(n-2)\n\
    \  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let fib=[0,1]\n\
    \    for(let i=2;i<=n;i++){\n        fib[i]=fib[i-1]+fib[i-2]\n    }\n    return\
    \ fib[n]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    return (n < 2)\
    \ ? n : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar a = 0, b = 1,\
    \ f = 1;\n\tfor(var i = 2; i <= n; i++) {\n\t\tf = a + b;\n\t\ta = b;\n\t\tb =\
    \ f;\n\t}\n\treturn f;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Base case.\n\
    \    if(n<=0){\n        return 0;\n    }\n    //Base case.\n    if(n<=2){\n  \
    \      return 1;\n    }\n    //Recursive case.\n    return fib(n-1)+fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let result=[0,1];\n\
    \  if(n==0 || n==1){\n    return result[n];\n  }else{\n    for(let i=2;i<=n;i++){\n\
    \      result.push(result[i-1]+result[i-2]);\n    }\n    return result[n];\n \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 0, b =\
    \ 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a\
    \ = b;\n        b = f;\n    }\n    return f;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 0, b = 1,\
    \ f = 1;\n  for(var i = 2; i <= n; i++) {\n    f = a + b;\n    a = b;\n    b =\
    \ f;\n  }\n  return f;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }\n    return fib(n-1)+fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //Fibonacci numbers\
    \ are defined by the following recurrence relation:\n  //fib(0) = 0, fib(1) =\
    \ 1, fib(n) = fib(n-1) + fib(n-2)\n  //What a mouthful.\n  if(n===0) return 0;\n\
    \  if(n===1) return 1;\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var fib = [];\n\
    \    fib[0] = 0;\n    fib[1] = 1;\n    for(var i = 2; i <= n; i++){\n        fib[i]\
    \ = fib[i-1] + fib[i-2];\n    }\n    return fib[n];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0 || n==1){\n\
    \    return n;\n  }else{\n    return fib(n-1)+fib(n-2);\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n<=1){\n   \
    \     return n;\n    }else{\n        return fib(n-1)+fib(n-2);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 2) return\
    \ 1;\n  return fib(n-1) + fib(n-2);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 2){\n\t\t\
    return n;\n\t} else {\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 0, b =\
    \ 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a\
    \ = b;\n        b = f;\n    }\n    return f;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  //Fibonacci number\
    \ is defined by the sum of the two previous fibonacci numbers\n  //First 10 are:\
    \ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...\n  //So we'll need to start with an array\
    \ like this: [0, 1]\n  //then we'll calculate the next numbers by summing the\
    \ two previous ones\n  //then push that value into the array.\n  //Once we reach\
    \ desired number of the sequence, we'll return the last value.\n  \n  var fibNums\
    \ = [0, 1];\n  \n  if (n <= 2) return 1;\n  \n  for (var i = 2; i <=n; i++ ){\n\
    \     fibNums[i] = fibNums[i-1]+fibNums[i-2];\n  }\n  \n return fibNums[n];\n\
    }\n\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n < 0){\n\t\t\
    return undefined;\n\t}\n\tif(n === 0){\n\t\treturn 0;\n\t}\n\tif(n === 1){\n\t\
    \treturn 1;\n\t}\n\treturn fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n==0) return 0;\n\
    \tif(n==1) return 1;\n\tif(n==2) return 1;\n\treturn fib(n-1)+fib(n-2);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n   if(n <= 2) return\
    \ 1;\n   return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n==0)\n    return\
    \ 0;\n  if(n==1)\n    return 1;\n  else\n    return fib(n-1)+fib(n-2);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n==0) return 0;\n\
    \tif(n==1) return 1;\n\treturn fib(n-1)+fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tvar a = 0, b = 1,\
    \ f = 1;\n\tfor(var i = 2; i <= n; i++) {\n\t\tf = a + b;\n\t\ta = b;\n\t\tb =\
    \ f;\n\t}\n\treturn f;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Code here\n \
    \   if(n==0){\n        return 0;\n    }\n    if(n==1){\n        return 1;\n  \
    \  }\n    if(n>1){\n        return fib(n-1)+fib(n-2);\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n == 0){\n\t\t\
    return 0;\n\t}\n\tif(n == 1){\n\t\treturn 1;\n\t}\n\treturn fib(n-1) + fib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n < 2){\n  \
    \      return n;\n    }\n    else{\n        return fib(n-1) + fib(n-2);\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return n < 2 ? n\
    \ : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    return (n < 2)\
    \ ? n : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return n < 2 ? n\
    \ : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return n < 2 ? n\
    \ : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var old = 0;\n  var\
    \ fib = 1;\n  for(var i = 1; i < n; i++){\n    var old_old = old;\n    old = fib;\n\
    \    fib = old + old_old;\n  }\n  return fib;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 1, b =\
    \ 0, temp;\n    while (n >= 0){\n        temp = a;\n        a = a + b;\n     \
    \   b = temp;\n        n--;\n    }\n    return b;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgqxosjfz.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqxosjfz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821752
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var arr = [0,1];\n\
    \  for(var i = 2; i <= n; i++){\n    arr.push(arr[i-2] + arr[i-1]);\n  }\n  return\
    \ arr[n];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n\tif(n === 0 || n ===\
    \ 1){\n\t\treturn n;\n\t}\n\treturn fib(n-1) + fib(n-2);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    //Base case.\n\
    \    if(n <= 0){\n        return 0;\n    }\n    if(n === 1){\n        return 1;\n\
    \    }\n    //Recursive case.\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n   if(n <= 1) return\
    \ n;\n   return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n == 0) return\
    \ 0;\n    if(n == 1) return 1;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n < 2){\n    return\
    \ n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 1, b = 0,\
    \ temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n \
    \   n--;\n  }\n\n  return b;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpvu0ze7o9.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvu0ze7o9.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    let fib1 = 0;\n\
    \    let fib2 = 1;\n    let aux;\n    for(let i = 0; i < n; i++){\n        aux\
    \ = fib1;\n        fib1 = fib2;\n        fib2 = aux + fib2;\n    }\n    return\
    \ fib1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n <= 1)\n  \
    \      return n;\n    return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 1
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    var a = 0, b =\
    \ 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a\
    \ = b;\n        b = f;\n    }\n    return f;\n}\nvar a = prompt(\"Please enter\
    \ your number \");\nfib(a);\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfwoas8kl.js:11\nvar a = prompt(\"Please enter your number \");\n\
    \        ^\n\nReferenceError: prompt is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmpfwoas8kl.js:11:9)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  if(n <= 1)\n    return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  let cache = {}\n\
    \  if(n === 0){\n    return 0\n  } else if(n === 1){\n    return 1\n  } else if(n\
    \ > 1){\n    if(cache[n]){\n      return cache[n]\n    } else {\n      cache[n]\
    \ = fib(n-1) + fib(n-2)\n      return cache[n]\n    }\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  return n < 2 ? n\
    \ : fib(n-1) + fib(n-2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n    if(n < 2){\n  \
    \      return n;\n    }\n    else{\n        return fib(n-1) + fib(n-2);\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
- exit_code: 0
  program: "//Return n-th Fibonacci number.\nfunction fib(n){\n  var a = 0, b = 1,\
    \ f = 1;\n  for(var i = 2; i <= n; i++) {\n    f = a + b;\n    a = b;\n    b =\
    \ f;\n  }\n  return f;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821753
